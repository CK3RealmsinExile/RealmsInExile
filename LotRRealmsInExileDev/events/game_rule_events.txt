namespace = game_rule

# Generated families 	- 1001
# Gender equality 		- 1010

scripted_trigger de_jure_liege_title_to_destroy = {
	tier > tier_county
	is_titular = no
	is_landless_type_title = no
	is_head_of_faith = no
	save_temporary_scope_as = de_jure_liege_title
	
	NOT = {
		ROOT = {
			any_sub_realm_title = {
				tier = tier_county
				target_is_de_jure_liege_or_above = scope:de_jure_liege_title
			}
		}
	}
	
	NAND = {
		has_game_rule = on_limited_de_jure_requirement
		holder = {
			is_ai = no
		}
		this = holder.primary_title
	}
}

game_rule.1 = { # De Jure Requirement
	hidden = yes
	
	trigger = {
		NOT = { has_game_rule = off_de_jure_requirement }
		any_held_title = {
			de_jure_liege_title_to_destroy = yes
		}
	}

	immediate = {
		# Notification
		random_held_title = {
			limit = {
				de_jure_liege_title_to_destroy = yes
			}
			save_scope_as = title_to_destroy
		}
		send_interface_message = {
			type = event_title_bad
			title = de_jure_requirement_title
			desc = de_jure_requirement_desc

			left_icon = scope:title_to_destroy

			destroy_title = scope:title_to_destroy
			add_pressed_claim = scope:title_to_destroy
		}
	}
}


######################
# GENERATED FAMILIES #
######################

scripted_trigger only_ai_if_ai_only_trigger = {
	trigger_if = {
		limit = { has_game_rule = on_generate_families_ai_only }
		is_ai = yes
	}
	trigger_else = {
		always = yes
	}
}


game_rule.1000 = {
	scope = none
	hidden = yes

	trigger = {
		OR = {
			has_game_rule = on_generate_families
			has_game_rule = on_generate_families_ai_only
		}
	}

	immediate = {
		every_independent_ruler = {
			if = {
				limit = { only_ai_if_ai_only_trigger = yes }
				trigger_event = game_rule.1001
			}
			every_vassal_or_below = {
				limit = { only_ai_if_ai_only_trigger = yes }
				trigger_event = game_rule.1001
			}
		}
	}
}

game_rule.1001 = { #by Mathilda Bjarnehed
	type = character_event
	hidden = yes
	
	trigger = {
		is_from_ruler_designer = no # Do not modify the family of somoene from the ruler designer
		#Is in need of family
		NOT = {
			exists = player_heir
		}
		#Allowed to get family
		NOT = { # Otherwise historical characters sometimes generate inappropriate children
			any_child = {
				always = yes
			}
		}
		is_eunuch_trigger = no
		NOT = { has_trait = celibate }
		age > nubile_age #Because you need ~1 year of pregnancy
		is_playable_character = yes
		primary_title = {
			is_mercenary_company = no
			is_holy_order = no
		}
		NOR = {
			government_has_flag = government_is_republic
			government_has_flag = government_is_theocracy
			has_character_flag = do_not_generate_starting_family
			
			has_culture = culture:wastelands
			is_elf = yes
		}
		NOR = {
			lotr_marriage_allowed = no
			has_character_flag = no_auto_family
		}
	}


	immediate = {
		if = {
			limit = { faith = { has_doctrine_parameter = marriage_event } }
			add_character_flag = ignore_marriage_event
		}
		game_rule_create_spouse_and_children = { CHARACTER = root }

		#In case your created player heir is an older woman (past childbearing age or with a very short window)
		if = {
			limit = {
				exists = player_heir
				player_heir = {
					is_female = yes
					age >= 40
				}
				#Nothing else should need to be checked, they shouldn't be celibate or something like that
			}
			player_heir = {
				save_scope_as = childless_heir
			 	game_rule_create_spouse_and_children = { CHARACTER = scope:childless_heir }
			}
		}
		# Error suppression.
		if = {
			limit = { always = no }
			add_character_flag = do_not_generate_starting_family
		}
	}
}

########################
# EXCLAVE INDEPENDENCE #
########################

game_rule.2 = { # Exclave Independence, on death
	hidden = yes
	
	trigger = {
		exclave_independence_trigger = yes
	}

	immediate = {
	
		if = { # None
			limit = {
				has_game_rule = off_exclave_independence
			}
		}
		else_if = { # Delay for AI if at war, skip if player at war
			limit = {
				is_at_war = yes
			}
			if = {
				limit = {
					is_ai = yes
					exists = primary_heir
					primary_heir = {
						is_ai = yes
						NOT = {
							has_character_flag = delayed_cleanse
						}
					}
				}
				primary_heir = {
					add_character_flag = {
						flag = delayed_cleanse
					}
				}
			}
		}
		else = {
			game_rule_exclave_independence_effect = yes
		}
	}
}

game_rule.3 = { # Exclave Independence, on war end
	hidden = yes
	
	trigger = {
		exclave_independence_trigger = yes
	}

	immediate = {
		if = { # None
			limit = {
				has_game_rule = off_exclave_independence
			}
		}
		else_if = { # Only the last war should trigger the independence
			limit = {
				is_at_war = yes
			}
		}
		else = {
			game_rule_exclave_independence_effect = yes
		}
	}
}

scripted_trigger weak_empire = {
	tier = tier_empire
	is_titular = no
	is_landless_type_title = no
	is_head_of_faith = no
	NOT = { # Need to own 20% of De Jure counties
		any_in_de_jure_hierarchy = {
			filter = {
				tier = tier_county
			}
			continue = {
				tier > tier_county
			}
			OR = {
				holder = root
				holder = {
					target_is_liege_or_above = root
				}
			}
			percent >= 0.20
		}
	}
}

game_rule.4 = { # Empire Obscurity Game Rule
	type = character_event
	title = game_rule.4.t
	desc = game_rule.4.desc
	theme = realm
	left_portrait = {
		character = root
		animation = grief
	}
	
	cooldown = { years = 25 }

	trigger = {
		has_game_rule = on_empire_obscurity_requirement
		is_landed_or_landless_administrative = yes
		is_at_war = no
		primary_title.tier >= tier_empire
		any_held_title = {
			weak_empire = yes
		}
		NOT = { government_allows = administrative }
		NOT = { 
			OR = {
				has_primary_title = title:e_reunitedkingdom # So that it doesn't fire for Arnor under Aragorn
				AND = {
					has_primary_title = title:e_arnor
					root.dynasty = dynasty:dynasty_elendil
				}
				has_primary_title = title:e_noldor # So that the High-King of the Noldor doesn't have empires shatter under him, since the High-Kingship isn't dejure
			}
		}
	}

	immediate = {
		random_held_title = {
			limit = {
				weak_empire = yes
			}
			save_scope_as = falling_empire
		}
	}

	option = { # No! I just need time!
		name = game_rule.4.a
		
		add_prestige = -2000
		add_prestige_experience = -2000
		
		ai_chance = {
			base = 0
		}
	}

	option = { # Farewell, dear empire...
		name = game_rule.4.b
		
		destroy_title = scope:falling_empire
		add_pressed_claim = scope:falling_empire
		
		ai_chance = {
			base = 100
		}
	}
}

#######################
# HUNGARIAN MIGRATION #
#######################
