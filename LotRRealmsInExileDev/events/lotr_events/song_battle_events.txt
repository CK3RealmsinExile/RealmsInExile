namespace = song_battle

##################################################
# # Playing a Board Game
# 0001 - 0010	The Greatest Game - Match
# 0011 - 0030	Processing & Invalidation events
# 0031 - 0030	The Greatest Game - Winner
# 0041 - 0040	The Greatest Game - Loser
##################################################


##################################################
# Song Battles

##################################################
# Magical contest
# by Brice Underhill
# 0001 - 0010
##################################################

scripted_effect sb_play_move_type_effect = {
	# Set the move type played.
	## Either we're scope:sb_defender...
	if = {
		limit = { this = scope:sb_defender }
		save_scope_value_as = {
			name = sb_defender_move
			value = flag:$SKILL$
		}
	}
	## Or else we must be scope:sb_attacker.
	else = {
		save_scope_value_as = {
			name = sb_attacker_move
			value = flag:$SKILL$
		}
	}
	# Run the duel.
	duel = {
		skill = $SKILL$
		value = decent_skill_rating
		# Crit success.
		10 = {
			show_chance = no
			compare_modifier = {
				value = scope:duel_value
				multiplier = 3.5
				min = -49
			}
			modifier = {
				has_trait = poet
				add = 20
			}
			modifier = {
				any_character_artifact = {
					has_variable = one_ring
				}
				add = 70
			}
			modifier = {
				any_character_artifact = {
					has_variable = elven_ring
				}
				add = 50
			}
			modifier = {
				any_character_artifact = {
					has_variable = ring_of_mortals
				}
				add = 30
			}
			sb_play_move_type_effect_extraneous_advantages_self_modifier = yes
			desc = song_battle.0001.$LOC_KEY$.tt.crit_success
			custom_tooltip = song_battle.0001.$LOC_KEY$.tt.crit_success.tt
			# Save the result.
			set_variable = {
				name = sb_move_result
				value = flag:crit_success
			}
		}
		# Success.
		40 = {
			show_chance = no
			compare_modifier = {
				value = scope:duel_value
				multiplier = 3.5
				min = -49
			}
			modifier = {
				has_trait = poet
				add = 10
			}
			modifier = {
				any_character_artifact = {
					has_variable = one_ring
				}
				add = 35
			}
			modifier = {
				any_character_artifact = {
					has_variable = elven_ring
				}
				add = 25
			}
			modifier = {
				any_character_artifact = {
					has_variable = ring_of_mortals
				}
				add = 15
			}
			sb_play_move_type_effect_extraneous_advantages_self_modifier = yes
			desc = song_battle.0001.$LOC_KEY$.tt.success
			custom_tooltip = song_battle.0001.$LOC_KEY$.tt.success.tt
			# Save the result.
			set_variable = {
				name = sb_move_result
				value = flag:success
			}
		}
		# Failure.
		40 = {
			show_chance = no
			compare_modifier = {
				value = scope:duel_value
				multiplier = -3.5
				min = -49
			}
			modifier = {
				has_trait = poet
				add = -10
			}
			modifier = {
				any_character_artifact = {
					has_variable = one_ring
				}
				add = -35
			}
			modifier = {
				any_character_artifact = {
					has_variable = elven_ring
				}
				add = -25
			}
			modifier = {
				any_character_artifact = {
					has_variable = ring_of_mortals
				}
				add = -15
			}
			sb_play_move_type_effect_extraneous_advantages_opponent_modifier = yes
			desc = song_battle.0001.$LOC_KEY$.tt.failure
			custom_tooltip = song_battle.0001.$LOC_KEY$.tt.failure.tt
			# Save the result.
			set_variable = {
				name = sb_move_result
				value = flag:failure
			}
		}
		# Crit failure.
		10 = {
			show_chance = no
			compare_modifier = {
				value = scope:duel_value
				multiplier = -3.5
				min = -49
			}
			modifier = {
				has_trait = poet
				add = -20
			}
			modifier = {
				any_character_artifact = {
					has_variable = one_ring
				}
				add = -70
			}
			modifier = {
				any_character_artifact = {
					has_variable = elven_ring
				}
				add = -50
			}
			modifier = {
				any_character_artifact = {
					has_variable = ring_of_mortals
				}
				add = -30
			}
			sb_play_move_type_effect_extraneous_advantages_opponent_modifier = yes
			desc = song_battle.0001.$LOC_KEY$.tt.crit_failure
			custom_tooltip = song_battle.0001.$LOC_KEY$.tt.crit_failure.tt
			# Save the result.
			set_variable = {
				name = sb_move_result
				value = flag:crit_failure
			}
		}
	}
}

#	Main song battle processing event.
song_battle.0001 = {
	content_source = realms_dlc
	type = character_event
	window = duel_event
	title = song_battle.0001.t
	desc = {
		# Intro section.
		first_valid = {
			# Is this our first move?
			triggered_desc = {
				trigger = {
					scope:sb_defender.var:sb_current_round = 1
					this = scope:sb_defender
				}
				desc = song_battle.0001.desc.intro.opening.defender
			}
			triggered_desc = {
				trigger = {
					scope:sb_defender.var:sb_current_round = 1
					this = scope:sb_attacker
				}
				desc = song_battle.0001.desc.intro.opening.attacker
			}
			# Otherwise, standard chained intro.
			desc = song_battle.0001.desc.intro.subsequent
		}
		# What did our opponent sing?
		first_valid = {
			## Diplomacy
			triggered_desc = {
				trigger = {
					OR = {
						AND = {
							this = scope:sb_defender
							scope:sb_attacker_move = flag:diplomacy
						}
						AND = {
							this = scope:sb_attacker
							scope:sb_defender_move = flag:diplomacy
						}
					}
				}
				desc = {
					first_valid = {
						# Crit Success
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:crit_success
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:crit_success
									}
								}
							}
							desc = song_battle.0001.desc.intro.diplomacy.crit_success
						}
						# Success
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:success
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:success
									}
								}
							}
							desc = song_battle.0001.desc.intro.diplomacy.success
						}
						# Failure
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:failure
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:failure
									}
								}
							}
							desc = song_battle.0001.desc.intro.diplomacy.failure
						}
						# Crit Failure
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:crit_failure
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:crit_failure
									}
								}
							}
							desc = song_battle.0001.desc.intro.diplomacy.crit_failure
						}
					}
				}
			}
			## Intrigue
			triggered_desc = {
				trigger = {
					OR = {
						AND = {
							this = scope:sb_defender
							scope:sb_attacker_move = flag:intrigue
						}
						AND = {
							this = scope:sb_attacker
							scope:sb_defender_move = flag:intrigue
						}
					}
				}
				desc = {
					first_valid = {
						# Crit Success
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:crit_success
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:crit_success
									}
								}
							}
							desc = song_battle.0001.desc.intro.intrigue.crit_success
						}
						# Success
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:success
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:success
									}
								}
							}
							desc = song_battle.0001.desc.intro.intrigue.success
						}
						# Failure
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:failure
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:failure
									}
								}
							}
							desc = song_battle.0001.desc.intro.intrigue.failure
						}
						# Crit Failure
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:crit_failure
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:crit_failure
									}
								}
							}
							desc = song_battle.0001.desc.intro.intrigue.crit_failure
						}
					}
				}
			}
			## Learning
			triggered_desc = {
				trigger = {
					OR = {
						AND = {
							this = scope:sb_defender
							scope:sb_attacker_move = flag:learning
						}
						AND = {
							this = scope:sb_attacker
							scope:sb_defender_move = flag:learning
						}
					}
				}
				desc = {
					first_valid = {
						# Crit Success
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:crit_success
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:crit_success
									}
								}
							}
							desc = song_battle.0001.desc.intro.learning.crit_success
						}
						# Success
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:success
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:success
									}
								}
							}
							desc = song_battle.0001.desc.intro.learning.success
						}
						# Failure
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:failure
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:failure
									}
								}
							}
							desc = song_battle.0001.desc.intro.learning.failure
						}
						# Crit Failure
						triggered_desc = {
							trigger = {
								OR = {
									AND = {
										this = scope:sb_defender
										scope:sb_attacker.var:sb_move_result = flag:crit_failure
									}
									AND = {
										this = scope:sb_attacker
										scope:sb_defender.var:sb_move_result = flag:crit_failure
									}
								}
							}
							desc = song_battle.0001.desc.intro.learning.crit_failure
						}
					}
				}
			}
		}
		# Was someone countered?
		first_valid = {
			# Yes! I countered them.
			triggered_desc = {
				trigger = {
					exists = scope:sb_counterer
					this = scope:sb_counterer
				}
				desc = song_battle.0001.desc.i_have_countered
			}
			# Yes! I have been countered.
			triggered_desc = {
				trigger = {
					exists = scope:sb_counterer
					NOT = { this = scope:sb_counterer }
				}
				desc = song_battle.0001.desc.i_am_countered
			}
			# Nope, just the page breaks please.
			desc = song_battle.0001.desc.no_counters
		}
		## How is the match going?
		### Us relative to each other.
		first_valid = {
			# I'm winning by miles.
			triggered_desc = {
				trigger = { var:sb_current_score >= sb_relative_score_heavy_difference_threshold_value }
				desc = song_battle.0001.desc.relative_victory.winning_heavily
			}
			# I'm winning.
			triggered_desc = {
				trigger = { var:sb_current_score >= sb_relative_score_light_difference_threshold_value }
				desc = song_battle.0001.desc.relative_victory.winning_somewhat
			}
			# We're essentially equal.
			triggered_desc = {
				trigger = {
					var:sb_current_score >= scope:sb_opponent.var:sb_current_score
				}
				desc = song_battle.0001.desc.relative_victory.drawing
			}
			# I'm losing.
			triggered_desc = {
				trigger = { var:sb_current_score <= sb_relative_score_heavy_difference_threshold_value }
				desc = song_battle.0001.desc.relative_victory.losing_somewhat
			}
			# I'm losing by miles.
			triggered_desc = {
				trigger = { var:sb_current_score <= sb_relative_score_light_difference_threshold_value }
				desc = song_battle.0001.desc.relative_victory.losing_heavily
			}
		}
		### And either one of us towards actual victory.
		first_valid = {
			# Either of us could win.
			triggered_desc = {
				trigger = {
					var:sb_current_score >= sb_close_to_winning_threshold_value
					scope:sb_opponent.var:sb_current_score >= sb_close_to_winning_threshold_value
				}
				desc = song_battle.0001.desc.actual_victory.both_close
			}
			# I could win.
			triggered_desc = {
				trigger = { var:sb_current_score >= sb_close_to_winning_threshold_value }
				desc = song_battle.0001.desc.actual_victory.i_am_close
			}
			# They could win.
			triggered_desc = {
				trigger = { scope:sb_opponent.var:sb_current_score >= sb_close_to_winning_threshold_value }
				desc = song_battle.0001.desc.actual_victory.they_are_close
				
			}
			# Sudden death is about to kick in.
			triggered_desc = {
				trigger = {
					scope:sb_defender.var:sb_current_round >= sb_round_cap_value
				}
				desc = song_battle.0001.desc.actual_victory.sudden_death
			}
			# Neither of us are close.
			desc = song_battle.0001.desc.actual_victory.neither_close
		}
		## Fluff segment.
		### Opponent Winning
		triggered_desc = {
			trigger = {
				# Since we're processing a whole mess o'random valids here, and they're *all* fluff, we restrict this to AI only.
				is_ai = no
				# We let the other player be haughty by making them the tie-breaker.
				trigger_if = {
					limit = { has_variable = sb_gib_only_losing_locs }
					always = yes
				}
				trigger_else = {
					var:sb_current_score <= scope:sb_opponent.var:sb_current_score
				}
			}
			desc = {
				random_valid = {
					# Categories
					## Attributes
					### Diplomacy
					triggered_desc = {
						trigger = { scope:sb_opponent.diplomacy <= mediocre_skill_rating }
						desc = song_battle.0001.desc.opponent_winning.diplomacy.low
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent.diplomacy > mediocre_skill_rating
							scope:sb_opponent.diplomacy < high_skill_rating
						}
						desc = song_battle.0001.desc.opponent_winning.diplomacy.medium
					}
					triggered_desc = {
						trigger = { scope:sb_opponent.diplomacy >= high_skill_rating }
						desc = song_battle.0001.desc.opponent_winning.diplomacy.high
					}
					### Intrigue
					triggered_desc = {
						trigger = { scope:sb_opponent.intrigue <= mediocre_skill_rating }
						desc = song_battle.0001.desc.opponent_winning.intrigue.low
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent.intrigue > mediocre_skill_rating
							scope:sb_opponent.intrigue < high_skill_rating
						}
						desc = song_battle.0001.desc.opponent_winning.intrigue.medium
					}
					triggered_desc = {
						trigger = { scope:sb_opponent.intrigue >= high_skill_rating }
						desc = song_battle.0001.desc.opponent_winning.intrigue.high
					}
					### Learning
					triggered_desc = {
						trigger = { scope:sb_opponent.learning <= mediocre_skill_rating }
						desc = song_battle.0001.desc.opponent_winning.learning.low
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent.learning > mediocre_skill_rating
							scope:sb_opponent.learning < high_skill_rating
						}
						desc = song_battle.0001.desc.opponent_winning.learning.medium
					}
					triggered_desc = {
						trigger = { scope:sb_opponent.learning >= high_skill_rating }
						desc = song_battle.0001.desc.opponent_winning.learning.high
					}
					## Trait Specifics
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = lustful }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.lustful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = chaste }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.chaste
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = gluttonous }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.gluttonous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = temperate }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.temperate
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = greedy }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.greedy
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = generous }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.generous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = lazy }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.lazy
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = diligent }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.diligent
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = wrathful }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.wrathful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = calm }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.calm
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = patient }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.patient
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = impatient }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.impatient
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = arrogant }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.arrogant
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = humble }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.humble
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = deceitful }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.deceitful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = honest }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.honest
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = craven }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.craven
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = brave }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.brave
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = shy }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.shy
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = gregarious }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.gregarious
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = ambitious }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.ambitious
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = content }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.content
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = arbitrary }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.arbitrary
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = just }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.just
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = cynical }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.cynical
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = zealous }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.zealous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = paranoid }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.paranoid
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = trusting }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.trusting
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = compassionate }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.compassionate
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = callous }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.callous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = sadistic }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.sadistic
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = stubborn }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.stubborn
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = fickle }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.fickle
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = vengeful }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.vengeful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = forgiving }
						}
						desc = song_battle.0001.desc.opponent_winning.trait.forgiving
					}
					## Prior Matches & Relationships
					triggered_desc = {
						trigger = { has_relation_friend = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.relation.friend
					}
					triggered_desc = {
						trigger = { has_relation_best_friend = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.relation.best_friend
					}
					triggered_desc = {
						trigger = { has_relation_rival = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.relation.rival
					}
					triggered_desc = {
						trigger = { has_relation_nemesis = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.relation.nemesis
					}
					triggered_desc = {
						trigger = { has_relation_lover = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.relation.lover
					}
					triggered_desc = {
						trigger = { has_relation_soulmate = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.relation.soulmate
					}
					## Miscs
					### Hooks
					triggered_desc = {
						trigger = { has_weak_hook = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.hook_on.weak
					}
					triggered_desc = {
						trigger = { has_strong_hook = scope:sb_opponent }
						desc = song_battle.0001.desc.opponent_winning.hook_on.strong
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_weak_hook = scope:sb_myself}
						}
						desc = song_battle.0001.desc.opponent_winning.hooked_by.weak
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_strong_hook = scope:sb_myself}
						}
						desc = song_battle.0001.desc.opponent_winning.hooked_by.strong
					}
					### Prior Matches
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_default_loss_to
								var:sb_recent_default_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.opponent_winning.match_history.recently_won_against.default
					}
					# triggered_desc = {
						# trigger = {
							# scope:sb_opponent = {
								# exists = var:sb_recent_land_loss_to
								# var:sb_recent_land_loss_to = scope:sb_myself
								##Don't bring it up if you don't control it any more.
								# var:sb_recent_land_loss_stake.holder = {
									# OR = {
										# this = scope:sb_opponent
										# any_liege_or_above = { this = scope:sb_opponent }
									# }
								# }
							# }
						# }
						# desc = song_battle.0001.desc.opponent_winning.match_history.recently_won_against.county
					# }
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_gambling_loss_to
								var:sb_recent_gambling_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.opponent_winning.match_history.recently_won_against.gamble
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_default_loss_to
								var:sb_recent_default_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.opponent_winning.match_history.recently_lost_against.default
					}
					# triggered_desc = {
						# trigger = {
							# scope:sb_opponent = {
								# exists = var:sb_recent_land_loss_to
								# var:sb_recent_land_loss_to = scope:sb_myself
							# }
						# }
						# desc = song_battle.0001.desc.opponent_winning.match_history.recently_lost_against.county
					# }
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_gambling_loss_to
								var:sb_recent_gambling_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.opponent_winning.match_history.recently_lost_against.gamble
					}
				}
			}
		}
		### Current Player Winning
		triggered_desc = {
			trigger = {
				# Since we're processing a whole mess o'random valids here, and they're *all* fluff, we restrict this to AI only.
				is_ai = no
				# We let the other player be haughty by making them the tie-breaker.
				trigger_if = {
					limit = { has_variable = sb_gib_only_winning_locs }
					always = yes
				}
				trigger_else = {
					var:sb_current_score > scope:sb_opponent.var:sb_current_score
				}
			}
			desc = {
				random_valid = {
					# Categories
					## Attributes
					### Diplomacy
					triggered_desc = {
						trigger = { scope:sb_opponent.diplomacy <= mediocre_skill_rating }
						desc = song_battle.0001.desc.i_am_winning.diplomacy.low
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent.diplomacy > mediocre_skill_rating
							scope:sb_opponent.diplomacy < high_skill_rating
						}
						desc = song_battle.0001.desc.i_am_winning.diplomacy.medium
					}
					triggered_desc = {
						trigger = { scope:sb_opponent.diplomacy >= high_skill_rating }
						desc = song_battle.0001.desc.i_am_winning.diplomacy.high
					}
					### Intrigue
					triggered_desc = {
						trigger = { scope:sb_opponent.intrigue <= mediocre_skill_rating }
						desc = song_battle.0001.desc.i_am_winning.intrigue.low
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent.intrigue > mediocre_skill_rating
							scope:sb_opponent.intrigue < high_skill_rating
						}
						desc = song_battle.0001.desc.i_am_winning.intrigue.medium
					}
					triggered_desc = {
						trigger = { scope:sb_opponent.intrigue >= high_skill_rating }
						desc = song_battle.0001.desc.i_am_winning.intrigue.high
					}
					### Learning
					triggered_desc = {
						trigger = { scope:sb_opponent.learning <= mediocre_skill_rating }
						desc = song_battle.0001.desc.i_am_winning.learning.low
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent.learning > mediocre_skill_rating
							scope:sb_opponent.learning < high_skill_rating
						}
						desc = song_battle.0001.desc.i_am_winning.learning.medium
					}
					triggered_desc = {
						trigger = { scope:sb_opponent.learning >= high_skill_rating }
						desc = song_battle.0001.desc.i_am_winning.learning.high
					}
					## Trait Specifics
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = lustful }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.lustful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = chaste }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.chaste
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = gluttonous }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.gluttonous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = temperate }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.temperate
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = greedy }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.greedy
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = generous }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.generous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = lazy }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.lazy
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = diligent }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.diligent
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = wrathful }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.wrathful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = calm }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.calm
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = patient }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.patient
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = impatient }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.impatient
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = arrogant }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.arrogant
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = humble }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.humble
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = deceitful }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.deceitful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = honest }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.honest
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = craven }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.craven
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = brave }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.brave
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = shy }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.shy
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = gregarious }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.gregarious
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = ambitious }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.ambitious
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = content }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.content
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = arbitrary }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.arbitrary
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = just }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.just
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = cynical }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.cynical
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = zealous }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.zealous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = paranoid }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.paranoid
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = trusting }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.trusting
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = compassionate }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.compassionate
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = callous }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.callous
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = sadistic }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.sadistic
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = stubborn }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.stubborn
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = fickle }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.fickle
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = vengeful }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.vengeful
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_trait = forgiving }
						}
						desc = song_battle.0001.desc.i_am_winning.trait.forgiving
					}
					## Prior Matches & Relationships
					triggered_desc = {
						trigger = { has_relation_friend = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.relation.friend
					}
					triggered_desc = {
						trigger = { has_relation_best_friend = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.relation.best_friend
					}
					triggered_desc = {
						trigger = { has_relation_rival = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.relation.rival
					}
					triggered_desc = {
						trigger = { has_relation_nemesis = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.relation.nemesis
					}
					triggered_desc = {
						trigger = { has_relation_lover = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.relation.lover
					}
					triggered_desc = {
						trigger = { has_relation_soulmate = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.relation.soulmate
					}
					## Miscs
					### Hooks
					triggered_desc = {
						trigger = { has_weak_hook = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.hook_on.weak
					}
					triggered_desc = {
						trigger = { has_strong_hook = scope:sb_opponent }
						desc = song_battle.0001.desc.i_am_winning.hook_on.strong
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_weak_hook = scope:sb_myself}
						}
						desc = song_battle.0001.desc.i_am_winning.hooked_by.weak
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = { has_strong_hook = scope:sb_myself}
						}
						desc = song_battle.0001.desc.i_am_winning.hooked_by.strong
					}
					### Prior Matches
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_default_loss_to
								var:sb_recent_default_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.i_am_winning.match_history.recently_won_against.default
					}
					# triggered_desc = {
						# trigger = {
							# scope:sb_opponent = {
								# exists = var:sb_recent_land_loss_to
								# var:sb_recent_land_loss_to = scope:sb_myself
							# }
						# }
						# desc = song_battle.0001.desc.i_am_winning.match_history.recently_won_against.county
					# }
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_gambling_loss_to
								var:sb_recent_gambling_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.i_am_winning.match_history.recently_won_against.gamble
					}
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_default_loss_to
								var:sb_recent_default_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.i_am_winning.match_history.recently_lost_against.default
					}
					# triggered_desc = {
						# trigger = {
							# scope:sb_opponent = {
								# exists = var:sb_recent_land_loss_to
								# var:sb_recent_land_loss_to = scope:sb_myself
							# }
						# }
						# desc = song_battle.0001.desc.i_am_winning.match_history.recently_lost_against.county
					# }
					triggered_desc = {
						trigger = {
							scope:sb_opponent = {
								exists = var:sb_recent_gambling_loss_to
								var:sb_recent_gambling_loss_to = scope:sb_myself
							}
						}
						desc = song_battle.0001.desc.i_am_winning.match_history.recently_lost_against.gamble
					}
					### Other
					#### [tumbleweeds]
				}
			}
		}
	}
	theme = diplomacy
	left_portrait = {
		character = scope:sb_myself
		triggered_animation = { # Winning by a large margin
			trigger = {
				scope:sb_myself = { 
					NOT = { has_trait = humble }
					OR = {
						var:sb_current_score >= sb_relative_score_heavy_difference_threshold_value
						var:sb_current_score >= sb_close_to_winning_threshold_value
					}
				}
			}
  			animation = schadenfreude
  		}
		triggered_animation = { # Winning by any margin
			trigger = { 
				scope:sb_myself = {
					NOT = { has_trait = humble }
					var:sb_current_score >= sb_relative_score_light_difference_threshold_value 
				}
			}
  			animation = happiness
  		}
		animation = personality_rational
	}
	right_portrait = {
		character = scope:sb_opponent
		triggered_animation = {
			trigger = { 
				scope:sb_opponent = {
					NOT = { has_trait = humble }
				}
				scope:sb_myself.var:sb_current_score < scope:sb_opponent.var:sb_current_score
				scope:sb_myself.var:sb_current_score <= sb_relative_score_heavy_difference_threshold_value
			}
  			animation = happiness
  		}
		triggered_animation = {
			trigger = { 
				scope:sb_opponent = {
					NOT = { has_trait = humble }
				}
				scope:sb_myself.var:sb_current_score < scope:sb_opponent.var:sb_current_score
				OR = {
					scope:sb_myself.var:sb_current_score <= sb_relative_score_light_difference_threshold_value
					scope:sb_opponent.var:sb_current_score >= sb_close_to_winning_threshold_value
				}
			}
  			animation = schadenfreude
  		}
		animation = scheme
	}
	override_background = {
		trigger = { scope:sb_locale = flag:terrain_scope }
		reference = terrain_scope
	}
	override_background = {
		trigger = { scope:sb_locale = flag:wilderness_scope }
		reference = wilderness_scope
	}
	override_background = {
		trigger = { scope:sb_locale = flag:battlefield }
		reference = battlefield
	}
	override_background = {
		trigger = { scope:sb_locale = flag:temple }
		reference = temple
	}
	override_background = {
		trigger = { scope:sb_locale = flag:council_chamber }
		reference = council_chamber
	}
	override_background = {
		trigger = { scope:sb_locale = flag:courtyard }
		reference = courtyard
	}
	override_background = {
		trigger = { scope:sb_locale = flag:dungeon }
		reference = dungeon
	}
	override_background = {
		trigger = { scope:sb_locale = flag:docks }
		reference = docks
	}
	override_background = {
		trigger = { scope:sb_locale = flag:feast }
		reference = feast
	}
	override_background = {
		trigger = { scope:sb_locale = flag:gallows }
		reference = gallows
	}
	override_background = {
		trigger = { scope:sb_locale = flag:garden }
		reference = garden
	}
	override_background = {
		trigger = { scope:sb_locale = flag:market }
		reference = market
	}
	override_background = {
		trigger = { scope:sb_locale = flag:sitting_room }
		reference = sitting_room
	}
	override_background = {
		trigger = { scope:sb_locale = flag:bedchamber }
		reference = bedchamber
	}
	override_background = {
		trigger = { scope:sb_locale = flag:study }
		reference = study
	}
	override_background = {
		trigger = { scope:sb_locale = flag:physicians_study }
		reference = physicians_study
	}
	override_background = {
		trigger = { scope:sb_locale = flag:tavern }
		reference = tavern
	}
	override_background = {
		trigger = { scope:sb_locale = flag:throne_room }
		reference = throne_room
	}
	override_background = {
		trigger = { scope:sb_locale = flag:army_camp }
		reference = army_camp
	}

	trigger = {
		scope:sb_defender = { can_start_board_game_eligibility_checks_trigger = yes }
		scope:sb_attacker = { can_start_board_game_eligibility_checks_trigger = yes }
		# Invalidate if there's a war for the wagered county or they leave your realm for any reason.
		# trigger_if = {
			# limit = {
				# exists = scope:sb_stake_land_recipient
				# exists = scope:sb_stake_land_actor
			# }
			# OR = {
				# scope:sb_stake_land_recipient.holder = scope:recipient
				# scope:sb_stake_land_actor.holder = scope:actor
				# scope:recipient  ={
					# is_at_war = yes
					# any_character_war = {
						# casus_belli = {
							# any_target_title = { this =  scope:sb_stake_land_recipient }
						# }
					# }
				# }
				# scope:actor = {
					# is_at_war = yes
					# any_character_war = {
						# casus_belli = {
							# any_target_title = { this = scope:sb_stake_land_actor }
						# }
					# }
				# }
			# }
		# }
	}
	on_trigger_fail = { sb_fire_clean_up_and_invalidate_effect = yes }

	immediate = {
		# Sort scopes for portraits & loc.
		save_scope_as = sb_myself
		if = {
			limit = { this = scope:sb_defender }
			scope:sb_attacker = { save_scope_as = sb_opponent }
		}
		else = {
			scope:sb_defender = { save_scope_as = sb_opponent }
		}
		# TIT-34135
	}

	# Diplomacy: use your eloquence
	option = {
		name = {
			text = {
				random_valid = {
					desc = song_battle.0001.a.random.a
					desc = song_battle.0001.a.random.b
					desc = song_battle.0001.a.random.c
					desc = song_battle.0001.a.random.d
				}
			}
		}
		skill = diplomacy

		# Notify the player of the counter type.
		custom_tooltip = song_battle.0001.a.tt
		# Duel-'em-up.
		sb_play_move_type_effect = {
			SKILL = diplomacy
			LOC_KEY = a
		}

		# No stress impact for picking moves, but we apply stress impact in the post-game.
		ai_chance = {
			base = 0
			
			# sb_ai_weight_choices_by_skill_modifier = {
			# 	SKILL = diplomacy
			# 	CHARACTER = this
			# }

			ai_value_modifier = {
				ai_sociability = 1
				ai_vengefulness = -1
			}
		}
	}
	
	# Intrigue: play with cunning.
	option = {
		name = {
			text = {
				random_valid = {
					desc = song_battle.0001.d.random.a
					desc = song_battle.0001.d.random.b
					desc = song_battle.0001.d.random.c
					desc = song_battle.0001.d.random.d
				}
			}
		}
		skill = intrigue

		# Notify the player of the counter type.
		custom_tooltip = song_battle.0001.d.tt
		# Duel-'em-up.
		sb_play_move_type_effect = {
			SKILL = intrigue
			LOC_KEY = d
		}

		# No stress impact for picking moves, but we apply stress impact in the post-game.
		ai_chance = {
			base = 100
			
			# sb_ai_weight_choices_by_skill_modifier = {
			# 	SKILL = intrigue
			# 	CHARACTER = this
			# }

			ai_value_modifier = {
				ai_vengefulness = 1
				ai_honor = -1
			}
		}
	}
	
	# Learning: call upon your lore
	option = {
		name = {
			text = {
				random_valid = {
					desc = song_battle.0001.e.random.a
					desc = song_battle.0001.e.random.b
					desc = song_battle.0001.e.random.c
					desc = song_battle.0001.e.random.d
				}
			}
		}
		skill = learning

		# Notify the player of the counter type.
		custom_tooltip = song_battle.0001.e.tt
		# Duel-'em-up.
		sb_play_move_type_effect = {
			SKILL = learning
			LOC_KEY = e
		}

		# No stress impact for picking moves, but we apply stress impact in the post-game.
		ai_chance = {
			base = 100
			
			# sb_ai_weight_choices_by_skill_modifier = {
			# 	SKILL = learning
			# 	CHARACTER = this
			# }

			ai_value_modifier = {
				ai_boldness = -1
				# Sociability isn't anathema to good learning, but it does suggest a more bookish person.
				ai_sociability = -1
			}
		}
	}

	after = {
		#If we're scope:sb_defender, send scope:sb_attacker their instance of the event.
		if = {
			limit = { this = scope:sb_defender }
			scope:sb_attacker = { trigger_event = song_battle.0001 }
		}
		#Otherwise we're scope:sb_attacker, so end the round.
		else = { trigger_event = song_battle.0011 }
	}
}

##################################################
# Round End Events
# by Ewan Cowhig Croft
# 0011 - 0020
##################################################

#	Both players have moved, work out results.
song_battle.0011 = {
	hidden = yes

	immediate = {
		# Work out counterers.
		## First, clear the prior counterer (if any).
		clear_saved_scope = sb_counterer
		## Scope:sb_defender.
		### Scope:sb_skill_a > scope:sb_skill_b.
		if = {
			limit = {
				scope:sb_defender_move = scope:sb_skill_a
				scope:sb_attacker_move = scope:sb_skill_b
			}
			scope:sb_defender = { save_scope_as = sb_counterer }
		}
		### Scope:sb_skill_b > scope:sb_skill_c.
		else_if = {
			limit = {
				scope:sb_defender_move = scope:sb_skill_b
				scope:sb_attacker_move = scope:sb_skill_c
			}
			scope:sb_defender = { save_scope_as = sb_counterer }
		}
		### Scope:sb_skill_c > scope:sb_skill_a.
		else_if = {
			limit = {
				scope:sb_defender_move = scope:sb_skill_c
				scope:sb_attacker_move = scope:sb_skill_a
			}
			scope:sb_defender = { save_scope_as = sb_counterer }
		}
		## Scope:sb_attacker.
		### Scope:sb_skill_a > scope:sb_skill_b.
		else_if = {
			limit = {
				scope:sb_attacker_move = scope:sb_skill_a
				scope:sb_defender_move = scope:sb_skill_b
			}
			scope:sb_attacker = { save_scope_as = sb_counterer }
		}
		### Scope:sb_skill_b > scope:sb_skill_c.
		else_if = {
			limit = {
				scope:sb_attacker_move = scope:sb_skill_b
				scope:sb_defender_move = scope:sb_skill_c
			}
			scope:sb_attacker = { save_scope_as = sb_counterer }
		}
		### Scope:sb_skill_c > scope:sb_skill_a.
		else_if = {
			limit = {
				scope:sb_attacker_move = scope:sb_skill_c
				scope:sb_defender_move = scope:sb_skill_a
			}
			scope:sb_attacker = { save_scope_as = sb_counterer }
		}
		# Calc new score totals.
		sb_calc_current_scores_effect = {
			CURRENT_PLAYER = scope:sb_defender
			OTHER_PLAYER = scope:sb_attacker
		}
		sb_calc_current_scores_effect = {
			CURRENT_PLAYER = scope:sb_attacker
			OTHER_PLAYER = scope:sb_defender
		}
		# Has anyone managed to win?
		## First we check scope:sb_defender.
		if = {
			limit = {
				scope:sb_defender.var:sb_current_score > sb_winning_threshold_value
				scope:sb_defender.var:sb_current_score >= scope:sb_attacker.var:sb_current_score
			}
			scope:sb_defender = { save_scope_as = sb_victor }
			scope:sb_attacker = { save_scope_as = sb_loser }
			save_scope_value_as = {
				name = sb_victory_type
				value = flag:skill
			}
			sb_finalise_match_end_effect = yes
		}
		## Then scope:sb_attacker.
		else_if = {
			limit = {
				scope:sb_attacker.var:sb_current_score > sb_winning_threshold_value
				scope:sb_attacker.var:sb_current_score > scope:sb_defender.var:sb_current_score
			}
			scope:sb_attacker = { save_scope_as = sb_victor }
			scope:sb_defender = { save_scope_as = sb_loser }
			save_scope_value_as = {
				name = sb_victory_type
				value = flag:skill
			}
			sb_finalise_match_end_effect = yes
		}
		## Then see if we're above the round limit and should default.
		else_if = {
			limit = {
				scope:sb_defender.var:sb_current_round >= sb_round_cap_value
			}
			scope:sb_defender = { save_scope_as = sb_victor }
			scope:sb_attacker = { save_scope_as = sb_loser }
			save_scope_value_as = {
				name = sb_victory_type
				value = flag:sudden_death
			}
			sb_finalise_match_end_effect = yes
		}
		## Finally, if none of that applies, we just want to spin on to the next event.
		else = {
			scope:sb_defender = {
				change_variable = {
					name = sb_current_round
					add = 1
				}
				trigger_event = song_battle.0001
			}
		}
	}
}

##################################################
# Default Invalidation Event
# by Brice Underhill
# 0021 - 0030
##################################################

#	The game has invalidated, inform affected parties.
song_battle.0021 = {
	hidden = yes

	immediate = {
		# Inform scope:sb_defender that the game has invalidated.
		scope:sb_defender = {
			send_interface_toast = {
				title = song_battle.0021.trigger_failure.sb_defender
				left_icon = scope:sb_attacker
			}
		}
		# If they're not the same person, inform scope:sb_initiator that the game scope:sb_attacker is playing has invalidated.
		if = {
			limit = {
				NOT = { scope:sb_attacker = scope:sb_initiator }
			}
			scope:sb_initiator = {
				send_interface_toast = {
					title = song_battle.0021.trigger_failure.sb_initiator
					left_icon = scope:sb_attacker
					right_icon = scope:sb_defender
				}
			}
		}
		# Now inform scope:sb_attacker.
		scope:sb_attacker = {
			send_interface_toast = {
				title = song_battle.0021.trigger_failure.sb_attacker
				left_icon = scope:sb_defender
			}
		}
		# Reset cooldowns if this was the interaction.
		if = {
			limit = {
				exists = scope:actor
				scope:actor = { has_character_flag = taken_challenge_to_song_battle_interaction }
			}
			scope:actor = {
				remove_interaction_cooldown = challenge_to_2p_song_battle_interaction
				remove_interaction_cooldown_against = {
					interaction = challenge_to_2p_song_battle_interaction
					target = scope:recipient
				}
			}
		}
	}
}

##################################################
# Conclusion Events
# by Brice Underhill
# 0031 - 0050
##################################################
scripted_effect sb_make_friends_after_game_effect = {
	duel = {
		skill = diplomacy
		target = $RECIPIENT$
		# They'd love to play you again.
		50 = {
			compare_modifier = {
				value = scope:duel_value
				multiplier = 3.5
				min = -49
			}
			opinion_modifier = {
				who = $RECIPIENT$
				opinion_target = $ACTOR$
				multiplier = 0.5
			}
			desc = song_battle.0031.a.tt.success
			send_interface_toast = {
				title = song_battle.0031.a.tt.success
				left_icon = $RECIPIENT$
				progress_towards_friend_effect = {
					REASON = friend_good_song_battle
					CHARACTER = $RECIPIENT$
					OPINION = default_friend_opinion
				}
			}
		}
		# They think you suck.
		50 = {
			compare_modifier = {
				value = scope:duel_value
				multiplier = -3.5
				min = -49
			}
			desc = song_battle.0031.a.tt.failure
			send_interface_toast = {
				title = song_battle.0031.a.tt.failure
				left_icon = $RECIPIENT$
				reverse_add_opinion = {
					modifier = unfriendly_opinion
					target = $RECIPIENT$
					opinion = -30
				}
			}
		}
	}
}

scripted_effect sb_victor_end_result_tooltip_effect = {
	#Clarify the results.
	if = {
		limit = { scope:sb_victory_type = flag:skill }
		custom_tooltip = song_battle.0031.desc.result.skill
	}
	else_if = {
		limit = { scope:sb_victory_type = flag:sudden_death }
		custom_tooltip = song_battle.0031.desc.result.sudden_death
	}
}

scripted_effect sb_loser_end_result_tooltip_effect = {
	#Clarify the results.
	if = {
		limit = { scope:sb_victory_type = flag:skill }
		custom_tooltip = song_battle.0041.desc.result.skill
	}
	else_if = {
		limit = { scope:sb_victory_type = flag:sudden_death }
		custom_tooltip = song_battle.0041.desc.result.sudden_death
	}
}

#	Scope:sb_victor notification event.
song_battle.0031 = {
	content_source = realms_dlc
	type = character_event
	window = duel_event
	title = song_battle.0031.t
	desc = {
		triggered_desc = { # This can be expanded upon with further content if desired, see MR/TIT-34157 comments for more details
			trigger = { always = yes }
			desc = { # To make it easy to modify and expand upon the dynamic description, it is divided into swappable chunks.
				desc = { # SECTION ONE: Descriptor of how you feel/awesome you are >Maximum Word Count: 20<
					random_valid = {
						desc = song_battle.0031.desc.intro.02
						desc = song_battle.0031.desc.intro.01
						desc = song_battle.0031.desc.intro.03
					}
				}
				desc = { # SECTION TWO: Descriptor of what happened in the match >Maximum Word Count: 20<
					random_valid = {
						triggered_desc = {
							trigger = {
								learning > high_skill_rating
								learning > scope:sb_opponent.learning
							}
							desc = song_battle.0031.desc.middle.02
						}
						triggered_desc = {
							trigger = {
								OR = {
									piety_level >= high_piety_level
									has_trait = zealous
									has_trait = holy_warrior
								}
							}
							desc = song_battle.0031.desc.middle.03
						}
						desc = song_battle.0031.desc.middle.01
					}
				}
				desc = { # SECTION THREE: Descriptor of how the opponent feels/reacts >Maximum Word Count: 20<
					random_valid = {
						triggered_desc = {
							trigger = { scope:sb_opponent = { has_trait = wrathful } }
							desc = song_battle.0031.desc.end.03
						}
						desc = song_battle.0031.desc.end.01
						desc = song_battle.0031.desc.end.02
					}
				}
			}
		}
	}
	theme = diplomacy

	left_portrait = {
		character = scope:sb_victor
		animation = throne_room_cheer_2
	}
	right_portrait = {
		character = scope:sb_loser
		animation = fear
	}

	override_background = {
		trigger = { scope:sb_locale = flag:terrain_scope }
		reference = terrain_scope
	}
	override_background = {
		trigger = { scope:sb_locale = flag:wilderness_scope }
		reference = wilderness_scope
	}
	override_background = {
		trigger = { scope:sb_locale = flag:battlefield }
		reference = battlefield
	}
	override_background = {
		trigger = { scope:sb_locale = flag:temple }
		reference = temple
	}
	override_background = {
		trigger = { scope:sb_locale = flag:council_chamber }
		reference = council_chamber
	}
	override_background = {
		trigger = { scope:sb_locale = flag:courtyard }
		reference = courtyard
	}
	override_background = {
		trigger = { scope:sb_locale = flag:dungeon }
		reference = dungeon
	}
	override_background = {
		trigger = { scope:sb_locale = flag:docks }
		reference = docks
	}
	override_background = {
		trigger = { scope:sb_locale = flag:feast }
		reference = feast
	}
	override_background = {
		trigger = { scope:sb_locale = flag:gallows }
		reference = gallows
	}
	override_background = {
		trigger = { scope:sb_locale = flag:garden }
		reference = garden
	}
	override_background = {
		trigger = { scope:sb_locale = flag:market }
		reference = market
	}
	override_background = {
		trigger = { scope:sb_locale = flag:sitting_room }
		reference = sitting_room
	}
	override_background = {
		trigger = { scope:sb_locale = flag:bedchamber }
		reference = bedchamber
	}
	override_background = {
		trigger = { scope:sb_locale = flag:study }
		reference = study
	}
	override_background = {
		trigger = { scope:sb_locale = flag:physicians_study }
		reference = physicians_study
	}
	override_background = {
		trigger = { scope:sb_locale = flag:tavern }
		reference = tavern
	}
	override_background = {
		trigger = { scope:sb_locale = flag:throne_room }
		reference = throne_room
	}
	override_background = {
		trigger = { scope:sb_locale = flag:army_camp }
		reference = army_camp
	}

	# Good game!
	option = {
		trigger = {
			nor = {
				scope:sb_victor = { faith_is_evil = yes}
				scope:sb_loser = { faith_is_evil = yes}
			}
		}
		name = {
			text = {
				random_valid = {
					desc = song_battle.0031.a
				}
			}
		}

		# Display ending type.
		sb_victor_end_result_tooltip_effect = yes

		stress_impact = {
			gregarious = miniscule_stress_impact_loss
			arrogant = minor_stress_impact_gain
		}
		
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 1
				ai_vengefulness = -1
			}
		}
	}
	
	# How does it feel to lose, little GetWomanMan?
	option = {
		name = { 
			trigger = {
				nor = {
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
			}
			text = song_battle.0031.b 
		}
		name = { # I would *much* rather nest this, but due to script limitations, you can not nest names like you can descs. It is very unfortuante.
			trigger = {
				nor = {
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
				OR = {
					has_trait = arrogant
					has_trait = wrathful
				}
			}
			text = song_battle.0031.b.a
		}
		name = {
			trigger = {
				or = {
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
			}
			text = song_battle.0031.b.b
		}

		# Display ending type.
		sb_victor_end_result_tooltip_effect = yes
		# Progress towards rival.
		scope:sb_loser = {
			send_interface_toast = {
				title = song_battle.0031.b.progress_towards_rival
				left_icon = scope:sb_victor
				scope:sb_victor = {
					progress_towards_rival_effect = {
						REASON = rival_you_won_song_battle_challenge
						CHARACTER = scope:sb_loser
						OPINION = default_rival_opinion
					}
				}
			}
		}

		stress_impact = {
			greedy = miniscule_stress_impact_loss
			# Removed: Lustful
		}
		ai_chance = {
			# Low base chance so that only really sore losers will pick fights over simple games.
			base = 0
			ai_value_modifier = {
				ai_vengefulness = 1
				ai_sociability = -1
			}
		}
	}
	
	# I'd love to play again some time...
	option = {
		trigger = {
			nor = {
				scope:sb_victor = { faith_is_evil = yes}
				scope:sb_loser = { faith_is_evil = yes}
				is_ai = yes
			}
		}
		name = song_battle.0031.c

		# Display ending type.
		sb_victor_end_result_tooltip_effect = yes
		# Try to make friends by running a duel.
		sb_make_friends_after_game_effect = {
			ACTOR = scope:sb_victor
			RECIPIENT = scope:sb_loser
		}

		stress_impact = {
			humble = miniscule_stress_impact_loss
			forgiving = miniscule_stress_impact_loss
			gregarious = miniscule_stress_impact_loss
			arrogant = medium_stress_impact_gain
			vengeful = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 1
				ai_vengefulness = -1
			}
		}
	}

	# And perhaps, learn something out of it...
	after = {
		hidden_effect = {
			random = {
				chance = 10
				add_trait = poet
			}
		}
	}
}

#	Scope:sb_loser notification event.
song_battle.0041 = {
	content_source = realms_dlc
	type = character_event
	window = duel_event
	title = song_battle.0041.t
	desc = {
		triggered_desc = { # Same comment applies above. When adding new content, I recommend adding an equal amount for both winning and losing.
			trigger = { always = yes }
			desc = { # To make it easy to modify and expand upon the dynamic description, it is divided into swappable chunks.
				desc = { # SECTION ONE: Descriptor of how the opponent feels/reacts >Maximum Word Count: 20<
					random_valid = {
						desc = song_battle.0041.desc.intro.02
						desc = song_battle.0041.desc.intro.01
						desc = song_battle.0041.desc.intro.03
					}
				}
				desc = { # SECTION TWO: Descriptor of what happened in the match >Maximum Word Count: 20<
					random_valid = {
						triggered_desc = {
							trigger = { scope:sb_opponent = { learning < low_skill_rating } }
							desc = song_battle.0041.desc.middle.02
						}
						triggered_desc = {
							trigger = {
								martial > very_high_skill_rating
								martial > scope:sb_opponent.martial
								has_trait = wrathful
							}
							desc = song_battle.0041.desc.middle.03
						}
						desc = song_battle.0041.desc.middle.01
					}
				}
				desc = { # SECTION THREE: Descriptor of how you feel/terrible you are >Maximum Word Count: 20<
					random_valid = {
						triggered_desc = {
							trigger = { has_trait = wrathful }
							desc = song_battle.0041.desc.end.03
						}
						desc = song_battle.0041.desc.end.01
						desc = song_battle.0041.desc.end.02
					}
				}
			}
		}
	}
	theme = diplomacy

	left_portrait = {
		character = scope:sb_loser
		animation = fear
	}
	right_portrait = {
		character = scope:sb_victor
		animation = throne_room_cheer_2
	}
	
	override_background = {
		trigger = { scope:sb_locale = flag:terrain_scope }
		reference = terrain_scope
	}
	override_background = {
		trigger = { scope:sb_locale = flag:wilderness_scope }
		reference = wilderness_scope
	}
	override_background = {
		trigger = { scope:sb_locale = flag:battlefield }
		reference = battlefield
	}
	override_background = {
		trigger = { scope:sb_locale = flag:temple }
		reference = temple
	}
	override_background = {
		trigger = { scope:sb_locale = flag:council_chamber }
		reference = council_chamber
	}
	override_background = {
		trigger = { scope:sb_locale = flag:courtyard }
		reference = courtyard
	}
	override_background = {
		trigger = { scope:sb_locale = flag:dungeon }
		reference = dungeon
	}
	override_background = {
		trigger = { scope:sb_locale = flag:docks }
		reference = docks
	}
	override_background = {
		trigger = { scope:sb_locale = flag:feast }
		reference = feast
	}
	override_background = {
		trigger = { scope:sb_locale = flag:gallows }
		reference = gallows
	}
	override_background = {
		trigger = { scope:sb_locale = flag:garden }
		reference = garden
	}
	override_background = {
		trigger = { scope:sb_locale = flag:market }
		reference = market
	}
	override_background = {
		trigger = { scope:sb_locale = flag:sitting_room }
		reference = sitting_room
	}
	override_background = {
		trigger = { scope:sb_locale = flag:bedchamber }
		reference = bedchamber
	}
	override_background = {
		trigger = { scope:sb_locale = flag:study }
		reference = study
	}
	override_background = {
		trigger = { scope:sb_locale = flag:physicians_study }
		reference = physicians_study
	}
	override_background = {
		trigger = { scope:sb_locale = flag:tavern }
		reference = tavern
	}
	override_background = {
		trigger = { scope:sb_locale = flag:throne_room }
		reference = throne_room
	}
	override_background = {
		trigger = { scope:sb_locale = flag:army_camp }
		reference = army_camp
	}

	# We'll see who wins next time...
	option = {
		name = song_battle.0041.a
		trigger = {
			nor = {
				scope:sb_victor = { faith_is_evil = yes}
				scope:sb_loser = { faith_is_evil = yes}
			}
		}

		# Display ending type.
		sb_loser_end_result_tooltip_effect = yes

		stress_impact = {
			gregarious = miniscule_stress_impact_loss
			arrogant = minor_stress_impact_gain
			vengeful = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 1
				ai_vengefulness = -1
			}
		}
	}
	
	# You've made an enemy here today.
	option = {
		name = { text = song_battle.0041.b }
		name = {
			trigger = {
				nor = {
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
				OR = {
					has_trait = arrogant
					has_trait = wrathful
				}
				OR = {
					has_trait = zealous
					has_trait = holy_warrior
					has_trait = heresiarch
					has_trait = devoted
				}
			}
			text = song_battle.0041.b.b
		}
		name = {
			trigger = {
				or = {
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
			}
			text = song_battle.0041.b.c
		}

		# Display ending type.
		sb_loser_end_result_tooltip_effect = yes
		# Progress towards rival.
		scope:sb_victor = {
			send_interface_toast = {
				title = song_battle.0031.b.progress_towards_rival
				left_icon = scope:sb_loser
				scope:sb_loser = {
					progress_towards_rival_effect = {
						REASON = rival_won_song_battle_challenge
						CHARACTER = scope:sb_victor
						OPINION = default_rival_opinion
					}
				}
			}
		}

		stress_impact = {
			arrogant = miniscule_stress_impact_loss
			vengeful = miniscule_stress_impact_loss
			humble = medium_stress_impact_gain
			forgiving = major_stress_impact_gain
		}
		ai_chance = {
			# Low base chance so that only really sore losers will pick fights over simple games.
			base = 0
			ai_value_modifier = {
				ai_vengefulness = 1
				ai_sociability = -1
			}
		}
	}
	
	# Well, the better GetWomanMan won!
	option = {
		trigger = {
			nor = {
				scope:sb_victor = { faith_is_evil = yes}
				scope:sb_loser = { faith_is_evil = yes}
				is_ai = yes
			}
		}
		name = song_battle.0041.c

		# Display ending type.
		sb_loser_end_result_tooltip_effect = yes
		# Run the duel.
		sb_make_friends_after_game_effect = {
			ACTOR = scope:sb_loser
			RECIPIENT = scope:sb_victor
		}

		stress_impact = {
			humble = miniscule_stress_impact_loss
			forgiving = miniscule_stress_impact_loss
			gregarious = miniscule_stress_impact_loss
			arrogant = medium_stress_impact_gain
			vengeful = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 1
				ai_vengefulness = -1
			}
		}
	}
}

###	Follow-up event.

song_battle.0200 = {
	hidden = yes

	immediate = {
		if = {
			limit = {
				or ={
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
			}
			scope:sb_victor = {
				add_character_modifier = {
					modifier = magical_supremacy_modifier
					days = 10
				}
			}
			configure_start_single_combat_effect = {
				SC_INITIATOR = scope:sb_victor
				SC_ATTACKER = scope:sb_victor
				SC_DEFENDER = scope:sb_loser
				FATALITY = no
				FIXED = no
				LOCALE = terrain_scope
				OUTPUT_EVENT = song_battle.0201
				INVALIDATION_EVENT = fp1_tbc.0102
			}
		}
		else_if = {
			limit = {
				nor = {
					scope:sb_victor = { faith_is_evil = yes}
					scope:sb_loser = { faith_is_evil = yes}
				}
			}
			trigger_event = { id = song_battle.0201 }
		}
	}
}



song_battle.0201 = {
	hidden = yes

	immediate = {
		if = {
			limit = {
				exists = scope:sc_victor
			}
			scope:sc_victor = { save_scope_as = sb_victor }
			scope:sc_loser = { save_scope_as = sb_loser }
		}
		# We don't bother with a delay here because there's no risk of death, and we want to transfer counties and such immediately.
		# Send out a toast to the victor.
		scope:sb_victor = {
			send_interface_toast = {
				title = song_battle.victor_toast.t
				left_icon = scope:sb_victor
				right_icon = scope:sb_loser
				show_as_tooltip = { song_battle_0201_apply_effects_effect = yes }
			}
		}
		# And to the loser.
		scope:sb_loser = {
			send_interface_toast = {
				title = song_battle.loser_toast.t
				left_icon = scope:sb_loser
				right_icon = scope:sb_victor
				show_as_tooltip = { song_battle_0201_apply_effects_effect = yes }
			}
		}
		# Then execute the actual effects.
		song_battle_0201_apply_effects_effect = yes
	}
}

##################################################
# Debug Events
# by Ewan Cowhig Croft
# 0101 - 0130
##################################################

#	Error suppression.
song_battle.0101 = {
	hidden = yes
	orphan = yes

	immediate = {
		# Hidden effect blocks used for easy collapsing.
		# Types of game.
		# Backgrounds.
		hidden_effect = {
			save_scope_value_as = {
				name = sb_locale
				value = flag:terrain_scope
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:wilderness_scope
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:battlefield
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:temple
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:council_chamber
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:courtyard
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:dungeon
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:docks
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:feast
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:gallows
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:garden
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:market
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:sitting_room
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:bedchamber
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:study
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:physicians_study
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:tavern
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:throne_room
			}
			save_scope_value_as = {
				name = sb_locale
				value = flag:army_camp
			}
		}
		# Random variables.
		# hidden_effect = {
			# if = {
				# limit = { exists = var:sb_recent_land_loss_stake }
			# }
		# }
	}
}

#	Debug song battles.
song_battle.0102 = {
	content_source = realms_dlc
	type = character_event
	title = song_battle.0102.t
	desc = song_battle.0102.desc
	orphan = yes
	theme = martial_strategy_focus
	left_portrait = {
		character = scope:actor
		animation = throne_room_applaud_1
	}
	right_portrait = {
		character = scope:recipient
		animation = fear
	}
	override_background = { reference = sitting_room }

	# Ordinary game, please.
	option = {
		name = song_battle.0102.a

		# No special anything needed.
	}
	
	# Foe only uses winning locs, please.
	option = {
		name = song_battle.0102.b

		set_variable = sb_gib_only_winning_locs
	}
	
	# Foe only uses losing locs, please.
	option = {
		name = song_battle.0102.c

		set_variable = sb_gib_only_losing_locs
	}

	after = {

		configure_start_song_battle_effect = {
			SB_INITIATOR = scope:actor
			SB_ATTACKER = scope:actor
			SB_DEFENDER = scope:recipient
			LOCALE = random_nice_day
			OUTPUT_EVENT = song_battle.0200
			INVALIDATION_EVENT = song_battle.0021
		}
	}
}
