namespace = dwarven

### Dwarven Events ###
#			dwarven.0100		Erebor Starting Event
#			dwarven.0200		Balin Starting Event
#			dwarven.0300		Nordinbad Starting Event
#			dwarven.0330		Axe that Walks Starting Event
#			dwarven.0340		Eldberk Starting Event
#           dwarven.0350        Uri the Generous Starting Event
#           dwarven.0360        Brokkr Starting Event   

#			dwarven.5000-5099	Dwarven Reincarnation Events
#			dwaven.6001-6002	Durin's Folk Unifier events

#			dwarven.9000-9002	Dwarven Shaving Events
#			dwarven.9000		I shave someone
#			dwarven.9001		I am shaved
#			dwarven.9002		Bearded again !

# 			dwarven.9500		Dwarven Marriage Choice



###################################
### Dwarven Introduction Events ###
###################################

dwarven.0100 = { # Introduction to Dain
	content_source = realms_dlc
	type = character_event
	title = dwarven.0100.t
	desc = dwarven.0100.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	immediate = { play_music_cue = lotr_cue_dwarves }
	
	right_portrait = {
		character = root
		animation = personality_honorable
	}
	
	option = { 
		name = dwarven.0100.a
	}
}

dwarven.0200 = { # Introduction to Balin
	content_source = realms_dlc
	type = character_event
	title = dwarven.0200.t
	desc = dwarven.0200.desc
	theme = martial_strategy_focus
	override_background = {
		reference = wilderness_underground
	}
	
	immediate = {
		play_music_cue = lotr_cue_dwarves
		add_gold = 200
		character:lineofdurin106 = { save_scope_as = companion_1 }
		character:lineofdurin98 = { save_scope_as = companion_2 }
		set_variable = cannot_cancel_travel
	}
	
	right_portrait = {
		character = root
		animation = celebrate_axe
	}
	
	option = { # Take companions with you to Mirrormere
		name = dwarven.0200.a

		custom_tooltip = {
			text = dwarven.0200.tt
			start_travel_plan = { # Works
				destination = province:4919
				on_arrival_event = dwarven.0205
				return_trip = no
				players_use_planner = no
				on_arrival_destinations = first
				companion = scope:companion_1
				companion = scope:companion_2
			}
		}
		custom_tooltip = dwarven.0200.tt_1
	}
	
	option = { # Go alone
		name = dwarven.0200.b

		custom_tooltip = {
			text = dwarven.0200.tt
			start_travel_plan = { # Works
				destination = province:4919
				on_arrival_event = dwarven.0205
				return_trip = no
				players_use_planner = no
				on_arrival_destinations = first
			}
		}
	}
}

dwarven.0205 = { # Arrive at Mirrormere
	content_source = realms_dlc
	type = character_event
	title = dwarven.0205.t
	theme = death
	desc = dwarven.0205.desc.2

	theme = martial_strategy_focus
	
	right_portrait = {
		character = root
		animation = personality_honorable
	}

	left_portrait = {
		character = scope:companion_1
		animation = personality_honorable
		trigger = { exists = scope:companion_1 }
	}

	lower_left_portrait = {
		character = scope:companion_2
		animation = personality_honorable
		trigger = { exists = scope:companion_2 }
	}

	cooldown = { years = 10 }

	option = {
		name = dwarven.0205.a
		death = { death_reason = death_battle }
		destroy_title = title:d_balins_expedition
	}
	
	option = {
		name = dwarven.0205.b

		trigger = { 
			exists = scope:companion_2 
			exists = scope:companion_1 
		}

		random_list = {
			85 = {
				scope:companion_1 = { death = { death_reason = death_battle } }
				scope:companion_2 = { death = { death_reason = death_battle } }
				change_trait_rank = {
					trait = wounded
					rank = 2
				}
			}
			15 = {
				death = { death_reason = death_battle }
				destroy_title = title:d_balins_expedition
				scope:companion_1 = { 
					change_trait_rank = {
						trait = wounded
						rank = 2
					}
				}
				scope:companion_2 = { 
					change_trait_rank = {
						trait = wounded
						rank = 1
					}
				}
			}
		}
	}

	after = { trigger_event = { id = dwarven.0210 days = 5 } }
}

dwarven.0210 = { # Arrive at Mirrormere
	content_source = realms_dlc
	type = character_event
	title = dwarven.0210.t
	theme = death
	desc = dwarven.0210.desc

	theme = martial_strategy_focus
	
	right_portrait = {
		character = root
		animation = personality_honorable
	}

	cooldown = { years = 10 }

	immediate = {
		random_county_in_region = {
			region = middleearth_misty_mountains_balrog_struggle_region
			limit = { 
				holder = { 
					is_orc = yes 
					is_ai = yes 
					is_independent_ruler = yes
					NOT = { has_truce = root }
				} 
			}
			holder = { save_scope_as = first_ruler }
		}

		random_county_in_region = {
			region = middleearth_misty_mountains_balrog_struggle_region
			limit = { 
				holder = { 
					is_orc = yes 
					is_ai = yes 
					is_independent_ruler = yes
					NOT = { has_truce = root }
					NOT = { this = scope:first_ruler }
				} 
			}
			holder = { save_scope_as = second_ruler }
		}

		random_county_in_region = {
			region = middleearth_misty_mountains_balrog_struggle_region
			limit = { 
				holder = { 
					is_orc = yes 
					is_ai = yes 
					is_independent_ruler = yes
					NOT = { has_truce = root }
					NOR = { 
						this = scope:first_ruler 
						this = scope:second_ruler 
					}
				} 
			}
			holder = { save_scope_as = third_ruler }
		}
	}

	option = {
		name = dwarven.0210.a
		remove_variable = cannot_cancel_travel
		scope:first_ruler = {
			start_war = {
				casus_belli = county_conquest_cb
				target = root
				target_title = title:c_chamber_of_mazarbul
			}
		}

		scope:second_ruler = {
			start_war = {
				casus_belli = county_conquest_cb
				target = root
				target_title = title:c_chamber_of_mazarbul
			}
		}
		scope:third_ruler = {
			start_war = {
				casus_belli = county_conquest_cb
				target = root
				target_title = title:c_chamber_of_mazarbul
			}
		}
	}
}

dwarven.0300 = { # Introduction to Gorin of Nordinbad
	content_source = realms_dlc
	type = character_event
	title = dwarven.0300.t
	desc = dwarven.0300.desc
	theme = learning_scholarship_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	immediate = { play_music_cue = lotr_cue_dwarves }
	
	right_portrait = {
		character = root
		animation = personality_content
	}
	
	option = { 
		name = dwarven.0300.a
	}
}

dwarven.0330 = { # Introduction to Argan #The axe that walks
	content_source = realms_dlc
	type = character_event
	title = dwarven.0330.t
	desc = dwarven.0330.desc
	theme = travel
	override_background = {
		reference = throne_room_dwarf
	}
	
	immediate = {
		play_music_cue = lotr_cue_dwarves
		add_gold = 200
	}
	
	right_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = { 
		trigger = { is_ai = no }
		name = dwarven.0330.a

		### Open Activity Window
		if = {
			limit = { is_ai = no }
			open_view_data = {
				view = activity_list_detail_host_window
				data = activity_type:activity_expedition
			}
		}

		ai_chance = {
			base = 0 
		}
	}

	option = { # Do Nothing
		name = dwarven.0330.b

		ai_chance = {
			base = 5 
		}
	}
	
	option = { 
		trigger = { is_ai = yes }
		name = dwarven.0330.c

		random_province = { # Works
			limit = {
				OR = {
					county_is_underground_wastelands = yes
					county_is_overground_wastelands = yes
				}
				
				surrounding_lands_empty = yes
				NOT = { county.duchy = title:d_glittering_caves }
			}
			save_scope_as = selected_county
		}

		start_travel_plan = { # Works
			destination = scope:selected_county
			on_arrival_event = dwarven.0331
			return_trip = no
			players_use_planner = no
			on_arrival_destinations = last
		}

		ai_chance = {
			base = 60 
		}
	}

	option = { 
		trigger = { is_ai = yes }
		name = dwarven.0330.c

		random_province = { # Works
			limit = {
				county_is_underground_wastelands = yes
				surrounding_lands_empty = yes
				NOT = { county.duchy = title:d_glittering_caves county.empire = title:e_blue_mountains county.empire = title:e_iron_mountains county.empire = title:e_misty_mountains county.empire = title:e_yellow_mountains}
			}
			save_scope_as = selected_county
		}

		start_travel_plan = { # Works
			destination = scope:selected_county
			on_arrival_event = dwarven.0331
			return_trip = no
			players_use_planner = no
			on_arrival_destinations = last
		}

		ai_chance = {
			base = 35
		}
	}

}



dwarven.0331 = {
	hidden = yes

	immediate = {
		current_travel_plan.travel_plan_owner ?= { on_end_travel_title_change_effect = yes }
	}
}

dwarven.0340 = { # Introduction to Eldberk
	content_source = realms_dlc
	type = character_event
	title = dwarven.0340.t
	desc = dwarven.0340.desc
	theme = travel
	override_background = {
		reference = throne_room_dwarf
	}
	
	immediate = { play_music_cue = lotr_cue_dwarves }
	
	right_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = { 
		name = dwarven.0340.a
	}
}

dwarven.0350 = { # Introduction to Uri VI
	content_source = realms_dlc
	type = character_event
	title = dwarven.0350.t
	desc = dwarven.0350.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	immediate = { play_music_cue = lotr_cue_dwarves }
	
	right_portrait = {
		character = root
		animation = personality_content
	}
	
	option = { 
		name = dwarven.0350.a
	}
}

dwarven.0360 = { # Introduction to Brokkr
	content_source = realms_dlc
	type = character_event
	title = dwarven.0360.t
	desc = dwarven.0360.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	immediate = { play_music_cue = lotr_cue_dwarves }
	
	right_portrait = {
		character = root
		animation = personality_honorable
	}
	
	option = { 
		name = dwarven.0360.a
	}
}

##############################################
# dwarven.1000 Introduction to Dwarves event #
##############################################

dwarven.1000 = { #Introduction to Dwarven characters
	title = dwarven.1000.t
	desc = dwarven.1000.desc
	content_source = realms_dlc
	theme = realm
	
	immediate = { play_music_cue = lotr_cue_dwarves }
	
	left_portrait = {
		character = root
		animation = thinking
	}
	
	trigger = { is_dwarf = yes }
	
	option = { # All right, I get it
		name = dwarven.1000.a
	}
}

####################################################
###  Dwarven Fathers Reincarnation System by Juke ##
####################################################

dwarven.5000 = { # Game Start Reincarnation System Setup Event
	hidden = yes
	scope = none
	
	immediate = {
		### Save the clans to a list and set up scopes
		dynasty:dynasty_durin	= { # Durin - Longbeards
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofdurin1 }
		}
		dynasty:dynasty_uri		= { # Uri - Firebeards
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofuri0 }
		}
		dynasty:dynasty_dwalin	= { # Dwalin - Broadbeams
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofdwalin0 }
		}
		dynasty:dynasty_thrar	= { # Thrar - Blacklocks
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofthrar0 }
		}
		dynasty:dynasty_sindri	= { # Sindri - Ironfists
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofsindri0 }
		}
		dynasty:dynasty_thulin	= { # Thulin - Stiffbeards
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofthulin0 }
		}
		dynasty:dynasty_bavor	= { # Bavor - Stonefoots
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofbavor0 }
		}
		
		### Set up Dynasty Variables
		every_in_list = {
			list = dorfdad_dynasties
			if = { # Generation 4
				limit = { current_year >= 3900 }
				set_variable = {
					name = dorfdad_incarnations
					value = 4
				}
			}
			if = { # Generation 5
				limit = { current_year >= 4900 }
				change_variable = {
					name = dorfdad_incarnations
					add = 1
				}
			}
			if = { # Generation 6
				limit = { current_year >= 5900 }
				change_variable = {
					name = dorfdad_incarnations
					add = 1
				}
			}
		}
		
		debug_log = "Dorfdad Reincarnation System set up!"

		# Make Uri VI into a proper reincarnate
		if = {
			limit = {
				character:lineofuriVI ?= {
					is_alive = yes
				}
			}
			# Create the Story
			character:lineofuriVI = {
				create_story = story_dorfdad_reincarnation
				dynasty = {
					set_variable = {
						name = current_reincarnation
						value = character:lineofuriVI
					}
					set_variable = {
						name = dorfdad_incarnations
						value = 6
					}
				}
				add_character_flag = scripted_appearance_uri
				add_character_flag = no_headgear
				give_nickname = nick_the_generous_unique

	        	# Get the Name
	        	change_first_name = _Uri
	        	# Get the trait
	        	add_trait = dwarf_father
			}
		}
	}
}

scripted_trigger dwarven.5001_direct_male_line = {
	NOT = {
		any_sibling = {
			is_alive = yes
			is_female = no
			age >= prev.age
			dynasty = ROOT.dynasty
			NOR = {
				has_trait = bastard
				has_trait = bastard_founder 
				
			}
			trigger_if = {
				limit = {
					exists = father
				}
				father = prev.father
			}
			trigger_if = {
				limit = {
					exists = scope:father
					exists = scope:real_father
				}
				scope:father = scope:real_father
			}
		}
	}
}
	

dwarven.5001 = { # On childbirth: Random chance to be a reincarnation
	type = character_event
	hidden = yes
	trigger = {
		# Basic Stuff
		trigger_if = {
			limit = {
				exists = scope:father
				exists = scope:real_father
			}
			scope:father = scope:real_father
		}
		NOR = {
			has_trait = bastard
			has_trait = bastard_founder
		}
		is_female = no
		is_lowborn = no
		is_dwarf = yes
		# Must be in royal dynasty, must have reincarnated less than seven times
		dynasty = {
			#is_in_list = dorfdad_dynasties
			OR = {
				this = dynasty:dynasty_durin
				this = dynasty:dynasty_uri
				this = dynasty:dynasty_dwalin
				this = dynasty:dynasty_thrar
				this = dynasty:dynasty_sindri
				this = dynasty:dynasty_thulin
				this = dynasty:dynasty_bavor
			}
			exists = var:dorfdad
			exists = var:dorfdad_incarnations
			var:dorfdad_incarnations < 7
		}
		# Must be of the same dwarven clan as dorfdad
		dynasty.var:dorfdad.culture = { has_same_culture_heritage = root.culture }
		# No current reincarnation
		NOT = {
			dynasty = {
				any_dynasty_member = {
					is_alive = yes
					OR = {
						has_trait = dwarf_father
						any_owned_story = {
							story_type = story_dorfdad_reincarnation
						}
					}
				}
			}
		}
		# No other unconfirmed reincarnations exist
		NOT = { dynasty.var:current_reincarnation ?= { is_alive = yes } }
	}
	
	immediate = {
		if = { # See if they could be a reincarnation
			limit = {
				# Dad must be able to inherit
				NOR = {
					father = { 
						house = root.house
						has_trait = disinherited
					}
					father.father = { 
						house = root.house
						has_trait = disinherited
					}
					father.father.father = { 
						house = root.house
						has_trait = disinherited
					}
				}
				# 100 Year Cooldown after the death of the last guy
				trigger_if = {
					limit = {
						dynasty = { exists = var:dorfdad_cooldown_year }
					}
					dynasty = { current_year >= var:dorfdad_cooldown_year }
				}
				# Must be direct male-line descendant and oldest child
				dwarven.5001_direct_male_line = yes
				father = {
					is_alive = yes
					house = root.house
					OR = {
						is_dynast = yes
						AND = {
							dwarven.5001_direct_male_line = yes
							father = {
								is_alive = yes
								house = root.house
								OR = {
									is_dynast = yes
									AND = {
										dwarven.5001_direct_male_line = yes
										father = {
											is_alive = yes
											house = root.house
											OR = {
												is_dynast = yes
												AND = {
													dwarven.5001_direct_male_line = yes
													father = {
														is_alive = yes
														house = root.house
														is_dynast = yes
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				# # Parent, grandparent or great grandparent must be a king or higher
				any_ancestor = {
					house = root.house
					is_landed = yes
					highest_held_title_tier >= tier_kingdom
				}
			}
			debug_log = "Testing for dorfdad reincarnation!"
			random = {
				chance = {
					value = 10
					if = { # Some characters historically sire incarnates
						limit = {
							father = {
								is_alive = yes
								house = root.house
								has_character_flag = historically_conceived_dorfdad
							}
							has_game_rule = default_ai_behavior
						}
						add = 90
					}
					else_if = { # Some characters historically sire incarnates
						limit = {
							father = {
								is_alive = yes
								house = root.house
								has_character_flag = historically_conceived_dorfdad
							}
							has_game_rule = weighted_ai_behavior
						}
						add = 65
					}
					else_if = { # Some characters historically sire incarnates
						limit = {
							father = {
								is_alive = yes
								house = root.house
								has_character_flag = historically_conceived_dorfdad
							}
							NOR = {
								has_game_rule = default_ai_behavior
								has_game_rule = weighted_ai_behavior
							}
						}
						add = 40
					}
					else_if = { # Player children get a higher chance, as a treat
						limit = {
							any_ancestor = {
								is_alive = yes
								house = root.house
								is_ai = no
							}
						}
						add = 5
					}
				}
				# Create the Story
				create_story = story_dorfdad_reincarnation
				debug_log = "Found a possible Dorfdad Reincarnation!"
			}
		}
		else = { # They still fulfill some requirements, chance to make them emulate their Dwarf father as a semi-red flag
			random = {
				chance = {
					value = 5
					if = { # Bad traits
						limit = {
							OR = {
								has_trait = physique_bad
								has_trait = beauty_bad
								has_trait = intellect_bad
							}
						}
						value = 0
					}
				}
				trigger_event = {
					id = dwarven.5002
					years = { 5 10 }
				}
			}
		}
	}
}

dwarven.5002 = { # I seem to be reflection of my dwarven father
	content_source = realms_dlc
	type = character_event
	title = dwarven.5002.t
	desc = dwarven.5002.desc
	theme = family
	override_background = {
		reference = market_dwarven
	}
	
	trigger = {
		is_dwarf = yes
		dynasty.var:dorfdad = { exists = this }
	}
	
	left_portrait = {
		character = root
	}
	
	right_portrait = {
		character = scope:my_dorfdad
	}
	
	immediate = {
		# Save first incarnation for event scopes
		dynasty.var:dorfdad ?= { save_scope_as = my_dorfdad }
		# Save self for event scopes
		save_scope_as = new_dorfdad
		# Add "reflection of" modifiers for life expectancy
		if = {
			limit = { 
				scope:my_dorfdad = character:lineofdurin1
			}
			add_character_modifier = reflection_of_durin
		}
		else_if = {
			limit = { 
				scope:my_dorfdad = character:lineofuri0
			}
			add_character_modifier = reflection_of_uri
		}
		else_if = {
			limit = { 
				scope:my_dorfdad = character:lineofdwalin0
			}
			add_character_modifier = reflection_of_dwalin
		}
		else_if = {
			limit = { 
				scope:my_dorfdad = character:lineofthrar0
			}
			add_character_modifier = reflection_of_thrar
		}
		else_if = {
			limit = { 
				scope:my_dorfdad = character:lineofsindri0
			}
			add_character_modifier = reflection_of_sindri
		}
		else_if = {
			limit = { 
				scope:my_dorfdad = character:lineofthulin0
			}
			add_character_modifier = reflection_of_thulin
		}
		else_if = {
			limit = { 
				scope:my_dorfdad = character:lineofbavor0
			}
			add_character_modifier = reflection_of_bavor
		}
		add_learning_skill = 1
		add_piety = 300
	}
	
	option = {
		name = dwarven.5002.durin
		custom_tooltip = dwarven.5002.durin.tt
		trigger = {
			scope:my_dorfdad = character:lineofdurin1
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.uri
		custom_tooltip = dwarven.5002.uri.tt
		trigger = {
			scope:my_dorfdad = character:lineofuri0
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.dwalin
		custom_tooltip = dwarven.5002.dwalin.tt
		trigger = {
			scope:my_dorfdad = character:lineofdwalin0
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.thrar
		custom_tooltip = dwarven.5002.thrar.tt
		trigger = {
			scope:my_dorfdad = character:lineofthrar0
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.sindri
		custom_tooltip = dwarven.5002.sindri.tt
		trigger = {
			scope:my_dorfdad = character:lineofsindri0
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.thulin
		custom_tooltip = dwarven.5002.thulin.tt
		trigger = {
			scope:my_dorfdad = character:lineofthulin0
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.bavor
		custom_tooltip = dwarven.5002.bavor.tt
		trigger = {
			scope:my_dorfdad = character:lineofbavor0
		}
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
	option = {
		name = dwarven.5002.fallback
		custom_tooltip = dwarven.5002.fallback.tt
		trigger = { always = no }
		fallback = yes
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5003 # Clan news
		}
	}
}
dwarven.5003 = { # Family informed of reflection of dwarven father
	content_source = realms_dlc
	type = character_event
	title = dwarven.5003.t
	desc = dwarven.5003.desc
	theme = family
	override_background = {
		reference = market_dwarven
	}
	
	trigger = {
		is_dwarf = yes
	}
	
	left_portrait = {
		character = root
		animation = idle
	}
	
	right_portrait = {
		character = scope:new_dorfdad
	}
	
	immediate = {
		show_as_tooltip = {
			scope:new_dorfdad = {
				# Add "reflection of" modifiers for life expectancy
				if = {
					limit = { 
						scope:my_dorfdad = character:lineofdurin1
					}
					add_character_modifier = reflection_of_durin
				}
				else_if = {
					limit = { 
						scope:my_dorfdad = character:lineofuri0
					}
					add_character_modifier = reflection_of_uri
				}
				else_if = {
					limit = { 
						scope:my_dorfdad = character:lineofdwalin0
					}
					add_character_modifier = reflection_of_dwalin
				}
				else_if = {
					limit = { 
						scope:my_dorfdad = character:lineofthrar0
					}
					add_character_modifier = reflection_of_thrar
				}
				else_if = {
					limit = { 
						scope:my_dorfdad = character:lineofsindri0
					}
					add_character_modifier = reflection_of_sindri
				}
				else_if = {
					limit = { 
						scope:my_dorfdad = character:lineofthulin0
					}
					add_character_modifier = reflection_of_thulin
				}
				else_if = {
					limit = { 
						scope:my_dorfdad = character:lineofbavor0
					}
					add_character_modifier = reflection_of_bavor
				}
				add_learning_skill = 1
				add_piety = 300
			}
		}
	}
	
	option = {
		name = dwarven.5003.a
	}
}

dwarven.5100 = { # Upon turning 16: Reincarnate realized who they are, is confirmed and renamed
	content_source = realms_dlc
	type = character_event
	title = dwarven.5100.t
	desc = dwarven.5100.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = market_dwarven
	}
	
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	right_portrait = {
		character ?= scope:my_dorfdad
	}
	
	trigger = {
		any_owned_story = {
			story_type = story_dorfdad_reincarnation
		}
		dynasty = { var:current_reincarnation ?= root }
		# Must still be of the correct dwarven clan
		dynasty.var:dorfdad.culture = { has_same_culture_heritage = root.culture }
		# He or his direct ancestor must be dynasty head
		OR = {
			is_dynast = yes
			any_ancestor = {
				is_dynast = yes
				is_alive = yes
				is_dwarf = yes
				house = root.house
			}
		}
		## He or one of his direct ancestors must hold a kingdom
		OR = {
			AND = {
				is_landed = yes
				highest_held_title_tier >= tier_kingdom
				is_dwarf = yes
			}
			any_ancestor = {
				is_alive = yes
				is_landed = yes
				highest_held_title_tier >= tier_kingdom
				is_dwarf = yes
				house = root.house
			}
		}
		is_dwarf = yes
	}
	
	immediate = {
		# Change Name, education, etc
		become_dorfdad_effect = yes
		debug_log = "Confirmed a new Dorfdad Reincarnation!"
	}
	option = {
		name = dwarven.5100.a
		every_ruler = {
			limit = {
				is_landed = yes
				NOT = { this = root }
				OR = {
					dynasty = root.dynasty
					culture = { has_same_culture_heritage = root.culture }
				}
			}
			trigger_event = dwarven.5101 # Clan news
		}
		
		# Minor news for everyone else, major news for dwarves
		if = {
			limit = { # Minor News
				has_game_rule = all_news
			}
			every_player = { #Global News Announcement
				trigger_event = {
					id = news_event.0025
					days = 5
				}
			}
		}
		else_if = {
			limit = { # Major News
				NOT = { has_game_rule = no_news }
			}
			every_player = { #Global News Announcement
				limit = { is_dwarf = yes }
				trigger_event = {
					id = dwarven.5101
					days = 5
				}
			}
		}
	}
}

dwarven.5101 = { # News of reincarnation reach close family / clan
	content_source = realms_dlc
	type = character_event
	title = dwarven.5101.t
	desc = {
		desc = dwarven.5101.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofdurin1
				}
				desc = dwarven.5101.desc.longbeard
			}
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofuri0
				}
				desc = dwarven.5101.desc.firebeard
			}
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofdwalin0
				}
				desc = dwarven.5101.desc.broadbeam
			}
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofthrar0
				}
				desc = dwarven.5101.desc.blacklock
			}
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofsindri0
				}
				desc = dwarven.5101.desc.ironfist
			}
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofthulin0
				}
				desc = dwarven.5101.desc.stiffbeard
			}
			triggered_desc = {
				trigger = { 
					scope:my_dorfdad = character:lineofbavor0
				}
				desc = dwarven.5101.desc.stonefoot
			}
			desc = dwarven.5101.desc.fallback
		}
		desc = dwarven.5101.desc.outro
	}
	theme = realm
	override_background = {
		reference = throne_room_dwarf
	}
	
	trigger = {
		is_dwarf = yes
	}
	
	left_portrait = {
		character = root
		animation = shock
	}
	
	lower_center_portrait = {
		character ?= scope:my_dorfdad
	}
	
	right_portrait = {
		character = scope:new_dorfdad
		animation = personality_honorable
	}
	
	immediate = {
		show_as_tooltip = {
			scope:new_dorfdad ?= { become_dorfdad_effect = yes }
		}
	}
	
	
	option = {
		name = {
			trigger = {
				scope:new_dorfdad = {
					is_close_or_extended_family_of = root
				}
			}
			text = dwarven.5101.a.close
		}
		name = dwarven.5101.a
		if = {
			limit = {
				is_dwarf = yes
				is_landed = yes
				scope:new_dorfdad.house = root.house
				OR = {
					is_parent_of = scope:new_dorfdad
					is_grandparent_of = scope:new_dorfdad
					is_great_grandparent_of = scope:new_dorfdad
					is_dynast = yes
				}
			}
			custom_tooltip = dwarven.5101.a.tt
			set_designated_heir = scope:new_dorfdad
		}
	}
}

dwarven.5102 = { # News of dwarf fathers death
	content_source = realms_dlc
	type = character_event
	title = dwarven.5102.t
	desc = dwarven.5102.desc
	theme = realm
	override_background = {
		reference = durins_door	
	}
	
	trigger = {
		is_dwarf = yes
	}
	
	left_portrait = {
		character = root
		animation = sadness
	}
	
	lower_center_portrait = {
		character ?= scope:my_dorfdad
	}
	
	right_portrait = {
		character = scope:new_dorfdad
	}
	
	option = {
		name = dwarven.5102.a
	}
}

##############################
### Dwarven Shaving Events ###
##############################

# on_new_holder: New High King gets the trait.
dwarven.6001 = {
	content_source = realms_dlc
	type = character_event
	title = dwarven.6001.t
	desc = dwarven.6001.desc.regular
	theme = realm

	left_portrait = {
		character = root
		animation = personality_bold
	}

	trigger = {
		scope:title = title:e_durins_folk
		NOT = { has_trait = durin_unify }
		dynasty = dynasty:dynasty_durin
	}

	immediate = {
		if = {
			limit = { scope:previous_holder = { is_alive = yes has_trait = durin_unify } }
			save_scope_as = new_holder
			scope:previous_holder = { trigger_event = dwarven.6002 }
		}
	}

	option = {
		name = dwarven.6001.a
		add_trait = durin_unify
	}
}

# If old holder is still alive, he will lose the trait.
dwarven.6002 = {
	content_source = realms_dlc
	type = character_event
	title = dwarven.6002.t
	desc = dwarven.6002.desc
	theme = realm

	left_portrait = {
		character = root
		animation = shame
	}

	immediate = {
		#This insult cannot be born! That's going in the book...
		play_music_cue = "mx_cue_prison"
	}

	trigger = {
		is_alive = yes
		has_trait = durin_unify
	}

	option = {
		name = dwarven.6002.a
		remove_trait = durin_unify
		stress_impact = {
			base = minor_stress_impact_gain
		}
	}
}

##############################
### Dwarven Shaving Events ###
##############################

#I shave someone
dwarven.9000 = { #by Brice Underhill
	content_source = realms_dlc
	type = character_event
	title = dwarven.9000.t
	desc = {
		desc = prison.1020.start.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						ai_compassion < 0
						has_relation_rival = scope:recipient
					}
				}
				desc = dwarven.9000.cruel.desc
			}
			desc = prison.1020.compassionate.desc
		}
	}
	theme = prison
	left_portrait = {
		character = scope:actor
		animation = schadenfreude
	}
	right_portrait = {
		character = scope:recipient
		animation = fear
	}

	trigger = { scope:recipient = { is_imprisoned_by = scope:actor } }

	on_trigger_fail = {
		scope:recipient = {
			if = {
				limit = { has_character_flag = is_being_tortured }
				remove_character_flag = is_being_tortured
			}
		}
	}

	immediate = {
		play_music_cue = "mx_cue_prison"
		hidden_effect = {
			#For the text
			save_court_physician_as_effect = { SCOPE_NAME = physician }
			if = {
				limit = { NOT = { exists = scope:physician } }
				random_dummy_gender_physician_effect = yes
				scope:dummy_physician_gender = { save_scope_as = physician }
			}
		}
	}

	option = {
		name = {
			trigger = {
				OR = {
					has_trait = sadistic
					has_relation_rival = scope:recipient
				}
			}
			text = prison.1020.a
		}
		name = {
			trigger = {
				NAND = {
					OR = {
						has_trait = sadistic
						has_relation_rival = scope:recipient
					}
					scope:recipient = { is_adult = yes }
				}
			}
			text = prison.1020.b
		}
		show_as_tooltip = { shave_recipient_effect = yes }
		scope:recipient = {
			trigger_event = dwarven.9001
		}
	}
}

#I am shaved
dwarven.9001 = { #by Brice Underhill
	content_source = realms_dlc
	type = character_event
	title = dwarven.9000.t
	desc = {
		desc = prison.1021.start.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = {
						OR = {
							ai_compassion < 0
							has_relation_rival = scope:recipient
						}
					}
				}
				desc = dwarven.9001.cruel.desc
			}
			desc = dwarven.9001.compassionate.desc
		}
	}
	theme = prison
	left_portrait = {
		character = root
		animation = fear

	}
	right_portrait = {
		character = scope:actor
		animation = schadenfreude
	}

	trigger = { scope:recipient = { is_imprisoned_by = scope:actor } }

	on_trigger_fail = {
		scope:recipient = {
			if = {
				limit = { has_character_flag = is_being_tortured }
				remove_character_flag = is_being_tortured
			}
		}
	}

	immediate = {
		play_music_cue = "mx_cue_prison"
	}

	option = {
		name = {
			trigger = { is_adult = yes }
			text = dwarven.9001.a
		}
		shave_recipient_effect = yes
	}

	after = {
		add_character_flag = house_feud_shaving_flag
		house_feud_torture_event_effect = yes

		trigger_event = {
			id = dwarven.9002
			years = 5
		}
	}
}

dwarven.9002 = { # Bearded Again !
	content_source = realms_dlc
	type = character_event
	title = dwarven.9002.t
	desc = dwarven.9002.desc
	theme = crown
	right_portrait = {
		character = root
		animation = happiness
	}
	
	option = { #I can finally show my face again !
		name = dwarven.9002.a
		# custom_tooltip = dwarven.9002.att # There exists no loc key for this
		
		remove_trait = beardless
		add_stress = medium_stress_loss
	}
}

################################
### Dwarven Fertility Events ###
################################

scripted_trigger dwarven_9500_youngest_brother_all_brothers_celibate_trigger = {
	is_male = yes
	NOR = {
		any_sibling = { #All brothers celibate
			is_male = yes
			NOT = { has_trait = cannot_marry }
		}
		any_sibling = { # Youngest brother
			is_male = yes
			age < root.age
		}
	}
}

dwarven.9500 = {
	content_source = realms_dlc
	type = character_event
	title = dwarven.9500.t
	desc = dwarven.9500.desc
	theme = crown

	right_portrait = {
		character = root
		animation = stress
	}

	option = { # Do not gain dwarf_refuses_marriage modifier
		name = dwarven.9500.a

		add_stress = massive_stress_impact_gain
		
		ai_chance = {
			base = 66
			modifier = {
				is_male = yes
				add = -16
			}
		}
	}

	option = { # Gain dwarf_refuses_marriage modifiers
		name = dwarven.9500.b
		trigger = {
			OR = {
				is_ai = no
				dwarven_9500_youngest_brother_all_brothers_celibate_trigger = no
			}
		}

		add_trait = cannot_marry
		
		if = {
			limit = { is_betrothed = yes }
			break_betrothal = root.betrothed
		}

		ai_chance = {
			base = 33
			modifier = {
				is_male = yes
				add = 17
			}
			modifier = {
				any_heir_to_title = { count > 0 }
				factor = 0.2
			}
		}
	}
}