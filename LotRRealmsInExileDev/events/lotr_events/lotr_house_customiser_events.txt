namespace = lotr_house_customizer

# Event that fires on game start to tell you the instructions
lotr_house_customizer.0001 = {
	type = character_event
	title = lotr_house_customizer.0001.t
	desc = lotr_house_customizer.0001.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	#I want to select an extinct house to play as.
	option = {
		name = lotr_house_customizer.0001.a
		# Fire the Extinct House List Selection
		trigger_event = {
			id = lotr_house_customizer.0002
		}
	}

	#I want to select a living house to play as.
	option = {
		name = lotr_house_customizer.0001.b
	}
}

#Region Select for Extinct Houses
lotr_house_customizer.0002 = {
	type = character_event
	title = lotr_house_customizer.0002.t
	desc = lotr_house_customizer.0002.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	#Displays Extinct Numenor Houses
	option = {
		name = lotr_house_customizer.0002.numenor
		trigger = { is_human = yes }
		trigger_event = lotr_house_customizer.0003
	}
	option = {
		name = lotr_house_customizer.0002.gondor
		trigger = { is_human = yes }
		trigger_event = lotr_house_customizer.0004
	}
	option = {
		name = lotr_house_customizer.0002.arnor
		trigger = { is_human = yes }
		trigger_event = lotr_house_customizer.0005
	}

	option = {
		name = lotr_house_customizer.0002.dwarves
		trigger = { is_dwarf = yes }
		trigger_event = lotr_house_customizer.0006
	}

	option = {
		name = lotr_house_customizer.0002.elves
		trigger = { is_elf = yes }
		trigger_event = lotr_house_customizer.0007
	}
}

### REGION SELECTION ###

#Select Extinct Numenor
lotr_house_customizer.0003 = {
	type = character_event
	title = lotr_house_customizer.0003.t
	desc = lotr_house_customizer.0003.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	#Elros
	option = {
		name = lotr_house_customizer.0003.elros
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofelros1 }
			is_human = yes
		}
		character:lineofelros25 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Andunie
	option = {
		name = lotr_house_customizer.0003.andunie
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofelatan2 }
			is_human = yes
		}
		character:lineofelatan19 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Ciryatirionath
	option = {
		name = lotr_house_customizer.0003.ciryatirionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:ciryamirdad }
			is_human = yes
		}
		character:lineofciryamir6 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}
}

#Select Extinct Gondor
lotr_house_customizer.0004 = {
	type = character_event
	title = lotr_house_customizer.0004.t
	desc = lotr_house_customizer.0004.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	#Anárionath
	option = {
		name = lotr_house_customizer.0004.anarioni
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofanarion1 }
			is_human = yes
		}
		character:lineofanarion51 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Oronturioni
	option = {
		name = lotr_house_customizer.0004.oronturioni
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineoforontur1 }
			is_human = yes
		}
		character:lineoforontur41 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Roquendilioni
	option = {
		name = lotr_house_customizer.0004.roquendil
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofroquendil1 }
			is_human = yes
		}
		character:lineofroquendil49 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Ciryatanioni
	option = {
		name = lotr_house_customizer.0004.ciryatanioni
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofciryaheri0 }
			is_human = yes
		}
		character:lineofciryaheri39 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Castamir
	option = {
		name = lotr_house_customizer.0004.castamirioni
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofanarion25 }
			is_human = yes
		}
		character:lineofcastamir53 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Vëanturionath
	option = {
		name = lotr_house_customizer.0004.veanturionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineveantur1 }
			is_human = yes
		}
		character:predolamroth40 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Astaldanossë
	option = {
		name = lotr_house_customizer.0004.astaldanosse
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofingoldur1 }
			is_human = yes
		}
		character:lineofingoldur23a3a1 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Gundorionath
	option = {
		name = lotr_house_customizer.0004.gundorionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofgundor1 }
			is_human = yes
		}
		character:lineofgundor38 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	#Ostomirionath
	option = {
		name = lotr_house_customizer.0004.ostomirionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineostomir1 }
			is_human = yes
		}
		character:lineostomir28 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}
}

#Select Extinct Arnor
lotr_house_customizer.0005 = {
	type = character_event
	title = lotr_house_customizer.0005.t
	desc = lotr_house_customizer.0005.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	# Elendil
	option = {
		name = lotr_house_customizer.0005.elendilioni
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofelendil }
		}
		character:lineofelendil = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Silivnir
	option = {
		name = lotr_house_customizer.0005.silivnirion
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofsilivnir1 }
		}
		character:lineofsilivnir1 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Galadhionath
	option = {
		name = lotr_house_customizer.0005.galadhionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:linerhudaur1 }
		}
		character:linerhudaur1 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Thorondorionath
	option = {
		name = lotr_house_customizer.0005.thorondorionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:linecardolan1 }
		}
		character:lineofcardolan8 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Aranborionath
	option = {
		name = lotr_house_customizer.0005.aranborionath
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofaranbor2 }
		}
		character:lineofaranbor5 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Caladir
	option = {
		name = lotr_house_customizer.0005.caladir
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofcaladir1 }
		}
		character:lineofcaladir45 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Eketyaion
	option = {
		name = lotr_house_customizer.0005.eketyaion
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofeketya1 }
		}
		character:lineofeketya85 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}
}

#Select Extinct Dwarves
lotr_house_customizer.0006 = {
	type = character_event
	title = lotr_house_customizer.0006.t
	desc = lotr_house_customizer.0006.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	# Sindri
	option = {
		name = lotr_house_customizer.0006.sindri
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofsindriI }
		}
		character:lineofsindri88 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Thulin
	option = {
		name = lotr_house_customizer.0006.thulin
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofthulinI }
		}
		character:lineofthulin0e = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Bavor
	option = {
		name = lotr_house_customizer.0006.bavor
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofbavorI }
		}
		character:lineofbavor88 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Az-Ganur
	option = {
		name = lotr_house_customizer.0006.azganur
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofazganur1 }
		}
		character:lineofazganur27 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Telchar
	option = {
		name = lotr_house_customizer.0006.telchar
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineoftelchar1 }
		}
		character:lineoftelchar1 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Narvi
	option = {
		name = lotr_house_customizer.0006.narvi
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofnarvi }
		}
		character:lineofnarvi = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Gamil Zirak
	option = {
		name = lotr_house_customizer.0006.gamil_zirak
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofgamilzirak }
		}
		character:lineofgamilzirak = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Dourhand
	option = {
		name = lotr_house_customizer.0006.dourhand
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofdourhand1 }
		}
		character:lineofdourhand17 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Bronzebeard
	option = {
		name = lotr_house_customizer.0006.bronzebeard
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofbronzebeard1 }
		}
		character:lineofbronzebeard18 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Grúni
	option = {
		name = lotr_house_customizer.0006.gruni
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:linegruni1 }
		}
		character:linegruni30 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Back Option
	option = {
		name = lotr_house_customizer.back_option
		trigger_event = {
			id = lotr_house_customizer.0002
		}
	}
}

#Select Extinct Elves
lotr_house_customizer.0007 = {
	type = character_event
	title = lotr_house_customizer.0007.t
	desc = lotr_house_customizer.0007.desc

	theme = family

	override_background = {
		reference = physicians_study
	}

	right_portrait = {
		character = root
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	# Gil-Galad
	option = {
		name = lotr_house_customizer.0007.gilgalad
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:linefinwe41 }
		}
		character:linefinwe41 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}

	# Amdir
	option = {
		name = lotr_house_customizer.0007.amdir
		trigger = {
			lotr_is_house_extinct_history_trigger = { FOUNDER = character:lineofamdir1 }
		}
		character:lineofamdir2 = {
			save_scope_as = hc_selection
		}
		trigger_event = lotr_house_customizer.0020
	}
}

######################################################
### HOUSE CONVERSION AND CHARACTER RELATION EVENTS ###
######################################################

# This event handles the EXTINCT HOUSE conversion
lotr_house_customizer.0020 = {
	type = character_event
	title = lotr_house_customizer.0020.t
	desc = lotr_house_customizer.0020.desc

	theme = family

	override_background = {
		reference = study
	}

	left_portrait = {
		character = root
		animation = throne_room_writer
	}

	right_portrait = {
		character = scope:hc_selection
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
	}

	#I want to play as their sibling
	option = {
		name = lotr_house_customizer.0020.a
		trigger = {
			OR = {
				scope:hc_selection.mother ?= { is_lotr_adult = yes }
				scope:hc_selection.father ?= { is_lotr_adult = yes }
			}
			OR = {
				root = { same_race = { TARGET = scope:hc_selection.mother } }
				root = { same_race = { TARGET = scope:hc_selection.father } }
			}
		}
		if = { # You have the bastard trait
			limit = {
				exists = scope:hc_selection.father
				scope:hc_selection.father.primary_title.tier >= scope:hc_selection.mother.primary_title.tier
				has_trait = bastard
			}
			set_house = scope:hc_selection.father.house
			set_father = scope:hc_selection.father
		}
		else_if = { # You selected a father
			limit = {
				exists = scope:hc_selection.father
				scope:hc_selection.father.primary_title.tier >= scope:hc_selection.mother.primary_title.tier
			}
			set_house = scope:hc_selection.father.house
			set_father = scope:hc_selection.father
			if = { # Check for and set valid mother
				limit = { scope:hc_selection.mother ?= { is_lotr_adult = yes } }
				set_mother = scope:hc_selection.mother
			}
		}
		else = { # You selected a mother
			set_house = scope:hc_selection.mother.house
			set_mother = scope:hc_selection.mother
			if = { # Check for and set valid father
				limit = { scope:hc_selection.father ?= { is_lotr_adult = yes } }
				set_father = scope:hc_selection.father
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = {	NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}
		hidden_effect = { remove_trait = house_customizer }
		#trigger_event = lotr_house_customizer.0022

		# Remind them of the option
		show_as_unavailable = { always = yes }
	}

	#I want to play as their child
	option = {
		name = lotr_house_customizer.0020.b
		trigger = { scope:hc_selection = { is_lotr_adult = yes } }
		if = { # You have the bastard trait
			limit = {
				scope:hc_selection = { is_male = yes }
				has_trait = bastard
			}
			set_house = scope:hc_selection.house
			set_father = scope:hc_selection
		}
		else_if = { # You selected a father
			limit = { scope:hc_selection = { is_male = yes } }
			set_house = scope:hc_selection.house
			set_father = scope:hc_selection
			if = {
				limit = { # Check for and set valid mother
					scope:hc_selection.primary_spouse ?= {
						is_female = yes
						is_lotr_adult = yes
					}
				}
				set_mother = scope:hc_selection.primary_spouse
			}
		}
		else = { # You selected a mother
			set_house = scope:hc_selection.house
			set_mother = scope:hc_selection
			if = {
				limit = { # Check for and set valid father
					scope:hc_selection.primary_spouse ?= {
						is_male = yes
						is_lotr_adult = yes
					}
				}
				set_father = scope:hc_selection.primary_spouse
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = { NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}
		hidden_effect = { remove_trait = house_customizer }
		# Remind them of the option
		show_as_unavailable = { always = yes }
	}

	#I want to play as their relative
	option = {
		name = lotr_house_customizer.0020.c
		trigger = {
			scope:hc_selection = {
				any_close_or_extended_family_member = {
					even_if_dead = yes
					is_lotr_adult = yes
					house = scope:hc_selection.house
				}
			}
		}
		add_character_flag = relative_pop_extinct
		trigger_event = lotr_house_customizer.0200
	}

	# I want to choose a different house
	option = {
		name = lotr_house_customizer.0020.back
		custom_tooltip = lotr_house_customizer.0020.back.tt
		trigger_event = lotr_house_customizer.0002
	}

	after = {
		if = {
			limit = { is_dwarf = yes }
			set_culture = scope:hc_selection.culture
		}
	}
}

# This event handles the LIVING HOUSE conversion (specifically, from the interaction)
lotr_house_customizer.0021 = {
	type = character_event
	title = lotr_house_customizer.0020.t
	desc = lotr_house_customizer.0020.desc

	theme = family

	override_background = {
		reference = study
	}

	left_portrait = {
		character = root
		animation = throne_room_writer
	}

	right_portrait = {
		character = scope:hc_selection
		animation = throne_room_writer
	}

	immediate = {
		play_music_cue = "mx_cue_succession"
		scope:recipient = { save_scope_as = hc_selection }
		# Mother may be needed, so generate one if one doesn't exist
		if = {
			limit = { NOT = { exists = scope:hc_random_mother } }
			create_character = {
				template = generic_female_peasant_character
				culture = root.culture
				employer = root
				age = root.appropriate_parent_age
				gender = female
				save_scope_as = hc_random_mother
				after_creation = { copy_inheritable_appearance_from = root }
			}
		}
		# Father may be needed, so generate one if one doesn't exist
		if = {
			limit = { NOT = { exists = scope:hc_random_father } }
			create_character = {
				template = generic_peasant_character
				culture = root.culture
				employer = root
				age = root.appropriate_parent_age
				gender = male
				save_scope_as = hc_random_father
				after_creation = { copy_inheritable_appearance_from = root }
			}
		}
		if = { # Scope for localization
			limit = { scope:hc_selection = { is_male = yes } }
			scope:hc_random_mother = { save_scope_as = second_parent }
		}
		if = { # Scope for localization
			limit = { scope:hc_selection = { is_female = yes } }
			scope:hc_random_father = { save_scope_as = second_parent }
		}
	}

	#I want to play as their sibling
	option = {
		name = lotr_house_customizer.0020.a
		trigger = {
			OR = {
				exists = scope:hc_selection.mother
				exists = scope:hc_selection.father
			}
			OR = {
				scope:hc_selection.mother ?= {
					OR = {
						can_be_parent_of = root
						#For some reason can_be_parent_of doesn't work with female characters?
						16 <= {
							value = scope:hc_selection.mother.age
							subtract = root.age
						}
					}
				}
				scope:hc_selection.father ?= { can_be_parent_of = root }
			}
		}
		if = { # You have the bastard trait
			limit = {
				scope:hc_selection.father.primary_title.tier >= scope:hc_selection.mother.primary_title.tier
				has_trait = bastard
			}
			set_house = scope:hc_selection.father.house
			set_father = scope:hc_selection.father
			set_mother = scope:hc_random_mother
			# Other random parent no longer needed
			hidden_effect = { scope:hc_random_father = { death = { death_reason = death_disappearance } } }
		}
		else_if = { # You selected a father
			limit = { scope:hc_selection.father.primary_title.tier >= scope:hc_selection.mother.primary_title.tier }
			set_house = scope:hc_selection.father.house
			set_father = scope:hc_selection.father
			if = { # Check for and set valid mother
				limit = {
					scope:hc_selection.mother ?= {
						OR = {
							can_be_parent_of = root
							#For some reason can_be_parent_of doesn't work with female characters?
							16 <= {
								value = scope:hc_selection.mother.age
								subtract = root.age
							}
						}
					}
				}
				set_mother = scope:hc_selection.mother
			}
			hidden_effect = { # Random parents no longer needed
				scope:hc_random_mother = { death = { death_reason = death_disappearance } }
				scope:hc_random_father = { death = { death_reason = death_disappearance } }
			}
		}
		else = { # You selected a mother
			set_house = scope:hc_selection.mother.house
			set_mother = scope:hc_selection.mother
			if = { # Check for and set valid father
				limit = { scope:hc_selection.father ?= { can_be_parent_of = root } }
				set_father = scope:hc_selection.father
			}
			hidden_effect = { # Random parents no longer needed
				scope:hc_random_father = { death = { death_reason = death_disappearance } }
				scope:hc_random_mother = { death = { death_reason = death_disappearance } }
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = { NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}

		hidden_effect = { remove_trait = house_customizer }

		# Remind them of the option
		show_as_unavailable = { always = yes }
	}

	#I want to play as their child
	option = {
		name = lotr_house_customizer.0020.b
		trigger = {
			scope:hc_selection = {
				OR = {
					can_be_parent_of = root
					#For some reason can_be_parent_of doesn't work with female characters?
					16 <= {
						value = scope:hc_selection.age
						subtract = root.age
					}
				}
			}
		}
		if = { # You selected a father
			limit = { scope:hc_selection = { is_male = yes } }
			set_house = scope:hc_selection.house
			set_father = scope:hc_selection

			hidden_effect = { # Random parents no longer needed
				scope:hc_random_mother = { death = { death_reason = death_disappearance } }
				scope:hc_random_father = { death = { death_reason = death_disappearance } }
			}
		}
		else = { # You selected a mother
			set_house = scope:hc_selection.house
			set_mother = scope:hc_selection

			hidden_effect = { # Random parents no longer needed
				scope:hc_random_mother = { death = { death_reason = death_disappearance } }
				scope:hc_random_father = { death = { death_reason = death_disappearance } }
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = { NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}
		hidden_effect = { remove_trait = house_customizer }

		# Remind them of the option
		show_as_unavailable = { always = yes }
	}

	#I want to play as their child but have a parent assigned to me
	option = {
		name = lotr_house_customizer.0020.bb
		trigger = {
			scope:hc_selection = {
				OR = {
					can_be_parent_of = root
					#For some reason can_be_parent_of doesn't work with female characters?
					16 <= {
						value = scope:hc_selection.age
						subtract = root.age
					}
				}
			}
		}
		if = { # You have the bastard trait
			limit = {
				scope:hc_selection = { is_male = yes }
				has_trait = bastard
			}
			set_house = scope:hc_selection.house
			set_father = scope:hc_selection
			set_mother = scope:hc_random_mother
			# Other random parent no longer needed
			hidden_effect = { scope:hc_random_father = { death = { death_reason = death_disappearance } } }
		}
		else_if = { # You selected a father
			limit = { scope:hc_selection = { is_male = yes } }
			set_house = scope:hc_selection.house
			set_father = scope:hc_selection
			if = {
				limit = { # Check for and set valid mother
					scope:hc_selection.primary_spouse ?= {
						is_female = yes
						OR = {
							can_be_parent_of = root
							#For some reason can_be_parent_of doesn't work with female characters?
							16 <= {
								value = scope:hc_selection.primary_spouse.age
								subtract = root.age
							}
						}
					}
				}
				set_mother = scope:hc_selection.primary_spouse

				hidden_effect = { # Random parents no longer needed
					scope:hc_random_mother = { death = { death_reason = death_disappearance } }
					scope:hc_random_father = { death = { death_reason = death_disappearance } }
				}
			}
			else_if = { # Otherwise set random mother
				limit = {
					scope:hc_selection = {
						OR = {
							is_married = no
							primary_spouse = { NOT = { can_be_parent_of = root } }
						}
					}
				}
				set_mother = scope:hc_random_mother
				# Other random parent no longer needed
				hidden_effect = { scope:hc_random_father = { death = { death_reason = death_disappearance } } }
			}
		}
		else = { # You selected a mother
			set_house = scope:hc_selection.house
			set_mother = scope:hc_selection
			if = {
				limit = { # Check for and set valid father
					scope:hc_selection.primary_spouse ?= {
						is_male = yes
						can_be_parent_of = root
					}
				}
				set_father = scope:hc_selection.primary_spouse

				hidden_effect = { # Random parents no longer needed
					scope:hc_random_father = { death = { death_reason = death_disappearance } }
					scope:hc_random_mother = { death = { death_reason = death_disappearance } }
				}
			}
			else_if = { # Otherwise set random father
				limit = {
					scope:hc_selection = {
						OR = {
							is_married = no
							primary_spouse = { NOT = { can_be_parent_of = root } }
						}
					}
				}
				set_father = scope:hc_random_father
				# Other random parent no longer needed
				hidden_effect = { scope:hc_random_mother = { death = { death_reason = death_disappearance } } }
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = { NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}
		hidden_effect = { remove_trait = house_customizer }

		# Remind them of the option
		show_as_unavailable = { always = yes }
	}

	#I want to play as their relative
	option = {
		name = lotr_house_customizer.0020.c
		trigger = {
			scope:hc_selection = {
				any_close_or_extended_family_member = {
					even_if_dead = yes
					is_lotr_adult = yes
					house = scope:hc_selection.house
				}
			}
		}
		add_character_flag = relative_pop_living
		trigger_event = lotr_house_customizer.0200

		hidden_effect = { # Random parents no longer needed
			scope:hc_random_mother = { death = { death_reason = death_disappearance } }
			scope:hc_random_father = { death = { death_reason = death_disappearance } }
		}
	}

	# I want to choose a different house
	option = {
		name = lotr_house_customizer.0020.back
		custom_tooltip = lotr_house_customizer.0021.back.tt
		trigger_event = lotr_house_customizer.0001
		hidden_effect = { # Random parents no longer needed
			scope:hc_random_mother = { death = { death_reason = death_disappearance } }
			scope:hc_random_father = { death = { death_reason = death_disappearance } }
		}
	}
}

lotr_house_customizer.0200 = {
	type = character_event
	title = lotr_house_customizer.0200.t
	desc = lotr_house_customizer.0200.desc
	theme = family
	override_background = {
		reference = study
	}
	left_portrait = {
		character = root
		animation = throne_room_writer
	}
	right_portrait = scope:hc_selection

#	widget = {
#		is_shown = { is_ai = no }
#		gui = "agot_character_selection_two_options"
#		container = "custom_widgets_container"
#	}

	immediate = {
		# Populate List
		if = { # You chose extinct
			limit = { has_character_flag = relative_pop_extinct }
			scope:hc_selection = {
				every_close_or_extended_family_member = {
					even_if_dead = yes
					limit = {
						is_lotr_adult = yes
						house = scope:hc_selection.house
					}
					root = {
						add_to_variable_list = {
							name = possible_characters
							target = prev
						}
					}
				}
			}
		}
		else_if = { # You chose living
			limit = { has_character_flag = relative_pop_living }
			scope:hc_selection = {
				every_close_or_extended_family_member = {
					even_if_dead = yes
					limit = {
						OR = {
							can_be_parent_of = root
							#For some reason can_be_parent_of doesn't work with female characters?
							16 <= {
								value = root.age
								subtract = age
							}
						}
						is_lotr_adult = yes
						house = scope:hc_selection.house
					}
					root = {
						add_to_variable_list = {
							name = possible_characters
							target = prev
						}
					}
				}
			}
		}
		# Order List
		ordered_in_list = {
			variable = possible_characters
			order_by = age
			root = { set_variable = { name = si_selected_character value = prev } }
			save_scope_as = hc_random_relative_selection
		}
	}

	option = {
		name = "lotr_house_customizer.0200.ex"
		trigger = { has_character_flag = relative_pop_extinct }
		# Ordered List Maintenance
		var:si_selected_character = { save_scope_as = hc_random_relative_selection }
		clear_variable_list = possible_characters
		# House Customizer Maintenance
		set_house = scope:hc_random_relative_selection.house

		if = { # You selected a father
			limit = { scope:hc_random_relative_selection = { is_male = yes } }
			set_father = scope:hc_random_relative_selection
			if = {
				limit = { # Check for and set valid mother
					scope:hc_random_relative_selection.primary_spouse ?= {
						is_female = yes
						is_lotr_adult = yes
					}
				}
				set_mother = scope:hc_random_relative_selection.primary_spouse
			}
		}
		else = { # You selected a mother
			set_mother = scope:hc_random_relative_selection
			if = {
				limit = { # Check for and set valid father
					scope:hc_random_relative_selection.primary_spouse ?= {
						is_male = yes
						is_lotr_adult = yes
					}
				}
				set_father = scope:hc_random_relative_selection.primary_spouse
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = { NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}
		remove_character_flag = relative_pop_extinct
		hidden_effect = { remove_trait = house_customizer }
	}

	option = {
		name = "lotr_house_customizer.0200.li"
		trigger = { has_character_flag = relative_pop_living }
		# Ordered List Maintenance
		var:si_selected_character = { save_scope_as = hc_random_relative_selection }
		clear_variable_list = possible_characters
		# House Customizer Maintenance
		set_house = scope:hc_random_relative_selection.house #Set's the player's house to the selection's house

		if = { # You have the bastard trait
			limit = {
				scope:hc_random_relative_selection = { is_male = yes }
				has_trait = bastard
			}
			set_father = scope:hc_random_relative_selection
		}
		else_if = { # You selected a father
			limit = { scope:hc_random_relative_selection = { is_male = yes } }
			set_father = scope:hc_random_relative_selection
			if = {
				limit = { # Check for and set valid mother
					scope:hc_random_relative_selection.primary_spouse ?= {
						is_female = yes
						OR = {
							can_be_parent_of = root
							#For some reason can_be_parent_of doesn't work with female characters?
							16 <= {
								value = scope:hc_random_relative_selection.primary_spouse.age
								subtract = root.age
							}
						}
					}
				}
				set_mother = scope:hc_random_relative_selection.primary_spouse
			}
		}
		else = { # You selected a mother
			set_mother = scope:hc_random_relative_selection
			if = {
				limit = { # Check for and set valid father
					scope:hc_random_relative_selection.primary_spouse ?= {
						is_male = yes
						can_be_parent_of = root
					}
				}
				set_father = scope:hc_random_relative_selection.primary_spouse
			}
		}

		if = { #If any child is not the same house
			limit = { any_child = { NOT = { house = root.house } } }
			every_child = { #Then we scope to every possible child and set their house as YOUR house.
				limit = { NOT = { house = root.house } }
				set_house = root.house
			}
		}
		remove_character_flag = relative_pop_living
		hidden_effect = { remove_trait = house_customizer }
	}

	# On second thought - extinct
	option = {
		name = lotr_house_customizer.0200.back
		custom_tooltip = lotr_house_customizer.0200.back.tt
		trigger = { has_character_flag = relative_pop_extinct }
		clear_variable_list = possible_characters
		remove_character_flag = relative_pop_extinct
		trigger_event = lotr_house_customizer.0020
	}

	# On second thought - living
	option = {
		name = lotr_house_customizer.0200.back
		custom_tooltip = lotr_house_customizer.0200.back.tt
		trigger = { has_character_flag = relative_pop_living }
		clear_variable_list = possible_characters
		remove_character_flag = relative_pop_living
		trigger_event = lotr_house_customizer.0021
	}
}