namespace = lotr_ormal_storms

#####
#
# 0001 - 0010  ==> Intro / Start events
#
# 0011 - 9999  ==> Flavour events
#
#####

###################################
# Ormal Storms Intro Event
# 0001
###################################

lotr_ormal_storms.0001 = {
	content_source = realms_dlc
	type = character_event
	window = fullscreen_event
	title = lotr_ormal_storms.0001.t
	desc = lotr_ormal_storms.0001.desc
	theme = realm
	trigger = { # we need to prevent this from firing for all players when a new player joins in MP
		is_ai = no
		NOT = { has_variable = lotr_ormal_storms_0001_var }
 	}
	override_background = { reference = docks }
	override_sound = { reference = "event:/DLC/FP2/SFX/UI/fp2_struggle_ui_intro_animate" }

	cooldown = { years = 100 }

	widgets = {
		widget = {
 			gui = "event_window_widget_situation_info_the_great_steppe"
 			container = "dynamic_content_widget"
 			controller = situation_info
 			setup_scope = { situation:lotr_ormal_storms = { save_scope_as = situation } }
		}
	}
	immediate = {
		set_variable = lotr_ormal_storms_0001_var
		save_scope_value_as = {
			name = start
			value = yes
		}
	}
	option = {
		name = lotr_ormal_storms.0001.a
		clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_start_select"
	}
}

### Start Phase ###

# Event giving information about current season. Useful for if we have multiple startdates with different seasons.

lotr_ormal_storms.0002 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0002.t
	theme = realm
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_fair_weather_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.fair_weather
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_changeable_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.changeable
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_storm_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.storm
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_osses_fury_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.osses_fury
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_uinens_blessing_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.uinens_blessing
			}
		}
	}
	override_effect_2d = {
		reference = rain
		trigger = {
			OR = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_ormal_storm_season
						situation_sub_region_has_county = root.location.county
					}
				}
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_ormal_osses_fury_season
						situation_sub_region_has_county = root.location.county
					}
				}
			}
		}
	}
	override_effect_2d = {
		reference = legend_glow
		trigger = {
			any_character_situation = {
				any_situation_sub_region = {
					sub_region_current_phase = situation_ormal_uinens_blessing_season
					situation_sub_region_has_county = root.location.county
				}
			}
		}
	}

	trigger = {
		NOT = { has_variable = lotr_ormal_storms_game_start_var }
	}
	
	option = {
		name = lotr_ormal_storms.0002.a
		
		ai_chance = {
			base = 100
		}
	}
}

# Shipwreck found on your shores (storm seasons)
lotr_ormal_storms.0011 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0011.t
	desc = lotr_ormal_storms.0011.desc
	theme = sailing
	override_background = { reference = docks }
	override_effect_2d = { reference = rain }
	
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				OR = {
					sub_region_current_phase = situation_ormal_storm_season
					sub_region_current_phase = situation_ormal_osses_fury_season
				}
				situation_sub_region_has_county = root.location.county
			}
		}
	}

	cooldown = { years = 10 }

	immediate = {
		random_county = {
			limit = {
				culture != root.culture
				geographical_region = special_region_bay_of_ormal_coastal
			}
			culture = { save_scope_as = castaway_culture }
			faith = { save_scope_as = castaway_faith }
		}
		create_character = { # Create a sailor
			employer = scope:host
			gender_female_chance = 30
			template = castaway_character
			faith = scope:castaway_faith
			culture = scope:castaway_culture
			trait = lifestyle_mariner
			save_scope_as = castaway_sailor
		}
		random_sub_realm_county = {
			limit = {
				geographical_region = special_region_bay_of_ormal_coastal
				any_county_province = {
					is_coastal = yes
				}
				holder = root
			}
			limit = {
				geographical_region = special_region_bay_of_ormal_coastal
				any_county_province = {
					is_coastal = yes
				}
			}
			save_scope_as = coastal_county
		}
	}

	option = { #Try to save what's left of the crew
		name = lotr_ormal_storms.0011.a
		custom_tooltip = lotr_ormal_storms.0011.a.desc
		add_piety = minor_piety_value
		duel = {
			skill = prowess
			value = high_skill_rating
			# Save the crew
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = lotr_ormal_storms.0011.a.tt.success
				send_interface_toast = {
					title = lotr_ormal_storms.0011.a.tt.success
					left_icon = scope:castaway_sailor
					add_prestige = medium_prestige_gain
					add_short_term_gold = medium_gold_value
					scope:castaway_sailor = {
						add_to_court_and_entourage_effect = yes
						add_opinion = {
							target = root
							modifier = thankful_opinion
							opinion = 75
						}
					}
				}
			}
			# Fail, and catch a cold
			45 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 5
				desc = lotr_ormal_storms.0011.a.tt.failure
				send_interface_toast = {
					title = lotr_ormal_storms.0011.a.tt.failure
					left_icon = scope:castaway_sailor
					add_prestige = minor_prestige_loss
					contract_disease_notify_effect = { DISEASE = ill }
					scope:castaway_sailor = {
						death = { death_reason = death_drowned }
					}
				}
			}
			# Fail, and die
			5 = {
				trigger = { cannot_be_killed = no }
				desc = lotr_ormal_storms.0011.a.tt.critical_failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
				}
				root = {
					send_interface_toast = {
						title = lotr_ormal_storms.0011.a.tt.critical_failure
						left_icon = root
						right_icon = scope:castaway_sailor
						death = {
							death_reason = death_drowned
						}
						scope:castaway_sailor = {
							death = { death_reason = death_drowned }
						}
					}
				}
			}	
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
			callous = minor_stress_impact_gain
			sadistic = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			compassionate = medium_stress_impact_loss
			brave = medium_stress_impact_loss
			just = minor_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
  				ai_compassion = 0.5
				ai_boldness = 0.5
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = craven
					has_trait = paranoid
				}
			}
		}
	}

	option = { #Try to salvage the cargo
		name = lotr_ormal_storms.0011.b
		duel = {
			skills = { stewardship learning }
			value = decent_skill_rating
			# Save the cargo
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = lotr_ormal_storms.0011.b.tt.success
				send_interface_toast = {
					title = lotr_ormal_storms.0011.b.tt.success
					left_icon = root
					add_short_term_gold = minor_gold_value
					scope:coastal_county = {
						add_county_modifier = {
							modifier = lotr_ormal_storms_exotic_goods_modifier
							years = 5
						}
					}
				}
			}
			# The ship sinks before you can salvage anything
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 5
				desc = lotr_ormal_storms.0011.a.tt.failure
				send_interface_toast = {
					title = lotr_ormal_storms.0011.tt.failure
					left_icon = scope:castaway_sailor
					remove_short_term_gold = minor_gold_value
				}
			}
		}
		scope:castaway_sailor = {
			death = { death_reason = death_drowned }
		}
		stress_impact = {
			arrogant = minor_stress_impact_loss
			callous = minor_stress_impact_loss
			sadistic = medium_stress_impact_loss
			compassionate = medium_stress_impact_gain
			greedy = medium_stress_impact_loss
			generous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
  				ai_compassion = -0.5
				ai_greed = 0.5
			}
		}
	}
}

# Castaway sailor (all seasons)
lotr_ormal_storms.0020 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0020.t
	desc = lotr_ormal_storms.0020.desc
	theme = diplomacy

	trigger = {
		any_character_situation = {
			situation_sub_region_has_county = root.location.county
		}
	}

	cooldown = { years = 10 }

	option = {
		name = lotr_ormal_storms.0020.a
	}
}

# Miraculous fishing (fair weather)
lotr_ormal_storms.0030 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0030.t
	desc = lotr_ormal_storms.0030.desc
	theme = stewardship
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0030.a
	}
}

# Tornado (storm seasons)
lotr_ormal_storms.0040 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0040.t
	desc = lotr_ormal_storms.0040.desc
	theme = dread
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_storm_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0040.a
	}
}

# Exotic goods reach port (fair weather)
lotr_ormal_storms.0050 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0050.t
	desc = lotr_ormal_storms.0050.desc
	theme = stewardship_wealth_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0050.a
	}
}

# Tidal wave (extreme storm)
lotr_ormal_storms.0060 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0060.t
	desc = lotr_ormal_storms.0060.desc
	theme = dread
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_osses_fury_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0060.a
	}
}

# Military fleet taken in storm (storm seasons)
lotr_ormal_storms.0070 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0070.t
	desc = lotr_ormal_storms.0070.desc
	theme = martial_strategy_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_storm_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0070.a
	}
}

# Distant guano island discovered (fair weather)
lotr_ormal_storms.0080 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0080.t
	desc = lotr_ormal_storms.0080.desc
	theme = stewardship_domain_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0080.a
	}
}

# Whale flock spotted (fair weather)
lotr_ormal_storms.0090 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0090.t
	desc = lotr_ormal_storms.0090.desc
	theme = wanderer_journey_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0090.a
	}
}