namespace = lotr_ormal_storms

#####
#
# 0001 - 0010  ==> Intro / Start events
#
# 0011 - 9999  ==> Flavour events
#
#####

###################################
# Ormal Storms Intro Event
# 0001
###################################

lotr_ormal_storms.0001 = {
	content_source = realms_dlc
	type = character_event
	window = fullscreen_event
	title = lotr_ormal_storms.0001.t
	desc = lotr_ormal_storms.0001.desc
	theme = realm
	trigger = { # we need to prevent this from firing for all players when a new player joins in MP
		is_ai = no
		NOT = { has_variable = lotr_ormal_storms_0001_var }
 	}
	override_background = { reference = docks }
	override_sound = { reference = "event:/DLC/FP2/SFX/UI/fp2_struggle_ui_intro_animate" }

	cooldown = { years = 100 }

	widgets = {
		widget = {
 			gui = "event_window_widget_situation_info_the_great_steppe"
 			container = "dynamic_content_widget"
 			controller = situation_info
 			setup_scope = { situation:lotr_ormal_storms = { save_scope_as = situation } }
		}
	}
	immediate = {
		set_variable = lotr_ormal_storms_0001_var
		save_scope_value_as = {
			name = start
			value = yes
		}
	}
	option = {
		name = lotr_ormal_storms.0001.a
		clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_start_select"
	}
}

### Start Phase ###

# Event giving information about current season. Useful for if we have multiple startdates with different seasons.

lotr_ormal_storms.0002 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0002.t
	theme = realm
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_fair_weather_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.fair_weather
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_changeable_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.changeable
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_storm_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.storm
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_osses_fury_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.desc.osses_fury
			}
			triggered_desc = {
				trigger = {
					any_character_situation = {
						any_situation_sub_region = {
							sub_region_current_phase = situation_ormal_uinens_blessing_season
							situation_sub_region_has_county = root.capital_county
						}
					}
				}
				desc = lotr_ormal_storms.0002.uinens_blessing
			}
		}
	}
	override_effect_2d = {
		reference = rain
		trigger = {
			OR = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_ormal_storm_season
						situation_sub_region_has_county = root.location.county
					}
				}
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_ormal_osses_fury_season
						situation_sub_region_has_county = root.location.county
					}
				}
			}
		}
	}
	override_effect_2d = {
		reference = legend_glow
		trigger = {
			any_character_situation = {
				any_situation_sub_region = {
					sub_region_current_phase = situation_ormal_uinens_blessing_season
					situation_sub_region_has_county = root.location.county
				}
			}
		}
	}

	trigger = {
		NOT = { has_variable = lotr_ormal_storms_game_start_var }
	}
	
	option = {
		name = lotr_ormal_storms.0002.a
		
		ai_chance = {
			base = 100
		}
	}
}

# Shipwreck found on your shores (storm seasons)
lotr_ormal_storms.0011 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0011.t
	desc = lotr_ormal_storms.0011.desc
	theme = travel_pilgrimage
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_storm_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}

	option = {
		name = lotr_ormal_storms.0011.a
	}
}

# Castaway sailor (all seasons)
lotr_ormal_storms.0020 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0020.t
	desc = lotr_ormal_storms.0020.desc
	theme = diplomacy
	option = {
		name = lotr_ormal_storms.0020.a
	}
}

# Miraculous fishing (fair weather)
lotr_ormal_storms.0030 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0030.t
	desc = lotr_ormal_storms.0030.desc
	theme = stewardship
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0030.a
	}
}

# Tornado (storm seasons)
lotr_ormal_storms.0040 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0040.t
	desc = lotr_ormal_storms.0040.desc
	theme = dread
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_storm_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0040.a
	}
}

# Exotic goods reach port (fair weather)
lotr_ormal_storms.0050 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0050.t
	desc = lotr_ormal_storms.0050.desc
	theme = stewardship_wealth_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0050.a
	}
}

# Tidal wave (extreme storm)
lotr_ormal_storms.0060 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0060.t
	desc = lotr_ormal_storms.0060.desc
	theme = dread
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_osses_fury_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0060.a
	}
}

# Military fleet taken in storm (storm seasons)
lotr_ormal_storms.0070 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0070.t
	desc = lotr_ormal_storms.0070.desc
	theme = martial_strategy_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_storm_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0070.a
	}
}

# Distant guano island discovered (fair weather)
lotr_ormal_storms.0080 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0080.t
	desc = lotr_ormal_storms.0080.desc
	theme = stewardship_domain_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0080.a
	}
}

# Whale flock spotted (fair weather)
lotr_ormal_storms.0090 = {
	content_source = realms_dlc
	type = character_event
	title = lotr_ormal_storms.0090.t
	desc = lotr_ormal_storms.0090.desc
	theme = wanderer_journey_focus
	trigger = {
		any_character_situation = {
			any_situation_sub_region = {
				sub_region_current_phase = situation_ormal_fair_weather_season
				situation_sub_region_has_county = root.location.county
			}
		}
	}
	
	option = {
		name = lotr_ormal_storms.0090.a
	}
}