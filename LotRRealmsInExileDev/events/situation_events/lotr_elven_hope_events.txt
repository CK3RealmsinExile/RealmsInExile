namespace = elven_hope

#######################
## ELVEN HOPE EVENTS ##
#######################

### Entering the Situation ###

elven_hope.0001 = {
	content_source = realms_dlc
	type = character_event
	window = fullscreen_event
	title = elven_hope.0001.t
	desc = elven_hope.0001.desc
	theme = realm
	trigger = { # we need to prevent this from firing for all players when a new player joins in MP
		is_ai = no
		NOT = { has_variable = elven_hope_0001_var }
 	}
	override_background = { reference = elven_situation_fullscreen }
	override_sound = { reference = "event:/DLC/FP2/SFX/UI/fp2_struggle_ui_intro_animate" }

	cooldown = { years = 100 }

	widgets = {
		widget = {
 			gui = "event_window_widget_situation_info_elven_hope"
 			container = "dynamic_content_widget"
 			controller = situation_info
 			setup_scope = { situation:elven_hope_situation = { save_scope_as = situation } }
		}
	}
	immediate = {
		set_variable = elven_hope_0001_var
		save_scope_value_as = {
			name = start
			value = yes
		}
	}
	option = {
		name = elven_hope.0001.a
		clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_start_select"
	}
}

elven_hope.0002 = {
	hidden = yes 
	immediate = {
		if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_fading
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_fading_modifier
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_waning
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_waning_modifier
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_enduring
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_enduring_modifier
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_renewing
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_renewing_modifier
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_thriving
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_thriving_modifier
		}
	}
}

### Entering a new phase ###

elven_hope.0008 = { # Remove all character modifiers 
	hidden = yes 
	immediate = {
		remove_character_modifier = elven_hope_fading_modifier
		remove_character_modifier = elven_hope_waning_modifier
		remove_character_modifier = elven_hope_enduring_modifier
		remove_character_modifier = elven_hope_renewing_modifier
		remove_character_modifier = elven_hope_thriving_modifier
		trigger_event = elven_hope.0009
	}
}

elven_hope.0009 = { # Updating character flags
	hidden = yes 
	immediate = {
		if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_fading
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_fading_modifier
			trigger_event = elven_hope.0010
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_waning
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_waning_modifier
			trigger_event = elven_hope.0011
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_enduring
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_enduring_modifier
			trigger_event = elven_hope.0012
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_renewing
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_renewing_modifier
			trigger_event = elven_hope.0013
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_thriving
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			add_character_modifier = elven_hope_thriving_modifier
			trigger_event = elven_hope.0014
		}
	}
}
	

elven_hope.0010 = { # Fading phase
	type = character_event
	title = elven_hope.0010.t
	desc = elven_hope.0010.desc
	theme = elven
	override_background = { reference = docks_elven }
	trigger = { # Does not need to trigger when the phase remains the same
		NOT = { has_character_flag = elven_hope_fading_flag }
	}
	# widgets = { # TO DO: Make phase effects show up here
		# widget = {
 			# gui = "event_window_widget_situation_info_elven_hope"
 			# container = "dynamic_content_widget"
 			# controller = situation_info
 			# setup_scope = { situation:lotr_elven_hope_situation = { save_scope_as = situation } }
		# }
	# }
	cooldown = { days = 31 }
	left_portrait = {
		character = root
		animation = crying
	}
	immediate = {
		custom_tooltip = elven_hope.0010.tt
		remove_character_flag = elven_hope_fading_flag
		remove_character_flag = elven_hope_waning_flag
		remove_character_flag = elven_hope_enduring_flag
		remove_character_flag = elven_hope_renewing_flag
		remove_character_flag = elven_hope_thriving_flag
	}
	option = {
		name = elven_hope.0010.a
		add_character_flag = elven_hope_fading_flag
	}
}

elven_hope.0011 = { # Waning phase
	type = character_event
	title = elven_hope.0011.t
	desc = elven_hope.0011.desc
	theme = elven
	override_background = { reference = grey_havens }
	trigger = { # Does not need to trigger when the phase remains the same
		NOT = { has_character_flag = elven_hope_waning_flag}
	}
	# widgets = { # TO DO: Make phase effects show up here
		# widget = {
 			# gui = "event_window_widget_situation_info_elven_hope"
 			# container = "dynamic_content_widget"
 			# controller = situation_info
 			# setup_scope = { situation:lotr_elven_hope_situation = { save_scope_as = situation } }
		# }
	# }
	cooldown = { days = 31 }
	left_portrait = {
		character = root
		animation = worry
	}
	immediate = {
		custom_tooltip = elven_hope.0011.tt
		remove_character_flag = elven_hope_fading_flag
		remove_character_flag = elven_hope_waning_flag
		remove_character_flag = elven_hope_enduring_flag
		remove_character_flag = elven_hope_renewing_flag
		remove_character_flag = elven_hope_thriving_flag
	}
	option = {
		name = elven_hope.0011.a
		add_character_flag = elven_hope_waning_flag
	}
}

elven_hope.0012 = { # Enduring phase
	type = character_event
	title = elven_hope.0012.t
	desc = elven_hope.0012.desc
	theme = elven
	override_background = { reference = amon_lanc }
	trigger = { # Does not need to trigger when the phase remains the same
		NOT = { has_character_flag = elven_hope_enduring_flag }
	}
	# widgets = { # TO DO: Make phase effects show up here
		# widget = {
 			# gui = "event_window_widget_situation_info_elven_hope"
 			# container = "dynamic_content_widget"
 			# controller = situation_info
 			# setup_scope = { situation:lotr_elven_hope_situation = { save_scope_as = situation } }
		# }
	# }
	cooldown = { days = 31 }
	left_portrait = {
		character = root
		animation = personality_rational
	}
	immediate = {
		custom_tooltip = elven_hope.0012.tt
		remove_character_flag = elven_hope_fading_flag
		remove_character_flag = elven_hope_waning_flag
		remove_character_flag = elven_hope_enduring_flag
		remove_character_flag = elven_hope_renewing_flag
		remove_character_flag = elven_hope_thriving_flag
	}
	option = {
		name = elven_hope.0012.a
		add_character_flag = elven_hope_enduring_flag
	}
}

elven_hope.0013 = { # Renewing phase
	type = character_event
	title = elven_hope.0013.t
	desc = elven_hope.0013.desc
	theme = elven
	override_background = { reference = imladris }
	trigger = { # Does not need to trigger when the phase remains the same
		NOT = { has_character_flag = elven_hope_renewing_flag }
	}
	# widgets = { # TO DO: Make phase effects show up here
		# widget = {
 			# gui = "event_window_widget_situation_info_elven_hope"
 			# container = "dynamic_content_widget"
 			# controller = situation_info
 			# setup_scope = { situation:lotr_elven_hope_situation = { save_scope_as = situation } }
		# }
	# }
	cooldown = { days = 31 }
	left_portrait = {
		character = root
		animation = personality_compassionate
	}
	immediate = {
		custom_tooltip = elven_hope.0013.tt
		remove_character_flag = elven_hope_fading_flag
		remove_character_flag = elven_hope_waning_flag
		remove_character_flag = elven_hope_enduring_flag
		remove_character_flag = elven_hope_renewing_flag
		remove_character_flag = elven_hope_thriving_flag
	}
	option = {
		name = elven_hope.0013.a
		add_character_flag = elven_hope_renewing_flag
	}
}

elven_hope.0014 = { # Thriving phase
	type = character_event
	title = elven_hope.0014.t
	desc = elven_hope.0014.desc
	theme = elven
	override_background = { reference = gondolin }
	trigger = { # Does not need to trigger when the phase remains the same
		NOT = { has_character_flag = elven_hope_thriving_modifier }
	}
	# widgets = { # TO DO: Make phase effects show up here
		# widget = {
 			# gui = "event_window_widget_situation_info_elven_hope"
 			# container = "dynamic_content_widget"
 			# controller = situation_info
 			# setup_scope = { situation:lotr_elven_hope_situation = { save_scope_as = situation } }
		# }
	# }
	cooldown = { days = 31 }
	left_portrait = {
		character = root
		animation = happiness
	}
	immediate = {
		custom_tooltip = elven_hope.0014.tt
		remove_character_flag = elven_hope_fading_flag
		remove_character_flag = elven_hope_waning_flag
		remove_character_flag = elven_hope_enduring_flag
		remove_character_flag = elven_hope_renewing_flag
		remove_character_flag = elven_hope_thriving_flag
	}
	option = {
		name = elven_hope.0014.a
		add_character_flag = elven_hope_thriving_flag
	}
}

### Reduce Development in Low Hope ###

elven_hope.0020 = { # Check phase and reduce dev at random
	hidden = yes 
	immediate = {
		# First, let's check the current situation phase and dish out random development reductions across the realm
		if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_fading
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			every_realm_county = {
				limit = { title_province = { has_holding_type = elven_holding } }
				save_scope_as = county_to_lose_dev
				random_list = {
					5 = {
						change_development_level = -1
						root = {
							send_interface_toast = {
								type = event_toast_effect_bad
								title = elven_county_lost_dev_toast
								custom_tooltip = elven_county_lost_dev_toast_desc
							}
						}
					}
					5 = {
						change_development_level = -2
						root = {
							send_interface_toast = {
								type = event_toast_effect_bad
								title = elven_county_lost_dev_toast
								custom_tooltip = elven_county_lost_dev_toast_desc
							}
						}
					}
					90 = {
					}
				}
			}
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_waning
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			every_realm_county = {
				limit = { title_province = { has_holding_type = elven_holding } }
				random_list = {
					5 = {
						change_development_level = -1
						root = {
							send_interface_toast = {
								type = event_toast_effect_bad
								title = elven_county_lost_dev_toast
								custom_tooltip = elven_county_lost_dev_toast_desc
							}
						}
					}
					95 = {
					}
				}
			}
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_enduring
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			every_realm_county = {
				limit = { title_province = { has_holding_type = elven_holding } }
				random_list = {
					2 = {
						change_development_level = -1
						root = {
							send_interface_toast = {
								type = event_toast_effect_bad
								title = elven_county_lost_dev_toast
								custom_tooltip = elven_county_lost_dev_toast_desc
							}
						}
					}
					98 = {
					}
				}
			}
		}
		else_if = {
			limit = {
				any_character_situation = {
					any_situation_sub_region = {
						sub_region_current_phase = situation_elven_renewing
						situation_sub_region_has_county = root.capital_county
					}
				}
			}
			every_realm_county = {
				limit = { title_province = { has_holding_type = elven_holding } }
				random_list = {
					1 = {
						change_development_level = -1
						root = {
							send_interface_toast = {
								type = event_toast_effect_bad
								title = elven_county_lost_dev_toast
								custom_tooltip = elven_county_lost_dev_toast_desc
							}
						}
					}
					99 = {
					}
				}
			}
		}

		# Then, we check for any county that has zero development and remove its holdings, if it has any.
		every_realm_county = {
			limit = {
				development_level = 0
				any_county_province = {
					has_holding = yes
					is_county_capital = no
				}
			}
			every_county_province = {
				add_to_list = counties_with_secondary_holdings
				limit = {
					has_holding = yes
					is_county_capital = no
				}
				random = {
					chance = 20
					save_scope_as = province_to_lose_holding
					remove_holding = yes
					root = {
						send_interface_toast = {
							type = event_toast_effect_bad
							title = elven_county_lost_holding_toast
							custom_tooltip = elven_county_lost_holding_toast_desc
						}
					}
				}
			}
		}
		# Lastly, check if any counties have zero development and no other holdings. Chance to make it wastelands.
		every_realm_county = { 
			limit = {
				development_level = 0
				NOT = { is_in_list = counties_with_secondary_holdings }
			}
			save_scope_as = abandoned_county
			random = {
				chance = 20
				make_settlement_county_wilderness = { COUNTY = this }
				this.holder = {
					send_interface_toast = {
						type = event_toast_effect_bad
						title = elven_hope.0020.tt
					}
					every_liege_or_above = {
						send_interface_toast = {
							type = event_toast_effect_bad
							title = elven_hope.0020.tt
						}
					}
				}
			}
		}
	}
}

### Random Pulse Events ###

elven_hope.0030 = { # Dreams of the Sea
	type = character_event
	title = elven_hope.0030.t
	desc = elven_hope.0030.desc
	theme = elven
	override_background = { reference = grey_havens }

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = worry
	}
	immediate = {
		subtract_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # One day, all of us will sail
		name = elven_hope.0030.a
		add_stress = -40
		subtract_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # I shall sing a song of hope 
		name = elven_hope.0030.b 
		add_stress = 20 
		add_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
}

elven_hope.0031 = { # The Trees Do Not Sing
	type = character_event
	title = elven_hope.0031.t
	desc = elven_hope.0031.desc
	theme = elven
	override_background = { reference = wilderness_forest_pine }

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = survey_staff
	}
	immediate = {
		
	}
	option = { # Their songs will return with the changing of the season
		name = elven_hope.0031.a
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # I shall investigate this matter
		name = elven_hope.0031.b 
		duel = {
			skill = learning 
			value = 14
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					max = 15
				}
				send_interface_toast = {
					title = elven_hope.0031.b.success
					left_icon = root 
					add_elven_hope_effect = { VALUE = minimal_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
				}
			}
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -15
				}
				send_interface_toast = {
					title = elven_hope.0031.b.failure
					left_icon = root 
					subtract_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
				}
				add_stress = 20
			}
		}
	}
}

elven_hope.0032 = { # Child of Spring
	type = character_event
	title = elven_hope.0032.t
	desc = elven_hope.0032.desc
	theme = elven
	override_background = { reference = relaxing_room }

	cooldown = { years = 10 }
	trigger = {
		any_courtier = {
			is_female = yes 
			is_married = yes 
		}
	}
	left_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = scope:new_mother
		animation = newborn 
	}
	immediate = {
		random_courtier = {
			limit = {
				is_female = yes 
				is_married = yes 
			}
			save_scope_as = new_mother 
		}
		create_character = {
			mother = scope:new_mother
			father = scope:new_mother.primary_spouse
			employer = root
			culture = root.culture
			faith = root.faith
			dynasty_house = scope:new_mother.primary_spouse.house
			gender_female_chance = 50
			age = 0 
			save_scope_as = child_of_spring
		}
		add_elven_hope_effect = { VALUE = monumental_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # What hopeful news! Praise their union!
		name = elven_hope.0032.a
		add_prestige = minor_prestige_gain
		every_courtier = {
			limit = { NOT = { this = scope:new_mother } }
			add_opinion = {
				target = scope:new_mother
				modifier = friendliness_opinion
				opinion = 15
			}
		}
	}
	option = { # Let mother and child rest.
		name = elven_hope.0032.b
		add_stress = -20 
	}
	option = { # We shall celebrate this 
		name = elven_hope.0032.c
		remove_short_term_gold = medium_gold_value 
		add_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
}

elven_hope.0033 = { # A Nightly Departure
	type = character_event
	title = elven_hope.0033.t
	desc = elven_hope.0033.desc
	theme = elven
	override_background = { reference = docks_elven }
	trigger = {
		any_realm_province = { is_coastal = yes }
	}

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = lantern
	}
	option = { # They are free to sail
		name = elven_hope.0033.a
		add_piety = medium_piety_gain 
		add_legitimacy = minor_legitimacy_gain
		subtract_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # Convince them to say farewell
		name = elven_hope.0033.b 
		remove_short_term_gold = miniscule_gold_value  
		subtract_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
}

elven_hope.0034 = { # The Lay of Kin Long Lost
	type = character_event
	title = elven_hope.0034.t
	desc = elven_hope.0034.desc
	theme = elven
	override_background = { reference = wilderness_forest_deep }

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = interested
	}
	right_portrait = {
		character = scope:elder_courtier
		animation = storyteller
	}
	immediate = {
		random_courtier = { save_scope_as = elder_courtier }
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # The past is lost to us
		name = elven_hope.0034.a
		add_piety = medium_prestige_gain
		add_legitimacy = minor_legitimacy_gain
		subtract_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # Let the memory strengthen our resolve
		name = elven_hope.0034.b 
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		add_piety = miniscule_piety_gain
	}
	option = { # Commission the lay to be sung often
		name = elven_hope.0034.c
		remove_short_term_gold = minor_gold_value
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		add_diplomacy_lifestyle_xp = 300
	}
}

elven_hope.0035 = { # A World Marred by Evil
	type = character_event
	title = elven_hope.0035.t
	desc = elven_hope.0035.desc
	theme = elven
	override_background = { reference = wilderness }

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = throne_room_two_handed_passive_shield
	}
	immediate = {
		subtract_elven_hope_effect = { VALUE = minimal_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # We are an island in the sea of darkness
		name = elven_hope.0035.a
		add_prestige = medium_prestige_gain
		subtract_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # Even so, we have endured
		name = elven_hope.0035.b 
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
}

elven_hope.0036 = { # The Waning of Light
	type = character_event
	title = elven_hope.0036.t
	desc = elven_hope.0036.desc
	theme = elven
	override_background = { reference = ep2_forest_managed }

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = disappointed
	}
	immediate = {
		subtract_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # All things must fade
		name = elven_hope.0036.a
		add_learning_lifestyle_xp = 500
	}
	option = { # We shall plant new seeds, and tend them with care
		name = elven_hope.0036.b 
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
}

elven_hope.0037 = { # A Shattered Statue
	type = character_event
	title = elven_hope.0037.t
	desc = elven_hope.0037.desc
	theme = elven
	override_background = { reference = throne_room }

	cooldown = { months = 7 }
	left_portrait = {
		character = root
		animation = personality_rational
	}
	option = { # Rebuild it
		name = elven_hope.0037.a
		remove_short_term_gold = minor_gold_value 
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # Not all things can be remade
		name = elven_hope.0037.b  
		subtract_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
	}
	option = { # Distribute the broken pieces
		name = elven_hope.0037.c  
		add_elven_hope_effect = { VALUE = major_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		add_stress = 30 
		add_prestige = minor_prestige_loss
	}
}

elven_hope.0038 = { # Merriment Beneath the Stars
	type = character_event
	title = elven_hope.0038.t
	desc = elven_hope.0038.desc
	theme = elven
	override_background = { reference = relaxing_room }

	cooldown = { months = 7 }
	immediate = {
		random_courtier = { save_scope_as = dancing_courtier }
	}
	left_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = scope:random_courtier
		animation = lute_active
	}
	option = { # Let the feast continue into the dawn
		name = elven_hope.0038.a
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		every_courtier = {
			add_opinion = {
				target = root
				modifier = friendliness_opinion
				opinion = 5
			}
		}
	}
	option = { # I'll join the festivities
		name = elven_hope.0038.b  
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		add_stress = -10
	}
	option = { # We cannot be distracted from our work
		name = elven_hope.0038.c  
		trigger = { exists = capital_province }
		capital_province.county = {
			change_development_progress_with_overflow = 75
		}
	}
}

elven_hope.0039 = { # A Good Harvest
	type = character_event
	title = elven_hope.0039.t
	desc = elven_hope.0039.desc
	theme = elven
	override_background = { reference = throne_room }

	cooldown = { months = 7 }
	immediate = {
		random_courtier = { save_scope_as = happy_courtier }
	}
	left_portrait = {
		character = root
		animation = personality_compassionate
	}
	right_portrait = {
		character = scope:happy_courtier
		animation = storyteller
	}
	option = { # Distribute it among my vassals
		name = elven_hope.0039.a
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		add_legitimacy = miniscule_legitimacy_gain
	}
	option = { # Let the season be blessed
		name = elven_hope.0039.b  
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		add_piety = medium_piety_gain
	}
	option = { # This will aid trade and commerce
		name = elven_hope.0039.c  
		add_short_term_gold = minor_gold_value
	}
}

elven_hope.0040 = { # A Bustling Colony
	type = character_event
	title = elven_hope.0040.t
	desc = elven_hope.0040.desc
	theme = elven
	override_background = { reference = ep2_forest_managed }

	cooldown = { years = 3 }
	trigger = { any_held_county = { title_province = { has_holding_type = settlement_holding } } }
	immediate = {
		random_courtier = { save_scope_as = colonist_courtier }
		random_directly_owned_province = {
			limit = { 
				has_holding_type = settlement_holding
			}
			save_scope_as = colony_province
			county = { save_scope_as = colony_county }
		}
	}
	left_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = scope:colonist_courtier
		animation = personality_compassionate
	}
	option = { # Let the good work continue!
		name = elven_hope.0040.a
		scope:colony_province = {
			set_holding_type = elven_holding
		}
		hidden_effect = {
			if = {
				limit = { 
					has_variable = num_settled_wilderness 
					var:num_settled_wilderness > 0
				}
				decrease_variable = {
					NAME = num_settled_wilderness
					AMOUNT = 1
				}
				remove_wastelands_tracker_variable = yes
			}
		}
	}
	option = { # These good news should be celebrated
		name = elven_hope.0040.b  
		add_elven_hope_effect = { VALUE = medium_elven_hope_value HOPE_EFFECT = effect_elven_very_low_hope }
		scope:colony_county = {
			change_development_progress_with_overflow = 75
		}
	}
}

