# Events for handling the Mining activity

namespace = mining

#####################################
#	SETUP AND MAINTENANCE EVENTS    #
#	0000 - 0999						#
#####################################

## Invalidations

# Host Imprisoned
mining.0002 = {
	type = character_event
	title = mining.0002.t
	desc = {
		first_valid = { # Summary
			# Host Imprisoned
			triggered_desc = {
				trigger = {
					scope:host = {
						is_alive = yes
						is_imprisoned = yes
					}
					this = scope:host
				}
				desc = mining.0002.imprisoned_self
			}
			triggered_desc = {
				trigger = {
					scope:host = {
						is_alive = yes
						is_imprisoned = yes
					}
				}
				desc = mining.0002.imprisoned
			}
		}
	}
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = scope:host.imprisoner
		animation = personality_bold
	}
	right_portrait = {
		character = scope:host
		animation = prisonhouse
	}
	lower_left_portrait = scope:host.imprisoner
	theme = hunt_activity
	cooldown = { weeks = 1 }

	immediate = {
		mining_invalidation_event_effect = yes
		show_as_tooltip = {
			scope:host.imprisoner = {
				imprison = {
					target = scope:host
					type = house_arrest
				}
			}
		}
	}

	option = {
		name = mining.0002.a
	}
}

# Assassination Attempt
mining.0003 = {
	type = character_event
	title = mining.0003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:invalidated_culprit }
				desc = mining.0003.assassination_culprit
			}
			desc = mining.0003.assassination
		}
	}
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = root
		animation = worry
		trigger = { is_in_list = attendees }
	}
	right_portrait = {
		character = scope:host
		trigger = {
			NOR = {
				this = root
				this = scope:invalidated_culprit
			}
		}
		animation = stress
	}
	lower_right_portrait = {
		character = scope:invalidated_flavor
		trigger = {
			exists = scope:invalidated_flavor
			NOR = {
				scope:invalidated_flavor = root
				scope:invalidated_flavor = scope:host
			}
		}
	}
	lower_center_portrait = {
		character = scope:invalidated_culprit
		trigger = {
			exists = scope:invalidated_culprit
			NOT = { scope:invalidated_culprit = root }
		}
	}
	theme = hunt_activity
	cooldown = { weeks = 1 }
	
	trigger = {
		# No need for invalidation ping for botched scheme targets
		NOR = {
			scope:invalidated_flavor ?= root
			scope:invalidated_culprit ?= root
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { this = scope:host }
			}
			mining_invalidation_event_effect = yes
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:invalidated_culprit
				}
			scope:invalidated_flavor = {
				add_opinion = {
					target = scope:invalidated_culprit
					modifier = attempted_murder_me_crime
				}
			}
		}
	}
	}

	option = {
		name = mining.0003.a
		custom_tooltip = mining_ends_tt
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = mining.0003.b
		trigger = { this = scope:host }
		scope:activity = {
			set_variable = {
				name = mining_invalidated
				value = flag:assassination_attempt
			}
			set_variable = {
				name = mining_invalidated_flavor
				value = scope:invalidated_flavor
			}
			set_variable = {
				name = mining_invalidated_culprit
				value = scope:invalidated_culprit
			}
		}
		mining_invalidation_event_effect = yes
		ai_chance = {
			base = 25
		}
	}
}

# Select an Overseer of the Mines #
mining.0100 = {
	type = activity_event
	title = mining.0100.t
	theme = stewardship
	desc = {
		desc = mining.0100.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						has_relation_rival = scope:ootm_candidate_1
						opinion = {
							value <= low_negative_opinion
							target = scope:ootm_candidate_1
						}
					}
				}
				desc = mining.0100.desc.hates_candidate_a
			}
			desc = mining.0100.desc.candidate_a
		}
		triggered_desc = {
			trigger = { exists = scope:ootm_candidate_2 }
			desc = mining.0100.desc.nepotism
		}
		triggered_desc = {
			trigger = { exists = scope:ootm_candidate_3 }
			desc = mining.0100.desc.enthusiasm
		}
		desc = mining.0100.desc.outro
	}
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = scope:host
		animation = thinking
	}
	center_portrait = {
		character = scope:ootm_candidate_1
		animation = war_over_win
	}
	right_portrait = {
		character = scope:ootm_candidate_3
		animation = admiration
	}
	lower_right_portrait = scope:ootm_candidate_2

	trigger = {
		NOT = { employs_court_position = overseer_of_the_mines_court_position } #This is a delayed event so it is possible you have picked out an Overseer after it was set to trigger
		exists = scope:activity #As it is delayed, the activity might have invalidated in the meanwhile
		scope:activity = {
			OR = {
				any_attending_character = {
					AND = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
					}
					AND = {
						any_pool_character = {
							province = scope:activity.activity_location
							is_physically_able_ai_adult = yes
							can_be_knight_trigger = { ARMY_OWNER = scope:host }
						}
					}
				}
			}
		}
	}

	immediate = {
		scope:activity = {
			ordered_attending_character = { # The best guy for the job
				limit = {
					OR = {
						is_vassal_of = root
						is_courtier_of = root
					}
					root = {
						can_appoint_char_to_court_position = {
							CHAR = prev
							COURT_POS = overseer_of_the_mines_court_position
						}
					}
				}
				order_by = aptitude:overseer_of_the_mines_court_position
				save_scope_as = ootm_candidate_1
			}
			if = {
				limit = {
					NOT = { exists = scope:ootm_candidate_1 }
				}
				limit = {
					any_pool_character = {
						province = scope:activity.activity_location
						is_physically_able_ai_adult = yes
						can_be_knight_trigger = { ARMY_OWNER = scope:host }
					}
				}
				random_pool_character = {
					province = scope:activity.activity_location
					limit = {
						is_physically_able_ai_adult = yes
						can_be_knight_trigger = { ARMY_OWNER = scope:host }
					}
					save_scope_as = ootm_candidate_1
				}
			}
			if = {
				limit = {
					any_attending_character = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						OR = {
							is_close_or_extended_family_of = root
							has_relation_friend = root
							has_relation_lover = root
						}
						NOT = { has_relation_rival = root }
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
					}
				}
				random_attending_character = { # The nepotism pick
					limit = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						OR = {
							is_close_or_extended_family_of = root
							has_relation_friend = root
							has_relation_lover = root
						}
						NOT = { has_relation_rival = root }
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
					}
					save_scope_as = ootm_candidate_2
				}
			}
			if = {
				limit = {
					any_attending_character = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
						trigger_if = {
							limit = {
								exists = scope:ootm_candidate_2
							}
							NOT = { this = scope:ootm_candidate_2 }
						}
					}
				}
				ordered_attending_character = { # Second best guy for the job
					limit = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
						trigger_if = {
							limit = {
								exists = scope:ootm_candidate_2
							}
							NOT = { this = scope:ootm_candidate_2 }
						}
					}
					order_by = {
						value = aptitude:overseer_of_the_mines_court_position
						add = ai_energy
					}
					save_scope_as = ootm_candidate_3
				}
			}
		}
	}

	option = { # Pick the best guy
		name = mining.0100.a
		court_position_grant_effect = {
			CANDIDATE = scope:ootm_candidate_1
			POS = overseer_of_the_mines_court_position
			EMPLOYER = root
		}
		add_prestige = minor_prestige_gain
		ai_chance = {
			base = 10
			opinion_modifier = {
				who = root
				opinion_target = scope:ootm_candidate_1
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 0.5
				has_trait = family_first
			}
			modifier = {
				factor = 0.5
				has_relation_rival = scope:ootm_candidate_1
				NOT = { has_trait = forgiving }
			}
		}
	}

	option = { # Pick the nepotism target
		name = mining.0100.b
		trigger = {
			exists = scope:ootm_candidate_2
		}
		court_position_grant_effect = {
			CANDIDATE = scope:ootm_candidate_2
			POS = overseer_of_the_mines_court_position
			EMPLOYER = root
		}
		reverse_add_opinion = {
			target = scope:ootm_candidate_2
	 		modifier = grateful_opinion
	 		opinion = 15
		}
		ai_chance = {
			base = 10
			opinion_modifier = {
				who = root
				opinion_target = scope:ootm_candidate_2
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 2
				has_trait = family_first
			}
		}
	}

	option = { # Pick the third target
		name = mining.0100.c
		trigger = {
			exists = scope:ootm_candidate_3
		}
		court_position_grant_effect = {
			CANDIDATE = scope:ootm_candidate_3
			POS = overseer_of_the_mines_court_position
			EMPLOYER = root
		}
		random = {
			chance = 50
			set_relation_friend = {
				target = scope:ootm_candidate_3
		 		reason = friend_made_me_moh
			}
		}
		ai_chance = {
			base = 5
			opinion_modifier = {
				who = root
				opinion_target = scope:ootm_candidate_3
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 0.5
				has_trait = family_first
			}
			modifier = {
				factor = 0.5
				has_relation_rival = scope:ootm_candidate_3
				NOT = { has_trait = forgiving }
			}
		}
	}

	option = { # Pick nobody
		name = mining.0100.d
		ai_chance = { # The AI should always pick someone, unless they're bankrupt
			base = 0
			modifier = {
				add = 100
				gold < tiny_gold_value
			}
		}
	}

	after = {
		# Update success chance
		scope:activity = {
			set_variable = {
				name = mining_success_chance
				value = mining_success_chance_value
			}
		}
	}
}

# Select a Stone Singer #
mining.0101 = {
	type = activity_event
	title = mining.0101.t
	theme = stewardship
	desc = {
		desc = mining.0101.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						has_relation_rival = scope:stone_singer_candidate_1
						opinion = {
							value <= low_negative_opinion
							target = scope:stone_singer_candidate_1
						}
					}
				}
				desc = mining.0101.desc.hates_candidate_a
			}
			desc = mining.0101.desc.candidate_a
		}
		triggered_desc = {
			trigger = { exists = scope:stone_singer_candidate_2 }
			desc = mining.0101.desc.nepotism
		}
		triggered_desc = {
			trigger = { exists = scope:stone_singer_candidate_3 }
			desc = mining.0101.desc.enthusiasm
		}
		desc = mining.0101.desc.outro
	}
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = scope:host
		animation = thinking
	}
	center_portrait = {
		character = scope:stone_singer_candidate_1
		animation = war_over_win
	}
	right_portrait = {
		character = scope:stone_singer_candidate_3
		animation = admiration
	}
	lower_right_portrait = scope:stone_singer_candidate_2

	trigger = {
		NOT = { employs_court_position = stone_singer_court_position } #This is a delayed event so it is possible you have picked out a Stone inger after it was set to trigger
		exists = scope:activity #As it is delayed, the activity might have invalidated in the meanwhile
		scope:activity = {
			OR = {
				any_attending_character = {
					AND = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = stone_singer_court_position
							}
						}
					}
					AND = {
						any_pool_character = {
							province = scope:activity.activity_location
							is_physically_able_ai_adult = yes
						}
					}
				}
			}
		}
	}

	immediate = {
		scope:activity = {
			ordered_attending_character = { # The best guy for the job
				limit = {
					OR = {
						is_vassal_of = root
						is_courtier_of = root
					}
					root = {
						can_appoint_char_to_court_position = {
							CHAR = prev
							COURT_POS = stone_singer_court_position
						}
					}
				}
				order_by = aptitude:stone_singer_court_position
				save_scope_as = stone_singer_candidate_1
			}
			if = {
				limit = {
					NOT = { exists = scope:stone_singer_candidate_1 }
				}
				limit = {
					any_pool_character = {
						province = scope:activity.activity_location
						is_physically_able_ai_adult = yes
					}
				}
				random_pool_character = {
					province = scope:activity.activity_location
					limit = {
						is_physically_able_ai_adult = yes
					}
					save_scope_as = stone_singer_candidate_1
				}
			}
			if = {
				limit = {
					any_attending_character = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						OR = {
							is_close_or_extended_family_of = root
							has_relation_friend = root
							has_relation_lover = root
						}
						NOT = { has_relation_rival = root }
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = stone_singer_court_position
							}
						}
						NOT = { this = scope:stone_singer_candidate_1 }
					}
				}
				random_attending_character = { # The nepotism pick
					limit = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						OR = {
							is_close_or_extended_family_of = root
							has_relation_friend = root
							has_relation_lover = root
						}
						NOT = { has_relation_rival = root }
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = stone_singer_court_position
							}
						}
						NOT = { this = scope:stone_singer_candidate_1 }
					}
					save_scope_as = stone_singer_candidate_2
				}
			}
			if = {
				limit = {
					any_attending_character = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = stone_singer_court_position
							}
						}
						NOT = { this = scope:stone_singer_candidate_1 }
						trigger_if = {
							limit = {
								exists = scope:stone_singer_candidate_2
							}
							NOT = { this = scope:stone_singer_candidate_2 }
						}
					}
				}
				ordered_attending_character = { # Second best guy for the job
					limit = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = stone_singer_court_position
							}
						}
						NOT = { this = scope:stone_singer_candidate_1 }
						trigger_if = {
							limit = {
								exists = scope:stone_singer_candidate_2
							}
							NOT = { this = scope:stone_singer_candidate_2 }
						}
					}
					order_by = {
						value = aptitude:stone_singer_court_position
						add = ai_energy
					}
					save_scope_as = stone_singer_candidate_3
				}
			}
		}
	}

	option = { # Pick the best guy
		name = mining.0101.a
		court_position_grant_effect = {
			CANDIDATE = scope:stone_singer_candidate_1
			POS = stone_singer_court_position
			EMPLOYER = root
		}
		add_prestige = minor_prestige_gain
		ai_chance = {
			base = 10
			opinion_modifier = {
				who = root
				opinion_target = scope:stone_singer_candidate_1
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 0.5
				has_trait = family_first
			}
			modifier = {
				factor = 0.5
				has_relation_rival = scope:stone_singer_candidate_1
				NOT = { has_trait = forgiving }
			}
		}
	}

	option = { # Pick the nepotism target
		name = mining.0101.b
		trigger = {
			exists = scope:stone_singer_candidate_2
		}
		court_position_grant_effect = {
			CANDIDATE = scope:stone_singer_candidate_2
			POS = stone_singer_court_position
			EMPLOYER = root
		}
		reverse_add_opinion = {
			target = scope:stone_singer_candidate_2
	 		modifier = grateful_opinion
	 		opinion = 15
		}
		ai_chance = {
			base = 10
			opinion_modifier = {
				who = root
				opinion_target = scope:stone_singer_candidate_2
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 2
				has_trait = family_first
			}
		}
	}

	option = { # Pick the third target
		name = mining.0101.c
		trigger = {
			exists = scope:stone_singer_candidate_3
		}
		court_position_grant_effect = {
			CANDIDATE = scope:stone_singer_candidate_3
			POS = stone_singer_court_position
			EMPLOYER = root
		}
		random = {
			chance = 50
			set_relation_friend = {
				target = scope:stone_singer_candidate_3
		 		reason = friend_made_me_ss
			}
		}
		ai_chance = {
			base = 5
			opinion_modifier = {
				who = root
				opinion_target = scope:stone_singer_candidate_3
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 0.5
				has_trait = family_first
			}
			modifier = {
				factor = 0.5
				has_relation_rival = scope:stone_singer_candidate_3
				NOT = { has_trait = forgiving }
			}
		}
	}

	option = { # Pick nobody
		name = mining.0101.d
		ai_chance = { # The AI should always pick someone, unless they're bankrupt
			base = 0
			modifier = {
				add = 100
				gold < tiny_gold_value
			}
		}
	}

	after = {
		# Update success chance
		scope:activity = {
			set_variable = {
				name = mining_success_chance
				value = mining_success_chance_value
			}
		}
	}
}

#####################################
#	INVITATION EVENTS	            #
#	0100 - 0199						#
#####################################

#####################################
#	START EVENTS	                #
#	0200 - 0299						#
#####################################

# Mining Start
mining.0200 = { # Host - kick off - add stress
	type = activity_event
	title = mining.0200.t
	desc = mining.0200.desc
	theme = stewardship
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = scope:crowd_member_1
		animation = throne_room_conversation_3
	}
	center_portrait = {
		character = scope:crowd_member_2
		animation = throne_room_conversation_4
	}
	right_portrait = {
		character = scope:host
		animation = throne_room_conversation_2
	}

	immediate = {
		scope:activity = {
			set_variable = {
				name = mining_success_chance
				value = mining_success_chance_value
			}
			random_attending_character = {
				limit = {
					NOT = {
						this = root
					}
				}
				save_scope_as = crowd_member_1
			}
			random_attending_character = {
				limit = {
					NOT = {
						this = root
						this = scope:crowd_member_1
					}
				}
				save_scope_as = crowd_member_2
			}
		}
		if = {
			limit = {
				employs_court_position = overseer_of_the_mines_court_position
				scope:activity = {
					any_attending_character = {
						location = scope:activity.activity_location
						has_court_position = overseer_of_the_mines_court_position
					}
				}
			}
			scope:activity = {
				random_attending_character = {
					limit = {
						location = scope:activity.activity_location
						has_court_position = overseer_of_the_mines_court_position
						is_ai = yes
					}
					save_scope_as = ootm_character
					save_scope_as = crowd_member_1
				}
			}
		}
		if = {
			limit = {
				employs_court_position = stone_singer_court_position
				scope:activity = {
					any_attending_character = {
						location = scope:activity.activity_location
						has_court_position = stone_singer_court_position
					}
				}
			}
			scope:activity = {
				random_attending_character = {
					limit = {
						location = scope:activity.activity_location
						has_court_position = stone_singer_court_position
						is_ai = yes
					}
					save_scope_as = stone_singer_character
					save_scope_as = crowd_member_1
				}
			}
		}
	}

	option = { # Pep Talk
		name = mining.0200.a
		duel = {
			skill = diplomacy
			value = 8
			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -15
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:pep_talk_success
					}
				}
				custom_tooltip = mining.0200.a.success
				send_interface_toast = {
					title = mining_success_chance.pep_talk_success
					left_icon = root
					custom_tooltip = mining_activity_success_increase_medium_tt
					add_prestige = 50
				}
				scope:activity = {
					add_activity_log_entry = {
						key = mining_log_prospecting_start_pep_talk_success
						score = 25
						tags = { good }
						character = root
					}
				}
			}

			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -15
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:pep_talk_failure
					}
				}
				custom_tooltip = mining.0200.a.failure
				send_interface_toast = {
					title = mining_success_chance.pep_talk_failure
					left_icon = root
					custom_tooltip = mining_activity_success_decrease_medium_tt
					add_prestige = -50
				}
				scope:activity = {
					add_activity_log_entry = {
						key = mining_log_prospecting_start_pep_talk_fail
						score = 25
						tags = { bad }
						character = root
					}
				}
			}
		}
	}

	option = { # Devise a Plan
		name = mining.0200.b
		duel = {
			skill = learning
			value = 10
			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -15
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:strategy_success
					}
				}
				custom_tooltip = mining.0200.b.success
				send_interface_toast = {
					title = mining_success_chance.strategy_success
					left_icon = root
					custom_tooltip = mining_activity_success_increase_major_tt
				}
				scope:activity = {
					add_activity_log_entry = {
						key = mining_log_prospecting_start_strategy_success
						score = 25
						tags = { good }
						character = root
					}
				}
			}

			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -15
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:strategy_failure
					}
				}
				custom_tooltip = mining.0200.b.failure
				send_interface_toast = {
					title = mining_success_chance.strategy_failure
					left_icon = root
					custom_tooltip = mining_activity_success_decrease_major_tt
				}
				scope:activity = {
					add_activity_log_entry = {
						key = mining_log_prospecting_start_strategy_fail
						score = 25
						tags = { bad }
						character = root
					}
				}
			}
		}
	}

	option = { # Threaten
		name = mining.0200.c
		custom_description_no_bullet = {
			text = effect_dread_challenge
		}
		random_list = {
			1 = {
				modifier = {
					add = dread
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:threaten_success
					}
				}
				custom_tooltip = mining.0200.c.success
				send_interface_toast = {
					title = mining_success_chance.threaten_success
					left_icon = root
					custom_tooltip = mining_activity_success_increase_medium_tt
					add_dread = 5
				}
				scope:activity = {
					add_activity_log_entry = {
						key = mining_log_prospecting_start_threat_success
						score = 25
						tags = { good }
						character = root
					}
				}
			}
			22 = {
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:threaten_failure
					}
				}
				custom_tooltip = mining.0200.c.failure
				send_interface_toast = {
					title = mining_success_chance.threaten_failure
					left_icon = root
					custom_tooltip = mining_activity_success_decrease_major_tt
					add_dread = -5
				}
				scope:activity = {
					add_activity_log_entry = {
						key = mining_log_prospecting_start_threat_fail
						score = 25
						tags = { bad }
						character = root
					}
				}
			}
		}
	}

	option = { # Let my Overseer take over
		trigger = {
			exists = scope:ootm_character
		}
		name = mining.0200.d
		save_scope_as = ootm_speaker
		custom_description_no_bullet = {
			text = effect_aptitude_challenge
		}
		scope:ootm_character = {
			random_list = {
				3 = {
					modifier = {
						add = aptitude:overseer_of_the_mines_court_position
					}
					scope:activity = {
						set_variable = {
							name = mining_team_huddle
							value = flag:overseer_success
						}
					}
					custom_tooltip = mining.0200.d.success
					root = {
						send_interface_toast = {
							title = mining_success_chance.overseer_success
							left_icon = scope:ootm_character
							custom_tooltip = mining_activity_success_increase_medium_tt
						}
					}
					add_prestige = 50
					scope:activity = {
						add_activity_log_entry = {
							key = mining_log_prospecting_start_overseer_success
							score = 25
							tags = { good }
							character = scope:ootm_character
						}
					}
				}
				3 = {
					scope:activity = {
						set_variable = {
							name = mining_team_huddle
							value = flag:overseer_failure
						}
					}
					custom_tooltip = mining.0200.d.failure
					root = {
						send_interface_toast = {
							title = mining_success_chance.overseer_failure
							left_icon = scope:ootm_character
							custom_tooltip = mining_activity_success_decrease_medium_tt
						}
					}
					add_prestige = -50
					scope:activity = {
						add_activity_log_entry = {
							key = mining_log_prospecting_start_overseer_fail
							score = 25
							tags = { bad }
							character = scope:ootm_character
						}
					}
				}
			}
		}
	}

	option = { # Let my Stone Singer take over
		trigger = {
			exists = scope:stone_singer_character
		}
		name = mining.0200.f
		save_scope_as = stone_singer_speaker
		custom_description_no_bullet = {
			text = effect_aptitude_challenge
		}
		scope:stone_singer_character = {
			random_list = {
				3 = {
					modifier = {
						add = aptitude:stone_singer_court_position
					}
					scope:activity = {
						set_variable = {
							name = mining_team_huddle
							value = flag:stone_singer_success
						}
					}
					custom_tooltip = mining.0200.d.success
					root = {
						send_interface_toast = {
							title = mining_success_chance.stone_singer_success
							left_icon = scope:stone_singer_character
							custom_tooltip = mining_activity_success_increase_medium_tt
						}
					}
					add_prestige = 50
					scope:activity = {
						add_activity_log_entry = {
							key = mining_log_prospecting_start_stone_singer_success
							score = 25
							tags = { good }
							character = scope:stone_singer_character
						}
					}
				}
				3 = {
					scope:activity = {
						set_variable = {
							name = mining_team_huddle
							value = flag:stone_singer_failure
						}
					}
					custom_tooltip = mining.0200.d.failure
					root = {
						send_interface_toast = {
							title = mining_success_chance.stone_singer_failure
							left_icon = scope:stone_singer_character
							custom_tooltip = mining_activity_success_decrease_medium_tt
						}
					}
					add_prestige = -50
					scope:activity = {
						add_activity_log_entry = {
							key = mining_log_prospecting_start_stone_singer_fail
							score = 25
							tags = { bad }
							character = scope:stone_singer_character
						}
					}
				}
			}
		}
	}

	option = { # Leave them to it
		name = mining.0200.e
		custom_tooltip = mining.0200.e.tt
		scope:activity = {
			set_variable = {
				name = mining_team_huddle
				value = flag:no_speech
			}
		}
	}

	after = {
		if = {
			limit = { this = scope:host }
			scope:activity = {
				every_attending_character = {
					limit = {
						NOT = { this = scope:host }
					}
					trigger_event = mining.0201
				}
				set_variable = mining_started
				set_variable = {
					name = mining_success_chance
					value = mining_success_chance_value
				}
			}
		}
	}
}

mining.0201 = { # Guest - kick off result - add stress
	type = activity_event
	theme = stewardship
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:pep_talk_success }
				}
				desc = mining.0201.t.pep_talk_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:pep_talk_failure }
				}
				desc = mining.0201.t.pep_talk_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:strategy_success }
				}
				desc = mining.0201.t.strategy_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:strategy_failure }
				}
				desc = mining.0201.t.strategy_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:threaten_success }
				}
				desc = mining.0201.t.threaten_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:threaten_failure }
				}
				desc = mining.0201.t.threaten_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:overseer_success }
				}
				desc = mining.0201.t.overseer_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:overseer_failure }
				}
				desc = mining.0201.t.overseer_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:stone_singer_success }
				}
				desc = mining.0201.desc.stone_singer_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:stone_singer_failure }
				}
				desc = mining.0201.t.stone_singer_failure
			}
			desc = mining.0201.t.get_on_with_it
		}
	}
	desc = {
		desc = mining.0201.desc.start
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:pep_talk_success }
				}
				desc = mining.0201.desc.pep_talk_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:pep_talk_failure }
				}
				desc = mining.0201.desc.pep_talk_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:strategy_success }
				}
				desc = mining.0201.desc.strategy_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:strategy_failure }
				}
				desc = mining.0201.desc.strategy_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:threaten_success }
				}
				desc = mining.0201.desc.threaten_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:threaten_failure }
				}
				desc = mining.0201.desc.threaten_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:overseer_success }
				}
				desc = mining.0201.desc.overseer_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:overseer_failure }
				}
				desc = mining.0201.t.overseer_failure
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:stone_singer_success }
				}
				desc = mining.0201.desc.stone_singer_success
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_team_huddle ?= flag:stone_singer_failure }
				}
				desc = mining.0201.t.stone_singer_failure
			}
			desc = mining.0201.desc.get_on_with_it
		}
	}
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = scope:crowd_member_1
		triggered_animation = {
			trigger = {
				scope:activity = {
					OR = {
						var:mining_team_huddle ?= flag:pep_talk_success
						var:mining_team_huddle ?= flag:strategy_success
						var:mining_team_huddle ?= flag:overseer_success
						var:mining_team_huddle ?= flag:stone_singer_success
					}
				}
			}
			animation = throne_room_cheer_2
		}
		triggered_animation = {
			trigger = {
				scope:activity = {
					OR = {
						var:mining_team_huddle ?= flag:pep_talk_failure
						var:mining_team_huddle ?= flag:strategy_failure
						var:mining_team_huddle ?= flag:threaten_failure
						var:mining_team_huddle ?= flag:overseer_failure
						var:mining_team_huddle ?= flag:stone_singer_failure
					}
				}
			}
			animation = sadness
		}
		triggered_animation = {
			trigger = {
				scope:activity = {
					var:mining_team_huddle ?= flag:threaten_success
				}
			}
			animation = stress
		}
		animation = throne_room_conversation_3
	}
	center_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				scope:activity = {
					OR = {
						var:mining_team_huddle ?= flag:pep_talk_success
						var:mining_team_huddle ?= flag:strategy_success
						var:mining_team_huddle ?= flag:overseer_success
						var:mining_team_huddle ?= flag:stone_singer_success
					}
				}
			}
			animation = throne_room_cheer_1
		}
		triggered_animation = {
			trigger = {
				scope:activity = {
					OR = {
						var:mining_team_huddle ?= flag:pep_talk_failure
						var:mining_team_huddle ?= flag:strategy_failure
						var:mining_team_huddle ?= flag:threaten_failure
						var:mining_team_huddle ?= flag:overseer_failure
						var:mining_team_huddle ?= flag:stone_singer_failure
					}
				}
			}
			animation = stress
		}
		triggered_animation = {
			trigger = {
				scope:activity = {
					var:mining_team_huddle ?= flag:threaten_success
				}
			}
			animation = worry
		}
		animation = throne_room_conversation_4
	}
	right_portrait = {
		character = scope:speaker
		triggered_animation = {
			trigger = {
				scope:activity = {
					OR = {
						var:mining_team_huddle ?= flag:pep_talk_success
						var:mining_team_huddle ?= flag:strategy_success
						var:mining_team_huddle ?= flag:overseer_success
						var:mining_team_huddle ?= flag:stone_singer_success
					}
				}
			}
			animation = flirtation
		}
		triggered_animation = {
			trigger = {
				scope:activity = {
					OR = {
						var:mining_team_huddle ?= flag:pep_talk_failure
						var:mining_team_huddle ?= flag:strategy_failure
						var:mining_team_huddle ?= flag:threaten_failure
						var:mining_team_huddle ?= flag:overseer_failure
						var:mining_team_huddle ?= flag:stone_singer_failure
					}
				}
			}
			animation = throne_room_conversation_2
		}
		triggered_animation = {
			trigger = {
				scope:activity = {
					var:mining_team_huddle ?= flag:threaten_success
				}
			}
			animation = anger
		}
		animation = throne_room_conversation_2
	}

	trigger = {
		is_ai = no
	}

	immediate = {
		if = {
			limit = {
				exists = scope:ootm_speaker
			}
			scope:ootm_speaker = {
				save_scope_as = speaker
			}
		}
		else = {
			scope:host = {
				save_scope_as = speaker
			}
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = {
						this = root
						this = scope:speaker
					}
				}
				save_scope_as = crowd_member_1
			}
		}
	}

	option = {
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:pep_talk_success }
			}
			text = mining.0201.a.pep_talk_success
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:pep_talk_failure }
			}
			text = mining.0201.a.pep_talk_failure
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:strategy_success }
			}
			text = mining.0201.a.strategy_success
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:strategy_failure }
			}
			text = mining.0201.a.strategy_failure
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:threaten_success }
			}
			text = mining.0201.a.threaten_success
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:threaten_failure }
			}
			text = mining.0201.a.threaten_failure
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:overseer_success }
			}
			text = mining.0201.a.overseer_success
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:overseer_failure }
			}
			text = mining.0201.a.overseer_failure
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:stone_singer_success }
			}
			text = mining.0201.desc.stone_singer_success
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:stone_singer_failure }
			}
			text = mining.0201.t.stone_singer_failure
		}
		name = {
			trigger = { 
				scope:activity = { var:mining_team_huddle ?= flag:no_speech }
			}
			text = mining.0201.a.get_on_with_it
		}

		if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:pep_talk_success }
			}
			custom_tooltip = mining_activity_success_increase_medium_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:pep_talk_failure }
			}
			custom_tooltip = mining_activity_success_decrease_medium_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:strategy_success }
			}
			custom_tooltip = mining_activity_success_increase_major_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:strategy_failure }
			}
			custom_tooltip = mining_activity_success_decrease_major_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:threaten_success }
			}
			custom_tooltip = mining_activity_success_increase_medium_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:threaten_failure }
			}
			custom_tooltip = mining_activity_success_decrease_major_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:overseer_success }
			}
			custom_tooltip = mining_activity_success_increase_medium_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:overseer_failure }
			}
			custom_tooltip = mining_activity_success_decrease_medium_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:stone_singer_success }
			}
			custom_tooltip = mining_activity_success_increase_medium_tt
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_team_huddle ?= flag:stone_singer_failure }
			}
			custom_tooltip = mining_activity_success_decrease_medium_tt
		}
		else = {
			custom_tooltip = mining_activity_success_decrease_medium_tt
		}
	}
}

#####################################
#	RANDOM EVENTS	                #
#	1000 - 1999						#
#####################################

# Gossiping Miner

scripted_trigger mining_1001_secret_knower_trigger = {
	NOT = { this = root }
	opinion = {
		target = root
		value > 0
	}
	save_temporary_scope_as = secret_knower_temp
	any_known_secret = {
		NOR = {
			secret_owner ?= scope:secret_knower_temp
			is_known_by = root
			secret_owner ?= root
		}
		secret_owner ?= {
			OR = {
				is_of_major_interest_trigger = { CHARACTER = root }
				is_of_minor_interest_trigger = { CHARACTER = root }
			}
		}
	}
}

mining.1001 = {
	type = activity_event
	title = mining.1001.t
	desc = mining.1001.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = eavesdrop
	}
	right_portrait = {
		character = scope:secret_sharer
		animation = paranoia
	}
	lower_right_portrait = scope:secret_owner

	cooldown = { years = 2 }
	
	trigger = {
		scope:activity = {
			any_attending_character = { mining_1001_secret_knower_trigger = yes }
		}
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = { mining_1001_secret_knower_trigger = yes }
				save_scope_as = secret_sharer
				random_known_secret = {
					limit = { #Prefer a secret about someone highly relevant to activity_host
						NOR = {
							secret_owner = scope:secret_sharer
							is_known_by = root
							secret_owner = root
						}
						secret_owner ?= {
							is_of_major_interest_trigger = { CHARACTER = root }
						}
					}
					alternative_limit = { #Fallback to minor interest characters
						NOR = {
							secret_owner = scope:secret_sharer
							is_known_by = root
							secret_target = root
						}
						secret_owner ?= {
							is_of_minor_interest_trigger = { CHARACTER = root }
						}
					}
					save_scope_as = secret_to_share
					secret_owner ?= {
						save_scope_as = secret_owner
					}
				}
			}
		}
	}

	option = { #Enough gossip, I need to work!
		name = mining.1001.a
		flavor = mining.1001.a.flavor
		scope:activity = {
			add_activity_log_entry = {
				key = mining_secret_animal_log
				score = 25
				tags = { random neutral social }
				character = root
				target = scope:secret_owner

				# Effect
				root = {
					add_prestige = minor_prestige_gain
					mining_activity_success_change_effect = { CHANGE = increase_medium }
					stress_impact = {
						paranoid = minor_stress_impact_gain
						trusting = minor_stress_impact_loss
						diligent = minor_stress_impact_loss
						arrogant = minor_stress_impact_loss
						impatient = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_compassion = -0.25
				ai_honor = 0.25
			}
		}
	}

	option = { #No wait, tell me!
		name = mining.1001.b
		flavor = mining.1001.b.tt
		scope:activity = {
			add_activity_log_entry = {
				key = mining_secret_learned_log
				score = 25
				tags = { random neutral social }
				character = root
				target = scope:secret_owner

				# Effect
				root = {
					custom_tooltip = mining.1001.b.reveal
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					add_prestige = minor_prestige_loss
					hidden_effect = {
						scope:secret_to_share = { reveal_to = root }
					}
					stress_impact = {
						arrogant = minor_stress_impact_gain
						impatient = minor_stress_impact_gain
						trusting = minor_stress_impact_gain
						diligent = minor_stress_impact_gain
						paranoid = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_greed = 0.25
			}
		}
	}
}

# You investigate curious fungi

scripted_trigger mining_1011_interested_in_fungi = { #POV of the picker
	OR = {
		has_trait = lifestyle_gardener
		has_trait = lifestyle_herbalist
		is_witch_trigger = yes
		has_trait = scholar
		has_trait = lifestyle_physician
		has_lifestyle = learning_lifestyle
		has_trait = curious
		has_trait = eccentric
		AND = {
			has_court_position = court_gardener_court_position
			aptitude = {
				court_position = court_gardener_court_position
				value >= 2
			}
		}
		AND = {
			has_court_position = court_physician_court_position
			aptitude = {
				court_position = court_physician_court_position
				value >= 2
			}
		}
	}
}

mining.1011 = {
	type = activity_event
	title = mining.1011.t
	theme = stewardship
	desc = {
		desc = mining.1011.desc
		first_valid = {
			triggered_desc = {
				trigger = { 
					is_witch_trigger = yes
				}
				desc = mining.1011.desc.witch
			}
			desc = mining.1011.desc.religious
		}
		desc = mining.1011.desc.ending
	}

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:mining_participant
		animation = happiness
	}

	cooldown = { years = 1 }

	artifact = {
		position = lower_right_portrait
		target = scope:newly_created_artifact
	}

	trigger = {
		mining_1011_interested_in_fungi = yes
	}

	immediate = {
		mining_activity_random_interest_participant_effect = {
			ARCHETYPE = miner
			SCOPE = mining_participant
		}
		hidden_effect = {
			create_artifact_fungi_effect = { OWNER = root }
			random_list = {
				10 = { # Poisonous Herbs
					trigger = { has_personality_benevolent_trigger = no }
					modifier = {
						factor = 2
						has_trait = schemer
					}
					modifier = {
						factor = 2
						any_scheme = { scheme_type = murder }
					}
					modifier = {
						factor = 2
						has_trait = education_intrigue
					}
					modifier = {
						factor = 2
						has_trait = callous
					}
					save_scope_as = poisonous_mushrooms
				}
				10 = { # Medicinal Herbs
					modifier = {
						factor = 2
						has_trait = schemer
					}
					modifier = {
						factor = 2
						has_court_position = court_physician_court_position
					}
					modifier = {
						factor = 2
						has_trait = education_learning
					}
					modifier = {
						factor = 2
						has_trait = compassionate
					}
					modifier = {
						factor = 2
						has_trait = lifestyle_physician
					}
				}
			}
		}
		hidden_effect_new_object = {
			scope:newly_created_artifact = {
				flag_as_trash_artifact = yes
			}
		}
	}

	option = { #Focus on the task at hand
		name = mining.1011.a
		hidden_effect_new_object = {
			scope:newly_created_artifact = {
				destroy_artifact = this 
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_host_fungi_focus_log
				score = 25
				tags = { random neutral }
				character = root
				target = scope:mining_participant
				
				#Effect
				root = {
					miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 }
					add_prestige = minor_prestige_gain
					mining_activity_success_change_effect = { CHANGE = increase_medium }
					stress_impact = {
						diligent = minor_stress_impact_loss
						ambitious = minor_stress_impact_loss
						lazy = minor_stress_impact_gain
						lifestyle_gardener = minor_stress_impact_gain
						lifestyle_herbalist = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 1
				ai_boldness = -0.5
			}
		}
	}

	option = { #Who cares what others think!?
		name = mining.1011.b
		scope:activity = {
			add_activity_log_entry = {
				key = mining_host_fungi_distracted_log
				score = 25
				tags = { random neutral }
				character = root
				target = scope:mining_participant
				artifact = scope:newly_created_artifact
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					show_as_tooltip = {
						scope:newly_created_artifact = { set_owner = root }
					}
					add_learning_lifestyle_xp = medium_lifestyle_xp
					scope:activity = {
						if = {
							limit = {
								any_attending_character = {
									NOT = { this = root }
									has_trait = lifestyle_miner
								}
							}
							every_attending_character = {
								limit = {
									NOT = { this = root }
									has_trait = lifestyle_miner
								}
								custom = mining_every_miner_attendee_tt
								add_opinion = {
									target = root
									modifier = mining_distracted_opinion
									opinion = -10
								}
							}
						}
					}
					stress_impact = {
						lifestyle_miner = medium_stress_impact_gain
						diligent = minor_stress_impact_gain
						impatient = minor_stress_impact_gain
						lifestyle_gardener = minor_stress_impact_loss
						lifestyle_herbalist = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = -1
				ai_boldness = 0.5
			}
		}
	}

	option = { #Death Cap
		name = mining.1011.d
		trigger = { has_trait = lifestyle_herbalist }
		trait = lifestyle_herbalist
		flavor = {
			first_valid = {
				triggered_desc = {
					trigger = { exists = scope:poisonous_mushrooms }
					desc = mining.1011.d.poisonous
				}
				desc = mining.1011.d.medicinal
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_host_fungi_poison_log
				score = 25
				tags = { random neutral }
				character = root
				target = scope:mining_participant
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					if = {
						limit = { exists = scope:poisonous_mushrooms }
						add_character_modifier = {
							modifier = mining_poisonous_mushrooms_modifier
							years = 5
						}
						stress_impact = {
							lifestyle_miner = minor_stress_impact_gain
							schemer = minor_stress_impact_loss
							lifestyle_gardener = miniscule_stress_impact_loss
							lifestyle_herbalist = minor_stress_impact_loss
						}
					}
					else = {
						add_character_modifier = {
							modifier = mining_medicinal_mushrooms_modifier
							years = 5
						}
						if = {
							limit = { has_trait = lifestyle_physician }
							add_trait_xp = {
								trait = lifestyle_physician
								value = 2
							}
						}
						stress_impact = {
							lifestyle_miner = minor_stress_impact_gain
							lifestyle_physician = minor_stress_impact_loss
							lifestyle_gardener = miniscule_stress_impact_loss
							lifestyle_herbalist = minor_stress_impact_loss
						}
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = -1
				ai_boldness = 0.5
			}
		}
	}

	option = { #Uuuh, distraction!
		name = mining.1011.c
		scope:activity = {
			add_activity_log_entry = {
				key = mining_host_fungi_steal_log
				score = 25
				tags = { random neutral }
				character = root
				target = scope:mining_participant
				artifact = scope:newly_created_artifact
				
				#Effect
				root = {
					duel = {
						skill = intrigue
						value = average_skill_rating
						75 = {
							desc = mining.1011.c.success
							compare_modifier = {
								value = scope:duel_value
								multiplier = 5
							}
							min = 10
							show_as_tooltip = {
								scope:newly_created_artifact = {
									set_owner = root
								}
							}
							add_intrigue_lifestyle_xp = 200
						}
						25 = {	
							desc = learn_language_ongoing.1100.a.failure
							compare_modifier = {
								value = scope:duel_value
								multiplier = -5
							}
							min = 10
							reverse_add_opinion = {
								modifier = thinks_liege_incapable_opinion
								target = scope:mining_participant
								opinion = -10
							}
							hidden_effect_new_object = {
								scope:newly_created_artifact = { destroy_artifact = this }
							}
						}
					}
					stress_impact = {
						lifestyle_miner = medium_stress_impact_gain
						diligent = minor_stress_impact_gain
						honest = minor_stress_impact_gain
						lifestyle_gardener = minor_stress_impact_loss
						lifestyle_herbalist = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_honor = -0.5
				ai_boldness = 0.5
			}
		}
	}
}

# A party member investigates curious fungi

scripted_trigger mining_1012_courtier_interested_in_fungi = {
	NOR = {
		this = root
		trigger_if = {
			limit = { exists = scope:mining_participant }
			this = scope:mining_participant
		}
	}
	mining_1011_interested_in_fungi = yes
	is_ai = yes
}

mining.1012 = {
	type = activity_event
	title = mining.1011.t
	theme = stewardship
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						AND = {
							exists = scope:gardener
							scope:mining_participant = scope:gardener
						}
						AND = {
							exists = scope:physician
							scope:mining_participant = scope:physician
						}
					}
				}
				desc = mining.1012.opening_position
			}
			desc = mining.1012.opening
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:mining_participant_2
					OR = {
						AND = {
							exists = scope:gardener
							scope:mining_participant_2 = scope:gardener
						}
						AND = {
							exists = scope:physician
							scope:mining_participant_2 = scope:physician
						}
					}
				}
				desc = mining.1012.second_position
			}
			triggered_desc = {
				trigger = { exists = scope:mining_participant_2 }
				desc = mining.1012.second
			}
			desc = mining.1012.alone
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:gardener
					scope:mining_participant = {
						OR = {
							this = scope:gardener
							has_trait = lifestyle_gardener
						}
					}
				}
				desc = mining.1012.gardener
			}
			triggered_desc = {
				trigger = {
					exists = scope:physician
					scope:mining_participant = {
						OR = {
							this = scope:physician
							has_trait = lifestyle_herbalist
						}
					}
				}
				desc = mining.1012.physician
			}
			desc = mining.1012.desc
		}
	}

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = disapproval
	}
	center_portrait = {
		character = scope:mining_participant_2
		animation = thinking
	}
	right_portrait = {
		character = scope:mining_participant
		animation = happiness
	}
	lower_right_portrait = {
		trigger = {
			exists = scope:physician
			NOR = {
				scope:physician = scope:mining_participant
				AND = {
					exists = scope:mining_participant_2
					scope:physician = scope:mining_participant_2
				}
			}
		}
		character = scope:physician
	}
	lower_center_portrait = {
		trigger = {
			exists = scope:gardener
			NOR = {
				scope:gardener = scope:mining_participant
				AND = {
					exists = scope:mining_participant_2
					scope:gardener = scope:mining_participant_2
				}
			}
		}
		character = scope:gardener
	}

	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			any_attending_character = { mining_1012_courtier_interested_in_fungi = yes }
		}
	}

	immediate = {
		if = {
			limit = { employs_court_position = court_gardener_court_position }
			court_position:court_gardener_court_position = { save_scope_as = gardener }
		}
		if = {
			limit = { employs_court_position = court_physician_court_position }
			court_position:court_physician_court_position = { save_scope_as = physician }
		}
		scope:activity = {
			every_attending_character = {
				limit = { mining_1012_courtier_interested_in_fungi = yes }
				add_to_list = fungi_people
			}
		}
		random_in_list = {
			list = fungi_people
			limit = {
				is_of_major_interest_trigger = { CHARACTER = root }
			}
			alternative_limit = {
				is_of_minor_interest_trigger = { CHARACTER = root }
			}
			alternative_limit = { always = yes }
			weight = {
				base = 1
				modifier = {
					add = 1
					exists = scope:gardener
					this = scope:gardener
				}
				modifier = {
					add = 1
					exists = scope:physician
					this = scope:physician
				}
			}
			save_scope_as = mining_participant
		}
		if = {
			limit = {
				any_in_list = {
					list = fungi_people
					NOT = { this = scope:mining_participant }
				}
			}
			hidden_effect = {
				random = {
					chance = 33
					random_in_list = {
						list = fungi_people
						limit = {
							is_of_major_interest_trigger = { CHARACTER = root }
							NOT = { this = scope:mining_participant }
						}
						alternative_limit = {
							is_of_minor_interest_trigger = { CHARACTER = root }
							NOT = { this = scope:mining_participant }
						}
						alternative_limit = {
							NOT = { this = scope:mining_participant }
						}
						weight = {
							base = 1
							modifier = {
								add = 1
								exists = scope:gardener
								this = scope:gardener
							}
							modifier = {
								add = 1
								exists = scope:physician
								this = scope:physician
							}
						}
						save_scope_as = mining_participant_2
						progress_towards_friend_effect = {
							REASON = friend_bonded_over_botany
							CHARACTER = scope:mining_participant
							OPINION = default_friend_opinion
						}
					}
				}
			}
		}		
	}

	option = { # Focus on the expedition
		name = {
			text = mining.1012.a
			trigger = {
				NOT = { exists = scope:mining_participant_2 }
			}
		}
		name = {
			text = mining.1012.a.second
			trigger = { exists = scope:mining_participant_2 }
		}
		flavor = mining.1012.a.flavor
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_focus_log
				score = 25
				tags = { random neutral social }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 }
					add_prestige = miniscule_prestige_gain
					reverse_add_opinion = {
						modifier = disappointed_opinion
						target = scope:mining_participant
						opinion = -10
					}
					if = {
						limit = { exists = scope:mining_participant_2 }
						reverse_add_opinion = {
							modifier = disappointed_opinion
							target = scope:mining_participant_2
							opinion = -10
						}
					}
					mining_activity_success_change_effect = { CHANGE = increase_medium }
					stress_impact = {
						lifestyle_herbalist = minor_stress_impact_gain
						lifestyle_gardener = minor_stress_impact_gain
						patient = minor_stress_impact_gain
						content = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 1
			}
			modifier = {
				factor = 2
				has_trait = lifestyle_miner
			}
		}
	}

	option = { # Learn about Fungi
		name = mining.1012.b
		trigger = {
			NOR = {
				has_trait = lifestyle_herbalist
				has_trait = lifestyle_gardener
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_learn_log
				score = 25
				tags = { random neutral social }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					add_learning_lifestyle_xp = major_lifestyle_xp
					hidden_effect = {
						scope:mining_participant = {
							create_artifact_fungi_effect = { OWNER = scope:mining_participant }
						}
					}
					stress_impact = {
						lifestyle_miner = minor_stress_impact_gain
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_energy = -1
			}
			modifier = {
				factor = 2
				has_lifestyle = learning_lifestyle
			}
		}
	}

	option = { # Gardener bond
		name = {
			trigger = {
				has_trait = lifestyle_gardener
				NOT = { has_trait = lifestyle_herbalist }
			}
			text = mining.1012.e.gardener
		}
		name = {
			trigger = {
				has_trait = lifestyle_herbalist
				NOT = { has_trait = lifestyle_gardener }
			}
			text = mining.1012.e.herbalist
		}
		name = {
			trigger = {
				has_trait = lifestyle_gardener
				has_trait = lifestyle_herbalist
			}
			text = mining.1012.e
		}
		flavor = mining.1012.e.flavor
		trigger = {
			OR = {
				has_trait = lifestyle_gardener
				has_trait = lifestyle_herbalist
			}
		}
		trait = lifestyle_gardener
		trait = lifestyle_herbalist
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_bond_log
				score = 25
				tags = { random neutral }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					create_artifact_fungi_effect = { OWNER = root }
					progress_towards_friend_effect = {
						REASON = friend_bonded_over_botany
						CHARACTER = scope:mining_participant
						OPINION = default_friend_opinion
					}
					if = {
						limit = { exists = scope:mining_participant_2 }
						progress_towards_friend_effect = {
							REASON = friend_bonded_over_botany
							CHARACTER = scope:mining_participant_2
							OPINION = default_friend_opinion
						}
					}
					stress_impact = {
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
						lifestyle_herbalist = minor_stress_impact_loss
						lifestyle_gardener = medium_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_energy = -1
				ai_sociability = 0.5
			}
		}
	}

	option = { # Gardener CP
		name = {
			trigger = {
				scope:gardener = { is_participant_in_activity = scope:activity }
				OR = {
					scope:mining_participant = scope:gardener
					trigger_if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = scope:gardener
					}
				}
			}
			text = mining.1012.g
		}
		name = {
			trigger = {
				scope:gardener = { is_participant_in_activity = scope:activity }
				NOR = {
					scope:mining_participant = scope:gardener
					trigger_if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = scope:gardener
					}
				}
			}
			text = mining.1012.g.present
		}
		name = {
			trigger = {
				scope:gardener = {
					NOT = { is_participant_in_activity = scope:activity }
				}
			}
			text = mining.1012.g.elsewhere
		}
		flavor = {
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:gardener = { is_participant_in_activity = scope:activity }
						OR = {
							scope:mining_participant = scope:gardener
							trigger_if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = scope:gardener
							}
						}
					}
					desc = mining.1012.cp_flavor
				}
				triggered_desc = {
					trigger = {
						scope:gardener = { is_participant_in_activity = scope:activity }
						NOR = {
							scope:mining_participant = scope:gardener
							trigger_if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = scope:gardener
							}
						}
					}
					desc = mining.1012.cp_present_flavor
				}
				desc = mining.1012.cp_elsewhere_flavor
			}
		}
		trigger = { exists = scope:gardener }
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_gardener_log
				score = 25
				tags = { random social neutral }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					add_character_modifier = {
						modifier = mining_flourishing_garden_modifier
						years = 5 
					}
					scope:gardener = {
						if = {
							limit = { is_participant_in_activity = scope:activity }
							remove_from_activity = scope:activity
							if = {
								limit = {
									OR = {
										has_trait = lifestyle_miner
										has_trait = lazy
										NOR = {
											has_trait = lifestyle_herbalist
											has_trait = lifestyle_gardener
										}
									}
								}
								add_opinion = {
									modifier = annoyed_opinion
									target = root
									opinion = -10
								}
							}
							else = {
								add_opinion = {
									modifier = grateful_opinion
									target = root
									opinion = 10
								}
							}
						}
						else = {
							scope:mining_participant = {
								remove_from_activity = scope:activity
								if = {
									limit = {
										OR = {
											has_trait = lifestyle_miner
											has_trait = lazy
											NOR = {
												has_trait = lifestyle_herbalist
												has_trait = lifestyle_gardener
											}
										}
									}
									add_opinion = {
										modifier = annoyed_opinion
										target = root
										opinion = -20
									}
								}
								else = {
									add_opinion = {
										modifier = annoyed_opinion
										target = root
										opinion = -10
									}
								}
							}
							if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = {
									remove_from_activity = scope:activity
									if = {
										limit = {
											OR = {
												has_trait = lifestyle_miner
												has_trait = lazy
												NOR = {
													has_trait = lifestyle_herbalist
													has_trait = lifestyle_gardener
												}
											}
										}
										add_opinion = {
											modifier = annoyed_opinion
											target = root
											opinion = -20
										}
									}
									else = {
										add_opinion = {
											modifier = annoyed_opinion
											target = root
											opinion = -10
										}
									}
								}
							}
							add_opinion = {
								modifier = grateful_opinion
								target = root
								opinion = 10
							}
						}
					}
					stress_impact = {
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
						lifestyle_herbalist = miniscule_stress_impact_loss
						lifestyle_gardener = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_zeal = 1
				ai_boldness = 1
			}
			modifier = {
				factor = 2
				has_trait = paranoid
			}
		}
	}

	option = { # Physician CP
		name = {
			trigger = {
				scope:physician = { is_participant_in_activity = scope:activity }
				OR = {
					scope:mining_participant = scope:physician
					trigger_if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = scope:physician
					}
				}
			}
			text = mining.1012.h
		}
		name = {
			trigger = {
				scope:physician = { is_participant_in_activity = scope:activity }
				NOR = {
					scope:mining_participant = scope:physician
					trigger_if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = scope:physician
					}
				}
			}
			text = mining.1012.h.present
		}
		name = {
			trigger = {
				scope:physician = {
					NOT = { is_participant_in_activity = scope:activity }
				}
			}
			text = mining.1012.h.elsewhere
		}
		flavor = {
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:physician = { is_participant_in_activity = scope:activity }
						OR = {
							scope:mining_participant = scope:physician
							trigger_if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = scope:physician
							}
						}
					}
					desc = mining.1012.cp_flavor
				}
				triggered_desc = {
					trigger = {
						scope:physician = { is_participant_in_activity = scope:activity }
						NOR = {
							scope:mining_participant = scope:physician
							trigger_if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = scope:physician
							}
						}
					}
					desc = mining.1012.cp_present_flavor
				}
				desc = mining.1012.cp_elsewhere_flavor
			}
		}
		trigger = { exists = scope:physician }
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_physician_log
				score = 25
				tags = { random social neutral }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					add_character_modifier = {
						modifier = mining_stocked_medicus_modifier
						years = 5 
					}
					scope:physician = {
						if = {
							limit = { is_participant_in_activity = scope:activity }
							remove_from_activity = scope:activity
							if = {
								limit = {
									NOT = { this = scope:mining_participant }
									OR = {
										has_trait = lifestyle_miner
										has_trait = lazy
										NOR = {
											has_trait = lifestyle_herbalist
											has_trait = lifestyle_gardener
										}
									}
								}
								add_opinion = {
									modifier = annoyed_opinion
									target = root
									opinion = -10
								}
							}
							else = {
								add_opinion = {
									modifier = grateful_opinion
									target = root
									opinion = 10
								}
							}
						}
						else = {
							scope:mining_participant = {
								remove_from_activity = scope:activity
								if = {
									limit = {
										OR = {
											has_trait = lifestyle_miner
											has_trait = lazy
											NOR = {
												has_trait = lifestyle_herbalist
												has_trait = lifestyle_gardener
											}
										}
									}
									add_opinion = {
										modifier = annoyed_opinion
										target = root
										opinion = -20
									}
								}
								else = {
									add_opinion = {
										modifier = grateful_opinion
										target = root
										opinion = 10
									}
								}
							}
						}
					}
					stress_impact = {
						impatient = minor_stress_impact_gain
						callous = minor_stress_impact_gain
						lifestyle_herbalist = minor_stress_impact_loss
						lifestyle_gardener = miniscule_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_zeal = 1
				ai_boldness = 1
			}
			modifier = {
				factor = 2
				has_trait = paranoid
			}
		}
	}

	option = { #Witchcraft!?
		name = {
			text = mining.1012.c
			trigger = {
				scope:mining_participant = {
					NOR = {
						has_trait = witch
						any_secret = {
							secret_type = secret_witch
							is_known_by = root
						}
					}
				}
			}
		}
		name = {
			text = mining.1012.c.known
			trigger = {
				scope:mining_participant = {
					OR = {
						has_trait = witch
						any_secret = {
							secret_type = secret_witch
							is_known_by = root
						}
					}
				}
			}
		}
		flavor = mining.1012.c.flavor
		trigger = {
			NOR = {
				is_witch_trigger = yes
				faith = { has_doctrine_parameter = witchcraft_accepted }
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_witchcraft_log
				score = 25
				tags = { random social bad }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					add_piety = minor_piety_gain
					scope:mining_participant = {
						add_opinion = {
							modifier = accused_crime_opinion
							target = root
							opinion = -15
						}
						add_character_modifier = {
							modifier = hunt_witch_suspicion_modifier # LotR - fine to retain
							years = 5
						}
					}
					if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = {
							add_opinion = {
								modifier = accused_crime_opinion
								target = root
								opinion = -15
							}
							add_character_modifier = {
								modifier = hunt_witch_suspicion_modifier # LotR - fine to retain
								years = 5
							}
						}
					}
					stress_impact = {
						cynical = minor_stress_impact_gain
						compassionate = minor_stress_impact_gain
						lifestyle_herbalist = medium_stress_impact_gain
						lifestyle_gardener = medium_stress_impact_gain
						scholar = medium_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_zeal = 1
				ai_boldness = 1
			}
			modifier = {
				factor = 2
				has_trait = paranoid
			}
		}
	}

	option = { #Witch - Be more careful
		name = mining.1012.d
		flavor = mining.1012.d.flavor
		trigger = {
			is_witch_trigger = yes
			scope:mining_participant = {
				OR = {
					has_trait = witch
					any_secret = {
						secret_type = secret_witch
						is_known_by = root
					}
				}
			}
		}
		trait = witch
		scope:activity = {
			add_activity_log_entry = {
				key = mining_fungi_fellow_witch_log
				score = 25
				tags = { random neutral social }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					add_character_modifier = {
						modifier = hunt_witch_protector_modifier # LotR - fine to retain
						years = 10
					}
					reverse_add_opinion = {
						modifier = hunt_fellow_witch_opinion # LotR - fine to retain
						target = scope:mining_participant
						opinion = 15
					}
					if = {
						limit = {
							any_secret = {
								secret_type = secret_witch
								NOT = { is_known_by = scope:mining_participant }
							}
						}
						random_secret = {
							limit = {
								secret_type = secret_witch
								NOT = { is_known_by = scope:mining_participant }
							}
							reveal_to = scope:mining_participant
						}
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_zeal = 1
				ai_boldness = 1
			}
			modifier = {
				factor = 2
				has_trait = paranoid
			}
		}
	}
}

# You walk in on some cave lovin'

scripted_trigger mining_1021_basic_check_trigger = {
	NOT = { this = root }
	is_adult = yes
	is_ai = yes
}

scripted_trigger mining_1021_secret_trigger = {
	any_secret = {
		secret_type = secret_lover
		NOT = { is_known_by = root }
		secret_target = {
			mining_1021_basic_check_trigger = yes
			is_participant_in_activity = scope:activity
		}
	}
}

mining.1021 = {
	type = activity_event
	title = mining.1021.t
	desc = mining.1021.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = scope:lover_participant
		animation = flirtation
	}
	right_portrait = {
		character = scope:second_lover_participant
		animation = happiness
	}
	
	trigger = {
		scope:activity = {
			OR = { #Either two that are already lovers, or a lustful one that can pick someone up
				any_attending_character = {
					mining_1021_basic_check_trigger = yes
					mining_1021_secret_trigger = yes
				}
				any_attending_character = {
					mining_1021_basic_check_trigger = yes
					has_trait = lustful
					save_temporary_scope_as = lover_check
					scope:activity = {
						any_attending_character = {
							mining_1021_basic_check_trigger = yes
							NOT = { this = scope:lover_check }
							matching_gender_and_sexuality_trigger = { CHARACTER_1 = this CHARACTER_2 = scope:lover_check }
							can_set_relation_lover_trigger = { CHARACTER = scope:lover_check }
						}
					}
				}
			}
		}
	}

	weight_multiplier = {
		base = 0.75
		modifier = { #more likely to fire if two participants already are lovers
			add = 0.5
			scope:activity = {
				any_attending_character = {
					mining_1021_basic_check_trigger = yes
					mining_1021_secret_trigger = yes
				}
			}
		}
	}

	immediate = {
		scope:activity = {
			if = { #They're already lovers
				limit = {
					any_attending_character = {
						mining_1021_basic_check_trigger = yes
						mining_1021_secret_trigger = yes
					}
				}
				random_attending_character = { #Find your vassal
					limit = { #They are already lovers
						mining_1021_basic_check_trigger = yes
						mining_1021_secret_trigger = yes
					}
					save_scope_as = lover_participant
				}
				random_attending_character = {
					limit = { #They are already lovers
						mining_1021_basic_check_trigger = yes
						NOT = { this = scope:lover_participant }
						any_secret = {
							secret_type = secret_lover
							NOT = { is_known_by = root }
							secret_target = {
								this = scope:lover_participant
							}
						}
					}
					save_scope_as = second_lover_participant

					#To save the secret's scope
					if = {
						limit = {
							any_secret = {
								secret_type = secret_lover
								secret_target = {
									this = scope:lover_participant
									mining_1021_basic_check_trigger = yes
								}
								NOT = { is_known_by = root }
							}
						}
						random_secret = {
							limit = {
								secret_type = secret_lover
								secret_target = {
									this = scope:lover_participant
									mining_1021_basic_check_trigger = yes
								}
								NOT = { is_known_by = root }
							}
							save_scope_as = secret
						}
					}
				}
			}
			else = { #We make em lovers
				random_attending_character = { #Find your vassal
					limit = {
						mining_1021_basic_check_trigger = yes
						has_trait = lustful
						save_temporary_scope_as = lover_check
						scope:activity = {
							any_attending_character = {
								mining_1021_basic_check_trigger = yes
								NOT = { this = scope:lover_check }
								matching_gender_and_sexuality_trigger = { CHARACTER_1 = this CHARACTER_2 = scope:lover_check }
								can_set_relation_lover_trigger = { CHARACTER = scope:lover_check }
							}
						}
					}
					save_scope_as = lover_participant
				}
				random_attending_character = {
					limit = {
						mining_1021_basic_check_trigger = yes
						NOT = { this = scope:lover_participant }
						matching_gender_and_sexuality_trigger = { CHARACTER_1 = this CHARACTER_2 = scope:lover_participant }
						can_set_relation_lover_trigger = { CHARACTER = scope:lover_participant }
					}
					save_scope_as = second_lover_participant

					#To make them lovers
					hidden_effect = { set_relation_lover = scope:lover_participant }
					
					#To save the secret's scope
					if = {
						limit = {
							any_secret = {
								secret_type = secret_lover
								secret_target = {
									this = scope:lover_participant
									mining_1021_basic_check_trigger = yes
								}
								NOT = { is_known_by = root }
							}
						}
						random_secret = {
							limit = {
								secret_type = secret_lover
								secret_target = {
									this = scope:lover_participant
									mining_1021_basic_check_trigger = yes
								}
								NOT = { is_known_by = root }
							}
							save_scope_as = secret
						}
					}
				}
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_secret_log
				score = 25
				tags = { random social neutral }
				character = scope:lover_participant
				target = scope:second_lover_participant

				# Effect
				show_as_tooltip = {
					scope:secret = { reveal_to = root }
				}
			}
		}
		if = {
			limit = {
				exists = scope:secret
				scope:secret = {
					NOT = { is_known_by = root }
				}
			}
			scope:secret = {
				reveal_to_without_events_effect = {
					CHARACTER = root
				}
			}
		}
	}

	option = { #Keep the secret
		name = mining.1021.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_secret_log
				score = 25
				tags = { random social neutral }
				character = scope:lover_participant
				target = scope:second_lover_participant

				# Effect
				root = {
					reverse_add_opinion = {
						target = scope:lover_participant
						modifier = grateful_opinion
						opinion = 15
					}
					reverse_add_opinion = {
						target = scope:second_lover_participant
						modifier = grateful_opinion
						opinion = 15
					}
					stress_impact = {
						honest = minor_stress_impact_gain
						contrite = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = 0.5
			}
			modifier = {
				add = 20
				OR = {
					has_relation_lover = scope:lover_participant
					has_relation_lover = scope:second_lover_participant
				}
			}
		}
	}

	option = { #Expose the secret
		name = mining.1021.b
		trigger = { exists = scope:secret } # Chance of Secret invalidating
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_secret_log
				score = 25
				tags = { random social neutral }
				character = scope:lover_participant
				target = scope:second_lover_participant
				
				#Effect
				scope:secret = {
					expose_secret = root
				}
				root = {
					stress_impact = {
						honest = minor_stress_impact_loss
						just = minor_stress_impact_loss
						contrite = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 30
				OR = {
					has_trait = just
					has_trait = zealous
					has_trait = celibate
				}
			}
			ai_value_modifier = {
				ai_honor = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	option = { #Join in - relationship or seducer trait
		name = {
			trigger = {
				has_relation_lover = scope:lover_participant
				has_relation_lover = scope:second_lover_participant
			}
			text = mining.1021.c_4
		}
		name = {
			trigger = {
				has_relation_lover = scope:lover_participant
			}
			text = mining.1021.c_1
		}
		name = {
			trigger = {
				has_relation_lover = scope:second_lover_participant
			}
			text = mining.1021.c_2
		}
		name = {
			trigger = {
				NOR = {
					has_relation_lover = scope:lover_participant
					has_relation_lover = scope:second_lover_participant
				}
			}
			text = mining.1021.c_3
		}
		trigger = {
			OR = {
				AND = { #you only feel ok about it if you're lustful
					OR = {
						has_relation_lover = scope:lover_participant
						has_relation_lover = scope:second_lover_participant
					}
					has_trait = lustful
				}
				has_trait = seducer
			}
		}
		trait = seducer
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_secret_join_log
				score = 25
				tags = { random social neutral }
				character = scope:lover_participant
				target = scope:second_lover_participant
				
				#Effect
				root = {
					if = {
						limit = {
							has_relation_potential_lover = scope:lover_participant
							can_set_relation_lover_trigger = { CHARACTER = scope:lover_participant }
						}
						set_relation_lover = scope:lover_participant
					}
					else_if = {
						limit = { has_relation_lover = scope:lover_participant }
						scope:lover_participant = {
							add_opinion = {
								modifier = pleased_opinion
								target = root
								opinion = 20
							}
						}
					}
					else = { set_relation_potential_lover = scope:lover_participant }
					if = {
						limit = {
							has_relation_potential_lover = scope:second_lover_participant
							can_set_relation_potential_lover_trigger = { CHARACTER = scope:second_lover_participant }
						}
						set_relation_lover = scope:second_lover_participant
					}
					else_if = {
						limit = { has_relation_lover = scope:second_lover_participant }
						scope:second_lover_participant = {
							add_opinion = {
								modifier = pleased_opinion
								target = root
								opinion = 20
							}
						}
					}
					else = { set_relation_potential_lover = scope:second_lover_participant }
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					stress_impact = {
						base = minor_stress_impact_loss
						rakish = minor_stress_impact_loss
						lustful = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 75
			modifier = {
				add = 30
				has_trait = lustful
			}
		}
	}

	option = { #Betrayed!!
		name = {
			trigger = {
				OR = {
					AND = {
						has_relation_lover = scope:second_lover_participant
						opinion = {
							target = scope:second_lover_participant
							value >= 70
						}
						NOT = { has_trait = lustful }
					}
					has_relation_soulmate = scope:second_lover_participant
				}
			}
			text = mining.1021.d
		}
		name = {
			trigger = {
				OR = {
					AND = {
						has_relation_lover = scope:lover_participant
						opinion = {
							target = scope:lover_participant
							value >= 70
						}
						NOT = { has_trait = lustful }
					}
					has_relation_soulmate = scope:lover_participant
				}
			}
			text = mining.1021.d_2
		}
		trigger = { #Either you are soulmates, or you like them very much
			OR = {
				OR = {
					AND = {
						has_relation_lover = scope:lover_participant
						opinion = {
							target = scope:lover_participant
							value >= 70
						}
						NOT = { has_trait = lustful }
					}
					has_relation_soulmate = scope:lover_participant
				}
				OR = {
					AND = {
						has_relation_lover = scope:second_lover_participant
						opinion = {
							target = scope:second_lover_participant
							value >= 70
						}
						NOT = { has_trait = lustful }
					}
					has_relation_soulmate = scope:second_lover_participant
				}
			}
		}
		if = {
			limit = {
				OR = {
					AND = {
						has_relation_lover = scope:lover_participant
						opinion = {
							target = scope:lover_participant
							value >= 70
						}
						NOT = { has_trait = lustful }
					}
					has_relation_soulmate = scope:lover_participant
				}
			}
			scope:lover_participant = { save_scope_as = betraying_lover }
		}
		else = {
			scope:second_lover_participant = { save_scope_as = betraying_lover }
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_secret_log
				score = 25
				tags = { random social bad }
				character = scope:lover_participant
				target = scope:second_lover_participant
				
				#Effect
				root = {
					remove_relation_lover = scope:betraying_lover
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
				}
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = { #Oh come on, we have mining to focus on!
		name = mining.1021.e
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_secret_log
				character = scope:lover_participant
				target = scope:second_lover_participant
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = increase_minor }
					stress_impact = {
						just = minor_stress_impact_gain
						diligent = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = 0.5
			}
			modifier = {
				add = 20
				NOR = {
					has_relation_lover = scope:lover_participant
					has_relation_lover = scope:second_lover_participant
				}
			}
		}
	}
}

# Illegal mining activity

mining.1031 = {
	type = activity_event
	title = mining.1031.t
	desc = mining.1031.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}	

	left_portrait = {
		character = root
		animation = war_over_win
	}
	right_portrait = {
		character = scope:opportunistic_miner
		animation = beg
		outfit_tags = { travel_cloak }
	}

	cooldown = { years = 10 }

	trigger = {
		OR = {
			involved_activity.activity_host = this
			has_court_position = overseer_of_the_mines_court_position
			has_court_position = stone_singer_court_position
		}
		scope:activity.activity_location.county = {
			NOT = { has_county_modifier = mining_punished_locals_modifier }
		}
		scope:activity = { 
			has_activity_option = {
				category = special_type
				option = mining_type_standard
			}
		}
	}

	immediate = {
		create_character = {
			template = miner_template
			location = scope:activity.activity_location
			save_scope_as = opportunistic_miner
		}
		scope:activity = {
			activity_location = {
				county = {
					save_scope_as = county
					holder = { save_scope_as = land_owner }
				}
			}
		}
	}

	option = { #Punish them
		name = mining.1031.a
		trigger = { scope:land_owner.top_liege = root.top_liege }
		scope:activity = {
			add_activity_log_entry = {
				key = mining_opportunists_punished_log
				score = 25
				tags = { random bad }
				character = root
				target = scope:opportunistic_miner

				# Effect
				scope:activity.activity_location.county = {
					add_county_modifier = {
						modifier = mining_punished_locals_modifier
						years = 10
					}
				}
				root = {
					stress_impact = {
						forgiving = minor_stress_impact_gain
						compassionate = minor_stress_impact_gain
						arbitrary = minor_stress_impact_loss
						vengeful = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = -0.5
				ai_boldness = 1
			}
		}
	}

	option = { #I will let you go if you teach me a thing or two
		name = mining.1031.b
		trigger = {
			miner_lifestyle_track_less_trigger = { TRACK = hewer LESS_THAN = 100 }
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_opportunists_lesson_log
				score = 25
				tags = { random bad }
				character = root
				target = scope:opportunistic_miner

				# Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					add_character_modifier = {
						modifier = mining_oppostunistic_miner_training_modifier
						years = 10
					}
					hidden_effect = {
						miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 } #Gives points towards ranking up the Hunter Lifestyle
					}
					stress_impact = {
						just = minor_stress_impact_loss
						vengeful = minor_stress_impact_gain
						forgiving = minor_stress_impact_loss
						ambitious = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_energy = 1
				ai_honor = -0.5
			}
		}
	}
	
	option = { #Claim the ores and a legal right to their value
		name = mining.1031.c
		scope:activity = {
			add_activity_log_entry = {
				key = mining_opportunists_legal_log
				score = 25
				tags = { random bad }
				character = root
				target = scope:opportunistic_miner

				# Effect
				root = {
					duel = {
						skill = stewardship
						value = average_skill_rating
						8 = {
							compare_modifier = {
								value = scope:duel_value
								multiplier = 0.25
							}
							desc = mining.1031.c.tt_success
							send_interface_toast = {
								title = mining.1031.c.tt_success
								add_gold = medium_gold_value
								add_prestige = minor_prestige_gain
								mining_activity_success_change_effect = { CHANGE = increase_minor }
							}
						}
						12 = {
							compare_modifier = {
								value = scope:duel_value
								multiplier = -0.25
								min = -9
							}
							desc = mining.1031.c.tt_failure
							send_interface_toast = {
								title = mining.1031.c.tt_failure
								add_prestige = medium_prestige_loss
								scope:county = {
									add_county_modifier = {
										modifier = mining_upset_mining_county_modifier
										years = 10
									}
								}
							}
							mining_activity_success_change_effect = { CHANGE = decrease_major }
						}
					}
					stress_impact = {
						compassionate = medium_stress_impact_gain
						honest = medium_stress_impact_gain
						vengeful = minor_stress_impact_loss
						arrogant = minor_stress_impact_loss
						ambitious = minor_stress_impact_loss
						arbitrary = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_greed = 1
				ai_boldness = -0.5
			}
		}
	}

	option = { #Let them off, as it's not your land
		name = {
			text = mining.1031.d
			trigger = {
				NOR = {
					scope:land_owner.top_liege = root.top_liege
					has_relation_rival = scope:land_owner
				}
			}
		}
		name = {
			text = mining.1031.d.vassal
			trigger = { scope:land_owner.top_liege = root.top_liege }
		}
		name = {
			text = mining.1031.d.own
			trigger = { scope:land_owner.top_liege = root }
		}
		name = {
			text = mining.1031.d.rival
			trigger = { has_relation_rival = scope:land_owner }
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_opportunists_pardon_log
				score = 25
				tags = { random bad }
				character = root
				target = scope:opportunistic_miner

				#Effect
				root = {
					if = {
						limit = {
							NOT = { this = scope:land_owner }
						}
						reverse_add_opinion = {
							target = scope:land_owner
							modifier = mining_released_opportunists_opinion
							opinion = -10
						}
					}
					if = {
						limit = { has_relation_rival = scope:land_owner }
						stress_impact = {
							base = medium_stress_impact_loss
							just = minor_stress_impact_gain
							vengeful = minor_stress_impact_loss
						}
					}
					else_if = {
						limit = { scope:land_owner.top_liege = root.top_liege }
						stress_impact = {
							just = minor_stress_impact_gain
							vengeful = minor_stress_impact_loss
							callous = minor_stress_impact_loss
						}
					}
					else = {
						stress_impact = {
							just = minor_stress_impact_gain
							sadistic = minor_stress_impact_loss
						}
					}
				}
			}
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_compassion = 0.5
				ai_honor = -0.5
				ai_boldness = -0.5
			}
		}
	}

	after = {
		scope:opportunistic_miner = { silent_disappearance_effect = yes }
	}
}

scripted_trigger mining_1040_interested_in_hunting = { #POV of the hunter
	OR = {
		has_trait = lifestyle_hunter
		has_lifestyle = martial_lifestyle
		has_trait = curious
		has_trait = gluttonous
		has_trait = lifestyle_reveler
		AND = {
			has_court_position = master_of_hunt_court_position
			aptitude = {
				court_position = master_of_hunt_court_position
				value >= 2
			}
		}
	}
}

scripted_trigger mining_1040_courtier_interested_in_hunting = {
	NOR = {
		this = root
		trigger_if = {
			limit = { exists = scope:hunt_participant }
			this = scope:hunt_participant
		}
	}
	mining_1040_interested_in_hunting = yes
	is_ai = yes
}

mining.1040 = {
	type = activity_event
	title = mining.1040.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					AND = {
						exists = scope:master_of_hunt
						scope:mining_participant = scope:master_of_hunt
					}
				}
				desc = mining.1040.opening_position
			}
			desc = mining.1040.opening
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:mining_participant_2
					AND = {
						exists = scope:master_of_hunt
						scope:mining_participant = scope:master_of_hunt
					}
				}
				desc = mining.1040.second_position
			}
			triggered_desc = {
				trigger = { exists = scope:mining_participant_2 }
				desc = mining.1040.second
			}
			desc = mining.1040.alone
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:master_of_hunt
					scope:mining_participant = {
						OR = {
							this = scope:master_of_hunt
							has_trait = lifestyle_hunter
						}
					}
				}
				desc = mining.1040.master_of_hunt
			}
			desc = mining.1040.desc
		}
	}
	theme = hunt_activity
	left_portrait = {
		character = root
		animation = disapproval
	}
	center_portrait = {
		character = scope:mining_participant_2
		animation = thinking
	}
	right_portrait = {
		character = scope:mining_participant
		animation = happiness
	}
	lower_right_portrait = {
		trigger = {
			exists = scope:master_of_hunt
			NOR = {
				scope:master_of_hunt = scope:mining_participant
				AND = {
					exists = scope:mining_participant_2
					scope:master_of_hunt = scope:mining_participant_2
				}
			}
		}
		character = scope:master_of_hunt
	}
	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			any_attending_character = { mining_1040_courtier_interested_in_hunting = yes }
		}
	}

	immediate = {
		if = {
			limit = { employs_court_position = master_of_hunt_court_position }
			court_position:master_of_hunt_court_position = { save_scope_as = master_of_hunt }
		}
		scope:activity = {
			every_attending_character = {
				limit = { mining_1040_courtier_interested_in_hunting = yes }
				add_to_list = hunt_people
			}
		}
		random_in_list = {
			list = hunt_people
			limit = {
				is_of_major_interest_trigger = { CHARACTER = root }
			}
			alternative_limit = {
				is_of_minor_interest_trigger = { CHARACTER = root }
			}
			alternative_limit = { always = yes }
			weight = {
				base = 1
				modifier = {
					add = 1
					exists = scope:master_of_hunt
					this = scope:master_of_hunt
				}
			}
			save_scope_as = mining_participant
		}
		if = {
			limit = {
				any_in_list = {
					list = hunt_people
					NOT = { this = scope:mining_participant }
				}
			}
			hidden_effect = {
				random = {
					chance = 33
					random_in_list = {
						list = hunt_people
						limit = {
							is_of_major_interest_trigger = { CHARACTER = root }
							NOT = { this = scope:mining_participant }
						}
						alternative_limit = {
							is_of_minor_interest_trigger = { CHARACTER = root }
							NOT = { this = scope:mining_participant }
						}
						alternative_limit = {
							NOT = { this = scope:mining_participant }
						}
						weight = {
							base = 1
							modifier = {
								add = 1
								exists = scope:master_of_hunt
								this = scope:master_of_hunt
							}
						}
						save_scope_as = mining_participant_2
						progress_towards_friend_effect = {
							REASON = friend_hunt_conversation_impressed
							CHARACTER = scope:mining_participant
							OPINION = default_friend_opinion
						}
					}
				}
			}
		}		
	}

	option = { #Focus on the mining
		name = {
			text = mining.1040.a
			trigger = {
				NOT = { exists = scope:mining_participant_2 }
			}
		}
		name = {
			text = mining.1040.a.second
			trigger = { exists = scope:mining_participant_2 }
		}
		flavor = mining.1040.a.flavor
		scope:activity = {
			add_activity_log_entry = {
				key = mining_rats_focus_log
				score = 25
				tags = { random neutral social }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 }
					add_prestige = miniscule_prestige_gain
					reverse_add_opinion = {
						modifier = disappointed_opinion
						target = scope:mining_participant
						opinion = -10
					}
					if = {
						limit = { exists = scope:mining_participant_2 }
						reverse_add_opinion = {
							modifier = disappointed_opinion
							target = scope:mining_participant_2
							opinion = -10
						}
					}
					mining_activity_success_change_effect = { CHANGE = increase_medium }
					stress_impact = {
						lifestyle_hunter = minor_stress_impact_gain
						lifestyle_reveler = minor_stress_impact_gain
						patient = minor_stress_impact_gain
						content = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 1
			}
			modifier = {
				factor = 2
				has_trait = lifestyle_miner
			}
		}
	}

	option = { #catch the mole-rats
		name = mining.1040.b
		trigger = {
			NOR = {
				has_trait = lifestyle_reveler
				has_trait = lifestyle_hunter
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = mining_rats_hunt_log
				score = 25
				tags = { random neutral social }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					add_martial_lifestyle_xp = major_lifestyle_xp
					stress_impact = {
						lifestyle_miner = minor_stress_impact_gain
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_energy = -1
			}
			modifier = {
				factor = 2
				has_lifestyle = martial_lifestyle
			}
		}
	}

	option = { #Hunter bond
		name = {
			trigger = {
				has_trait = lifestyle_hunter
				NOT = { has_trait = lifestyle_reveler }
			}
			text = mining.1040.e.hunter
		}
		name = {
			trigger = {
				has_trait = lifestyle_reveler
				NOT = { has_trait = lifestyle_hunter }
			}
			text = mining.1040.e.reveler
		}
		name = {
			trigger = {
				has_trait = lifestyle_reveler
				has_trait = lifestyle_hunter
			}
			text = mining.1040.e
		}
		flavor = mining.1040.e.flavor
		trigger = {
			OR = {
				has_trait = lifestyle_reveler
				has_trait = lifestyle_hunter
			}
		}
		trait = lifestyle_reveler
		trait = lifestyle_hunter
		scope:activity = {
			add_activity_log_entry = {
				key = mining_rats_bond_log
				score = 25
				tags = { random neutral }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					add_character_modifier = {
						modifier = mining_rat_meat_modifier
						years = 5 
					}
					progress_towards_friend_effect = {
						REASON = friend_hunt_conversation_impressed
						CHARACTER = scope:mining_participant
						OPINION = default_friend_opinion
					}
					if = {
						limit = { exists = scope:mining_participant_2 }
						progress_towards_friend_effect = {
							REASON = friend_hunt_conversation_impressed
							CHARACTER = scope:mining_participant_2
							OPINION = default_friend_opinion
						}
					}
					stress_impact = {
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
						lifestyle_hunter = minor_stress_impact_loss
						lifestyle_reveler = medium_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_energy = -1
				ai_sociability = 0.5
			}
		}
	}

	option = { #master_of_hunt cp
		name = {
			trigger = {
				scope:master_of_hunt = { is_participant_in_activity = scope:activity }
				OR = {
					scope:mining_participant = scope:master_of_hunt
					trigger_if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = scope:master_of_hunt
					}
				}
			}
			text = mining.1040.g
		}
		name = {
			trigger = {
				scope:master_of_hunt = { is_participant_in_activity = scope:activity }
				NOR = {
					scope:mining_participant = scope:master_of_hunt
					trigger_if = {
						limit = { exists = scope:mining_participant_2 }
						scope:mining_participant_2 = scope:master_of_hunt
					}
				}
			}
			text = mining.1040.g.present
		}
		name = {
			trigger = {
				scope:master_of_hunt = {
					NOT = { is_participant_in_activity = scope:activity }
				}
			}
			text = mining.1040.g.elsewhere
		}
		flavor = {
			first_valid = {
				triggered_desc = {
					trigger = {
						scope:master_of_hunt = { is_participant_in_activity = scope:activity }
						OR = {
							scope:mining_participant = scope:master_of_hunt
							trigger_if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = scope:master_of_hunt
							}
						}
					}
					desc = mining.1040.cp_flavor
				}
				triggered_desc = {
					trigger = {
						scope:master_of_hunt = { is_participant_in_activity = scope:activity }
						NOR = {
							scope:mining_participant = scope:master_of_hunt
							trigger_if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = scope:master_of_hunt
							}
						}
					}
					desc = mining.1040.cp_present_flavor
				}
				desc = mining.1040.cp_elsewhere_flavor
			}
		}
		trigger = { exists = scope:master_of_hunt }
		scope:activity = {
			add_activity_log_entry = {
				key = mining_rats_hunter_log
				score = 25
				tags = { random social neutral }
				character = scope:mining_participant
				target = scope:mining_participant_2
				
				#Effect
				root = {
					add_character_modifier = {
						modifier = mining_well_stocked_larder_modifier
						years = 5 
					}
					scope:master_of_hunt = {
						if = {
							limit = { is_participant_in_activity = scope:activity }
							remove_from_activity = scope:activity
							if = {
								limit = {
									OR = {
										has_trait = lifestyle_miner
										has_trait = lazy
										NOR = {
											has_trait = lifestyle_hunter
											has_trait = lifestyle_reveler
										}
									}
								}
								add_opinion = {
									modifier = annoyed_opinion
									target = root
									opinion = -10
								}
							}
							else = {
								add_opinion = {
									modifier = grateful_opinion
									target = root
									opinion = 10
								}
							}
						}
						else = {
							scope:mining_participant = {
								remove_from_activity = scope:activity
								if = {
									limit = {
										OR = {
											has_trait = lifestyle_miner
											has_trait = lazy
											NOR = {
												has_trait = lifestyle_hunter
												has_trait = lifestyle_reveler
											}
										}
									}
									add_opinion = {
										modifier = annoyed_opinion
										target = root
										opinion = -20
									}
								}
								else = {
									add_opinion = {
										modifier = annoyed_opinion
										target = root
										opinion = -10
									}
								}
							}
							if = {
								limit = { exists = scope:mining_participant_2 }
								scope:mining_participant_2 = {
									remove_from_activity = scope:activity
									if = {
										limit = {
											OR = {
												has_trait = lifestyle_miner
												has_trait = lazy
												NOR = {
													has_trait = lifestyle_hunter
													has_trait = lifestyle_reveler
												}
											}
										}
										add_opinion = {
											modifier = annoyed_opinion
											target = root
											opinion = -20
										}
									}
									else = {
										add_opinion = {
											modifier = annoyed_opinion
											target = root
											opinion = -10
										}
									}
								}
							}
							add_opinion = {
								modifier = grateful_opinion
								target = root
								opinion = 10
							}
						}
					}
					stress_impact = {
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
						lifestyle_hunter = miniscule_stress_impact_loss
						lifestyle_reveler = minor_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_zeal = 1
				ai_boldness = 1
			}
			modifier = {
				factor = 2
				has_trait = paranoid
			}
		}
	}
}

# Sneak away with your lover

scripted_trigger mining_1041_lover_trigger = {
	NOT = { this = root }
	is_adult = yes
	is_ai = yes
	has_relation_lover = root
}

mining.1041 = {
	type = activity_event
	title = mining.1041.t
	desc = mining.1041.desc
	theme = stewardship
	
	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = happiness
	}

	right_portrait = {
		character = scope:lover_participant
		animation = flirtation
	}
	
	trigger = {
		exists = scope:activity
		scope:activity = {
			any_attending_character = { mining_1041_lover_trigger = yes }
		}
	}

	weight_multiplier = {
		base = 0.5
		modifier = { #more likely to fire if no cool characters have joined
			add = 0.5
			scope:activity = {
				NOT = {
					any_attending_character = { is_powerful_vassal_of = root }
				}
			}
		}
	}

	immediate = {
		play_music_cue = "mx_cue_seduction"
		scope:activity.activity_location = { save_scope_as = background_terrain_scope }
		scope:activity = {
			random_attending_character = { #Find your lover!
				limit = { mining_1041_lover_trigger = yes }
				save_scope_as = lover_participant
			}
		}
	}

	option = { #Go for it
		name = mining.1041.a
		flavor = mining.1041.a.tt
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_sneak_key
				score = 25
				tags = { random good social }
				character = root
				target = scope:lover_participant

				#Effect
				root = {
					had_sex_with_effect = {
						CHARACTER = scope:lover_participant
						PREGNANCY_CHANCE = pregnancy_chance
					}
					scope:lover_participant = {
						add_opinion = {
							target = root
							modifier = love_opinion
							opinion = 20
						}
					}
					mining_activity_success_change_effect = { CHANGE = decrease_medium }
					stress_impact = {
						rakish = medium_stress_impact_loss
						chaste = medium_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_energy = 0.5
			}
		}
	}

	option = { #Nah
		name = mining.1041.b
		scope:activity = {
			add_activity_log_entry = {
				key = mining_lover_focus_key
				score = 25
				tags = { random good social }
				character = root
				target = scope:lover_participant

				#Effect
				root = {
					add_prestige = minor_prestige_gain
					add_character_modifier = {
						modifier = hunt_focused_attention_modifier # LotR - OK to keep
						years = 5
					}
					mining_activity_success_change_effect = { CHANGE = increase_medium }
					stress_impact = {
						lustful = medium_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 100
				has_trait = lifestyle_miner
			}
			ai_value_modifier = {
				ai_honor = 0.25
			}
		}
	}
}

mining.1050 = { # Chamber of Mazarbul event
	type = activity_event
	title = mining.1050.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					AND = {
						exists = scope:stone_singer
						scope:mining_participant = scope:stone_singer
					}
				}
				desc = mining.1050.opening_stone_singer
			}
			triggered_desc = {
				trigger = {
					AND = {
						exists = scope:overseer
						scope:mining_participant = scope:overseer
					}
				}
				desc = mining.1050.opening_overseer
			}
			desc = mining.1050.opening
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					AND = {
						is_dwarf = yes
						NOR = {
							has_trait = cynical
							has_trait = callous
							has_trait = sadistic
						}
					}
				}
				desc = mining.1050.dwarf
			}
			triggered_desc = {
				trigger = {
					faith_is_evil = yes
				}
				desc = mining.1050.evil
			}
			desc = mining.1050.default
		}
		desc = mining.1050.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:stone_singer
					scope:mining_participant = {
						is_dwarf = yes
					}
				}
				desc = mining.1050.closing_dwarf
			}
			desc = mining.1050.closing_default
		}
	}
	theme = hunt_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					AND = {
						is_dwarf = yes
						NOR = {
							has_trait = cynical
							has_trait = callous
							has_trait = sadistic
						}
					}
					has_trait = compassionate
				}
			}
			animation = sadness
		}
		triggered_animation = {
			trigger = {
				is_dwarf = no
				NOT = { has_trait = compassionate }
				faith_is_evil = yes
			}
			animation = ecstasy
		}
		animation = thinking
	}
	right_portrait = {
		character = scope:mining_participant
		triggered_animation = {
			trigger = {
				OR = {
					AND = {
						is_dwarf = yes
						NOR = {
							has_trait = cynical
							has_trait = callous
							has_trait = sadistic
						}
					}
					has_trait = compassionate
				}
			}
			animation = grief
		}
		animation = shock
	}
	cooldown = { years = 1 }

	immediate = {
		if = {
			limit = { employs_court_position = stone_singer_court_position }
			court_position:stone_singer_court_position = { save_scope_as = stone_singer }
		}
		else_if = {
			limit = { employs_court_position = overseer_of_the_mines_court_position }
			court_position:overseer_of_the_mines_court_position = { save_scope_as = overseer }
		}
		scope:activity = {
			every_attending_character = {
				add_to_list = chamber_people
			}
		}
		random_in_list = {
			list = chamber_people
			limit = {
				is_of_major_interest_trigger = { CHARACTER = root }
			}
			alternative_limit = {
				is_of_minor_interest_trigger = { CHARACTER = root }
			}
			alternative_limit = { always = yes }
			weight = {
				base = 1
				modifier = {
					add = 1
					exists = scope:stone_singer
					this = scope:stone_singer
				}
				modifier = {
					add = 1
					exists = scope:overseer
					this = scope:overseer
				}
			}
			save_scope_as = mining_participant
		}	
	}

	option = { #Focus on the mining
		name =  mining.1040.a
		flavor = mining.1040.a.flavor
		scope:activity = {
			add_activity_log_entry = {
				key = mining_chamber_focus_log
				score = 25
				tags = { random neutral social }
				character = scope:mining_participant
				
				#Effect
				root = {
					miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 }
					add_prestige = miniscule_prestige_gain
					if = {
						limit = { is_dwarf = yes }
						add_piety = minor_piety_loss
					}
					reverse_add_opinion = {
						modifier = disappointed_opinion
						target = scope:mining_participant
						opinion = -10
					}
					mining_activity_success_change_effect = { CHANGE = increase_medium }
					stress_impact = {
						lifestyle_mystic = minor_stress_impact_gain
						patient = minor_stress_impact_gain
						content = minor_stress_impact_gain
						compassionate = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 1
			}
			modifier = {
				factor = 2
				has_trait = lifestyle_miner
			}
		}
	}

	option = { #Give them a proper burial
		name = {
			trigger = {
				is_dwarf = yes
			}
			text = mining.1050.b.dwarf
		}
		name = {
			trigger = {
				is_dwarf = no
				faith_is_evil = no
			}
			text = mining.1050.b.not_evil_not_dwarf
		}
		name = {
			trigger = {
				is_dwarf = no
				faith_is_evil = yes
			}
			text = mining.1050.b.evil_not_dwarf
		}
		
		trigger = { is_orc = no }
		
		scope:activity = {
			add_activity_log_entry = {
				key = mining_chamber_burial_log
				score = 25
				tags = { random social good }
				character = scope:mining_participant
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					if = {
						limit = { is_dwarf = yes }
						add_piety = minor_piety_gain
					}
					else = {
						add_piety = miniscule_piety_gain
					}
					stress_impact = {
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
						greedy = minor_stress_impact_gain
						cynical = minor_stress_impact_gain
						callous = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_energy = -1
				ai_zeal = 1
				ai_compassion = 1
			}
			modifier = {
				factor = 2
				is_dwarf = yes
			}
		}
	}

	option = { #Strip them of valuables
		name = {
			trigger = {
				is_dwarf = yes
			}
			text = mining.1050.c.dwarf
		}
		name = {
			trigger = {
				is_dwarf = no
				faith_is_evil = no
			}
			text = mining.1050.c.not_evil_not_dwarf
		}
		name = {
			trigger = {
				is_dwarf = no
				faith_is_evil = yes
			}
			text = mining.1050.c.evil_not_dwarf
		}
		
		scope:activity = {
			add_activity_log_entry = {
				key = mining_chamber_plunder_log
				score = 25
				tags = { random social bad }
				character = scope:mining_participant
				
				#Effect
				root = {
					mining_activity_success_change_effect = { CHANGE = decrease_minor }
					add_character_modifier = {
						modifier = mining_plundered_dwarven_bodies_modifier
						years = 5 
					}
					if = {
						limit = { is_dwarf = yes }
						add_piety = medium_piety_loss
					}
					else = {
						add_piety = minor_piety_loss
					}
					add_gold = medium_gold_value
					stress_impact = {
						impatient = minor_stress_impact_gain
						ambitious = minor_stress_impact_gain
						generous = minor_stress_impact_gain
						compassionate = minor_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_greed = 1
				ai_zeal = -1
				ai_compassion = -1
			}
			modifier = {
				factor = -2
				is_dwarf = yes
			}
			modifier = {
				factor = 2
				is_orc = yes
			}
		}
	}
}

# Show off your mining skills

mining.1051 = {
	type = activity_event
	title = mining.1051.t
	desc = mining.1051.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	cooldown = { years = 2 }

	weight_multiplier = {
		base = 1
	}

	option = { # Find and mine an small vein of ore
		name = mining.1051.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_small_key
				score = 25
				tags = { random neutral }
				character = root

				#Effect
				root = {
					miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 } #Gives points towards ranking up the Miner Lifestyle
					duel = {
						skills = { prowess stewardship }
						value = decent_skill_rating
						# Success.
						50 = {
							compare_modifier = {
								value = scope:duel_value
								multiplier = 3.5
								min = -49
							}
							send_interface_toast = {
								title = mining.1051.success
								left_icon = root
								add_prestige = medium_prestige_gain
							}
						}
						# Failure.
						50 = {
							compare_modifier = {
								value = scope:duel_value
								multiplier = -3.5
								min = -49
							}
							send_interface_toast = {
								title = mining.1051.failure
								left_icon = root
								mining_activity_success_change_effect = { CHANGE = decrease_minor }
							}
						}
					}
				}
			}
		}
		stress_impact = {
			base = minor_stress_impact_loss
			lifestyle_miner = minor_stress_impact_loss
			impatient = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
			}
		}
	}

	option = { # Focus on the expedition
		name = mining.1051.b
		scope:activity = {
			add_activity_log_entry = {
				key = mining_focus_key
				score = 25
				tags = { random neutral }
				character = root

				#Effect
				root = {
					add_prestige = minor_prestige_loss
					mining_activity_success_change_effect = { CHANGE = increase_medium }
				}
			}
		}
		stress_impact = {
			impatient = minor_stress_impact_loss
			lifestyle_miner = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_boldness = -0.5
			}
		}
	}
}

# Someone is showing off their lucky pickaxe

mining.1061 = {
	type = activity_event
	title = mining.1061.t
	desc = mining.1061.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = admiration
	}
	right_portrait = {
		character = scope:pickaxe_salesman
		animation = flirtation_left
	}
	artifact = {
	    target = scope:newly_created_artifact
	    position = lower_right_portrait
	}

	cooldown = { years = 2 }
	
	trigger = {
		scope:activity = {
			any_attending_character = {
				NOT = {
					this = root
				}
				has_trait = lifestyle_miner
				is_adult = yes
				is_ai = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = root }
					has_trait = lifestyle_miner
					is_adult = yes
					is_ai = yes
				}
				weight = {
					base = 1
					modifier = {
						add = ai_greed
					}
					modifier = {
						add = 10
						has_trait_xp = {
							trait = lifestyle_miner
							track = hewer
							value >= 15
						}
					}
				}
				save_scope_as = pickaxe_salesman
				create_artifact = {
					name = lucky_pickaxe
					description = lucky_pickaxe_desc
					modifier = artifact_mining_lifestyle_hewer_xp_gain_mult_modifier
					modifier = artifact_mining_lifestyle_prospector_xp_gain_mult_modifier
					modifier = artifact_attraction_opinion_1_modifier
					type = miscellaneous
					visuals = pickaxe
					save_scope_as = newly_created_artifact
				}
			}
		}
	}

	option = { # You must sell it to me!
		name = mining.1061.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_buy_pickaxe_key
				score = 25
				tags = { random good }
				character = root
				target = scope:pickaxe_salesman
				artifact = scope:newly_created_artifact

				#Effect
				root = {
					pay_short_term_gold = {
						target = scope:pickaxe_salesman
						gold = minor_gold_value
					}
					scope:newly_created_artifact = {
						set_owner = root
					}
					stress_impact = {
						ambitious = minor_stress_impact_loss
						greedy = minor_stress_impact_gain
						paranoid = minor_stress_impact_gain # You're trying to trick me!
					}
				}
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_greed = -0.5
			}
			modifier = {
				factor = 0
				gold < minor_gold_value
			}
		}
	}

	option = { # Hard pass, *MY* pickaxe is perfectly adequate
		name = mining.1061.b
		scope:activity = {
			add_activity_log_entry = {
				key = mining_pass_pickaxe_key
				score = 25
				tags = { random good }
				character = root
				target = scope:pickaxe_salesman

				# Effect
				root = {
					stress_impact = {
						eccentric = minor_stress_impact_gain
						arrogant = minor_stress_impact_loss
						greedy = miniscule_stress_impact_loss
					}
				}
			}
		}
		
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = -0.5
				ai_greed = 0.5
			}
		}
	}

	option = { # You must sell it to me, at a discounted price ;)
		name = mining.1061.c
		trigger = {
			has_trait = avaricious
		}
		trait = avaricious
		scope:activity = {
			add_activity_log_entry = {
				key = mining_buy_pickaxe_key
				score = 25
				tags = { random good }
				character = root
				target = scope:pickaxe_salesman
				artifact = scope:newly_created_artifact

				#Effect
				root = {
					pay_short_term_gold = {
						target = scope:pickaxe_salesman
						gold = tiny_gold_value
					}
					scope:newly_created_artifact = {
						set_owner = root
					}
					stress_impact = {
						ambitious = minor_stress_impact_loss
						greedy = minor_stress_impact_loss
						paranoid = minor_stress_impact_gain # You're trying to trick me!
					}
				}
			}
		}
		ai_chance = {
			base = 1000
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_greed = 0.5
			}
			modifier = {
				factor = 0
				gold < tiny_gold_value
			}
		}
	}
}

# You come across a load of crystals

mining.1071 = {
	type = activity_event
	title = mining.1071.t
	desc = mining.1071.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = scope:mining_companion
		animation = happiness
	}

	right_portrait = {
		character = root
		animation = happiness
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = root }
					is_adult = yes
					is_ai = yes
				}
				save_scope_as = mining_companion
			}
		}
	}

	option = { # You share the crystals equally
		name = mining.1071.a
		add_gold = 25
		scope:mining_companion = {
			add_gold = 25
		}
		reverse_add_opinion = {
			modifier = pleased_opinion
			opinion = 20
			target = scope:mining_companion
		}
		stress_impact = {
			generous = minor_stress_impact_loss
			greedy = medium_stress_impact_gain
		}
		mining_activity_success_change_effect = { CHANGE = increase_medium }
	}

	option = { # You take the crystals for yourself
		name = mining.1071.b
		add_gold = 50
		reverse_add_opinion = {
			modifier = disappointed_opinion
			opinion = -30
			target = scope:mining_companion
		}
		add_tyranny = 5
		stress_impact = {
			generous = medium_stress_impact_gain
			greedy = minor_stress_impact_loss
		}
		mining_activity_success_change_effect = { CHANGE = increase_minor }
	}

	option = { # You admire the crystals for stress loss
		name = mining.1071.c
		add_piety = 25
		stress_impact = {
			base = minor_stress_impact_loss
			humble = minor_stress_impact_loss
			content = minor_stress_impact_loss
			patient = minor_stress_impact_loss
			ambitious = minor_stress_impact_gain
			diligent = minor_stress_impact_gain
			impatient = minor_stress_impact_gain
		}
		scope:mining_companion = {
			stress_impact = {
				base = minor_stress_impact_loss
				humble = minor_stress_impact_loss
				content = minor_stress_impact_loss
				patient = minor_stress_impact_loss
				ambitious = minor_stress_impact_gain
				diligent = minor_stress_impact_gain
				impatient = minor_stress_impact_gain
			}
		}
		mining_activity_success_change_effect = { CHANGE = decrease_minor }
	}

	option = { # You brag about your find
		name = mining.1071.d
		add_prestige = 50
		stress_impact = {
			ambitious = minor_stress_impact_loss
			arrogant = medium_stress_impact_loss
			humble = medium_stress_impact_gain
			content = minor_stress_impact_gain
		}
		mining_activity_success_change_effect = { CHANGE = increase_minor }
	}
}

#You trigger a cave in (IN PROGRESS)#
mining.1091 = {
	type = activity_event
	title = mining.1091.t
	desc = mining.1091.desc
	theme = death

	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = scope:mining_companion
		animation = worry
	}

	right_portrait = {
		character = root
		animation = fear
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = root }
					is_adult = yes
					is_ai = yes
				}
				save_scope_as = mining_companion
			}
		}
	}

	option = { # Try and run, abandoning your friend to save the gear#
		name = mining.1091.a

		reverse_add_opinion = {
			modifier = angry_opinion
			opinion = -20
			target = scope:mining_companion
		}
		scope:mining_companion = {
			add_trait = wounded_1
		}
		stress_impact = {
			craven = minor_stress_impact_loss
			greedy = medium_stress_impact_gain
			greedy = medium_stress_impact_loss
			compassionate = medium_stress_impact_gain
			brave = medium_stress_impact_gain
			callous = minor_stress_impact_loss
			stubborn = minor_stress_impact_gain
		}
		mining_activity_success_change_effect = { CHANGE = decrease_medium }
	}

	option = { # abandon gear and save companion
		name = mining.1091.b
		remove_short_term_gold = 25
		reverse_add_opinion = {
			modifier = grateful_opinion
			opinion = 20
			target = scope:mining_companion
		}
		add_piety = 100
		stress_impact = {
			compassionate = medium_stress_impact_loss
			brave = minor_stress_impact_loss
			greedy = minor_stress_impact_gain
			sadistic = minor_stress_gain
			stubborn = minor_stress_gain
		}
		mining_activity_success_change_effect = { CHANGE = decrease_minor }
	}
	option = {#Try to run without dropping equipment
		name = mining.1091.c
		duel = {
			skill = prowess
			value = 15
			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 2
				}
				reverse_add_opinion = {
					modifier = grateful_opinion
					opinion = 20
					target = scope:mining_companion
				}
				add_prestige = 25
			}
			20 = {
				remove_short_term_gold = 25
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
				}
				add_trait = wounded_1
				scope:mining_companion = {
					add_trait = wounded_1
				}
			}
		}
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			diligent = minor_stress_impact_loss
			craven = minor_stress_impact_gain
			stubborn = minor_stress_impact_loss
		}
	}
	option = {#You use your strength to hold up the ceiling
		name = mining.1091.d
		trigger = { has_trait = strong }
		add_prestige = 100
		add_gold = 25

		scope:mining_companion = {
			add_gold = 25
		}

		reverse_add_opinion = {
			modifier = grateful_opinion
			opinion = 20
			target = scope:mining_companion
		}
		stress_impact = {
			arrogant = medium_stress_impact_loss
		}
	}
}

#End of cave in#

# An Enticing Gleam

mining.1100 = {
	type = activity_event
	title = mining.1100.t
	desc = mining.1100.desc
	theme = stewardship

	override_background = {
		reference = mining_activity
	}	

	left_portrait = {
		character = root
		animation = lantern
	}

	cooldown = { years = 10 }

	immediate = {
		scope:activity = {
			add_activity_log_entry = {
				key = mining_An_Enticing_Gleam_immediate_log
				character = root

				root = {
					add_gold = 5
				}	
			}
		}
	}

	option = { # Invest in sturdy collar-bracing to safely explore the vein (expensive, low risk of collapse)
		name = mining.1100.a

		scope:activity = {
			add_activity_log_entry = {
				key = mining_An_Enticing_Gleam_investing_log
				character = root

				root = {
					remove_short_term_gold = 50

					stress_impact = {
						greedy = minor_stress_gain
						arrogant = minor_stress_gain
						craven = minor_stress_gain
					}
				}	
			}
		}
		
		random_list = {
			75 = {
				desc = mining.1100.a.success

				scope:activity = {
					add_activity_log_entry = {
						key = mining_An_Enticing_Gleam_investing_success_log
						score = 25
						character = root

						root = {
							add_gold = 80
							add_prestige = 50

							mining_activity_success_change_effect = { CHANGE = increase_medium }

							hidden_effect = {
								miner_progress_point_gain_effect = { CHANGE = 1 RANDOM_CHANGE = 1 } #Gives points towards ranking up the miner Lifestyle
							}
						}
					}		
				}	
			}

			25 = {
				desc = mining.1100.a.failure

				scope:activity = {
					add_activity_log_entry = {
						key = mining_An_Enticing_Gleam_investing_failure_log
						score = 25
						character = root

						root = {
							remove_short_term_gold = 10
							add_prestige = -100

							mining_activity_success_change_effect = { CHANGE = decrease_minor }

							random_list = {
								80 = {
								}
					
								20 = {
									add_prestige = -50
									add_trait = wounded_1
								}
							}	
						}
					}		
				}	
			}
		}
	}

	option = { # We will take our time and approach the seam from another direction (lower cost, lower return, risky)
		name = mining.1100.b

		scope:activity = {
			add_activity_log_entry = {
				key = mining_An_Enticing_Gleam_risking_log
				character = root

				root = {
					remove_short_term_gold = 10

					stress_impact = {
						greedy = medium_stress_loss
						arrogant = medium_stress_loss
						paranoid = medium_stress_gain
						craven = major_stress_gain
					}
				}	
			}
		}
		
		random_list = {
			50 = {
				desc = mining.1100.b.success

				scope:activity = {
					add_activity_log_entry = {
						key = mining_An_Enticing_Gleam_risking_success_log
						score = 25
						character = root

						root = {
							add_gold = 30
							add_prestige = 100
							mining_activity_success_change_effect = { CHANGE = increase_medium }
						}	
					}
				}
			}

			40 = { # wont lose prestige
				desc = mining.1100.b.failure

				scope:activity = {
					add_activity_log_entry = {
						key = mining_An_Enticing_Gleam_risking_failure_log
						score = 25
						character = root

						root = {
							remove_short_term_gold = 10
							mining_activity_success_change_effect = { CHANGE = decrease_minor }

							random_list = {
								80 = {
								}
					
								20 = {
									add_trait = wounded_1
								}
							}
						}	
					}
				}
			}

			10 = { # critical fail
				desc = mining.1100.b.critical_failure

				scope:activity = {
					add_activity_log_entry = {
						key = mining_An_Enticing_Gleam_risking_critical_failure_log
						score = 25
						character = root

						root = {
							remove_short_term_gold = 40
							mining_activity_success_change_effect = { CHANGE = decrease_major }

							random_list = {
								30 = {
								}
					
								50 = {
									add_trait = wounded_1
								}

								20 = {
									add_trait = wounded_2
								}
							}
						}	
					}
				}
			}
		}
	}

	option = { # It’s not worth the risk. We should abandon this tunnel altogether.   
		name = mining.1100.c	

		scope:activity = {
			add_activity_log_entry = {
				key = mining_An_Enticing_Gleam_nothing_log
				score = 25
				character = root

				root = {
					stress_impact = {
						greedy = medium_stress_gain
						arrogant = medium_stress_gain
						craven = major_stress_loss
					}
				}	
			}
		}		
	}
}

#Lost in the caves#
mining.1121 = {
	type = activity_event
	title = mining.1121.t
	desc = mining.1121.desc
	theme = death

	override_background = {
		reference = mining_activity
	}

	right_portrait = {
		character = root
		animation = fear
	}

	option = { #Scream for help
		name = mining.1121.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_screamed_for_help
				score = 25
				tags = { bad random }
				character = root
			}
		}
		stress_impact = {
			craven = minor_stress_impact_loss
			brave = medium_stress_impact_gain
			stubborn = minor_stress_impact_gain
		}
		mining_activity_success_change_effect = { CHANGE = decrease_minor }
		
		ai_chance = {
 			base = 100
 			modifier = {
 				add = 100
 				OR = {
 					has_trait = craven
 					has_trait = paranoid
 				}
 			}
 			modifier = {
 				add = 100
 				learning < 10
 			}
 		}
	}
	
	option = { #Try to find your way back
		name = mining.1121.b
		duel = {
 			skill = learning
 			value = 10

 			50 = {
 				desc = mining.1121.b.success
 				custom_tooltip = mining.1121.b.success.tt
 				compare_modifier = {
 					value = scope:duel_value
 					multiplier = 3
 					min = -50
 					max = 50
 				}
				trigger_event = {
					id = mining.1122
					days = 2
				}
 			}

 			50 = {
 				desc = mining.1121.b.failure
 				custom_tooltip = mining.1121.b.failure.tt
 				compare_modifier = {
 					value = scope:duel_value
 					multiplier = -3
 					min = -50
 					max = 50
 				}
				trigger_event = {
					id = mining.1123
					days = 2
				}
 			}
 		}
		stress_impact = { brave = minor_stress_impact_loss }
		ai_chance = {
 			base = 100
 			modifier = {
 				add = 100
 				OR = {
 					has_trait = brave
 					has_trait = patient
					has_trait = stubborn
 				}
 			}
 			modifier = {
 				add = 100
 				learning > 14
 			}
 		}
	}
}

mining.1122 = { #You find your way back
 	type = activity_event
	content_source = realms_dlc
 	title = mining.1122.t
 	desc = mining.1122.desc
 	theme = death
 	left_portrait = root
	
 	option = { # You find your way back
 		name = mining.1122.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_found_way_back
				score = 25
				tags = { good random }
				character = root
			}
		}

 		add_prestige = 100
		
		add_gold = 200
		
		mining_activity_success_change_effect = { CHANGE = increase_medium }
		
		stress_impact = { brave = minor_stress_impact_loss }

 		ai_chance = {
 			base = 100
 		}
 	}

 	after = { }
}

mining.1123 = { #You get found by a search party
 	type = activity_event
	content_source = realms_dlc
 	title = mining.1123.t
 	desc = mining.1123.desc
 	theme = death
 	left_portrait = root
	
 	option = { # You get lost for a while before your party finds you
 		name = mining.1123.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_found_by_party
				score = 25
				tags = { bad random }
				character = root
			}
		}

 		add_prestige = -100
		
		mining_activity_success_change_effect = { CHANGE = decrease_major }
		
		stress_impact = { brave = medium_stress_impact_gain }
 	}
}

#####################################
#	INTENT EVENTS	                #
#	3000 - 3999						#
#####################################

# Seduction
mining.3001 = {
	type = activity_event
	title = mining.3001.t
	theme = stewardship
	desc = {
		desc = mining.3001.opening
		triggered_desc = {
			trigger = {
				exists = scope:woo_target.primary_spouse
				NOT = { is_consort_of = scope:woo_target }
				scope:woo_target.primary_spouse = { is_participant_in_activity = scope:activity }
			}
			desc = mining.3001.married
		}
		triggered_desc = {
			trigger = {
				exists = scope:woo_target.primary_spouse
				NOT = { is_consort_of = scope:woo_target }
			}
			desc = mining.3001.married_absent
		}
		triggered_desc = {
			trigger = {
				exists = scope:woo_target.primary_spouse
				is_consort_of = scope:woo_target
			}
			desc = mining.3001.currentspouse
		}
		desc = mining.3001.desc
	}
	
	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = root
		animation = flirtation
	}
	right_portrait = {
		character = scope:woo_target
		animation = happiness
	}

	cooldown = { years = 1 }

	trigger = {
		OR = {
			AND = {
				has_activity_intent = woo_attendee_intent
				exists = intent_target
				intent_target = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
			any_scheme = {
				OR = {
					scheme_type = seduce
					scheme_type = courting
				}
				scheme_target = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 10
			has_activity_intent = woo_attendee_intent
			exists = intent_target
			intent_target = {
				is_alive = yes
				is_participant_in_activity = scope:activity
			}
		}
	}

	immediate = {
		save_scope_as = woo_actor
		if = {
			limit = {
				has_activity_intent = woo_attendee_intent
				exists = intent_target
				intent_target = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
			intent_target = {
				save_scope_as = woo_target
				save_scope_as = target
			}
		}
		else = {
			random_scheme = {
				limit = {
					scheme_type = seduce
					scheme_target = {
						is_alive = yes
						is_participant_in_activity = scope:activity
					}
				}
				scheme_target = {
					save_scope_as = woo_target
					save_scope_as = target
				}
			}
		}
	}

	option = { #We must press on
		name = mining.3001.a
		trigger = { has_trait = lifestyle_miner }
		custom_tooltip = mining.3001.a.tt
		save_scope_value_as = {
			name = woo_approach
			value = flag:miner
		}
		stress_impact = {
			craven = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 0.5
				ai_boldness = 0.5
				ai_compassion = -0.5
			}
		}
	}

	option = { #Prospector
		name = mining.3001.b
		trigger = {
			has_trait = lifestyle_miner
			has_trait_xp = {
				trait = lifestyle_miner
				track = prospector
				value >= trait_second_level
			}
		}
		custom_tooltip = mining.3001.b.tt
		save_scope_value_as = {
			name = woo_approach
			value = flag:prospector
		}
		stress_impact = {
			shy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
		}
	}

	option = { #Pity
		name = mining.3001.c
		custom_tooltip = mining.3001.c.tt
		save_scope_value_as = {
			name = woo_approach
			value = flag:pity
		}
		stress_impact = {
			sadistic = minor_stress_impact_gain
			callous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			opinion_modifier = {
				opinion_target = scope:woo_target
				multiplier = 0.5
			}
			ai_value_modifier = {
				ai_energy = -0.5
				ai_boldness = -0.5
				ai_compassion = 0.5
			}
		}
	}

	option = { #Wastrel
		name = mining.3001.d
		custom_tooltip = mining.3001.d.tt
		save_scope_value_as = {
			name = woo_approach
			value = flag:wastrel
		}
		stress_impact = {
			lifestyle_miner = minor_stress_impact_gain
			content = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 1
				ai_compassion = 0.5
			}
		}
	}

	option = { #Steward
		name = mining.3001.e
		custom_tooltip = mining.3001.e.tt
		save_scope_value_as = {
			name = woo_approach
			value = flag:steward
		}
		stress_impact = {
			impatient = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 1
				ai_compassion = 0.5
			}
		}
	}

	after = {
		show_as_tooltip = {
			random_list = {
				10 = {
					desc = seduce_ongoing_possible_outcomes_tooltip_effect.success.desc
					show_chance = no
					progress_towards_lover_effect = {
						CHARACTER = scope:woo_target
						OPINION = 15
						REASON =  lover_miner_conversation_impressed
					}
				}
				10 = {
					desc = seduce_ongoing_possible_outcomes_tooltip_effect.failure.desc
					show_chance = no
					reverse_add_opinion = {
						target = scope:woo_target
						modifier = hunt_failed_woo_opinion # LotR - Fine to keep
						opinion = -10
					}
				}
			}
		}
		scope:woo_target = {
			save_scope_as = target
			hidden_effect = {
				#Evaluate what makes for a "right" choice
				if = {
					limit = {
						OR = {
							AND = {
								OR = {
									has_trait = lifestyle_miner
									ai_energy > medium_positive_energy
								}
								exists = scope:woo_approach
								scope:woo_approach = flag:miner
							}
							AND = {
								OR = {
									AND = {
										has_trait = lifestyle_miner
										has_trait_xp = {
											trait = lifestyle_miner
											track = prospector
											value >= trait_second_level
										}	
									}
									ai_sociability > medium_positive_compassion # socialbility doesn't exist
								}
								exists = scope:woo_approach
								scope:woo_approach = flag:prospector
							}
							AND = {
								OR = {
									has_personality_benevolent_trigger = yes
									ai_compassion > medium_positive_compassion
								}
								exists = scope:woo_approach
								scope:woo_approach = flag:pity
							}
							AND = {
								OR = {
									has_trait = ambitious
									ai_boldness > medium_positive_boldness
								}
								exists = scope:woo_approach
								scope:woo_approach = flag:wastrel
							}
							AND = {
								OR = {
									has_trait = education_stewardship
									ai_rationality > medium_positive_rationality
								}
								exists = scope:woo_approach
								scope:woo_approach = flag:steward
							}
						}
					}
					save_scope_value_as = {
						name = made_great_choice
						value = yes
					}
				}
				random_list = {
					100 = { #Success
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:miner
							has_trait = brave
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:prospector
							has_trait = gregarious
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:pity
							has_trait = compassionate
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:wastrel
							has_trait = diligent
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:steward
							has_trait = architect
						}
						trigger_event = {
							id = mining.3002
							days = { 1 2 }
						}
						scope:woo_actor = {
							trigger_event = {
								id = mining.3004
								days = { 3 4 }
							}
						}
					}
					100 = { #Failure
						trigger = {
							NOT = { exists = scope:made_great_choice }
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							OR = {
								scope:woo_approach = flag:miner
								scope:woo_approach = flag:prospector
							}
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:miner
							has_trait = craven
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:prospector
							has_trait = shy
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:pity
							OR = {
								has_trait = callous
								has_trait = sadistic
							}
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:wastrel
							has_trait = content
						}
						modifier = {
							add = 100
							exists = scope:woo_approach
							scope:woo_approach = flag:steward
							has_trait = lazy
						}
						trigger_event = {
							id = mining.3003
							days = { 1 2 }
						}
						scope:woo_actor = {
							trigger_event = {
								id = mining.3005
								days = { 3 4 }
							}
						}
					}
				}
			}
		}
	}
}

#Target: Success
mining.3002 = {
	type = activity_event
	title = mining.3001.t
	theme = stewardship
	desc = {
		desc = mining.3002.opening
		first_valid = {
			triggered_desc = {
				trigger = { scope:woo_approach = flag:miner }
				desc = mining.3002.miner
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:prospector }
				desc = mining.3002.prospector
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:pity }
				desc = mining.3002.pity
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:wastrel }
				desc = mining.3002.wastrel
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:steward }
				desc = mining.3002.steward
			}
			desc = mining.3002.fallback
		}
	}	
	left_portrait = {
		character = scope:woo_actor
		animation = flirtation
	}

	override_background = {
		reference = mining_activity
	}

	trigger = { exists = scope:woo_approach }

	option = {
		name = mining.3003.a
		add_stress = minor_stress_loss
		show_as_tooltip = {
			progress_towards_lover_effect = {
				CHARACTER = scope:woo_target
				OPINION = 15
				REASON =  lover_miner_conversation_impressed
			}
		}
	}
}

#Target: Failure
mining.3003 = {
	type = activity_event
	title = mining.3001.t
	theme = stewardship
	desc = {
		desc = mining.3002.opening
		first_valid = {
			triggered_desc = {
				trigger = { scope:woo_approach = flag:miner }
				desc = mining.3003.miner
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:prospector }
				desc = mining.3003.prospector
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:pity }
				desc = mining.3003.pity
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:wastrel }
				desc = mining.3003.wastrel
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:steward }
				desc = mining.3003.steward
			}
			desc = mining.3003.fallback
		}
	}
	left_portrait = {
		character = scope:woo_actor
		animation = flirtation
	}

	override_background = {
		reference = mining_activity
	}

	trigger = { exists = scope:woo_approach }

	option = {
		name = mining.3003.a
	}
}

#Actor: Success
mining.3004 = {
	type = activity_event
	title = mining.3001.t
	theme = stewardship
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:woo_approach = flag:miner }
				desc = mining.3004.miner
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:prospector }
				desc = mining.3004.prospector
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:pity }
				desc = mining.3004.pity
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:wastrel }
				desc = mining.3004.wastrel
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:steward }
				desc = mining.3004.steward
			}
			desc = mining.3004.fallback
		}
		desc = mining.3004.desc
	}	
	left_portrait = {
		character = scope:woo_target
		animation = flirtation
	}

	override_background = {
		reference = mining_activity
	}

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = { exists = scope:woo_approach }

	option = {
		name = mining.3004.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_woo_success_key
				score = 75
				tags = { random good intent }
				character = root
				target = scope:woo_target

				#Effect
				root = {
					progress_towards_lover_effect = {
						CHARACTER = scope:woo_target
						OPINION = 15
						REASON = lover_miner_conversation_impressed
					}
				}
			}
		}
	}
}

#Actor: Failure
mining.3005 = {
	type = activity_event
	title = mining.3001.t
	theme = stewardship
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:woo_approach = flag:miner }
				desc = mining.3005.miner
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:prospector }
				desc = mining.3005.prospector
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:pity }
				desc = mining.3005.pity
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:wastrel }
				desc = mining.3005.wastrel
			}
			triggered_desc = {
				trigger = { scope:woo_approach = flag:steward }
				desc = mining.3005.steward
			}
			desc = mining.3005.fallback
		}
		desc = mining.3005.desc
	}	
	left_portrait = {
		character = scope:woo_target
		animation = eyeroll
	}

	override_background = {
		reference = mining_activity
	}

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = { exists = scope:woo_approach }

	option = {
		name = mining.3005.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_woo_failure_key
				score = 75
				tags = { random bad intent }
				character = root
				target = scope:woo_target

				#Effect
				reverse_add_opinion = {
					target = scope:woo_target
					modifier = hunt_failed_woo_opinion #LotR - ok to leave
					opinion = -10
				}
			}
		}
	}
}

## Murder

scripted_trigger mining_hostile_scheme_target_trigger = {
	NOT = { this = root }
	is_alive = yes
	is_participant_in_activity = scope:activity
	# Murder scheme target
	any_targeting_scheme = {
		scheme_type = $TYPE$
		OR = {
			scheme_owner = root
			any_scheme_agent = { this = root }
		}
	}
}

mining.3101 = {
	type = activity_event
	title = mining.3101.t
	desc = {
		desc = mining.3101.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:accomplice_2 }
				desc = mining.3101.accomplice_2
			}
			triggered_desc = {
				trigger = { exists = scope:accomplice }
				desc = mining.3101.accomplice
			}
			desc = mining.3101.alone
		}
	}
	theme = hunt_activity
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = root
		animation = scheme
	}
	right_portrait = {
		character = scope:murder_target
		animation = happiness
	}
	center_portrait = {
		character = scope:accomplice
		animation = schadenfreude
	}
	lower_left_portrait = scope:accomplice_2
	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:activity ?= {
			any_attending_character = {
				mining_hostile_scheme_target_trigger = { TYPE = murder }
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			scope:host.court_position:overseer_of_the_mines_court_position ?= this
			mining_murder_risk_trigger = yes
		}
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					mining_hostile_scheme_target_trigger = { TYPE = murder }
				}
				save_scope_as = murder_target
				# Murder scheme target
				random_targeting_scheme = {
					limit = {
						scheme_type = murder
						OR = {
							scheme_owner = root
							any_scheme_agent = { this = root }
						}
					}
					save_scope_as = scheme
					every_scheme_agent = { add_to_list = murder_agents }
					scheme_owner = { save_scope_as = murder_schemer }
					mining_save_hostile_accomplice_effect = {
						SCHEME = murder
						VICTIM = scope:murder_target
					}
				}
			}
		}
	}

	option = { # Today is the day
		name = mining.3101.a
		custom_tooltip = mining_murder_accomplice_tt
		set_variable = {
			name = mining_murder_attempt
			value = scope:murder_target
			years = 1
		}
		stress_impact = {
			patient = minor_stress_impact_gain
			craven = minor_stress_impact_gain
		}
	}

	option = { # We are not ready
		name = mining.3101.d
		set_variable = {
			name = mining_murder_defer
			value = scope:murder_target
			years = 1
		}
		mining_activity_success_change_effect = { CHANGE = increase_minor }
		stress_impact = {
			impatient = minor_stress_impact_gain
			brave = minor_stress_impact_gain
		}
	}
}

mining.3102 = {
	type = activity_event
	title = mining.3101.t
	desc = {
		desc = mining.3102.opening
		desc = mining.3102.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:accomplice }
				desc = mining.3102.accomplice
			}
			desc = mining.3101.alone
		}
	}
	theme = hunt_activity
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = root
		animation = scheme
	}
	right_portrait = {
		character = scope:murder_target
		animation = thinking
	}
	center_portrait = {
		character = scope:accomplice
		animation = schadenfreude
	}
	lower_center_portrait = scope:accomplice_2
	cooldown = { years = 1 }

	trigger = {
		OR = {
			mining_murder_intent_target_trigger = yes
			mining_murder_target_trigger = yes
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			scope:host.court_position:overseer_of_the_mines_court_position ?= this
			mining_murder_risk_trigger = yes
		}
	}

	immediate = {
		save_scope_as = murder_actor
		hidden_effect = { mining_save_murder_target_effect = yes }
	}

	option = { #Take the shot!
		name = mining.3102.a
		flavor = mining.3102.a.tt
		reason = activity_intent
		set_variable = {
			name = mining_murder_attempt
			value = scope:murder_target
		}
		mining_increment_murder_accident_attempt = yes #So it doesn't get silly, we track attempts and make chance to succeed lower for each recent one
		duel = {
			skills = { intrigue prowess }
			target = scope:murder_target		
			10 = { # ...but target is killed
				desc = mining_kill_murder_killed
				trigger = { scope:murder_target = { cannot_be_killed = no } }
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.5
				}
				custom_tooltip = mining_target_attendee_killed_tt
				save_scope_as = murder_success
				min = 2
			}
			10 = { # ...the target survives
				desc = mining_kill_murder_escape
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
				}
				custom_tooltip = mining_target_attendee_injured_chance_tt
				hidden_effect = {
					random = {
						chance = 50
						save_scope_as = murder_injury
					}
				}
				min = 2
			}
		}
		trigger_event = { id = mining.3103 days = 1 }
		stress_impact = {
			vengeful = medium_stress_impact_loss
			sadistic = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_vengefulness = 0.5
				ai_energy = 0.5
				ai_boldness = 0.25
				ai_honor = -0.25
				ai_compassion = -0.25
			}
		}
	}

	option = { #Restrain yourself
		name = mining.3102.b
		flavor = mining.3102.b.tt
		scope:activity = {
			add_activity_log_entry = {
				key = mining_murder_restrain_key
				score = 25
				tags = { random intent }
				character = root
				target = scope:murder_target

				# Effect
				root = {
					if = {
						limit = { exists = scope:accomplice }
						reverse_add_opinion = {
							target = scope:accomplice
							modifier = mining_did_not_shoot_opinion
							opinion = -10
						}
					}
					mining_activity_success_change_effect = { CHANGE = increase_minor }
					stress_impact = {
						base = minor_stress_gain
						sadistic = minor_stress_impact_gain
						wrathful = minor_stress_impact_gain
						vengeful = minor_stress_impact_gain
						impatient = minor_stress_impact_gain
						compassionate = medium_stress_impact_loss
						forgiving = medium_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_honor = 0.75
				ai_rationality = 0.25
				ai_compassion = 0.25
				ai_vengefulness = -0.25
			}
		}
	}
}

# Outcome 
mining.3103 = {
	type = activity_event
	title = mining.3101.t
	desc = {
		desc = mining.3103.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:accomplice_2 }
				desc = mining.3103.accomplice_2
			}
			triggered_desc = {
				trigger = { exists = scope:accomplice }
				desc = mining.3103.accomplice
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:murder_success }
				desc = mining.3103.success
			}
			desc = mining.3103.failure
		}
	}
	theme = hunt_activity
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { exists = scope:murder_success }
			animation = schadenfreude
		}
		animation = stress
	}
	right_portrait = {
		character = scope:murder_target
		triggered_animation = {
			trigger = { exists = scope:murder_success }
			animation = loss_1
		}
		animation = fear
	}
	center_portrait = {
		character = scope:accomplice
		triggered_animation = {
			trigger = { exists = scope:murder_success }
			animation = happiness
		}
		animation = fear
	}
	lower_center_portrait = scope:accomplice_2
	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		var:mining_murder_attempt ?= {
			is_alive = yes
			is_participant_in_activity = scope:activity
		}
	}

	immediate = {
		if = {
			limit = { exists = scope:murder_success }
			scope:activity = {
				add_activity_log_entry = {
					key = mining_kill_murder_killed
					score = 25
					tags = { random intent }
					character = root
					target = scope:murder_target

					# Effect
					show_as_tooltip = {
						unknown_murder_effect = { VICTIM = scope:murder_target MURDERER = root REASON = death_mining_accident }
					}
				}
			}
		}
		else = {
			scope:activity = {
				add_activity_log_entry = {
					key = mining_kill_murder_missed
					score = 25
					tags = { random intent }
					character = root
					target = scope:murder_target

					# Effect
					root = {
						show_as_tooltip = {
							if = {
								limit = { exists = scope:murder_injury }
								scope:murder_target = {
									change_trait_rank = {
										trait = wounded
										rank = 1
										max = 3
									}
								}
							}
							attempted_murder_opinion_effect = {
								VICTIM = scope:murder_target
								MURDERER = root
							}
							scope:scheme ?= {
								expose_scheme = yes
								if = {
									limit = { exists = scope:accomplice }
									expose_scheme_agent = scope:accomplice
								}
								if = {
									limit = { exists = scope:accomplice_2 }
									expose_scheme_agent = scope:accomplice_2
								}
							}
							scope:murder_target = {
								if = {
									limit = { exists = scope:accomplice }
									add_opinion = {
										target = scope:accomplice
										modifier = attempted_murder_me_crime
									}
								}
								if = {
									limit = { exists = scope:accomplice_2 }
									add_opinion = {
										target = scope:accomplice_2
										modifier = attempted_murder_me_crime
									}
								}
							}
						}
					}
				}
			}
		}
		scope:murder_target = { trigger_event = mining.3104 }
	}

	option = { # Success
		name = mining.3103.a
		trigger = { exists = scope:murder_success }
	}

	option = { # Failure
		name = mining.3103.b
		trigger = {
			NOT = { exists = scope:murder_success }
		}
		if = {
			limit = { this = scope:host }
			custom_tooltip = mining_ends_tt
		}
	}
}

# Target
mining.3104 = { 
	type = activity_event
	title = mining.3104.t
	desc = {
		desc = mining.3104.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:accomplice_2 }
				desc = mining.3104.accomplice_2
			}
			triggered_desc = {
				trigger = { exists = scope:accomplice }
				desc = mining.3104.accomplice
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:accomplice_2 }
				desc = mining.3104.success
			}
			desc = mining.3104.failure
		}
	}
	theme = hunt_activity
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { exists = scope:murder_success }
			animation = loss_1
		}
		animation = fear
	}
	right_portrait = {
		character = scope:murder_actor
		triggered_animation = {
			trigger = { exists = scope:murder_success }
			animation = schadenfreude
		}
		animation = stress
	}
	center_portrait = {
		character = scope:accomplice
		triggered_animation = {
			trigger = { exists = scope:murder_success }
			animation = happiness
		}
		animation = fear
	}
	lower_left_portrait = scope:accomplice_2
	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		if = {
			limit = { exists = scope:murder_success }
			unknown_murder_effect = { VICTIM = scope:murder_target MURDERER = scope:murder_actor REASON = death_mining_accident }
			if = {
				limit = { this = scope:host }
				scope:activity = {
					set_variable = {
						name = mining_invalidated
						value = flag:death
					}
					set_variable = {
						name = mining_invalidated_flavor
						value = root
					}
				}
			}
			else_if = {
				limit = {
					NOR = {
						scope:murder_actor = scope:host
						scope:accomplice ?= scope:host
						scope:accomplice_2 ?= scope:host
					}
				}
				save_scope_as = invalidated_flavor
				scope:host = { trigger_event = mining.0003 } #TODO hunt.0080
			}
		}
		else = {
			if = {
				limit = { exists = scope:murder_injury }
				change_trait_rank = {
					trait = wounded
					rank = 1
					max = 3
				}
			}
			attempted_murder_opinion_effect = {
				VICTIM = scope:murder_target
				MURDERER = scope:murder_actor
			}
			scope:scheme ?= {
				if = {
					limit = { exists = scope:accomplice }
					expose_scheme_agent = scope:accomplice
				}
				if = {
					limit = { exists = scope:accomplice_2 }
					expose_scheme_agent = scope:accomplice_2
				}
				expose_scheme = yes
			}
			if = {
				limit = { exists = scope:accomplice }
				attempted_murder_opinion_effect = {
					VICTIM = scope:murder_target
					MURDERER = scope:accomplice
				}
			}
			if = {
				limit = { exists = scope:accomplice_2 }
				attempted_murder_opinion_effect = {
					VICTIM = scope:murder_target
					MURDERER = scope:accomplice_2
				}
			}
		}
	}

	option = { # Success
		name = mining.3104.a
		trigger = { exists = scope:murder_success }
	}

	option = { # Failure
		name = mining.3104.b
		trigger = {
			NOT = { exists = scope:murder_success }
		}
		custom_tooltip = mining_ends_tt
		if = {
			limit = {
				OR = {
					this = scope:host
					scope:host = scope:murder_actor
				}
			}
			scope:activity = {
				set_variable = {
					name = mining_invalidated
					value = flag:assassination_attempt
				}
			set_variable = {
				name = mining_invalidated_flavor
				value = root
			}
			set_variable = {
				name = mining_invalidated_culprit
					value = scope:murder_actor
				}
			}
		}
		else_if = {
			limit = {
				NOR = {
					scope:murder_actor = scope:host
					scope:accomplice ?= scope:host
					scope:accomplice_2 ?= scope:host
				}
			}
			save_scope_as = invalidated_flavor
			scope:murder_actor = { save_scope_as = invalidated_culprit }
			scope:host = { trigger_event = mining.0003 }
		}
	}
}


## Befriend

mining.3201 = {
	type = activity_event
	title = mining.3201.t
	desc = {
		desc = mining.3201.desc
	}
	theme = hunt_activity
	override_background = {
		reference = mining_activity
	}
	left_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = scope:befriend_target
	}
	cooldown = { years = 1 }

	trigger = {
		OR = {
			AND = {
				has_activity_intent = befriend_attendee_intent
				exists = intent_target
				intent_target = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
			any_scheme = {
				scheme_type = befriend
				scheme_target = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 10
			has_activity_intent = befriend_attendee_intent
			exists = intent_target
			intent_target = {
				is_alive = yes
				is_participant_in_activity = scope:activity
			}
		}
	}

	immediate = {
		save_scope_as = befriend_actor
		if = {
			limit = {
				has_activity_intent = befriend_attendee_intent
				exists = intent_target
				intent_target = {
					is_alive = yes
					is_participant_in_activity = scope:activity
				}
			}
			intent_target = { save_scope_as = befriend_target }
		}
		else = {
			random_scheme = {
				limit = {
					scheme_type = befriend
					scheme_target = {
						is_alive = yes
						is_participant_in_activity = scope:activity
					}
				}
				scheme_target = { save_scope_as = befriend_target }
			}
		}
		scope:befriend_target = {
			save_scope_as = woo_target
			save_scope_as = target
		}
	}

	option = { #Suck up
		name = mining.3001.a
		custom_tooltip = mining.3001.a.tt
		save_scope_value_as = {
			name = befriend_approach
			value = flag:suck_up
		}
		stress_impact = {
			craven = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_energy = 0.5
				ai_boldness = 0.5
				ai_compassion = -0.5
			}
		}
	}

	option = { #Fellow miner
		name = mining.3001.b
		trigger = {
			has_trait = lifestyle_miner
			scope:befriend_target = { has_trait = lifestyle_miner }
		}
		custom_tooltip = mining.3001.b.tt
		save_scope_value_as = {
			name = befriend_approach
			value = flag:miner
		}
		stress_impact = {
			shy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
		}
	}

	option = { # Compassion
		name = mining.3001.c
		custom_tooltip = mining.3001.c.tt
		save_scope_value_as = {
			name = befriend_approach
			value = flag:mentor
		}
		stress_impact = {
			sadistic = minor_stress_impact_gain
			callous = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			opinion_modifier = {
				opinion_target = scope:mining_participant
				multiplier = 0.5
			}
			ai_value_modifier = {
				ai_energy = -0.5
				ai_boldness = -0.5
				ai_compassion = 0.5
			}
		}
	}

	option = { # Wastrel
		name = mining.3001.d
		custom_tooltip = mining.3001.d.tt
		save_scope_value_as = {
			name = befriend_approach
			value = flag:wastrel
		}
		stress_impact = {
			lifestyle_miner = minor_stress_impact_gain
			content = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 1
				ai_compassion = 0.5
			}
		}
	}

	option = { # Steward
		name = mining.3001.e
		custom_tooltip = mining.3001.e.tt
		save_scope_value_as = {
			name = befriend_approach
			value = flag:steward
		}
		stress_impact = {
			impatient = minor_stress_impact_gain
			lazy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			ai_value_modifier = {
				ai_boldness = 1
				ai_compassion = 0.5
			}
		}
	}

	after = {
		show_as_tooltip = {
			random_list = {
				10 = {
					desc = seduce_ongoing_possible_outcomes_tooltip_effect.success.desc
					show_chance = no
					progress_towards_friend_effect = {
						CHARACTER = scope:befriend_target
						OPINION = 15
						REASON =  lover_miner_conversation_impressed
					}
				}
				10 = {
					desc = seduce_ongoing_possible_outcomes_tooltip_effect.failure.desc
					show_chance = no
					reverse_add_opinion = {
						target = scope:befriend_target
						modifier = hunt_bored_opinion # LotR - Fine to keep
						opinion = -10
					}
				}
			}
		}
		scope:befriend_target = {
			save_scope_as = target
			hidden_effect = {
				#Evaluate what makes for a "right" choice
				if = {
					limit = {
						OR = {
							AND = {
								has_trait = arrogant
								hunt_dharmic_pacificist_trigger = no
								exists = scope:befriend_target
								scope:befriend_approach = flag:suck_up
							}
							AND = {
								ai_energy > medium_positive_energy
								ai_sociability > medium_positive_compassion # sociability doesn't exist
								hunt_dharmic_pacificist_trigger = no
								exists = scope:befriend_target
								scope:befriend_approach = flag:miner
							}
							AND = {
								has_trait = humble
								opinion = {
									target = root
									value >= 25
								}
								exists = scope:befriend_target
								scope:befriend_approach = flag:mentor
							}
						}
					}
					save_scope_value_as = {
						name = made_great_choice
						value = yes
					}
				}
				random_list = {
					100 = { #Success
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:suck_up
							has_trait = fickle
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:miner
							has_trait = gregarious
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:mentor
							has_trait = compassionate
						}
						trigger_event = {
							id = mining.3202
							days = { 1 2 }
						}
						scope:befriend_actor = {
							trigger_event = {
								id = mining.3204
								days = { 3 4 }
							}
						}
					}
					100 = { #Failure
						trigger = {
							NOT = { exists = scope:made_great_choice }
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:miner
							hunt_dharmic_pacificist_trigger = yes
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:miner
							has_trait = craven
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:falconer
							has_trait = shy
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:pity
							OR = {
								has_trait = callous
								has_trait = sadistic
							}
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:wastrel
							has_trait = content
						}
						modifier = {
							add = 100
							exists = scope:befriend_approach
							scope:befriend_approach = flag:steward
							has_trait = lazy
						}
						trigger_event = {
							id = mining.3203
							days = { 1 2 }
						}
						scope:befriend_actor = {
							trigger_event = {
								id = mining.3205
								days = { 3 4 }
							}
						}
					}
				}
			}
		}
	}
}

#Target: Success
mining.3202 = {
	type = activity_event
	title = mining.3201.t
	desc = {
		desc = mining.3202.opening
		first_valid = {
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:miner }
				desc = mining.3202.miner
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:prospector }
				desc = mining.3202.prospector
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:pity }
				desc = mining.3202.pity
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:wastrel }
				desc = mining.3202.wastrel
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:steward }
				desc = mining.3202.steward
			}
			desc = mining.3202.fallback
		}
	}	
	left_portrait = {
		character = scope:befriend_actor
		animation = admiration
	}
	theme = seduce_scheme
	override_background = {
		reference = mining_activity
	}

	trigger = { exists = scope:befriend_approach }

	option = {
		name = mining.3203.a
		add_stress = minor_stress_loss
		show_as_tooltip = {
			progress_towards_friend_effect = {
				CHARACTER = scope:befriend_target
				OPINION = 15
				REASON =  lover_miner_conversation_impressed
			}
		}
	}
}

#Target: Failure
mining.3203 = {
	type = activity_event
	title = mining.3001.t
	desc = {
		desc = hunt.7101.opening
		first_valid = {
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:miner }
				desc = mining.3203.miner
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:prospector }
				desc = mining.3203.prospector
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:pity }
				desc = mining.3203.pity
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:wastrel }
				desc = mining.3203.wastrel
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:steward }
				desc = mining.3203.steward
			}
			desc = mining.3203.fallback
		}
	}
	left_portrait = {
		character = scope:befriend_actor
		animation = admiration
	}
	theme = unfriendly
	override_background = {
		reference = mining_activity
	}

	trigger = { exists = scope:befriend_approach }

	option = {
		name = hunt.7102.a
	}
}

#Actor: Success
mining.3204 = {
	type = activity_event
	title = mining.3001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:miner }
				desc = mining.3204.miner
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:prospector }
				desc = mining.3204.prospector
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:pity }
				desc = mining.3204.pity
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:wastrel }
				desc = mining.3204.wastrel
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:steward }
				desc = mining.3204.steward
			}
			desc = mining.3204.fallback
		}
		desc = mining.3204.desc
	}	
	left_portrait = {
		character = scope:befriend_target
		animation = admiration
	}
	theme = befriend_scheme
	override_background = {
		reference = mining_activity
	}

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = { exists = scope:befriend_approach }

	option = {
		name = mining.3204.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_befriend_success_key
				score = 75
				tags = { random good intent }
				character = root
				target = scope:befriend_target

				#Effect
				root = {
					progress_towards_friend_effect = {
						CHARACTER = scope:befriend_target
						OPINION = 15
						REASON = lover_miner_conversation_impressed
					}
				}
			}
		}
	}
}

#Actor: Failure
mining.3205 = {
	type = activity_event
	title = mining.3201.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:miner }
				desc = mining.3205.miner
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:prospector }
				desc = mining.3205.prospector
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:pity }
				desc = mining.3205.pity
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:wastrel }
				desc = mining.3205.wastrel
			}
			triggered_desc = {
				trigger = { scope:befriend_approach = flag:steward }
				desc = mining.3205.steward
			}
			desc = mining.3205.fallback
		}
		desc = mining.3205.desc
	}	
	left_portrait = {
		character = root
		animation = stress
	}	
	right_portrait = {
		character = scope:befriend_target
		animation = eyeroll
	}
	theme = befriend_scheme
	override_background = {
		reference = mining_activity
	}

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = { exists = scope:befriend_approach }

	option = {
		name = mining.3205.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_befriend_failure_key
				score = 75
				tags = { random bad intent }
				character = root
				target = scope:befriend_target

				#Effect
				root = {
					reverse_add_opinion = {
						target = scope:befriend_target
						modifier = hunt_failed_woo_opinion #LotR - Fine to Keep
						opinion = -10
					}
				}
			}
		}
	}
}
#####################################
#	OUTCOME EVENTS	                #
#	8001 - 8999						#
#####################################

# Prospecting Success
mining.8001 = {
	type = activity_event
	theme = stewardship
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:mithril}
				}
				desc = mining.8001.t.mithril
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:gold }
				}
				desc = mining.8001.t.gold
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:silver }
				}
				desc = mining.8001.t.silver
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:lead }
				}
				desc = mining.8001.t.lead
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:tin }
				}
				desc = mining.8001.t.tin
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:copper }
				}
				desc = mining.8001.t.copper
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:iron }
				}
				desc = mining.8001.t.iron
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:diamond }
				}
				desc = mining.8001.t.diamond
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:ruby }
				}
				desc = mining.8001.t.ruby
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:sapphire }
				}
				desc = mining.8001.t.sapphire
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:emerald }
				}
				desc = mining.8001.t.emerald
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:amethyst }
				}
				desc = mining.8001.t.amethyst
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:onyx }
				}
				desc = mining.8001.t.onyx
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:peridot }
				}
				desc = mining.8001.t.peridot
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:quartz }
				}
				desc = mining.8001.t.quartz
			}
			desc = mining.8001.t.unknown
		}
	}
	desc = {
		desc = mining.8001.desc.start
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:mithril }
				}
				desc = mining.8001.desc.mithril
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:gold }
				}
				desc = mining.8001.desc.gold
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:silver }
				}
				desc = mining.8001.desc.silver
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:lead }
				}
				desc = mining.8001.desc.lead
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:tin }
				}
				desc = mining.8001.desc.tin
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:copper }
				}
				desc = mining.8001.desc.copper
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:iron }
				}
				desc = mining.8001.desc.iron
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:diamond }
				}
				desc = mining.8001.desc.diamond
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:ruby }
				}
				desc = mining.8001.desc.ruby
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:sapphire }
				}
				desc = mining.8001.desc.sapphire
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:emerald }
				}
				desc = mining.8001.desc.emerald
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:amethyst }
				}
				desc = mining.8001.desc.amethyst
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:onyx }
				}
				desc = mining.8001.desc.onyx
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:peridot }
				}
				desc = mining.8001.desc.peridot
			}
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_resource_found ?= flag:quartz }
				}
				desc = mining.8001.desc.quartz
			}
			desc = mining.8001.desc.unknown
		}
	}
	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		trigger = { exists = scope:mining_participant_2 }
		character = scope:mining_participant_2
		animation = throne_room_cheer_1
	}
	center_portrait = {
		character = scope:host
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:mining_participant }
		character = scope:mining_participant
		animation = throne_room_cheer_2
	}

	cooldown = { weeks = 1 }

	trigger = {
		scope:activity = { 
			has_activity_option = {
				category = special_type
				option = mining_type_prospecting
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = { add = involved_activity.var:mining_success_chance }
	}

	immediate = {
		hidden_effect = {
			mining_generate_new_random_resource = yes
		}
		scope:activity = {
			set_variable = {
				name = mining_success
				value = flag:yes
			}
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = scope:host }
				}
				save_scope_as = mining_participant
			}
			random_attending_character = {
				limit = {
					NOT = { 
						this = scope:host
						this = scope:mining_participant
					}
				}
				save_scope_as = mining_participant_2
			}
		}
		save_scope_as = mining_ending
		mining_all_attendee_xp_effect = { CHANGE = 8 RANDOM = 2 } # Guest XP gain for success
	}

	option = { # Find a random resource
		name = mining.8001.a
		# Show the province modifier discovered
		if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:mithril }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_mithril_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:gold }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_gold_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:silver }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_silver_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:copper }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_copper_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:tin }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_tin_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:lead }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_lead_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:iron }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_iron_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:diamond }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_diamond_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:ruby }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_ruby_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:sapphire }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_sapphire_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:emerald }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_emerald_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:amethyst }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_amethyst_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:onyx }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_onyx_province_modifier
					}
				}
			}
		}
		else_if = {
			limit = {
				scope:activity = { var:mining_resource_found ?= flag:peridot }
			}
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_peridot_province_modifier
					}
				}
			}
		}
		else = {
			show_as_tooltip = { 
				scope:activity.activity_location = {
					add_province_modifier = {
						modifier = mining_quartz_province_modifier
					}
				}
			}
		}
		# People happy when their nobles discover resources that will enrich their area
		scope:activity = {
			if = {
				limit = {
					var:mining_success ?= flag:yes
					exists = var:mining_resource_found
				}
				activity_location.county = {
					add_county_modifier = {
						modifier = mining_recent_prospecting_success_county_modifier
						years = 10
					}
				}
			}
		}
	}

	after = {
		scope:activity = {
			add_activity_log_entry = {
				key = mining_completed_success_log
				score = 80
				tags = { complete good }
				character = scope:host
				show_in_conclusion = yes
				# EFFECT
				scope:host = { disburse_mining_activity_rewards = yes }
			}
		}
	}

}

# Prospecting Failure
mining.8002 = {
	type = activity_event
	title = mining.8002.t
	desc = mining.8002.desc
	theme = stewardship
	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = scope:host
		animation = stress
	}
	right_portrait = {
		trigger = { exists = scope:mining_participant }
		character = scope:mining_participant
		animation = sadness
	}

	cooldown = { weeks = 1 }

	trigger = {
		scope:activity = { 
			has_activity_option = {
				category = special_type
				option = mining_type_prospecting
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = {
				value = 100
				subtract = involved_activity.var:mining_success_chance
			}
		}
	}

	immediate = {
		scope:activity = {
			set_variable = {
				name = mining_success
				value = flag:no
			}
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = scope:host }
				}
				save_scope_as = mining_participant
			}
		}
		save_scope_as = mining_ending
		mining_all_attendee_xp_effect = { CHANGE = 4 RANDOM = 2 } # Guest XP gain for success
	}

	option = { # Darn!
		name = mining.8002.a
	}

	after = {
		scope:activity = {
			add_activity_log_entry = {
				key = mining_completed_failure_log
				score = 80
				tags = { complete bad }
				character = scope:host
				show_in_conclusion = yes

				# EFFECT
				scope:host = { disburse_mining_activity_rewards = yes }
			}
		}
	}

}

# Mining Success
mining.8003 = {
	type = activity_event
	theme = stewardship
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_success_scale ?= 5 }
				}
				desc = mining.8003.t.5
			}
			triggered_desc = {
				trigger = { 
					OR = {
						scope:activity = { var:mining_success_scale ?= 4 }
						scope:activity = { var:mining_success_scale ?= 3 }
					}
				}
				desc = mining.8003.t.3
			}
			desc = mining.8003.t.1
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_success_scale ?= 5 }
				}
				desc = mining.8003.desc.5
			}
			triggered_desc = {
				trigger = { 
					OR = {
						scope:activity = { var:mining_success_scale ?= 4 }
						scope:activity = { var:mining_success_scale ?= 3 }
					}
				}
				desc = mining.8003.desc.3
			}
			desc = mining.8003.desc.1
		}
	}
	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		trigger = { exists = scope:mining_participant_2 }
		character = scope:mining_participant_2
		animation = throne_room_cheer_1
	}
	center_portrait = {
		character = scope:host
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:mining_participant }
		character = scope:mining_participant
		animation = throne_room_cheer_2
	}

	cooldown = { weeks = 1 }

	trigger = {
		scope:activity = { 
			has_activity_option = {
				category = special_type
				option = mining_type_standard
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = { add = involved_activity.var:mining_success_chance }
	}

	immediate = {
		random_list = { # Determine *how* successful the trip has been
			5 = {
				scope:activity = { # Small Success
					set_variable = {
						name = mining_success_scale
						value = 1
					}
				}
			}
			4 = {
				scope:activity = { # Modest Success
					set_variable = {
						name = mining_success_scale
						value = 2
					}
				}
			}
			3 = {
				scope:activity = { # Good Success
					set_variable = {
						name = mining_success_scale
						value = 3
					}
				}
			}
			2 = {
				scope:activity = { # Great Success
					set_variable = {
						name = mining_success_scale
						value = 4
					}
				}
			}
			1 = {
				scope:activity = { # Overwhelming Success
					set_variable = {
						name = mining_success_scale
						value = 5
					}
				}
			}
		}
		scope:activity = {
			set_variable = {
				name = mining_success
				value = flag:yes
			}
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = scope:host }
				}
				save_scope_as = mining_participant
			}
			random_attending_character = {
				limit = {
					NOT = { 
						this = scope:host
						this = scope:mining_participant
					}
				}
				save_scope_as = mining_participant_2
			}
		}
		save_scope_as = mining_ending
		mining_all_attendee_xp_effect = { CHANGE = 8 RANDOM = 2 } # Guest XP gain for success
	}

	option = {
		name = mining.8003.a
		scope:activity = {
			add_activity_log_entry = {
				key = mining_completed_success_log
				score = 80
				tags = { complete good }
				character = scope:host
				show_in_conclusion = yes
				# EFFECT
				scope:host = { 
					add_gold = {
						value = mining_success_gold_reward_value
					}
					disburse_mining_activity_rewards = yes
				}
			}
		}
	}

}

# Mining Failure
mining.8004 = {
	type = activity_event
	theme = stewardship
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_success_scale ?= 5 }
				}
				desc = mining.8004.t.5
			}
			triggered_desc = {
				trigger = { 
					OR = {
						scope:activity = { var:mining_success_scale ?= 4 }
						scope:activity = { var:mining_success_scale ?= 3 }
					}
				}
				desc = mining.8004.t.3
			}
			desc = mining.8004.t.1
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:activity = { var:mining_success_scale ?= 5 }
				}
				desc = mining.8004.desc.5
			}
			triggered_desc = {
				trigger = { 
					OR = {
						scope:activity = { var:mining_success_scale ?= 4 }
						scope:activity = { var:mining_success_scale ?= 3 }
					}
				}
				desc = mining.8004.desc.3
			}
			desc = mining.8004.desc.1
		}
	}
	override_background = {
		reference = mining_activity
	}

	left_portrait = {
		character = scope:host
		animation = stress
	}
	right_portrait = {
		trigger = { exists = scope:mining_participant }
		character = scope:mining_participant
		animation = sadness
	}

	cooldown = { weeks = 1 }

	trigger = {
		scope:activity = { 
			has_activity_option = {
				category = special_type
				option = mining_type_standard
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = {
				value = 100
				subtract = involved_activity.var:mining_success_chance
			}
		}
	}

	immediate = {
		random_list = { # Determine *how* unsuccessful the trip has been
			5 = {
				scope:activity = { # Marginal Failure
					set_variable = {
						name = mining_success_scale
						value = 1
					}
				}
			}
			4 = {
				scope:activity = { # Small Failure
					set_variable = {
						name = mining_success_scale
						value = 2
					}
				}
			}
			3 = {
				scope:activity = { # Medium Failure
					set_variable = {
						name = mining_success_scale
						value = 3
					}
				}
			}
			2 = {
				scope:activity = { # Large Failure
					set_variable = {
						name = mining_success_scale
						value = 4
					}
				}
			}
			1 = {
				scope:activity = { # Overwhelming Failure
					set_variable = {
						name = mining_success_scale
						value = 5
					}
				}
			}
		}
		scope:activity = {
			set_variable = {
				name = mining_success
				value = flag:no
			}
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = scope:host }
				}
				save_scope_as = mining_participant
			}
			random_attending_character = {
				limit = {
					NOT = { 
						this = scope:host
						this = scope:mining_participant
					}
				}
				save_scope_as = mining_participant_2
			}
		}
		save_scope_as = mining_ending
		mining_all_attendee_xp_effect = { CHANGE = 4 RANDOM = 2 } # Guest XP gain for success
	}

	option = { # Make some money - less than you paid to go
		name = mining.8004.a
		add_gold = {
			value = mining_failure_gold_reward_value
		}
	}

	after = {
		scope:activity = {
			add_activity_log_entry = {
				key = mining_completed_failure_log
				score = 80
				tags = { complete bad }
				character = scope:host
				show_in_conclusion = yes

				# EFFECT
				scope:host = { disburse_mining_activity_rewards = yes }
			}
		}
	}

}