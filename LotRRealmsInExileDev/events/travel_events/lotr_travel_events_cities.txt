namespace = lotr_travel_events_cities

############################
## Arrival in Baghdad
############################
# Non-exhaustive list.
# These are things a visitor might reflect on in Baghdad but not necessarily the biggest sights.
#1: The Suq al Warraqin - Book District
#2: The Royal Enclosure - Palace District
#3: The Cemetaries - one of multiple Cemetaries of old Baghdad

# Juke note: Reflavored for Bôzisha-Dâr! Seemed most fitting for me.

lotr_travel_events_cities.1010 = {
	content_source = realms_dlc	#LOTR
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:city_sight = flag:book_markets }
				desc = travel_city_bozisha_dar_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:palaces }
				desc = travel_city_bozisha_dar_royal_enclosure_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:cemeteries }
				desc = travel_city_bozisha_dar_cemeteries_title
			}
		}
	}
	desc = {
		desc = travel_city_bozisha_dar_intro #Entering Baghdad
		first_valid = { #What part of the city do we focus on
			triggered_desc = {
				trigger = { scope:city_sight = flag:book_markets }
				desc = travel_city_bozisha_dar
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:palaces }
				desc = travel_city_bozisha_dar_royal_enclosure
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:cemeteries }
				desc = travel_city_bozisha_dar_cemeteries
			}
		}
		triggered_desc = { #Do I have a relevant companion?
			trigger = {
				exists = scope:sightseeing_companion
			}
			desc = { #What part of the city do we focus on
				first_valid = {
					triggered_desc = {
						trigger = { scope:city_sight = flag:book_markets }
						desc = travel_city_companion_impressed
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:palaces }
						desc = travel_city_companion_idea
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:cemeteries }
						desc = travel_city_bozisha_dar_companion_reflection
					}
				}
			}
		}
	}
	theme = travel
	override_background = { reference = ep2_holy_site_mena } #Close enough to Baghdad
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:sightseeing_companion
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:book_markets
			}
			animation = admiration
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:palaces
			}
			animation = scheme
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:cemeteries
			}
			animation = personality_compassionate
		}
	}

	trigger = {
		#location = province:4828 #Baghdad
		location = province:2093 # Bôzisha-Dâr
		current_travel_plan.travel_plan_owner = root
		is_landed = yes
		is_location_valid_for_travel_event_on_land = yes #Should not be needed...
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		NOT = {
			any_memory = { #Did I come here before?
				has_memory_type = memory_big_city_visited
				has_variable = city_location
				var:city_location = root.location
			}
		}
		
	}

	immediate = {
		play_music_cue = mx_cue_travel_arrival
		location = {
			save_scope_as = city_province
		}
		random_list = {
			33 = { #Book Markets - Suq al-Warraqin
				modifier = { #Chances of ending up noticing a bookmarket are reduced if you aren't interested in books.
					learning < decent_skill_rating
					add = -15
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:book_markets
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								learning > high_skill_rating
							}
							learning > decent_skill_rating #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Royal Palace District
				#Block if not anyones capital. The palace district would look very different in that case
				trigger = {
					scope:city_province = scope:city_province.province_owner.capital_province
					highest_held_title_tier <= tier_empire #This version reads oddly if you are an Emperor
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:palaces
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								diplomacy > high_skill_rating
							}
							diplomacy > 10 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Cemeteries
				save_scope_value_as = {
					name = city_sight
					value = flag:cemeteries
				}
				random_list = { #What can I learn from the past
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:construction
						}
					} #City Construction
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:rulership
						}
					} #How to rule
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:fortifications
						}
					} #Fortification Design
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								# culture = { #LotR
								# 	has_cultural_pillar = heritage_arabic
								# }
								current_travel_plan.travel_leader ?= this
								learning > very_high_skill_rating
							}
							learning > 8 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
		}
	}

	#Bookmarket - Options
	option = { # Bookmarket Option A
		name = travel_city_option_souvenir
		trigger = { scope:city_sight = flag:book_markets }
	
		current_travel_plan = {
			delay_travel_plan = {
				days = 7
			}
		}

		remove_short_term_gold = medium_gold_value

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
				learning >= scope:sightseeing_companion.learning
			}
			custom_tooltip = book_souvenir_companion_tooltip
		}
		else = {
			custom_tooltip = book_souvenir_tooltip
		}

		hidden_effect = { #A book needs an author of local culture and religion.
			if = {
				limit = {
					exists = scope:sightseeing_companion #Two people search better than one
					learning >= scope:sightseeing_companion.learning
				}
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					save_scope_as = book_seller
				}
			}
			else = {
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					random_traits_list = {
						count = 1
						education_learning_2 = {}
						education_learning_3 = {}
					}
					learning = {
						min_template_decent_skill
						max_template_decent_skill
					}
					save_scope_as = book_seller
				}
			}
			hidden_effect_new_object = {
				create_artifact_book_effect = {
					OWNER = root
					CREATOR = scope:book_seller
					SET_SUBJECT = flag:learning
					SET_TOPIC = flag:no
				}
				scope:newly_created_artifact = {
					save_scope_as = souvenir
					if = {
						limit = {
							NOT = {
								root = { has_royal_court = yes }
							}
						}
						reforge_artifact = {
							type = miscellaneous
						}
					}
					set_artifact_description = book_artifact_loc
				}
			}
			if = {
				limit = {
					exists = scope:sightseeing_companion
				}
				send_interface_toast = {
					title = souvenir_bought_companion
					left_icon = scope:sightseeing_companion
					right_icon = scope:souvenir
				}
			}
			else = {
				send_interface_toast = {
					title = souvenir_bought
					left_icon = root
					right_icon = scope:souvenir
				}
			}
			hidden_effect = {
				scope:book_seller = {
					silent_disappearance_effect = yes
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = greedy
				}
			}
		}
	}

	option = { # Bookmarket Option B
		name = travel_city_option_learning
		trigger = {
			scope:city_sight = flag:book_markets
		}

		#Duel:
		#Win: Increase learning
		#Better win: Open Minded Perk OR you get Clerical Justification (depending on your personality)

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = learning
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion  #You engage together in these conversations and share notes afterwards - This companion has at least 12 Learning to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = { #Special case
						limit = {
							NOT = { has_perk = open_minded_perk }
							OR = {
								has_trait = compassionate
								has_trait = just
								has_trait = content
								has_trait = temperate
								has_trait = patient
								has_trait = generous
							}
							NOT = { has_trait = zealous }
						}
						add_perk = open_minded_perk
					}
					else_if = { #General case
						limit = {
							NOR = {
								has_perk = open_minded_perk
								has_perk = clerical_justifications_perk
							}
						}
						add_perk = clerical_justifications_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_learning = yes
						}
						add_learning_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_learning_skill = 3
					}
				}
			}
			# Success: Success - You get Learning
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_learning_skill = 2
				}
			}
			35 = { # Failure: Piety
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_piety = medium_piety_gain
				}
			}
			15 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_piety = minor_piety_loss
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_learning = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}

	#Royal District - Options
	option = { # Royal District Option A
		name = travel_city_option_study_locals
		trigger = { scope:city_sight = flag:palaces }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = diplomacy
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 diplomacy to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
				# if = { #LotR
				# 	limit = {
				# 		scope:city_province = { #Arabic has a special status in Baghdad but we still need to account for if it somehow changed
				# 			culture = {
				# 				has_cultural_pillar = language_arabic
				# 			}
				# 		}
				# 		knows_language_of_culture = scope:city_province.culture
				# 	}
				# 	add = -5
				# }
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = inspiring_rule_perk }
						}
						add_perk = inspiring_rule_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_diplomacy = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_diplomacy_skill = 2
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_diplomacy_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # Royal District Option B
		name = travel_city_option_party_hard
		trigger = {
			scope:city_sight = flag:palaces
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		remove_short_term_gold = medium_gold_value

		random_list = {
			30 = {
				trigger = {
					has_royal_court = yes
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert
						years = 15
					}
				}
			}
			30 = {
				trigger = {
					has_royal_court = no
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert_no_court
						years = 15
					}
				}
			}
			30 = { 
				send_interface_toast = {
					title = travel_city_new_techniques
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_techniques
						years = 15
					}
				}
			}
			40 = {
				send_interface_toast = {
					title = travel_city_well_rested
					left_icon = root
					add_character_modifier = {
						modifier = well_rested_modifier
						years = 10
					}
				}
			}
		}

		if = {
			limit = {
				has_trait = lifestyle_reveler
			}
			add_trait_xp = {
				trait = lifestyle_reveler
				value = 5
			}
		}

		hidden_effect = {
			change_current_weight = 25
		}

		#I am on a way to an activity so quite possibly I am trying to relieve stress - also nice out from danger related stress

		stress_impact = { 
			base = major_stress_impact_loss #Finally an opportunity to enjoy life
			gregarious = miniscule_stress_impact_loss
			gluttonous = minor_stress_impact_loss
			greedy = minor_stress_impact_gain
			temperate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}

	#Cemeteries - Options
	option = { # Cemeteries Option A
		name = travel_city_option_reflection_on_existance
		trigger = { scope:city_sight = flag:cemeteries }

		#Reflect on your own existance - gain perk or long lasting skill modifier in return for a notable stress bump

		current_travel_plan = {
			delay_travel_plan = {
				days = 7 # 1 Week
			}
		}

		custom_tooltip = travel_city_option_reflection_on_existance_tooltip

		random_list = {
			15 = {
				modifier = {
					learning < decent_skill_rating
					NOT = {
						exists = scope:sightseeing_companion #Guaranteed to be better than decent
					}
					add = -10
				}
				if = {
					limit = { exists = scope:sightseeing_companion }
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death_companion
						left_icon = root
						if = {
							limit = { 
								NOT = { has_perk = restraint_perk } 
							}
							add_perk = restraint_perk
							add_learning_skill = 1
						}
						else = { #Fallback
							add_learning_skill = 2
						}
					}
					if = {
						limit = {
							can_set_relation_friend_trigger = { CHARACTER = scope:sightseeing_companion }
						}
						set_relation_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
					}
					else_if = {
						limit = {
							can_set_relation_best_friend_trigger = { CHARACTER = scope:sightseeing_companion }
						}
						set_relation_best_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
					}
					hidden_effect = {
						scope:sightseeing_companion = {
							add_learning_skill = 1
						}
					}
				}
				else = {
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death
						left_icon = root
						if = {
							limit = { 
								NOT = { has_perk = restraint_perk } 
							}
							add_perk = restraint_perk
							add_learning_skill = 1
						}
						else = { #Fallback
							add_learning_skill = 2
						}
					}
				}
			}
			40 = {
				trigger = {
					NOT = {
						has_character_modifier = contemplated_life
					}
				}
				if = {
					limit = { exists = scope:sightseeing_companion }
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death_companion
						left_icon = root
						add_character_modifier = {
							modifier = contemplated_life
							years = 15
						}
						if = {
							limit = {
								can_set_relation_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						else_if = {
							limit = {
								can_set_relation_best_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_best_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						hidden_effect = {
							scope:sightseeing_companion = {
								add_character_modifier = {
									modifier = contemplated_life
									years = 15
								}
							}
						}
					}
				}
				else = {
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death
						left_icon = root
						add_character_modifier = {
							modifier = contemplated_life
							years = 15
						}
					}
				}
			}

			40 = {
				trigger = {
					NOT = {
						has_character_modifier = contemplated_life
					}
				}
				if = {
					limit = { exists = scope:sightseeing_companion }
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death_companion
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_existential_dread
							years = 15
						}
						if = {
							limit = {
								can_set_relation_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						else_if = {
							limit = {
								can_set_relation_best_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_best_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						hidden_effect = {
							scope:sightseeing_companion = {
								add_character_modifier = {
									modifier = travel_city_existential_dread
									years = 15
								}
							}
						}
					}
				}
				else = {
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_existential_dread
							years = 15
						}
					}
				}
			}
		}
		stress_impact = { #Existential introversion can be scary
			base = medium_stress_impact_gain
			content = minor_stress_impact_loss #Mitigation
			humble = minor_stress_impact_loss #Mitigation
			craven = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}

		ai_chance = {
			base = 15
			modifier = {
				factor = 0.5
				NOR = {
					has_trait = content
					has_trait = humble
				}
			}
			modifier = {
				factor = 0 
				OR = {
					has_trait = craven
					has_trait = arrogant
					has_trait = ambitious
				}
			}
		}
	}
	option = { # Cemeteries Option B
		name = travel_city_option_learn_local_history
		trigger = {
			scope:city_sight = flag:cemeteries
			exists = scope:sightseeing_companion #Requires a learned guide
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		#What you can learn is determined in the immediate of the event as it would depend on what aspect of Baghdad history your guide has red up on

		scope:sightseeing_companion = {
			duel = {
				skill = learning
				value = high_skill_rating
				# Success.
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.49
					}
					desc = travel_city_duel_teaching_great_success
					if = {
						limit = {
							 scope:city_ancient_insight = flag:construction
						}
						root = {
							send_interface_toast = {
								title = travel_city_duel_teaching_great_success
								left_icon = root
								add_character_modifier = {
									modifier = travel_city_history_city_planning
									years = 15
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:city_ancient_insight = flag:rulership
						}
						root = {
							send_interface_toast = {
								title = travel_city_duel_teaching_great_success
								left_icon = root
								add_character_modifier = {
									modifier = travel_city_history_rulership
									years = 15
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:city_ancient_insight = flag:fortifications
						}
						root = {
							send_interface_toast = {
								title = travel_city_duel_teaching_great_success
								left_icon = root
								add_character_modifier = {
									modifier = travel_city_history_fortifications
									years = 15
								}
							}
						}
					}
				}
				# Failure - I fail to learn
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.49
					}
					desc = travel_city_duel_history_fail
					root = {
						send_interface_toast = {
							title = travel_city_duel_history_fail
							left_icon = root
							add_prestige = minor_prestige_loss
							stress_impact = {
								base = miniscule_stress_impact_gain
							}
						}
					}
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain #Unwilling to learn from the past
			lazy = medium_stress_impact_gain #Unwilling to learn period
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = lazy
				}
			}
		}
	}

	option = { # General Opt Out
		name = travel_city_option_opt_out

		custom_tooltip = travel_city_option_opt_out_tooltip

		#This one just opts out
		#No travel time loss

		stress_impact = { #Minor stress loss for focusing on the project underway
			lifestyle_traveler = minor_stress_impact_loss
		}
		
		ai_chance = {
			base = 25
		}
	}

	after = {
		create_character_memory = {
			type = memory_big_city_visited
		}
		scope:new_memory = {
			save_scope_as = city_memory
		}
		scope:city_memory = {
			set_variable = {
				name = city_location
				value = scope:city_province
			}
		}
	}
}

############################
## Arrival in Rome
############################
# Non-exhaustive list.
# These are things a visitor might reflect on in Rome but not necessarily the most famous sights.
#1: Fortified Monuments
#2: "Caesar's Needle" (really the Obelisk brought to Rome by Cornelius Gallus in 30 BCE)
#3: Pilgrim Hostels and Shrines

# Juke note: reflavored for Korlea!

lotr_travel_events_cities.1020 = {
	content_source = realms_dlc	#LOTR
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:city_sight = flag:fortified_monuments }
				desc = travel_city_korlea_fortified_monuments_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:caesars_needle }
				desc = travel_city_korlea_needle_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:pilgrims_and_shrines }
				desc = travel_city_korlea_pilgrims_and_shrines_title
			}
		}
	}
	desc = {
		desc = travel_city_korlea_intro #Entering Rome
		first_valid = { #What part of the city do we focus on
			triggered_desc = {
				trigger = { scope:city_sight = flag:fortified_monuments }
				desc = travel_city_korlea_fortified_monuments
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:caesars_needle }
				desc = travel_city_korlea_needle
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:pilgrims_and_shrines }
				desc = travel_city_korlea_pilgrims_and_shrines
			}
		}
		triggered_desc = { #Do I have a relevant companion?
			trigger = {
				exists = scope:sightseeing_companion
			}
			desc = { #What part of the city do we focus on
				first_valid = {
					triggered_desc = {
						trigger = { scope:city_sight = flag:fortified_monuments }
						desc = travel_city_companion_idea
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:caesars_needle }
						desc = travel_city_korlea_companion_reflection
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:pilgrims_and_shrines }
						desc = travel_city_companion_idea
					}
				}
			}
		}
		triggered_desc = { #Do I have a relevant companion?
			trigger = {
				NOT = { exists = scope:sightseeing_companion }
				scope:city_sight = flag:caesars_needle
			}
			desc = travel_city_korlea_alone_reflection
		}
	}
	theme = travel
	override_background = { reference = docks_adunai } #Close enough to Roman ruins

	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:sightseeing_companion
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:fortified_monuments
			}
			animation = scheme
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:caesars_needle
			}
			animation = admiration
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:pilgrims_and_shrines
			}
			animation = personality_compassionate
		}
	}

	trigger = {
		#location = province:2575 #Rome
		location = province:1644 #Korlea
		current_travel_plan.travel_plan_owner = root
		is_landed = yes
		is_location_valid_for_travel_event_on_land = yes #Should not be needed...
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		NOT = {
			any_memory = { #Did I come here before?
				has_memory_type = memory_big_city_visited
				has_variable = city_location
				var:city_location = root.location
			}
		}
	}

	immediate = {
		play_music_cue = mx_cue_travel_arrival
		location = {
			save_scope_as = city_province
		}
		random_list = {
			33 = { #Fortified Monuments
				save_scope_value_as = {
					name = city_sight
					value = flag:fortified_monuments
				}
				random_list = { #What can I learn from the past
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:construction
						}
					} #City Construction
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:spolia
						}
					} #How to rule
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:fortifications
						}
					} #
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								culture = { #LotR
									has_cultural_pillar = heritage_bellakari
								}
								current_travel_plan.travel_leader ?= this
								diplomacy > high_skill_rating
							}
							diplomacy > 10 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Caesar's Needle
				save_scope_value_as = {
					name = city_sight
					value = flag:caesars_needle
				}
				random_list = { #What can I learn from the past
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:construction
						}
					} #City Construction
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:rulership
						}
					} #How to rule
					33 = {
						save_scope_value_as = {
							name = city_ancient_insight
							value = flag:fortifications
						}
					} #
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								# culture = { #LotR
								# 	has_cultural_pillar = heritage_latin
								# }
								current_travel_plan.travel_leader ?= this
								learning > very_high_skill_rating
							}
							learning > 8 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Shrines & Pilgrims
				trigger = {
					trigger_if = {
						limit = {
							exists = involved_activity
						}
						involved_activity = { 
							activity_location ?= {
								NOT = { this = scope:city_province }
							}
						}
					}
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:pilgrims_and_shrines
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								# culture = { #LotR
								# 	has_cultural_pillar = heritage_latin
								# }
								current_travel_plan.travel_leader ?= this
								learning > very_high_skill_rating
							}
							learning > 8 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
		}
	}

	#Fortified Monuments - Options
	option = { # Fortified Monuments Option A
		name = travel_city_option_study_locals
		trigger = { scope:city_sight = flag:fortified_monuments }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = diplomacy
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 diplomacy to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
				# if = { #LotR
				# 	limit = {
				# 		scope:city_province = {
				# 			culture = {
				# 				has_cultural_pillar = language_latin
				# 			}
				# 		}
				# 		knows_language_of_culture = scope:city_province.culture
				# 	}
				# 	add = -5
				# }
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = flexible_truces_perk }
						}
						add_perk = flexible_truces_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_diplomacy = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_diplomacy_skill = 2
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_diplomacy_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # Fortified Monuments Option B
		name = travel_city_option_study_fortifications
		trigger = {
			scope:city_sight = flag:fortified_monuments
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 7 # 1 Week
			}
		}

		duel = {
			skill = martial
			value = high_skill_rating
			# Success.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.49
				}
				desc = travel_city_duel_teaching_great_success
				if = {
					limit = {
						 scope:city_ancient_insight = flag:construction
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_city_planning
							years = 15
						}
					}
				}
				else_if = {
					limit = {
						scope:city_ancient_insight = flag:spolia
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_spoilage
							years = 15
						}
					}
				}
				else_if = {
					limit = {
						scope:city_ancient_insight = flag:fortifications
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_fortifications
							years = 15
						}
					}
				}
			}
			# Failure - I fail to learn
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.49
				}
				desc = travel_city_duel_teaching_fail_no_companion
				send_interface_toast = {
					title = travel_city_duel_teaching_fail_no_companion
					left_icon = root
					add_prestige = minor_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain #Unwilling to learn from the past
			lazy = medium_stress_impact_gain #Unwilling to learn period
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = lazy
				}
			}
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}

	#Caesar's Needle - Options
	option = { # Caesar's Needle Option A
		name = travel_city_option_reflection_on_existance
		trigger = { scope:city_sight = flag:caesars_needle }

		#Reflect on your own existance - gain perk or long lasting skill modifier in return for a notable stress bump

		current_travel_plan = {
			delay_travel_plan = {
				days = 7 # 1 Week
			}
		}

		custom_tooltip = travel_city_option_reflection_on_existance_tooltip

		random_list = {
			15 = {
				modifier = {
					learning < decent_skill_rating
					NOT = {
						exists = scope:sightseeing_companion #Guaranteed to be better than decent
					}
					add = -10
				}
				if = {
					limit = { exists = scope:sightseeing_companion }
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death_companion
						left_icon = root
						if = {
							limit = { 
								NOT = { has_perk = writing_history_perk } 
							}
							add_perk = writing_history_perk
							add_diplomacy_skill = 1
						}
						else = { #Fallback
							add_diplomacy_skill = 2
						}
					}
					if = {
						limit = {
							can_set_relation_friend_trigger = { CHARACTER = scope:sightseeing_companion }
						}
						set_relation_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
					}
					else_if = {
						limit = {
							can_set_relation_best_friend_trigger = { CHARACTER = scope:sightseeing_companion }
						}
						set_relation_best_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
					}
					hidden_effect = {
						scope:sightseeing_companion = {
							add_diplomacy_skill = 1
						}
					}
				}
				else = {
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death
						left_icon = root
						if = {
							limit = { 
								NOT = { has_perk = writing_history_perk } 
							}
							add_perk = writing_history_perk
							add_diplomacy_skill = 1
						}
						else = { #Fallback
							add_diplomacy_skill = 2
						}
					}
				}
			}
			40 = {
				trigger = {
					NOT = {
						has_character_modifier = contemplated_life
					}
				}
				if = {
					limit = { exists = scope:sightseeing_companion }
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death_companion
						left_icon = root
						add_character_modifier = {
							modifier = contemplated_life
							years = 15
						}
						if = {
							limit = {
								can_set_relation_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						else_if = {
							limit = {
								can_set_relation_best_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_best_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						hidden_effect = {
							scope:sightseeing_companion = {
								add_character_modifier = {
									modifier = contemplated_life
									years = 15
								}
							}
						}
					}
				}
				else = {
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death
						left_icon = root
						add_character_modifier = {
							modifier = contemplated_life
							years = 15
						}
					}
				}
			}
			40 = {
				trigger = {
					NOT = {
						has_character_modifier = contemplated_life
					}
				}
				if = {
					limit = { exists = scope:sightseeing_companion }
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death_companion
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_existential_dread
							years = 15
						}
						if = {
							limit = {
								can_set_relation_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						else_if = {
							limit = {
								can_set_relation_best_friend_trigger = { CHARACTER = scope:sightseeing_companion }
							}
							set_relation_best_friend = { reason = contemplated_life_and_death_together target = scope:sightseeing_companion }
						}
						hidden_effect = {
							scope:sightseeing_companion = {
								add_character_modifier = {
									modifier = travel_city_existential_dread
									years = 15
								}
							}
						}
					}
				}
				else = {
					send_interface_toast = {
						title = travel_city_contemplated_life_and_death
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_existential_dread
							years = 15
						}
					}
				}
			}
		}
		stress_impact = { #Existential introversion can be scary
			base = major_stress_impact_gain
			content = minor_stress_impact_loss #Mitigation
			humble = minor_stress_impact_loss #Mitigation
			craven = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}

		ai_chance = {
			base = 15
			modifier = {
				factor = 0.5
				NOR = {
					has_trait = content
					has_trait = humble
				}
			}
			modifier = {
				factor = 0 
				OR = {
					has_trait = craven
					has_trait = arrogant
					has_trait = ambitious
				}
			}
		}
	}

	option = { # Caesar's Needle Option B
		name = travel_city_option_learn_local_history
		trigger = {
			scope:city_sight = flag:caesars_needle
			exists = scope:sightseeing_companion #Requires a learned guide
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		#What you can learn is determined in the immediate of the event as it would depend on what aspect of Roman history your guide has red up on

		scope:sightseeing_companion = {
			duel = {
				skill = learning
				value = high_skill_rating
				# Success.
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.49
					}
					desc = travel_city_duel_teaching_great_success
					if = {
						limit = {
							 scope:city_ancient_insight = flag:construction
						}
						root = {
							send_interface_toast = {
								title = travel_city_duel_teaching_great_success
								left_icon = root
								add_character_modifier = {
									modifier = travel_city_history_city_planning
									years = 15
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:city_ancient_insight = flag:rulership
						}
						root = {
							send_interface_toast = {
								title = travel_city_duel_teaching_great_success
								left_icon = root
								add_character_modifier = {
									modifier = travel_city_history_rulership
									years = 15
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:city_ancient_insight = flag:fortifications
						}
						root = {
							send_interface_toast = {
								title = travel_city_duel_teaching_great_success
								left_icon = root
								add_character_modifier = {
									modifier = travel_city_history_fortifications
									years = 15
								}
							}
						}
					}
				}
				# Failure - I fail to learn
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.49
					}
					desc = travel_city_duel_history_fail
					root = {
						send_interface_toast = {
							title = travel_city_duel_history_fail
							left_icon = root
							add_prestige = minor_prestige_loss
							stress_impact = {
								base = miniscule_stress_impact_gain
							}
						}
					}
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain #Unwilling to learn from the past
			lazy = medium_stress_impact_gain #Unwilling to learn period
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = lazy
				}
			}
		}
	}

	#Pilgrims and Shrines - Options

	option = { # Pilgrims and Shrines Option A
		name = travel_city_option_souvenir
		trigger = { scope:city_sight = flag:pilgrims_and_shrines }
	
		current_travel_plan = {
			delay_travel_plan = {
				days = 7
			}
		}

		remove_short_term_gold = medium_gold_value

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
				learning >= scope:sightseeing_companion.learning
			}
			custom_tooltip = souvenir_companion_tooltip
		}
		else = {
			custom_tooltip = souvenir_tooltip
		}

		hidden_effect = { 
			if = {
				limit = {
					# NOT = { religion = religion:christianity_religion } #LotR
					always = yes #LotR
				}
				if = {
					limit = {
						exists = scope:sightseeing_companion #Two people search better than one
						learning >= scope:sightseeing_companion.learning
					}
					#A book needs an author of local culture and religion.
					create_character = {
						template = scholar_character
						dynasty = none
						location = root.location
						culture = root.location.culture
						faith = root.location.faith
						save_scope_as = book_seller
					}
				}
				else = {
					create_character = {
						template = scholar_character
						dynasty = none
						location = root.location
						culture = root.location.culture
						faith = root.location.faith
						random_traits_list = {
							count = 1
							education_learning_2 = {}
							education_learning_3 = {}
						}
						learning = {
							min_template_decent_skill
							max_template_decent_skill
						}
						save_scope_as = book_seller
					}
				}
				hidden_effect_new_object = {
					create_artifact_book_effect = {
						OWNER = root
						CREATOR = scope:book_seller
						SET_SUBJECT = flag:learning
						SET_TOPIC = flag:no
					}
					scope:newly_created_artifact = {
						save_scope_as = souvenir
						if = {
							limit = {
								NOT = {
									root = { has_royal_court = yes }
								}
							}
							reforge_artifact = {
								type = miscellaneous
							}
						}
						set_artifact_description = book_artifact_loc
					}
				}
				if = {
					limit = {
						exists = scope:sightseeing_companion
					}
					send_interface_toast = {
						title = souvenir_bought_companion
						left_icon = scope:sightseeing_companion
						right_icon = scope:souvenir
					}
				}
				else = {
					send_interface_toast = {
						title = souvenir_bought_companion
						left_icon = root
						right_icon = scope:souvenir
					}
				}
				hidden_effect = {
					scope:book_seller = {
						silent_disappearance_effect = yes
					}
				}
			}
			# else = { #If Christian you get a relic #LotR
			# 	hidden_effect_new_object = {
			# 		create_artifact_pedestal_christian_relic_effect_hist = { OWNER = this }
			# 		scope:epic = {
			# 			save_scope_as = souvenir
			# 		}
			# 		send_interface_toast = {
			# 			title = souvenir_bought
			# 			left_icon = root
			# 			right_icon = scope:souvenir
			# 		}
			# 	}
			# }
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = greedy
				}
			}
		}
	}

	option = { # Pilgrims and Shrines Option B - Not Christian
		name = travel_city_option_learning
		trigger = {
			scope:city_sight = flag:pilgrims_and_shrines
			# NOT = { religion = religion:christianity_religion } #LotR
			always = yes #LotR
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		duel = {
			skill = diplomacy
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			} #We get a boost here if we brought a learned companion.

			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = embassies_perk }
						}
						add_perk = embassies_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_diplomacy = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_diplomacy_skill = 3
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_diplomacy_skill = 2
				}
			}
			35 = { # Failure: Prestige
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_piety = medium_prestige_gain
				}
			}
			15 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}

	# option = { # Pilgrims and Shrines Option B #LotR
	# 	name = travel_city_option_learning
	# 	trigger = {
	# 		scope:city_sight = flag:pilgrims_and_shrines
	# 		religion = religion:christianity_religion
	# 	}
	# 	name = travel_city_contemplated_religion_tooltip

	# 	current_travel_plan = {
	# 		delay_travel_plan = {
	# 			days = 14 # 2 Weeks
	# 		}
	# 	}

	# 	if = { #If I am a pilgrim on my way through Rome I am actually helped by this.
	# 		limit = {
	# 			has_pious_pilgrimage_type_trigger = yes
	# 		}
	# 		pious_type_option_effect = yes
	# 	}
	# 	add_piety = medium_piety_gain

	# 	random_list = {
	# 		10 = { #I contemplate my life & Death
	# 			send_interface_toast = {
	# 				title = travel_city_contemplated_life_and_death
	# 				left_icon = root
	# 				add_character_modifier = {
	# 					modifier = contemplated_life
	# 					years = 15
	# 				}
	# 			}
	# 		}
	# 		40 = { #i associate with the mystic side of my faith
	# 			send_interface_toast = {
	# 				title = travel_city_religious_mystic
	# 				left_icon = root
	# 				if = {
	# 					limit = {
	# 						not = { has_trait = lifestyle_mystic }
	# 					}
	# 					add_trait = lifestyle_mystic
	# 				}
	# 				add_trait_xp = {
	# 					trait = lifestyle_mystic
	# 					value = {
	# 						integer_range = {
	# 							min = medium_lifestyle_random_xp_low
	# 							max = medium_lifestyle_random_xp_high
	# 						}
	# 					}
	# 				}
	# 			}
	# 		}
	# 		50 = { #I find this whole experience reinvigorating
	# 			send_interface_toast = {
	# 				title = travel_city_well_rested
	# 				left_icon = root
	# 				add_character_modifier = {
	# 					modifier = well_rested_modifier
	# 					years = 10
	# 				}
	# 			}
	# 		}
	# 	}

	# 	#I am on a way to an activity so quite possibly I am trying to relieve stress - also nice out from danger related stress

	# 	stress_impact = { 
	# 		base = major_stress_impact_loss
	# 		gregarious = miniscule_stress_impact_loss
	# 		temperate = medium_stress_impact_gain
	# 	}

	# 	ai_chance = {
	# 		base = 25
	# 		modifier = {
	# 			factor = 0.5
	# 			stress = 0
	# 		}
	# 		modifier = {
	# 			factor = 2
	# 			stress >= higher_than_baseline_stress
	# 		}
	# 		modifier = {
	# 			factor = 1.5
	# 			has_trait = lifestyle_reveler
	# 		}
	# 		#Will always be a net stress loss option, so no blocking traits
	# 	}
	# }

	option = { # General Opt Out
		name = travel_city_option_opt_out

		custom_tooltip = travel_city_option_opt_out_tooltip

		#This one just opts out
		#No travel time loss

		stress_impact = { #Minor stress loss for focusing on the project underway
			lifestyle_traveler = minor_stress_impact_loss
		}
		
		ai_chance = {
			base = 25
		}
	}

	after = {
		create_character_memory = {
			type = memory_big_city_visited
		}
		scope:new_memory = {
			save_scope_as = city_memory
		}
		scope:city_memory = {
			set_variable = {
				name = city_location
				value = scope:city_province
			}
		}
	}
}

############################
## Arrival in Pelargir
############################
# Non-exhaustive list.
# These are things a visitor might reflect on in Pelargir but not necessarily the biggest sights.
#1: The port of Pelargir
#2: The Palace of the Sea-Lords
#3: Eithel Ulmo

lotr_travel_events_cities.1030 = {
	content_source = realms_dlc	#LOTR
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:city_sight = flag:port }
				desc = travel_city_docks_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:palaces }
				desc = travel_city_pelargir_palace_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:eithel_ulmo }
				desc = travel_city_pelargir_eithel_ulmo_title
			}
		}
	}
	desc = {
		desc = travel_city_pelargir_intro #Entering Pelargir
		first_valid = { #What part of the city do we focus on
			triggered_desc = {
				trigger = { scope:city_sight = flag:port }
				desc = travel_city_docks
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:palaces }
				desc = travel_city_pelargir_palace
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:eithel_ulmo }
				desc = travel_city_pelargir_eithel_ulmo
			}
		}
		triggered_desc = { #Do I have a relevant companion?
			trigger = {
				exists = scope:sightseeing_companion
			}
			desc = { #What part of the city do we focus on
				first_valid = {
					triggered_desc = {
						trigger = { scope:city_sight = flag:port }
						desc = travel_city_companion_impressed
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:palaces }
						desc = travel_city_companion_idea
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:eithel_ulmo }
						desc = travel_city_pelargir_companion_reflection
					}
				}
			}
		}
	}
	theme = travel
	override_background = { reference = docks_dunedain } #Close enough to Pelargir
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:sightseeing_companion
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:port
			}
			animation = admiration
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:palaces
			}
			animation = scheme
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:eithel_ulmo
			}
			animation = personality_compassionate
		}
	}

	trigger = {
		location = province:264 #Pelargir
		current_travel_plan.travel_plan_owner = root
		is_landed = yes
		is_location_valid_for_travel_event_on_land = yes #Should not be needed...
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		NOT = {
			any_memory = { #Did I come here before?
				has_memory_type = memory_big_city_visited
				has_variable = city_location
				var:city_location = root.location
			}
		}
		
	}

	immediate = {
		play_music_cue = mx_cue_travel_arrival
		location = {
			save_scope_as = city_province
		}
		random_list = {
			33 = { #Port of Pelargir
				modifier = { #Chances of ending up viiting the docks are reduced if you aren't interested in commerce.
					stewardship < decent_skill_rating
					add = -15
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:port
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								stewardship > high_skill_rating
								has_trait = lifestyle_mariner
							}
							stewardship > decent_skill_rating #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Palace fo the Sea-Lords
				#Block if not anyones capital. The palace district would look very different in that case
				trigger = {
					scope:city_province = scope:city_province.province_owner.capital_province
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:palaces
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								diplomacy > high_skill_rating
							}
							diplomacy > 10 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Eithel Ulmo
				trigger = {
					trigger_if = {
						limit = {
							exists = involved_activity
						}
						involved_activity = { 
							activity_location ?= {
								NOT = { this = scope:city_province }
							}
						}
					}
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:eithel_ulmo
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								culture = { #LotR
									has_cultural_pillar = heritage_dunedain
								}
								current_travel_plan.travel_leader ?= this
								learning > very_high_skill_rating
							}
							learning > 8 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
		}
	}

	#Port - Options
	option = { # Port Option A
		name = travel_city_option_souvenir
		trigger = { scope:city_sight = flag:port }
	
		current_travel_plan = {
			delay_travel_plan = {
				days = 7
			}
		}

		remove_short_term_gold = medium_gold_value

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
				learning >= scope:sightseeing_companion.learning
			}
			custom_tooltip = book_souvenir_companion_tooltip
		}
		else = {
			custom_tooltip = book_souvenir_tooltip
		}

		hidden_effect = { #A book needs an author of local culture and religion.
			if = {
				limit = {
					exists = scope:sightseeing_companion #Two people search better than one
					learning >= scope:sightseeing_companion.learning
				}
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					save_scope_as = book_seller
				}
			}
			else = {
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					random_traits_list = {
						count = 1
						education_learning_2 = {}
						education_learning_3 = {}
					}
					learning = {
						min_template_decent_skill
						max_template_decent_skill
					}
					save_scope_as = book_seller
				}
			}
			hidden_effect_new_object = {
				create_artifact_book_effect = {
					OWNER = root
					CREATOR = scope:book_seller
					SET_SUBJECT = flag:stewardship
					SET_TOPIC = flag:no
				}
				scope:newly_created_artifact = {
					save_scope_as = souvenir
					if = {
						limit = {
							NOT = {
								root = { has_royal_court = yes }
							}
						}
						reforge_artifact = {
							type = miscellaneous
						}
					}
					set_artifact_description = book_artifact_loc
				}
			}
			if = {
				limit = {
					exists = scope:sightseeing_companion
				}
				send_interface_toast = {
					title = souvenir_bought_companion
					left_icon = scope:sightseeing_companion
					right_icon = scope:souvenir
				}
			}
			else = {
				send_interface_toast = {
					title = souvenir_bought
					left_icon = root
					right_icon = scope:souvenir
				}
			}
			hidden_effect = {
				scope:book_seller = {
					silent_disappearance_effect = yes
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = greedy
				}
			}
		}
	}

	option = { # Port Option B
		name = travel_city_option_stewardship
		trigger = {
			scope:city_sight = flag:port
		}

		#Duel:
		#Win: Increase stewardship
		#Better win: Open Minded Perk OR you get Clerical Justification (depending on your personality)

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = stewardship
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion  #You engage together in these conversations and share notes afterwards - This companion has at least 12 Stewardship to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = { #Special case
						limit = {
							NOT = { has_perk = professional_workforce_perk }
							OR = {
								has_trait = diligent
								has_trait = just
								has_trait = calm
								has_trait = temperate
								has_trait = patient
								has_trait = ambitious
							}
							NOT = { has_trait = fickle }
						}
						add_perk = professional_workforce_perk
					}
					else_if = { #General case
						limit = {
							NOR = {
								has_perk = professional_workforce_perk
								has_perk = war_profiteer_perk
							}
						}
						add_perk = war_profiteer_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_stewardship = yes
						}
						add_stewardship_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_stewardship_skill = 3
					}
				}
			}
			# Success: Success - You get Stewardship
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_stewardship_skill = 2
				}
			}
			35 = { # Failure: Prestige
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = medium_prestige_gain
				}
			}
			15 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_piety = minor_piety_loss
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_stewardship = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}

	#Palace of the Sea-Lords - Options
	option = { # Palace of the Sea-Lords Option A
		name = travel_city_option_study_locals
		trigger = { scope:city_sight = flag:palaces }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = diplomacy
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 diplomacy to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
				if = { #LotR
					limit = {
						scope:city_province = { #Arabic has a special status in Baghdad but we still need to account for if it somehow changed
							culture = {
								has_cultural_pillar = language_westron
							}
						}
						knows_language_of_culture = scope:city_province.culture
					}
					add = -5
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = inspiring_rule_perk }
						}
						add_perk = inspiring_rule_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_diplomacy = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_diplomacy_skill = 2
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_diplomacy_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # Palace of the Sea-Lords Option B
		name = travel_city_option_party_hard
		trigger = {
			scope:city_sight = flag:palaces
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		remove_short_term_gold = medium_gold_value

		random_list = {
			30 = {
				trigger = {
					has_royal_court = yes
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert
						years = 15
					}
				}
			}
			30 = {
				trigger = {
					has_royal_court = no
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert_no_court
						years = 15
					}
				}
			}
			30 = { 
				send_interface_toast = {
					title = travel_city_new_techniques
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_techniques
						years = 15
					}
				}
			}
			40 = {
				send_interface_toast = {
					title = travel_city_well_rested
					left_icon = root
					add_character_modifier = {
						modifier = well_rested_modifier
						years = 10
					}
				}
			}
		}

		if = {
			limit = {
				has_trait = lifestyle_reveler
			}
			add_trait_xp = {
				trait = lifestyle_reveler
				value = 5
			}
		}

		hidden_effect = {
			change_current_weight = 25
		}

		#I am on a way to an activity so quite possibly I am trying to relieve stress - also nice out from danger related stress

		stress_impact = { 
			base = major_stress_impact_loss #Finally an opportunity to enjoy life
			gregarious = miniscule_stress_impact_loss
			gluttonous = minor_stress_impact_loss
			greedy = minor_stress_impact_gain
			temperate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}

	#Eithel Ulmo - Options

	option = { # Eithel Ulmo Option A
		name = travel_city_option_souvenir
		trigger = { scope:city_sight = flag:eithel_ulmo }
	
		current_travel_plan = {
			delay_travel_plan = {
				days = 7
			}
		}

		remove_short_term_gold = medium_gold_value

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
				learning >= scope:sightseeing_companion.learning
			}
			custom_tooltip = souvenir_companion_tooltip
		}
		else = {
			custom_tooltip = souvenir_tooltip
		}

		hidden_effect = { 
			if = {
				limit = {
					exists = scope:sightseeing_companion #Two people search better than one
					learning >= scope:sightseeing_companion.learning
				}
				#A book needs an author of local culture and religion.
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					save_scope_as = book_seller
				}
			}
			else = {
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					random_traits_list = {
						count = 1
						education_learning_2 = {}
						education_learning_3 = {}
					}
					learning = {
						min_template_decent_skill
						max_template_decent_skill
					}
					save_scope_as = book_seller
				}
			}
			hidden_effect_new_object = {
				create_artifact_book_effect = {
					OWNER = root
					CREATOR = scope:book_seller
					SET_SUBJECT = flag:learning
					SET_TOPIC = flag:no
				}
				scope:newly_created_artifact = {
					save_scope_as = souvenir
					if = {
						limit = {
							NOT = {
								root = { has_royal_court = yes }
							}
						}
						reforge_artifact = {
							type = miscellaneous
						}
					}
					set_artifact_description = book_artifact_loc
				}
			}
			if = {
				limit = {
					exists = scope:sightseeing_companion
				}
				send_interface_toast = {
					title = souvenir_bought_companion
					left_icon = scope:sightseeing_companion
					right_icon = scope:souvenir
				}
			}
			else = {
				send_interface_toast = {
					title = souvenir_bought_companion
					left_icon = root
					right_icon = scope:souvenir
				}
			}
			hidden_effect = {
				scope:book_seller = {
					silent_disappearance_effect = yes
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = greedy
				}
			}
		}
	}


	option = { # Eithel Ulmo Option B #LotR
		name = travel_city_option_learning
		trigger = {
			scope:city_sight = flag:eithel_ulmo
			faith = { religion = { is_in_family = rf_eruhini } }
		}
		name = travel_city_contemplated_religion_tooltip

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = { #If I am a pilgrim on my way through Rome I am actually helped by this.
			limit = {
				has_pious_pilgrimage_type_trigger = yes
			}
			pious_type_option_effect = yes
		}
		add_piety = medium_piety_gain

		random_list = {
			10 = { #I contemplate my life & Death
				send_interface_toast = {
					title = travel_city_contemplated_life_and_death
					left_icon = root
					add_character_modifier = {
						modifier = contemplated_life
						years = 15
					}
				}
			}
			40 = { #i associate with the mystic side of my faith
				send_interface_toast = {
					title = travel_city_religious_mystic
					left_icon = root
					if = {
						limit = {
							not = { has_trait = lifestyle_mystic }
						}
						add_trait = lifestyle_mystic
					}
					add_trait_xp = {
						trait = lifestyle_mystic
						value = {
							integer_range = {
								min = medium_lifestyle_random_xp_low
								max = medium_lifestyle_random_xp_high
							}
						}
					}
				}
			}
			50 = { #I find this whole experience reinvigorating
				send_interface_toast = {
					title = travel_city_well_rested
					left_icon = root
					add_character_modifier = {
						modifier = well_rested_modifier
						years = 10
					}
				}
			}
		}

		#I am on a way to an activity so quite possibly I am trying to relieve stress - also nice out from danger related stress

		stress_impact = { 
			base = major_stress_impact_loss
			gregarious = miniscule_stress_impact_loss
			temperate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}

	option = { # General Opt Out
		name = travel_city_option_opt_out

		custom_tooltip = travel_city_option_opt_out_tooltip

		#This one just opts out
		#No travel time loss

		stress_impact = { #Minor stress loss for focusing on the project underway
			lifestyle_traveler = minor_stress_impact_loss
		}
		
		ai_chance = {
			base = 25
		}
	}

	after = {
		create_character_memory = {
			type = memory_big_city_visited
		}
		scope:new_memory = {
			save_scope_as = city_memory
		}
		scope:city_memory = {
			set_variable = {
				name = city_location
				value = scope:city_province
			}
		}
	}
}

############################
## Arrival in Minas Tirith
############################
# Non-exhaustive list.
# These are things a visitor might reflect on in Minas Tirith but not necessarily the biggest sights.
#1: The walls of Minas Tirith
#2: Houses of Healing
#3: Tower of Ecthelion

lotr_travel_events_cities.1040 = {
	content_source = realms_dlc	#LOTR
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:city_sight = flag:minas_tirith_walls }
				desc = travel_city_minas_tirith_walls_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:houses_healing }
				desc = travel_city_minas_tirith_houses_healing_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:tower_ecthelion }
				desc = travel_city_minas_tirith_tower_ecthelion_title
			}
		}
	}
	desc = {
		desc = travel_city_minas_tirith_intro #Entering Minas Tirith
		first_valid = { #What part of the city do we focus on
			triggered_desc = {
				trigger = { scope:city_sight = flag:minas_tirith_walls }
				desc = travel_city_minas_tirith_walls
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:houses_healing }
				desc = travel_city_minas_tirith_houses_healing
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:tower_ecthelion }
				desc = travel_city_minas_tirith_tower_ecthelion
			}
		}
		triggered_desc = { #Do I have a relevant companion?
			trigger = {
				exists = scope:sightseeing_companion
			}
			desc = { #What part of the city do we focus on
				first_valid = {
					triggered_desc = {
						trigger = { scope:city_sight = flag:minas_tirith_walls }
						desc = travel_city_companion_impressed
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:houses_healing }
						desc = travel_city_minas_tirith_companion_reflection
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:tower_ecthelion }
						desc = travel_city_companion_idea
					}
				}
			}
		}
	}
	theme = travel
	override_background = { reference = minas_tirith }
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:sightseeing_companion
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:minas_tirith_walls
			}
			animation = admiration
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:tower_ecthelion
			}
			animation = scheme
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:houses_healing
			}
			animation = personality_compassionate
		}
	}

	trigger = {
		location = province:199 #Minas Tirith
		current_travel_plan.travel_plan_owner = root
		is_landed = yes
		is_location_valid_for_travel_event_on_land = yes #Should not be needed...
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		NOT = {
			any_memory = { #Did I come here before?
				has_memory_type = memory_big_city_visited
				has_variable = city_location
				var:city_location = root.location
			}
		}
	}

	immediate = {
		play_music_cue = mx_cue_travel_arrival
		location = {
			save_scope_as = city_province
		}
		location.county.holder = { save_scope_as = minas_tirith_ruler }
		random_list = {
			33 = { #Walls of Minas Tirith
				modifier = { #Chances of ending up noticing the city walls are reduced if you're not interested in military architecture.
					martial < decent_skill_rating
					add = -15
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:minas_tirith_walls
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								martial > high_skill_rating
								has_trait = military_engineer
							}
							martial > decent_skill_rating #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Houses of Healing
				trigger = {
					trigger_if = {
						limit = {
							exists = involved_activity
						}
						involved_activity = { 
							activity_location ?= {
								NOT = { this = scope:city_province }
							}
						}
					}
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:houses_healing
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								culture = { #LotR
									has_cultural_pillar = heritage_dunedain
								}
								current_travel_plan.travel_leader ?= this
								learning > very_high_skill_rating
							}
							learning > 8 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Tower of Ecthelion
				#Block if not anyones capital. The palace district would look very different in that case
				trigger = {
					scope:city_province = scope:city_province.province_owner.capital_province
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:tower_ecthelion
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								diplomacy > high_skill_rating
							}
							diplomacy > 10 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			
		}
	}

	#Walls of Minas Tirith - Options
	option = { # City Walls Option A
		name = travel_city_option_study_black_wall
		trigger = { scope:city_sight = flag:minas_tirith_walls }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = martial
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 learing to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = engineered_for_destruction_perk }
						}
						add_perk = engineered_for_destruction_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_martial = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_martial_skill = 2
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_martial_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # City Walls Option B
		name = travel_city_option_study_minas_tirith_inner_fortifications
		trigger = {
			scope:city_sight = flag:minas_tirith_walls
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 7 # 1 Week
			}
		}

		duel = {
			skill = martial
			value = high_skill_rating
			# Success.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.49
				}
				desc = travel_city_duel_teaching_great_success
				if = {
					limit = {
						 scope:city_ancient_insight = flag:construction
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_city_planning
							years = 15
						}
					}
				}
				else_if = {
					limit = {
						scope:city_ancient_insight = flag:spolia
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_spoilage
							years = 15
						}
					}
				}
				else_if = {
					limit = {
						scope:city_ancient_insight = flag:fortifications
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_fortifications
							years = 15
						}
					}
				}
			}
			# Failure - I fail to learn
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.49
				}
				desc = travel_city_duel_teaching_fail_no_companion
				send_interface_toast = {
					title = travel_city_duel_teaching_fail_no_companion
					left_icon = root
					add_prestige = minor_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain #Unwilling to learn from the past
			lazy = medium_stress_impact_gain #Unwilling to learn period
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = lazy
				}
			}
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}
	
	#Houses of Healing - Options
	option = { # Bookmarket Option A
		name = travel_city_option_souvenir
		trigger = { scope:city_sight = flag:houses_healing }
	
		current_travel_plan = {
			delay_travel_plan = {
				days = 7
			}
		}

		remove_short_term_gold = medium_gold_value

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
				learning >= scope:sightseeing_companion.learning
			}
			custom_tooltip = medecine_souvenir_companion_tooltip
		}
		else = {
			custom_tooltip = medecine_souvenir_tooltip
		}

		hidden_effect = { #A medecine needs an apothecary of local culture and religion.
			if = {
				limit = {
					exists = scope:sightseeing_companion #Two people search better than one
					learning >= scope:sightseeing_companion.learning
				}
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					save_scope_as = healer
				}
			}
			else = {
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					random_traits_list = {
						count = 1
						education_learning_2 = {}
						education_learning_3 = {}
					}
					learning = {
						min_template_decent_skill
						max_template_decent_skill
					}
					save_scope_as = healer
				}
			}
			hidden_effect_new_object = {
				create_artifact_panacea_effect = {
					OWNER = root
					ALCHEMIST = scope:healer
				}
				scope:newly_created_artifact = {
					save_scope_as = souvenir
					if = {
						limit = {
							NOT = {
								root = { has_royal_court = yes }
							}
						}
						reforge_artifact = {
							type = miscellaneous
						}
					}
					set_artifact_description = medecine_artifact_loc
				}
			}
			if = {
				limit = {
					exists = scope:sightseeing_companion
				}
				send_interface_toast = {
					title = souvenir_bought_companion
					left_icon = scope:sightseeing_companion
					right_icon = scope:souvenir
				}
			}
			else = {
				send_interface_toast = {
					title = souvenir_bought
					left_icon = root
					right_icon = scope:souvenir
				}
			}
			hidden_effect = {
				scope:healer = {
					silent_disappearance_effect = yes
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = greedy
				}
			}
		}
	}

	option = { # Houses of Healing Option B
		name = travel_city_option_learning
		trigger = {
			scope:city_sight = flag:houses_healing
		}

		#Duel:
		#Win: Increase learning
		#Better win: Open Minded Perk OR you get Clerical Justification (depending on your personality)

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = learning
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion  #You engage together in these conversations and share notes afterwards - This companion has at least 12 Learning to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = { #Special case
						limit = {
							NOT = { has_perk = wash_your_hands_perk }
							OR = {
								has_trait = compassionate
								has_trait = just
								has_trait = content
								has_trait = temperate
								has_trait = patient
								has_trait = generous
							}
							NOT = { has_trait = zealous }
						}
						add_perk = wash_your_hands_perk
					}
					else_if = { #General case
						limit = {
							NOR = {
								has_perk = wash_your_hands_perk
								has_perk = scientific_perk
							}
						}
						add_perk = scientific_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_learning = yes
						}
						add_learning_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_learning_skill = 3
					}
				}
			}
			# Success: Success - You get Learning
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_learning_skill = 2
				}
			}
			35 = { # Failure: Piety
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_piety = medium_piety_gain
				}
			}
			15 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_piety = minor_piety_loss
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_learning = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	
	
	#Tower of Ecthelion - Options
	option = { # Tower of Ecthelion Option A
		name = travel_city_option_study_locals
		trigger = { scope:city_sight = flag:tower_ecthelion }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = diplomacy
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 diplomacy to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
				if = { #LotR
					limit = {
						scope:city_province = {
							culture = {
								has_cultural_pillar = language_westron
							}
						}
						knows_language_of_culture = scope:city_province.culture
					}
					add = -5
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = inspiring_rule_perk }
						}
						add_perk = inspiring_rule_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_diplomacy = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_diplomacy_skill = 2
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_diplomacy_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # Tower of Ecthelion Option B
		name = travel_city_option_party_hard
		trigger = {
			scope:city_sight = flag:tower_ecthelion
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		remove_short_term_gold = medium_gold_value

		random_list = {
			30 = {
				trigger = {
					has_royal_court = yes
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert
						years = 15
					}
				}
			}
			30 = {
				trigger = {
					has_royal_court = no
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert_no_court
						years = 15
					}
				}
			}
			30 = { 
				send_interface_toast = {
					title = travel_city_new_techniques
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_techniques
						years = 15
					}
				}
			}
			40 = {
				send_interface_toast = {
					title = travel_city_well_rested
					left_icon = root
					add_character_modifier = {
						modifier = well_rested_modifier
						years = 10
					}
				}
			}
		}

		if = {
			limit = {
				has_trait = lifestyle_reveler
			}
			add_trait_xp = {
				trait = lifestyle_reveler
				value = 5
			}
		}

		hidden_effect = {
			change_current_weight = 25
		}

		#I am on a way to an activity so quite possibly I am trying to relieve stress - also nice out from danger related stress

		stress_impact = { 
			base = major_stress_impact_loss #Finally an opportunity to enjoy life
			gregarious = miniscule_stress_impact_loss
			gluttonous = minor_stress_impact_loss
			greedy = minor_stress_impact_gain
			temperate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}

	option = { # General Opt Out
		name = travel_city_option_opt_out

		custom_tooltip = travel_city_option_opt_out_tooltip

		#This one just opts out
		#No travel time loss

		stress_impact = { #Minor stress loss for focusing on the project underway
			lifestyle_traveler = minor_stress_impact_loss
		}
		
		ai_chance = {
			base = 25
		}
	}

	after = {
		create_character_memory = {
			type = memory_big_city_visited
		}
		scope:new_memory = {
			save_scope_as = city_memory
		}
		scope:city_memory = {
			set_variable = {
				name = city_location
				value = scope:city_province
			}
		}
	}
}

############################
## Arrival in Umbar
############################
# Non-exhaustive list.
# These are things a visitor might reflect on in Umbar but not necessarily the biggest sights.
#1: The docks
#2: Royal Palace
#3: Arsenal

lotr_travel_events_cities.1050 = {
	content_source = realms_dlc	#LOTR
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:city_sight = flag:umbar_docks }
				desc = travel_city_docks_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:arsenal }
				desc = travel_city_umbar_arsenal_title
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:umbar_palace }
				desc = travel_city_umbar_palace_title
			}
		}
	}
	desc = {
		desc = travel_city_umbar_intro #Entering Umbar
		first_valid = { #What part of the city do we focus on
			triggered_desc = {
				trigger = { scope:city_sight = flag:umbar_docks }
				desc = travel_city_docks
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:arsenal }
				desc = travel_city_umbar_arsenal
			}
			triggered_desc = {
				trigger = { scope:city_sight = flag:umbar_palace }
				desc = travel_city_umbar_palace
			}
		}
		triggered_desc = { #Do I have a relevant companion?
			trigger = {
				exists = scope:sightseeing_companion
			}
			desc = { #What part of the city do we focus on
				first_valid = {
					triggered_desc = {
						trigger = { scope:city_sight = flag:umbar_docks }
						desc = travel_city_companion_impressed
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:arsenal }
						desc = travel_city_companion_impressed
					}
					triggered_desc = {
						trigger = { scope:city_sight = flag:umbar_palace }
						desc = travel_city_companion_idea
					}
				}
			}
		}
	}
	theme = travel
	override_background = { reference = docks_adunai } #Close enough to Umbar
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:sightseeing_companion
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:umbar_docks
			}
			animation = scheme
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:umbar_palace
			}
			animation = scheme
		}
		triggered_animation = {
			trigger = {
				scope:city_sight = flag:arsenal
			}
			animation = war_defender
		}
	}

	trigger = {
		location = province:819 #Umbar
		current_travel_plan.travel_plan_owner = root
		is_landed = yes
		is_location_valid_for_travel_event_on_land = yes #Should not be needed...
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		NOT = {
			any_memory = { #Did I come here before?
				has_memory_type = memory_big_city_visited
				has_variable = city_location
				var:city_location = root.location
			}
		}
	}

	immediate = {
		play_music_cue = mx_cue_travel_arrival
		location = {
			save_scope_as = city_province
		}
		location.county.holder = { save_scope_as = umbar_ruler }
		random_list = {
			33 = { #Docks
				modifier = { #Chances of ending up noticing the city walls are reduced if you're not interested in military architecture.
					intrigue < decent_skill_rating
					add = -15
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:umbar_docks
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								intrigue > high_skill_rating
								has_trait = deceitful
							}
							intrigue > decent_skill_rating #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Arsenal
				modifier = { #Chances of ending up noticing the arsenal are reduced if you're not interested in navies.
					martial < decent_skill_rating
					add = -15
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:umbar_arsenal
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								martial > high_skill_rating
								has_trait = lifestyle_mariner
							}
							martial > decent_skill_rating #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			33 = { #Umbar Palace
				#Block if not anyones capital. The palace district would look very different in that case
				trigger = {
					scope:city_province = scope:city_province.province_owner.capital_province
				}
				save_scope_value_as = {
					name = city_sight
					value = flag:umbar_palace
				}
				current_travel_plan ?= { #Do we have a companion who could help?
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							is_available_travelling_adult = yes
							OR = {
								current_travel_plan.travel_leader ?= this
								diplomacy > high_skill_rating
							}
							diplomacy > 10 #At least this much
						}
						save_scope_as = sightseeing_companion
					}
				}
			}
			
		}
	}

	#Docks - Options
	option = { # Docks Option A
		name = travel_city_option_souvenir
		trigger = { scope:city_sight = flag:port }
	
		current_travel_plan = {
			delay_travel_plan = {
				days = 7
			}
		}

		remove_short_term_gold = medium_gold_value

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
				learning >= scope:sightseeing_companion.learning
			}
			custom_tooltip = book_souvenir_companion_tooltip
		}
		else = {
			custom_tooltip = book_souvenir_tooltip
		}

		hidden_effect = { #A book needs an author of local culture and religion.
			if = {
				limit = {
					exists = scope:sightseeing_companion #Two people search better than one
					learning >= scope:sightseeing_companion.learning
				}
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					save_scope_as = book_seller
				}
			}
			else = {
				create_character = {
					template = scholar_character
					dynasty = none
					location = root.location
					culture = root.location.culture
					faith = root.location.faith
					random_traits_list = {
						count = 1
						education_learning_2 = {}
						education_learning_3 = {}
					}
					learning = {
						min_template_decent_skill
						max_template_decent_skill
					}
					save_scope_as = book_seller
				}
			}
			hidden_effect_new_object = {
				create_artifact_book_effect = {
					OWNER = root
					CREATOR = scope:book_seller
					SET_SUBJECT = flag:intrigue
					SET_TOPIC = flag:no
				}
				scope:newly_created_artifact = {
					save_scope_as = souvenir
					if = {
						limit = {
							NOT = {
								root = { has_royal_court = yes }
							}
						}
						reforge_artifact = {
							type = miscellaneous
						}
					}
					set_artifact_description = book_artifact_loc
				}
			}
			if = {
				limit = {
					exists = scope:sightseeing_companion
				}
				send_interface_toast = {
					title = souvenir_bought_companion
					left_icon = scope:sightseeing_companion
					right_icon = scope:souvenir
				}
			}
			else = {
				send_interface_toast = {
					title = souvenir_bought
					left_icon = root
					right_icon = scope:souvenir
				}
			}
			hidden_effect = {
				scope:book_seller = {
					silent_disappearance_effect = yes
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain
			greedy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = greedy
				}
			}
		}
	}

	option = { # Port Option B
		name = travel_city_option_stewardship
		trigger = {
			scope:city_sight = flag:port
		}

		#Duel:
		#Win: Increase intrigue
		#Better win: Digging For Dirt Perk OR you get Court of Shadows_perk (depending on your personality)

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion #Two people search better than one
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = intrigue
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion  #You engage together in these conversations and share notes afterwards - This companion has at least 12 Intrigue to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = { #Special case
						limit = {
							NOT = { has_perk = digging_for_dirt_perk }
							OR = {
								has_trait = diligent
								has_trait = just
								has_trait = calm
								has_trait = temperate
								has_trait = patient
								has_trait = ambitious
							}
							NOT = { has_trait = fickle }
						}
						add_perk = digging_for_dirt_perk
					}
					else_if = { #General case
						limit = {
							NOR = {
								has_perk = digging_for_dirt_perk
								has_perk = court_of_shadows_perk
							}
						}
						add_perk = court_of_shadows_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_intrigue = yes
						}
						add_intrigue_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_intrigue_skill = 3
					}
				}
			}
			# Success: Success - You get Intrigue
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_intrigue_skill = 2
				}
			}
			35 = { # Failure: Prestige
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = medium_prestige_gain
				}
			}
			15 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_piety = minor_piety_loss
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_intrigue = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	
	
	# Umbar Palace - Options
	option = { # Umbar Palace Option A
		name = travel_city_option_study_locals
		trigger = { scope:city_sight = flag:umbar_palace }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = diplomacy
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 diplomacy to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
				if = { #LotR
					limit = {
						scope:city_province = {
							culture = {
								has_cultural_pillar = language_adunaic
							}
						}
						knows_language_of_culture = scope:city_province.culture
					}
					add = -5
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = inspiring_rule_perk }
						}
						add_perk = inspiring_rule_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_diplomacy = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_diplomacy_skill = 2
					}
				}
			}
			# Success: Success - You get Diplomacy
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_diplomacy_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # Umbar Palace Option B
		name = travel_city_option_party_hard
		trigger = {
			scope:city_sight = flag:umbar_palace
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		remove_short_term_gold = medium_gold_value

		random_list = {
			30 = {
				trigger = {
					has_royal_court = yes
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert
						years = 15
					}
				}
			}
			30 = {
				trigger = {
					has_royal_court = no
				}
				set_favorite_treat_effect = yes
				send_interface_toast = {
					title = travel_city_new_dessert
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_dessert_no_court
						years = 15
					}
				}
			}
			30 = { 
				send_interface_toast = {
					title = travel_city_new_techniques
					left_icon = root
					add_character_modifier = {
						modifier = travel_brought_home_new_techniques
						years = 15
					}
				}
			}
			40 = {
				send_interface_toast = {
					title = travel_city_well_rested
					left_icon = root
					add_character_modifier = {
						modifier = well_rested_modifier
						years = 10
					}
				}
			}
		}

		if = {
			limit = {
				has_trait = lifestyle_reveler
			}
			add_trait_xp = {
				trait = lifestyle_reveler
				value = 5
			}
		}

		hidden_effect = {
			change_current_weight = 25
		}

		#I am on a way to an activity so quite possibly I am trying to relieve stress - also nice out from danger related stress

		stress_impact = { 
			base = major_stress_impact_loss #Finally an opportunity to enjoy life
			gregarious = miniscule_stress_impact_loss
			gluttonous = minor_stress_impact_loss
			greedy = minor_stress_impact_gain
			temperate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}
	
	#Umbar Arsenal - Options
	option = { # Arsenal Option A
		name = travel_city_option_discuss_ship_building
		trigger = { scope:city_sight = flag:umbar_arsenal }

		current_travel_plan = {
			delay_travel_plan = {
				days = 14 # 2 Weeks
			}
		}

		if = {
			limit = {
				exists = scope:sightseeing_companion 
			}
			custom_tooltip = duel_companion_tooltip
		}

		duel = {
			skill = martial
			value = {
				value = 0
				if = {
					limit = {
						exists = scope:sightseeing_companion #You engage together in these conversations and share notes afterwards - This companion has at least 15 martial to have been saved
					}
					add = high_skill_rating
				}
				else = {
					add = very_high_skill_rating
				}
			}
			# Success: Great Success - You get a Perk
			15 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_success
				send_interface_toast = {
					title = travel_city_duel_teaching_great_success
					left_icon = root
					if = {
						limit = {
							NOT = { has_perk = engineered_for_destruction_perk }
						}
						add_perk = engineered_for_destruction_perk
					}
					else_if = { #Fallback
						limit = {
							has_focus_martial = yes
						}
						add_diplomacy_lifestyle_xp = massive_lifestyle_experience
					}
					else = { #Final fallback
						add_martial_skill = 2
					}
				}
			}
			# Success: Success - You get Martial
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = travel_city_duel_teaching_success
				send_interface_toast = {
					title = travel_city_duel_teaching_success
					left_icon = root
					add_martial_skill = 1
				}
			}
			20 = { # Failure: Modifier
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_fail
					left_icon = root
					add_prestige = minor_prestige_gain
				}
			}
			30 = { # Failure: You look stupid
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = travel_city_duel_teaching_great_fail
				send_interface_toast = {
					title = travel_city_duel_teaching_great_fail
					left_icon = root
					add_prestige = medium_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			lazy = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			craven = medium_stress_impact_gain
			reclusive = major_stress_impact_gain
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 2
				has_focus_diplomacy = yes
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = shy
					has_trait = craven
					has_trait = reclusive
				}
			}
		}
	}
	option = { # Umber Arsenal Option B
		name = travel_city_option_study_fortifications
		trigger = {
			scope:city_sight = flag:umbar_arsenal
		}

		current_travel_plan = {
			delay_travel_plan = {
				days = 7 # 1 Week
			}
		}

		duel = {
			skill = martial
			value = high_skill_rating
			# Success.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.49
				}
				desc = travel_city_duel_teaching_great_success
				if = {
					limit = {
						 scope:city_ancient_insight = flag:construction
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_city_planning
							years = 15
						}
					}
				}
				else_if = {
					limit = {
						scope:city_ancient_insight = flag:spolia
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_spoilage
							years = 15
						}
					}
				}
				else_if = {
					limit = {
						scope:city_ancient_insight = flag:fortifications
					}
					send_interface_toast = {
						title = travel_city_duel_teaching_great_success
						left_icon = root
						add_character_modifier = {
							modifier = travel_city_history_fortifications
							years = 15
						}
					}
				}
			}
			# Failure - I fail to learn
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.49
				}
				desc = travel_city_duel_teaching_fail_no_companion
				send_interface_toast = {
					title = travel_city_duel_teaching_fail_no_companion
					left_icon = root
					add_prestige = minor_prestige_loss
					stress_impact = {
						base = miniscule_stress_impact_gain
					}
				}
			}
		}

		stress_impact = {
			arrogant = minor_stress_impact_gain #Unwilling to learn from the past
			lazy = medium_stress_impact_gain #Unwilling to learn period
		}
		ai_chance = {
			base = 25
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = lazy
				}
			}
		}

		ai_chance = {
			base = 25
			modifier = {
				factor = 0.5
				stress = 0
			}
			modifier = {
				factor = 2
				stress >= higher_than_baseline_stress
			}
			modifier = {
				factor = 1.5
				has_trait = lifestyle_reveler
			}
			#Will always be a net stress loss option, so no blocking traits
		}
	}

	option = { # General Opt Out
		name = travel_city_option_opt_out

		custom_tooltip = travel_city_option_opt_out_tooltip

		#This one just opts out
		#No travel time loss

		stress_impact = { #Minor stress loss for focusing on the project underway
			lifestyle_traveler = minor_stress_impact_loss
		}
		
		ai_chance = {
			base = 25
		}
	}

	after = {
		create_character_memory = {
			type = memory_big_city_visited
		}
		scope:new_memory = {
			save_scope_as = city_memory
		}
		scope:city_memory = {
			set_variable = {
				name = city_location
				value = scope:city_province
			}
		}
	}
}