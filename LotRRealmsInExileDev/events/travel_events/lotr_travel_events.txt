#LotR travel events

namespace = lotr_travel_events

############################
## LotR Travel Events
############################

# lotr_travel_events.0001 		- A Colossal Wreck by Juke
# lotr_travel_events.0002 		- Giant Scorpion Attack
# lotr_travel_events.0003 		- Sandstorm!
# lotr_travel_events.0004-0006	- An Encounter in Rhosgobel - Meet Radagast!
# lotr_travel_events.0007 		- Travelling past Fangorn
# lotr_travel_events.0008		- Endless Darkness
# lotr_travel_events.0009		- Local Storyteller

############################################


##########################################
# A Colossal Wreck
# by Juke
# 0001
# Came across an ancient (numenorean?) monument somewhere around the dune sea
##########################################

lotr_travel_events.0001 = { # A Colossal Wreck
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0001.t
	desc = lotr_travel_events.0001.desc
	theme = travel	
	#override_background = {
	#	reference = wilderness_desert
	#}
	left_portrait = {
		character = root
	}
	cooldown = { years = 50 }
	trigger = {
		is_available_travelling = yes
		is_landed = yes
		NOT = { has_character_flag = had_event_ozymandias }
		location = {
			OR = {
				terrain = desert
				terrain = desert_mountains
				terrain = dune_sea
				terrain = red_desert
				terrain = saltflats
			}
		}
	}
	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}
	option = { # Nothing besides remains.
		name = lotr_travel_events.0001.a
		trigger = {
			has_trait = humble
		}
		add_character_flag = {
			flag = had_event_ozymandias
		}
		add_character_modifier = {
			modifier = harad_0017_ozymandias_good_modifier
			years = 25
		}
		stress_impact = {
			base = miniscule_stress_impact_loss
		}
		add_piety = 50
	}
	option = { # Nothing besides remains...
		name = lotr_travel_events.0001.b
		trigger = {
			NOR = {
				has_trait = humble
				has_trait = arrogant
			}
		}
		add_character_flag = {
			flag = had_event_ozymandias
		}
		add_character_modifier = {
			modifier = harad_0017_ozymandias_bad_modifier
			years = 25
		}
		stress_impact = {
			base = miniscule_stress_impact_gain
		}
	}
	option = { # Nothing besides remains...!
		name = lotr_travel_events.0001.c
		trigger = {
			has_trait = arrogant
		}
		add_character_flag = {
			flag = had_event_ozymandias
		}
		add_character_modifier = {
			modifier = harad_0017_ozymandias_bad_modifier
			years = 25
		}
		stress_impact = {
			base = miniscule_stress_impact_gain
		}
		add_prestige = 50	
		random = {
			chance = 10
			add_trait = depressed_1	
		}
	}
}

##########################################
# Giant Scorpion Attack
# by Jaco_Daan and Juke
# 0002
# Attacked by Giant Scorpion in the Dune Sea!
##########################################

scripted_effect lotr_travel_events_scorpion_duel_effect = {	#lifted from #travel_danger_events_6000_beast_duel_effect
	$FIGHTER$ = {
		duel = {
			skill = prowess
			value = high_skill_rating
			5 = {
				desc = lotr_travel_events.0002.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -49
				}
				root = {
					send_interface_toast = {
						title = lotr_travel_events.0002.success
						left_icon = $FIGHTER$
						$FIGHTER$ = { add_prestige = medium_prestige_gain }
					}
				}
				min = 1
			}
			15 = {
				desc = lotr_travel_events.0002.wound
				trigger = {
					NOT = {
						has_trait_rank = {
							trait = wounded
							rank > 1
						}
					}
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				root = {
					send_interface_toast = {
						title = lotr_travel_events.0002.wound
						left_icon = $FIGHTER$
						$FIGHTER$ = {
							hunt_animal_wound_effect = { VARIABLE = root.var:animal_type }
						}
					}
				}
				min = 3
			}
			10 = {
				desc = lotr_travel_events.0002.failure
				trigger = {
					cannot_be_killed = no #lotr
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				root = {
					send_interface_toast = {
						title = lotr_travel_events.0002.failure
						left_icon = $FIGHTER$
						$FIGHTER$ = {
							death = { death_reason = death_scorpion }
						}
					}
				}
				min = 2
				modifier = {
					add = -30
					is_elf = yes
				}
			}
		}
	}
}

lotr_travel_events.0002 = { ### GIANT SCORPION ###
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = had_scorpion_event_recently }
				desc = lotr_travel_events.0002.desc.again
			}
			desc = lotr_travel_events.0002.desc
		}
		triggered_desc = {
			trigger = { exists = scope:beast_victim }
			desc = lotr_travel_events.0002.desc.victim
		}
	}
	theme = travel
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:beast_victim
		animation = fear
	}
	lower_left_portrait = {
		trigger = { exists = scope:travel_leader }
		character = scope:travel_leader
	}
	trigger = {
		is_available_travelling = yes
		is_landed = yes
		location = {
			terrain = dune_sea
		}
	}
	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
		current_travel_plan = {
			random_entourage_character = {
				limit = {
					can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root }
					cannot_be_killed = no #lotr
				}
				alternative_limit = { always = yes }
				weight = {
					base = 1
					modifier = { add = prowess }
					modifier = {
						add = 10
						has_court_position = bodyguard_court_position
					}
					modifier = {
						add = 10
						is_knight_of = root
					}
				}
				save_scope_as = beast_victim
			}
			#Save travel leader
			if = {
				limit = {
					NOT = { travel_leader ?= scope:beast_victim }
				}
				travel_leader ?= { save_scope_as = travel_leader }
			}
			#Save destination scope 
			next_destination_province = { save_scope_as = destination }
		}
	}
	option = { #Fight it
		name = lotr_travel_events.0002.a
		save_scope_as = fighter
		stress_impact = {
			craven = medium_stress_gain
		}
		lotr_travel_events_scorpion_duel_effect = { FIGHTER = root }
		current_travel_plan = { 
			delay_travel_plan = { days = 5 }
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
		
	}

	option = { #Distract with someone else
		name = lotr_travel_events.0002.b
		trigger = { exists = scope:beast_victim }
		lotr_travel_events_scorpion_duel_effect = { FIGHTER = scope:beast_victim }
		current_travel_plan = { 
			delay_travel_plan = { days = 2 }
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = compassionate
			}
		}
	}

	option = { #Run!
		name = lotr_travel_events.0002.c
		trigger = {
			culture = {
				NOT = { has_cultural_tradition = tradition_dune_sea_warfare }
			}
		}
		add_prestige = minor_prestige_loss
		current_travel_plan = { 
			delay_travel_plan = { days = 15 }
		}
		stress_impact = {
			base = minor_stress_impact_gain
			craven = minor_stress_impact_gain
		}
		stress_impact = {
			brave = medium_stress_impact_gain
			craven = minor_stress_impact_loss
		}
		random_list = {
			50 = {
				desc = lotr_travel_events.0002.ran
				send_interface_toast = {
					title = lotr_travel_events.0002.ran
				}
			}
			40 = {
				desc = lotr_travel_events.0002.wound
				trigger = {
					NOT = {
						has_trait_rank = {
							trait = wounded
							rank > 1
						}
					}
				}
				send_interface_toast = {
					title = lotr_travel_events.0002.wound
					left_icon = root
					root = {
						hunt_animal_wound_effect = { VARIABLE = root.var:animal_type }
					}
				}
			}
			10 = {
				desc = lotr_travel_events.0002.failure
				trigger = {
					cannot_be_killed = no #lotr
				}
				send_interface_toast = {
					title = lotr_travel_events.0002.failure
					left_icon = root
					root = {
						death = { death_reason = death_scorpion }
					}
				}
				modifier = {
					add = -30
					is_elf = yes
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = brave
			}
		}
	}
	option = {
		name = lotr_travel_events.0002.d
		trigger = {
			culture = {
				has_cultural_tradition = tradition_dune_sea_warfare
			}
		}
		custom_tooltip = lotr_travel_events.0002.d.tt
		send_interface_toast = {
			title = lotr_travel_events.0002.sneak
			left_icon = root
		}
		stress_impact = {
			base = minor_stress_impact_gain
			impatient = medium_stress_gain
			reckless = minor_stress_impact_gain
		}
		ai_chance = {
			base = 500
			modifier = {
				factor = 0.1
				OR = {
					has_trait = reckless
					has_trait = impatient
				}
			}
		}
	}
	
	after = {
		mp_resume_travel_plan = yes
		#First time getting the event
		if = {
			limit = {
				is_alive = yes
			}
			add_character_flag = {
				flag = had_scorpion_event_recently
				years = 1
			}
		}
	}
}

##########################################
# Sandstorm!
# by Jaco_Daan and Juke
# 0003
# A great Sand Storm engulfs you in the dune sea/desert
##########################################

lotr_travel_events.0003 = { # Sandstorm!
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0003.t
	desc = lotr_travel_events.0003.desc
	theme = travel
	left_portrait = {
		character = root 
	   	animation = fear
	}
	right_portrait = {
		character = root.current_travel_plan.travel_leader
	   	animation = stress
	}
	cooldown = { months = 1 }
	trigger = {
		exists = current_travel_plan.travel_leader
		NOT = { current_travel_plan.travel_leader = root }
		is_available_travelling = yes
		is_landed = yes
		location = {
			OR = {
				terrain = desert
				terrain = dune_sea
			}
		}
	}
	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		hidden_effect = {
			while = {
				count = 5
				current_travel_plan = {
					random_entourage_character = {
						limit = {
							NOT = { this = root }
							cannot_be_killed = no #lotr
						}
						weight = {
							base = 1
							# Try to find someone relevant
							modifier = {
								is_close_family_of = root
								add = 1
							}
							modifier = {
								is_elf = yes
								add = -0.75
							}
						}
						add_to_list = drowning_courtiers_list
					}
				}
			}
		}
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 7
		}
	}
	# Trust your guide's judgement
	option = {
		name = lotr_travel_events.0003.a
		current_travel_plan = { 
			delay_travel_plan = { days = 10 }
		}
		current_travel_plan.travel_leader = {
			duel = {
				skill = martial
				value = high_skill_rating
				50 = { # You manage to navigate the storm
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.5
					}
					custom_tooltip = sandstorm_survived
					hidden_effect = {
						root = {
							send_interface_toast = {
								title = sandstorm_survived
								left_icon = root
								add_prestige = 10
							}
						}
					}
				}
				40 = { # You mess up and get someone killed
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
					}
					add_prestige = medium_prestige_loss
					increase_wounds_effect = { REASON = sandstorm}
					custom_tooltip = sandstorm_someone_dies
					hidden_effect = {
						root = {
							send_interface_toast = {
								title = sandstorm_someone_dies
								left_icon = root
								random_in_list = {
									list = drowning_courtiers_list
									death = {
										death_reason = death_sandstorm
									}
								}
							}
						}
					}
				}
				10 = { # They mess up a lot and kill a lot of people
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.5
					}
					increase_wounds_effect = { REASON = sandstorm}
					custom_tooltip = sandstorm_many_die
					hidden_effect = {
						root = {
							send_interface_toast = {
								title = sandstorm_many_die
								left_icon = root
								every_in_list = {
									list = drowning_courtiers_list
									death = {
										death_reason = death_sandstorm
									}
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			arrogant = medium_stress_impact_gain
			brave = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = brave
				}
			}
		}
	}
	# I will coordinate the camp!
	option = {
		name = lotr_travel_events.0003.b
		stress_impact = {
			arrogant = minor_stress_impact_loss
			craven = medium_stress_impact_gain
		}
		progress_towards_rival_effect = {
			REASON = rival_upstaged_at_sea
			CHARACTER = root.current_travel_plan.travel_leader
			OPINION = default_rival_opinion
		}
		duel = {
			skill = martial
			value = high_skill_rating
			50 = { # You manage to navigate the storm
				compare_modifier = {
					value = scope:duel_value
					multiplier = 0.5
				}
				send_interface_toast = {
					title = sandstorm_survived
					left_icon = root
				current_travel_plan = { 
					delay_travel_plan = { days = 3 }
				}
					add_prestige = medium_prestige_gain
				}
			}
			40 = { # You mess up and get someone killed
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
				}
				custom_tooltip = sandstorm_someone_dies

				send_interface_toast = {
					title = sandstorm_someone_dies
					left_icon = root
					every_in_list = {
						list = drowning_courtiers_list
						death = {
							death_reason = death_sandstorm
						}
					}
					current_travel_plan = { 
						delay_travel_plan = { days = 15 }
					}
					add_prestige = medium_prestige_loss
					increase_wounds_effect = { REASON = sandstorm}
				}
			}
			10 = { # You really mess up and get yourself killed
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
				}
				IF = {
					limit = {
						cannot_be_killed = yes #lotr
					}
					send_interface_toast = {
						title = travel_danger_events.6020.immortaltoast #you return to middle earth
						left_icon = root
						current_travel_plan = { 
							delay_travel_plan = { days = 30 }
						}
						add_prestige = medium_prestige_loss
						add_character_modifier = {
							modifier = recovering_from_storm_modifier
							years = 2
						}
					}
				}
				ELSE = {
					send_interface_toast = {
						title = sandstorm_you_die
						left_icon = root
						current_travel_plan = { 
							delay_travel_plan = { days = 15 }
						}
						add_prestige = medium_prestige_loss
						death = {
							death_reason = death_sandstorm
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = arrogant
			}
			modifier = {
				factor = 0
				has_trait = craven
			}
		}
	}
	# I will Save myself!
	option = {
		name = lotr_travel_events.0003.c
		current_travel_plan = { 
			delay_travel_plan = { days = 8 }
		}
		add_prestige = minor_prestige_loss
		stress_impact = {
			just = medium_stress_impact_gain
			patient = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
			craven = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = arrogant
					has_trait = brave
				}
			}
		}
	}
	after = {
		mp_resume_travel_plan = yes
	}
}

##########################################
# An Encounter in Rhosgobel - Meet Radagast!
# by Juke
# 0004-6
# You decide to take a stroll through Rhosgobel and have a chancer to meet an odd brown sage!
##########################################

lotr_travel_events.0004 = { # An Encounter in Rhosgobel
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0004.t
	desc = {
		desc = lotr_travel_events.0004.desc
		triggered_desc = {
			trigger = {
				faith_is_good = yes
			}
			desc = lotr_travel_events.0004.desc.sage
		}
	}
	theme = travel
	override_background = { reference = wilderness_forest_pine }
	left_portrait = {
		character = root
	}
	cooldown = { years = 10 }
	trigger = {
		is_available_travelling = yes
		is_landed = yes
		NOT = { has_character_flag = asked_radagast_for_help }
		location = province:3189 # Rhosgobel
		current_travel_plan.travel_plan_owner = root
		is_landed = yes
		is_location_valid_for_travel_event_on_land = yes #Should not be needed...
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		faith_is_evil = no
	}
	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}
	option = {	# attempt to find the brown sage!
		name = lotr_travel_events.0004.b
		trigger = {
			#faith = faith:faith_woodmen
			faith_is_good = yes
			is_landed = yes
			#faith.religion = { religion:northmen_religion }
			character:lineofradagast = {
				#has_title = title:d_woodmen_faith_head
				has_title = title:c_rhosghobel
			}
		}
		current_travel_plan = { 
			delay_travel_plan = { days = 10 }
		}
		custom_tooltip = lotr_travel_events.0004.btt	#Inform player - they will wander the woods a bit
		hidden_effect = {
			random_list = {
				# Didnt find him
				700 = {
					trigger_event = {
						id = lotr_travel_events.0005
						days = 5
					}
				}
				# Found Radagast 1
				50 = {
					save_scope_value_as = {
						name = radagast_advice
						value = flag:advice_1
					}
					trigger_event = {
						id = lotr_travel_events.0006
						days = 5
					}
				}
				# Found Radagast 2
				50 = {
					save_scope_value_as = {
						name = radagast_advice
						value = flag:advice_2
					}
					trigger_event = {
						id = lotr_travel_events.0006
						days = 5
					}
				}
				# Found Radagast 3
				50 = {
					save_scope_value_as = {
						name = radagast_advice
						value = flag:advice_3
					}
					trigger_event = {
						id = lotr_travel_events.0006
						days = 5
					}
				}
				# Found Radagast 4
				50 = {
					save_scope_value_as = {
						name = radagast_advice
						value = flag:advice_4
					}
					trigger_event = {
						id = lotr_travel_events.0006
						days = 5
					}
				}
			}
		}
	}
	option = {	#No time
		name = lotr_travel_events.0004.a
		stress_impact = {
			base = minor_stress_impact_gain
			impatient = minor_stress_impact_loss
			patient = minor_stress_impact_gain
		}
		mp_resume_travel_plan = yes
	}
}

lotr_travel_events.0005 = { # Sairtheod (Rhosgobel), didnt find Radagast
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0005.t
	desc = lotr_travel_events.0005.desc
	theme = travel
	override_background = { reference = wilderness_forest_deep }
	left_portrait = {
		character = root
		animation = dismissal
	}
	option = {	#At least the weather was nice...
		name = lotr_travel_events.0005.a
		custom_tooltip = lotr_travel_events.0005.att
		add_prestige = minor_prestige_loss
	}
	after = {
		mp_resume_travel_plan = yes
	}
}

lotr_travel_events.0006 = { # Sairtheod (Rhosgobel), Radagast gives Advice
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0006.t
	desc = {
		desc = lotr_travel_events.0006.desc.intro
		# What advice does he give?
		first_valid = {
			triggered_desc = {
				trigger = { scope:radagast_advice = flag:advice_1 }
				desc = lotr_travel_events.0006.desc.advice1
			}
			triggered_desc = {
				trigger = { scope:radagast_advice = flag:advice_2 }
				desc = lotr_travel_events.0006.desc.advice2
			}
			triggered_desc = {
				trigger = { scope:radagast_advice = flag:advice_3 }
				desc = lotr_travel_events.0006.desc.advice3
			}
			triggered_desc = {
				trigger = { scope:radagast_advice = flag:advice_4 }
				desc = lotr_travel_events.0006.desc.advice4
			}
		}
	#	desc = lotr_travel_events.0006.desc.outro
	}
	theme = travel
	override_background = {
		reference = wilderness_forest_deep
	}
	left_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = character:lineofradagast
		animation = idle
	}
	option = {	# I am reading too much into this
		name = lotr_travel_events.0006.b
		add_piety = miniscule_piety_gain
	}
	option = {	# attempt to interpret

		name = lotr_travel_events.0006.a
		custom_tooltip = lotr_travel_events.0006.att
		duel = {
			skill = learning
			value = 10
			30 = {		
				compare_modifier = {
					value = scope:duel_value
					multiplier = 2
					min = -20
				}
				desc = lotr_travel_events.0006.a.success
				send_interface_toast = {
					left_icon = root
					add_piety = medium_piety_gain
					title = lotr_travel_events.0006.a.success.toast.t
					if = {
						limit = {
							scope:radagast_advice = flag:advice_1
						}
						add_character_modifier = radagast_advice_1_modifier
					}
					if = {
						limit = {
							scope:radagast_advice = flag:advice_2
						}
						add_character_modifier = radagast_advice_2_modifier
					}
					if = {
						limit = {
							scope:radagast_advice = flag:advice_3
						}
						add_character_modifier = radagast_advice_3_modifier
					}
					if = {
						limit = {
							scope:radagast_advice = flag:advice_4
						}
						add_character_modifier = radagast_advice_4_modifier
					}
				}
			}
			40 = {		
				compare_modifier = {
					value = scope:duel_value
					multiplier = -2
					min = -25
				}
				desc = lotr_travel_events.0006.a.failure				
				send_interface_toast = {
					left_icon = root
					title = lotr_travel_events.0006.a.failure.toast.t
				}
			
			}
		}
	}
	after = {
		add_character_flag = {
			flag = asked_radagast_for_help
		}
		mp_resume_travel_plan = yes
	}
}

##########################################
# Travelling past Fangorn
# by Juke
# 0007
# Travelling past the edges of Fangorn makes you feel uneasy...
##########################################

lotr_travel_events.0007 = { # Travelling past Fangorn
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0007.t
	desc = lotr_travel_events.0007.desc
	theme = travel	
	override_background = {
		reference = fangorn
	}
	left_portrait = {
		character = root
	}
	right_portrait = {
		character = root.current_travel_plan.travel_leader
	   	animation = stress
	}
	cooldown = { years = 20 }
	trigger = {
		is_available_travelling = yes
		is_landed = yes
		OR = {
			# Edges of Fangorn
			location = province:25
			location = province:36
			location = province:37
			location = province:38
			location = province:40
			location = province:55
			location = province:96
			location = province:95
			location = province:94
			location = province:176
			location = province:175
		}
		is_elf = no
	}
	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		traveler_danger_xp_effect = {
			MIN = 1
			MAX = 4
		}
	}
	option = { # Best move on.
		name = lotr_travel_events.0007.a
		custom_tooltip = lotr_travel_events.0007.a.tt
		stress_impact = {
			base = minor_stress_impact_gain
		}
	}
	option = { # We should take a detour...
		name = lotr_travel_events.0007.b
		custom_tooltip = lotr_travel_events.0007.b.tt
		add_prestige = minor_prestige_loss
		current_travel_plan ?= {
			delay_travel_plan = { days = 15 }
		}
	}
	after = {
		mp_resume_travel_plan = yes
	}
}

##########################################
# Endless Darkness
# by Juke
# 0008
# Overgrounders find themselves missing sunlight while travelling underground
##########################################

lotr_travel_events.0008 = { # Endless Darkness
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0008.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					location.culture = { is_dwarf_culture = yes }
				}
				desc = lotr_travel_events.0008.desc.dwarfhold
			}
			desc = lotr_travel_events.0008.desc.caverns
		}
		desc = lotr_travel_events.0008.desc.outro
	}
	theme = travel
	left_portrait = {
		character = root
	   	animation = boredom
	}
	right_portrait = {
		character = root.current_travel_plan.travel_leader
	   	animation = lantern
	}
	lower_center_portrait  = {
		character = scope:beloved
	}
	cooldown = { years = 5 }
	trigger = {
		is_available_travelling = yes
		is_landed = yes
		location = {
			terrain = halls
		}
		NOR = {
			# Not at home underground
			is_orc = yes
			is_goblin = yes
			is_nazgul = yes
			is_dwarf = yes
			is_sauron = yes
		}
	}
	immediate = {
		root.current_travel_plan.travel_leader = {
			save_scope_as = caravan_leader
		}
		location = {
			save_scope_as = this_place
		}
		current_travel_plan = {
			random_entourage_character ?= {
				limit = {
					is_ai = yes
					is_adult = yes
					NOT = {
						this = root
					}
					cannot_be_killed = no
				}
				alternative_limit = {
					NOT = {
						this = root
					}
					cannot_be_killed = no
				}
				save_scope_as = chasm_victim
			}
		}
		if = { #Prioritise Soulmate
			random_relation = {
				type = soulmate
				save_scope_as = beloved
			}
		}
		if = { #But backup lover just in case
			random_relation = {
				type = lover
				save_scope_as = beloved
			}
		}
	}
	option = { # The Darkness is actually rather... comforting.
		name = lotr_travel_events.0008.a
		trigger = {
			has_trait = reclusive
		}
		stress_impact = {
			base = minor_stress_impact_loss
		}
		current_travel_plan = {
			every_entourage_character = {
				limit = {
					NOR = {
						this = root
						has_trait = reclusive
						has_trait = shy
					}
				}
				add_opinion = {
					target = root
					modifier = suspicion_opinion
					opinion = -10
				}
			}
		}
	}
	option = { # Push entourage member into a chasm.
		name = lotr_travel_events.0008.b
		trigger = {
			has_trait = sadistic
		}
		stress_impact = {
			base = minor_stress_impact_loss
		}
		add_tyranny = minor_tyranny_gain
		scope:chasm_victim = {
			increase_wounds_effect = { REASON = avalanche }
			add_opinion = {
				target = root
				modifier = angry_opinion
				opinion = -50
			}
			progress_towards_rival_effect = {
				CHARACTER = root
				reason = rival_tried_to_kill_me
				OPINION = 0
			}
		}
	}
	option = { # At least some fascinating mushrooms grow around here
		name = lotr_travel_events.0008.c
		trigger = {
			has_trait = lifestyle_herbalist 
		}
		add_character_modifier = {
			modifier = rare_herbal_remedies_modifier
			years = 5
		}
	}
	option = { # Thoughts of my beloved keep my heart warm
		name = lotr_travel_events.0008.d
		custom_tooltip = lotr_travel_events.0008.d.tt
		trigger = {
			OR = {
				any_relation = {
					type = soulmate
					is_available_healthy_ai_adult = yes
				}
				any_relation = {
					type = lover
					is_available_healthy_ai_adult = yes
				}
			}
		}
		stress_impact = {
			lustful = minor_stress_impact_loss
		}
		add_piety = 50
	}
	option = { # Just... move on.
		name = lotr_travel_events.0008.e
		random_list = {
			30 = {
				add_prestige = -150
				stress_impact = {
					base = minor_stress_impact_gain
				}
			}
			55 = {
				stress_impact = {
					base = medium_stress_impact_gain
				}
			}
			5 = {
				trigger = {
					NOT = {
						has_trait = reclusive
					}
				}
				modifier = {
					add = 5
					has_trait = shy
				}
				modifier = {
					add = -3
					has_trait = gregarious
				}
				add_trait = reclusive
			}
			3 = {
				trigger = {
					NOR = {
						has_trait = depressed_1
						has_trait = depressed_genetic
					}
				}
				add_trait = depressed_1
			}
		}
	}
	after = {
		mp_resume_travel_plan = yes
	}
}

##########################################
# Local Storyteller
# by Juke
# 0009
# While travelling, you encounter a local storyteller, recounting a tale/fable/myth/legend to a small audience.
# Dynamic localization! Hopefully, a wide range of tales can be written
##########################################

# Scripted triggers for individual tales
scripted_trigger tale_stout_men_trigger = {
	NOT = { has_character_flag = tale_stout_men }
	current_year >= 6500
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_northron
			has_cultural_pillar = heritage_hadorim
		}
	}
}
scripted_trigger tale_woodmen_king_trigger = {
	NOT = { has_character_flag = tale_woodmen_king }
	current_year >= 4500
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_northron
			has_cultural_pillar = heritage_hadorim
		}
	}
}
scripted_trigger tale_bridge_troll_trigger = {
	NOT = { has_character_flag = tale_bridge_troll }
	current_year >= 4500
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_periannath
			has_cultural_pillar = heritage_eriadorim
			has_cultural_pillar = heritage_hillmen
			this = culture:saralain 
            any_parent_culture_or_above = { this = culture:saralain }
		}
	}
}
scripted_trigger tale_captain_suramir_trigger = {
	NOT = { has_character_flag = tale_captain_suramir }
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_northern_adunaic
			has_cultural_pillar = heritage_southern_adunaic
			has_cultural_pillar = heritage_bellakari
			this = culture:sakalai 
            any_parent_culture_or_above = { this = culture:sakalai }
			this = culture:umbaredain 
            any_parent_culture_or_above = { this = culture:umbaredain }
			this = culture:harondorim 
            any_parent_culture_or_above = { this = culture:harondorim }
		}
	}
}
scripted_trigger tale_weeping_pass_trigger = {
	NOT = { has_character_flag = tale_weeping_pass }
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_ioriag
			this = culture:nurnoth 
            any_parent_culture_or_above = { this = culture:nurnoth }
			this = culture:igath 
            any_parent_culture_or_above = { this = culture:igath }
		}
	}
}
scripted_trigger tale_razarac_trigger = {
	NOT = { has_character_flag = tale_razarac }
	location = { geographical_region = middleearth_haradwaith }
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_northern_apysaic
			has_cultural_pillar = heritage_middle_apysaic
			has_cultural_pillar = heritage_southern_apysaic
			has_cultural_pillar = heritage_bellakari
			#has_cultural_pillar = heritage_nafarati
			#has_cultural_pillar = heritage_tedjin
		}
	}
}
scripted_trigger tale_kings_kettle_trigger = {
	NOT = { has_character_flag = tale_kings_kettle }
	current_year >= 6000
	location = { geographical_region = middleearth_west }
	location.culture = {
		OR = {
			has_cultural_pillar = heritage_periannath
			has_cultural_pillar = heritage_eriadorim
			has_cultural_pillar = heritage_hillmen
			this = culture:saralain 
			any_parent_culture_or_above = { this = culture:saralain }
		}
	}
	always = no # NOT YET WRITTEN
}

# The Event
lotr_travel_events.0009 = { # Local Storyteller
	content_source = realms_dlc
	type = character_event
	title = {
		desc = lotr_travel_events.0009.t
		first_valid = {
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_stout_men }
				desc = lotr_travel_events.0009.tale_stout_men.t
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_woodmen_king }
				desc = lotr_travel_events.0009.tale_woodmen_king.t
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_bridge_troll }
				desc = lotr_travel_events.0009.tale_bridge_troll.t
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_captain_suramir }
				desc = lotr_travel_events.0009.tale_captain_suramir.t
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_weeping_pass }
				desc = lotr_travel_events.0009.tale_weeping_pass.t
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_razarac }
				desc = lotr_travel_events.0009.tale_razarac.t
			}
			desc = lotr_travel_events.0009.t.fallback
		}
	}
	desc = {
		desc = lotr_travel_events.0009.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_stout_men }
				desc = lotr_travel_events.0009.tale_stout_men.desc
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_woodmen_king }
				desc = lotr_travel_events.0009.tale_woodmen_king.desc
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_bridge_troll }
				desc = lotr_travel_events.0009.tale_bridge_troll.desc
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_captain_suramir }
				desc = lotr_travel_events.0009.tale_captain_suramir.desc
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_weeping_pass }
				desc = lotr_travel_events.0009.tale_weeping_pass.desc
			}
			triggered_desc = {
				trigger = { scope:local_tale = flag:tale_razarac }
				desc = lotr_travel_events.0009.tale_razarac.desc
			}
			desc = lotr_travel_events.0009.desc.fallback
		}
	}
	theme = travel
	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:storyteller
	}
	lower_left_portrait  = {
		character = scope:tale_character_left
	}
	lower_center_portrait  = {
		character = scope:tale_character_center
	}
	lower_right_portrait  = {
		character = scope:tale_character_right
	}
	cooldown = { years = 15 }
	trigger = {
		is_available_travelling = yes
		is_landed = yes
		OR = { # One of the tales must be valid
			tale_stout_men_trigger = yes
			tale_woodmen_king_trigger = yes
			tale_bridge_troll_trigger = yes
			tale_captain_suramir_trigger = yes
			tale_weeping_pass_trigger = yes
			tale_razarac_trigger = yes
		}
	}
	immediate = {
		root.current_travel_plan.travel_leader = {
			save_scope_as = caravan_leader
		}
		location = {
			save_scope_as = this_place
		}
		create_character = {
			template = garden_hermit_character
			location = root.location
			culture = root.location.county.culture
			faith = root.location.county.faith
			dynasty = none
			save_scope_as = storyteller
		}
		scope:storyteller = {
			add_character_flag = peasant_outfit
		}
		random_list = { # Pick a tale!
			10 = { # The Swift and the Stout Men
				trigger = { tale_stout_men_trigger = yes }
				save_scope_value_as = {
					name = local_tale
					value = flag:tale_stout_men
				}
				add_character_flag = tale_stout_men
			}
			10 = { # The Sorrow of Faderda
				trigger = { tale_woodmen_king_trigger = yes }
				save_scope_value_as = {
					name = local_tale
					value = flag:tale_woodmen_king
				}
				add_character_flag = tale_woodmen_king
				character:lineoffaderda1 = { save_scope_as = tale_character_center }
				culture:woodmen = { save_scope_as = woodmen_scope }
			}
			10 = { # The Bridge-Troll of Brittlebridge
				trigger = { tale_bridge_troll_trigger = yes }
				save_scope_value_as = {
					name = local_tale
					value = flag:tale_bridge_troll
				}
				add_character_flag = tale_bridge_troll
				scope:storyteller = { add_trait = poet }
			}
			10 = { # Captain Sûramir and the Sunken Folk
				trigger = { tale_captain_suramir_trigger = yes }
				save_scope_value_as = {
					name = local_tale
					value = flag:tale_captain_suramir
				}
				add_character_flag = tale_captain_suramir
				scope:storyteller = { add_trait = lifestyle_mariner }
			}
			10 = { # Battle of the Weeping Pass
				trigger = { tale_weeping_pass_trigger = yes }
				save_scope_value_as = {
					name = local_tale
					value = flag:tale_weeping_pass
				}
				add_character_flag = tale_weeping_pass
				culture:igath = { save_scope_as = igath_scope }
				culture:chelkari = { save_scope_as = chelkari_scope }
				character:line_kohan3 = { save_scope_as = tale_character_left }
				character:khandwarlord1 = { save_scope_as = tale_character_center }
				character:khandwarlord2 = { save_scope_as = tale_character_right }
			}
			10 = { # The Razarac/ Mirror of Fire
				trigger = { tale_razarac_trigger = yes }
				save_scope_value_as = {
					name = local_tale
					value = flag:tale_razarac
				}
				add_character_flag = tale_razarac
			}
		}
	}
	
	option = { # Stay a while and listen
		name = lotr_travel_events.0009.a
		current_travel_plan = { 
			delay_travel_plan = { days = 15 }
		}
		stress_impact = {
			base = minor_stress_impact_loss
			patient = minor_stress_impact_loss
			impatient = medium_stress_impact_gain
			shy = minor_stress_impact_gain
		}
		
		## Story-dependent rewards
		if = { # Diplomacy Reward
			limit = {
				scope:local_tale = flag:tale_stout_men
			}
			add_diplomacy_lifestyle_xp = 100
			random = {
				chance = 10
				add_diplomacy_skill = 1
			}
		}
		else_if = { # Martial Reward
			limit = {
				scope:local_tale = flag:tale_weeping_pass
				scope:local_tale = flag:tale_razarac
			}
			add_martial_lifestyle_xp = 100
			random = {
				chance = 10
				add_martial_skill = 1
			}
		}
		#else_if = { # Once mariner lifestyle experience is added, give it here
		#	limit = {
		#		scope:local_tale = flag:tale_captain_suramir
		#	}
		#}
		else_if = { # Stewardship Reward
			limit = {
				scope:local_tale = flag:tale_captain_suramir
			}
			add_stewardship_lifestyle_xp = 100
			random = {
				chance = 10
				add_stewardship_skill = 1
			}
		}
		else = { # Learning Reward
			add_learning_lifestyle_xp = 100
			random = {
				chance = 10
				add_learning_skill = 1
			}
		}
	}
	
	option = { # Come on, we don't have time for this
		name = lotr_travel_events.0009.b
		stress_impact = {
			patient = medium_stress_impact_gain
			gregarious = miniscule_stress_impact_gain
		}
	}
	
	after = {
		mp_resume_travel_plan = yes
		scope:storyteller = { silent_disappearance_effect = yes }
	}
}

##########################################
# Mount Doom's Breath
# by Juke
# 0010
# The fel winds of Mordor burn your throat
##########################################
lotr_travel_events.0010 = { # Mount Doom's Breath
	content_source = realms_dlc
	type = character_event
	title = lotr_travel_events.0010.t
	desc = lotr_travel_events.0010.desc
	theme = battle
	override_background = {
		reference = barad_dur
	}
	left_portrait = {
		character = root 
	   	animation = sick
	}
	right_portrait = {
		character = root.current_travel_plan.travel_leader
	   	animation = pain
	}
	cooldown = { months = 1 }
	trigger = {
		exists = current_travel_plan.travel_leader
		NOT = { current_travel_plan.travel_leader = root }
		is_available_travelling = yes
		is_landed = yes
		location = {
			geographical_region = middleearth_mordor
			terrain = volcanic_plains
		}
		has_character_modifier = scorched_throat_modifier
	}
	immediate = {
		mp_delay_travel_plan = { DAYS = 90 }
		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 7
		}
	}
	# Every breath hurts.
	option = {
		name = {
			trigger = { is_orc = yes }
			text = lotr_travel_events.0010.a.orc
		}
		name = lotr_travel_events.0010.a
		current_travel_plan = { 
			delay_travel_plan = { days = 10 }
		}
		stress_impact = {
			base = minor_stress_impact_loss
		}
		if = {
			limit = {
				NOR = {
					is_elf = yes
					cannot_be_killed = yes
					has_character_modifier = scorched_throat_modifier
				}
			}
			random = {
				chance = 65
				add_character_modifier = {
					modifier = scorched_throat_modifier
					years = 10
				}
			}
		}
		current_travel_plan = {
			every_entourage_character = {
				limit = {
					NOR = {
						this = root
						is_elf = yes
						cannot_be_killed = yes
						has_character_modifier = scorched_throat_modifier
					}
				}
				random = {
					chance = 65
					add_character_modifier = {
						modifier = scorched_throat_modifier
						years = 10
					}
				}
			}
		}
		ai_chance = {
			base = 100
		}
	}
	
	after = {
		mp_resume_travel_plan = yes
	}
}


##########################################
# Troll Attack!
# by Juke
# 0011
# NOTE: Heavily WIP and on hold until we decide on wether we are adding trolls as event chars
##########################################
# scripted_effect lotr_travel_events_troll_duel_effect = {	#lifted from #travel_danger_events_6000_beast_duel_effect
# 	$FIGHTER$ = {
# 		duel = {
# 			skill = prowess
# 			value = high_skill_rating
# 			5 = {
# 				desc = lotr_travel_events.0011.success
# 				compare_modifier = {
# 					value = scope:duel_value
# 					multiplier = 1
# 					min = -49
# 				}
# 				root = {
# 					send_interface_toast = {
# 						title = lotr_travel_events.0011.success
# 						left_icon = $FIGHTER$
# 						$FIGHTER$ = { add_prestige = medium_prestige_gain }
# 					}
# 				}
# 				min = 1
# 			}
# 			15 = {
# 				desc = lotr_travel_events.0011.wound
# 				trigger = {
# 					NOT = {
# 						has_trait_rank = {
# 							trait = wounded
# 							rank > 1
# 						}
# 					}
# 				}
# 				compare_modifier = {
# 					value = scope:duel_value
# 					multiplier = -3.5
# 					min = -49
# 				}
# 				root = {
# 					send_interface_toast = {
# 						title = lotr_travel_events.0011.wound
# 						left_icon = $FIGHTER$
# 						$FIGHTER$ = {
# 							hunt_animal_wound_effect = { VARIABLE = root.var:animal_type }
# 						}
# 					}
# 				}
# 				min = 3
# 			}
# 			10 = {
# 				desc = lotr_travel_events.0011.failure
# 				trigger = {
# 					cannot_be_killed = no #lotr
# 				}
# 				compare_modifier = {
# 					value = scope:duel_value
# 					multiplier = -3.5
# 					min = -49
# 				}
# 				root = {
# 					send_interface_toast = {
# 						title = lotr_travel_events.0011.failure
# 						left_icon = $FIGHTER$
# 						$FIGHTER$ = {
# 							death = { death_reason = death_troll }
# 						}
# 					}
# 				}
# 				min = 2
# 				modifier = {
# 					add = -30
# 					is_elf = yes
# 				}
# 			}
# 		}
# 	}
# }
# 
# lotr_travel_events.0011 = { # Troll Attack!
# 	content_source = realms_dlc
# 	type = character_event
# 	title = {
# 		desc = lotr_travel_events.0011.t.intro
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:troll_type = flag:hill_troll }
# 				desc = lotr_travel_events.0011.t.hill_troll
# 			}
# 		}
# 		desc = lotr_travel_events.0011.t.outro
# 	}
# 	desc = {
# 		desc = lotr_travel_events.0011.desc.intro
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:troll_type = flag:hill_troll }
# 				desc = lotr_travel_events.0011.t.hill_troll
# 			}
# 		}
# 		desc = lotr_travel_events.0011.desc.outro
# 	}
# 	theme = travel
# 	left_portrait = {
# 		character = root
# 		animation = shock
# 	}
# 	right_portrait = {
# 		character = scope:beast_victim
# 		animation = fear
# 	}
# 	lower_left_portrait = {
# 		trigger = { exists = scope:travel_leader }
# 		character = scope:travel_leader
# 	}
# 	trigger = {
# 		is_available_travelling = yes
# 		is_landed = yes
# 		location = {
# 			
# 		}
# 	}
# 	immediate = {
# 		mp_delay_travel_plan = { DAYS = 90 }
# 		traveler_danger_xp_effect = {
# 			MIN = 3
# 			MAX = 6
# 		}
# 		current_travel_plan = {
# 			random_entourage_character = {
# 				limit = {
# 					can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = root }
# 					cannot_be_killed = no #lotr
# 				}
# 				alternative_limit = { always = yes }
# 				weight = {
# 					base = 1
# 					modifier = { add = prowess }
# 					modifier = {
# 						add = 10
# 						has_court_position = bodyguard_court_position
# 					}
# 					modifier = {
# 						add = 10
# 						is_knight_of = root
# 					}
# 				}
# 				save_scope_as = beast_victim
# 			}
# 			#Save travel leader
# 			if = {
# 				limit = {
# 					NOT = { travel_leader ?= scope:beast_victim }
# 				}
# 				travel_leader ?= { save_scope_as = travel_leader }
# 			}
# 			#Save destination scope 
# 			next_destination_province = { save_scope_as = destination }
# 		}
# 		# Pick a troll!
# 		if = {
# 			limit = {
# 				location = {
# 					terrain = halls
# 				}
# 			}
# 			save_scope_value_as = {
# 				name = troll_type
# 				value = flag:cave_troll
# 			}
# 		}
# 		else = {
# 			save_scope_value_as = {
# 				name = troll_type
# 				value = flag:hill_troll
# 			}
# 		}
# 	}
# 	option = { #Confuse it with a riddle
# 		name = lotr_travel_events.0011.e
# 		save_scope_as = fighter
# 		stress_impact = {
# 			craven = medium_stress_gain
# 		}
# 		lotr_travel_events_troll_duel_effect = { FIGHTER = root }
# 		current_travel_plan = { 
# 			delay_travel_plan = { days = 5 }
# 		}
# 		ai_chance = {
# 			base = 100
# 			modifier = {
# 				factor = 0
# 				has_trait = shy
# 			}
# 		}
# 		
# 	}
# 	
# 	option = { #Fight it
# 		name = lotr_travel_events.0011.a
# 		save_scope_as = fighter
# 		stress_impact = {
# 			craven = medium_stress_gain
# 		}
# 		lotr_travel_events_troll_duel_effect = { FIGHTER = root }
# 		current_travel_plan = { 
# 			delay_travel_plan = { days = 5 }
# 		}
# 		ai_chance = {
# 			base = 100
# 			modifier = {
# 				factor = 0
# 				has_trait = craven
# 			}
# 		}
# 		
# 	}
# 
# 	option = { #Distract with someone else
# 		name = lotr_travel_events.0011.b
# 		trigger = { exists = scope:beast_victim }
# 		lotr_travel_events_troll_duel_effect = { FIGHTER = scope:beast_victim }
# 		current_travel_plan = { 
# 			delay_travel_plan = { days = 2 }
# 		}
# 		stress_impact = {
# 			compassionate = medium_stress_impact_gain
# 			brave = minor_stress_impact_gain
# 		}
# 		ai_chance = {
# 			base = 100
# 			modifier = {
# 				factor = 0
# 				has_trait = compassionate
# 			}
# 		}
# 	}
# 
# 	option = { #Run!
# 		name = lotr_travel_events.0011.c
# 		add_prestige = minor_prestige_loss
# 		current_travel_plan = { 
# 			delay_travel_plan = { days = 15 }
# 		}
# 		stress_impact = {
# 			base = minor_stress_impact_gain
# 			craven = minor_stress_impact_gain
# 		}
# 		stress_impact = {
# 			brave = medium_stress_impact_gain
# 			craven = minor_stress_impact_loss
# 		}
# 		random_list = {
# 			50 = {
# 				desc = lotr_travel_events.0011.ran
# 				send_interface_toast = {
# 					title = lotr_travel_events.0011.ran
# 				}
# 			}
# 			40 = {
# 				desc = lotr_travel_events.0011.wound
# 				trigger = {
# 					NOT = {
# 						has_trait_rank = {
# 							trait = wounded
# 							rank > 1
# 						}
# 					}
# 				}
# 				send_interface_toast = {
# 					title = lotr_travel_events.0011.wound
# 					left_icon = root
# 					root = {
# 						hunt_animal_wound_effect = { VARIABLE = root.var:animal_type }
# 					}
# 				}
# 			}
# 			10 = {
# 				desc = lotr_travel_events.0011.failure
# 				trigger = {
# 					cannot_be_killed = no #lotr
# 				}
# 				send_interface_toast = {
# 					title = lotr_travel_events.0011.failure
# 					left_icon = root
# 					root = {
# 						death = { death_reason = death_troll }
# 					}
# 				}
# 				modifier = {
# 					add = -30
# 					is_elf = yes
# 				}
# 			}
# 		}
# 		ai_chance = {
# 			base = 100
# 			modifier = {
# 				factor = 0
# 				has_trait = brave
# 			}
# 		}
# 	}
# 	option = { # Attempt to recruit it!
# 		name = lotr_travel_events.0011.d
# 		trigger = {
# 			OR = {
# 				is_orc = yes
# 				AND = {
# 					faith_is_evil = yes
# 					cannot_be_killed = yes
# 				}
# 			}
# 		}
# 		custom_tooltip = lotr_travel_events.0011.d.tt
# 		send_interface_toast = {
# 			title = lotr_travel_events.0011.sneak
# 			left_icon = root
# 		}
# 		stress_impact = {
# 			base = minor_stress_impact_gain
# 			impatient = medium_stress_gain
# 			reckless = minor_stress_impact_gain
# 		}
# 		ai_chance = {
# 			base = 500
# 			modifier = {
# 				factor = 0.1
# 				OR = {
# 					has_trait = reckless
# 					has_trait = impatient
# 				}
# 			}
# 		}
# 	}
# 	
# 	after = {
# 		mp_resume_travel_plan = yes
# 		#First time getting the event
# 		if = {
# 			limit = {
# 				is_alive = yes
# 			}
# 			add_character_flag = {
# 				flag = had_scorpion_event_recently
# 				years = 1
# 			}
# 		}
# 	}
# }
# 
##########################################
# 
# by 
# 0012
# 
##########################################


##########################################
# 
# by 
# 0013
# 
##########################################


##########################################
# 
# by 
# 0014
# 
##########################################
