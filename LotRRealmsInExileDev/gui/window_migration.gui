######################################################
#################### MIGRATION #######################
######################################################

window = {
	name = "window_migration"
	widgetid = "window_migration"
	datacontext = "[MigrationWindow.GetCharacterInteractionConfirmationWindow]"
	size = { 100% 100% }
	movable = no
	alwaystransparent = yes
	visible_at_creation = no

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	# TODO - copy of move domicile widget, maybe move to reusable type
	widget = {
		size = { 600 140 }

		name = "location_selection_guide"

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2

			margin = { 16 16 }

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
				blend_mode = alphamultiply
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding

			margin = { 15 0 }
			margin_top = 5
			margin_bottom = 10

			background = {
				texture = "gfx/interface/illustrations/event_scenes/mpo_camp_steppe.dds"
				alpha = 0.2
				fittype = centercrop
				mirror = horizontal

				margin_top = -40
				margin_right = -100

				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_Dark
					margin = { 20 0 }
					margin_top = 10
					margin_bottom = 15

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "MIGRATION_WINDOW_DESTINATION_SELECTION_HEADER"
					default_format = "#T"
					using = Font_Size_Big
					max_width = 420
					align = left
				}

				expand = {}
			}

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding

				button_tertiary = {
					name = "quit"
					text = "QUIT"
					min_width = 300

					onclick = "[MigrationWindow.Close]"
					tooltip = "CLOSE_LABEL"
					shortcut = "close_window"
				}

				expand = {}
			}
		}
	}

	widget = {
		parentanchor = bottom|right
		position = { 0 -30 }
		size = { 580 1000 }
		layer = middle
		alwaystransparent = no
		visible_at_creation = no
		visible = "[MigrationWindow.HasTarget]"
		name = "window_migration_target"
		widgetid = "window_migration_target"

		using = Window_Background
		using = Window_Decoration

		vbox = {
			using = Window_Margins
			datacontext = "[MigrationWindow.GetTargetTitle]"

			header_migration = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "MIGRATION_WINDOW_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[MigrationWindow.ClearTarget]"
				}

				blockoverride "button_close_tooltip"
				{
					tooltip = "MIGRATION_WINDOW_UNSELECT_TOOLTIP"
				}


			}

			hbox = {
				name = "involved_characters"
				visible = "[MigrationWindow.HasValidSelection]"

				layoutpolicy_horizontal = expanding
				margin_bottom = 8

				text_label_center = {
					text = "MIGRATION_WINDOW_INVOLVED_CHARACTERS"
				}

			}

			hbox = {
				visible = "[And(MigrationWindow.HasValidSelection, Character.IsValid)]"
				datacontext = "[MigrationWindow.GetTopCharacter]"

				layoutpolicy_horizontal = expanding

				icon = {
					name = "portrait section"
					size = { 200 200 }

					using = Character_Background

					portrait_button = {
						position = { 0 -30 }
						size = { 200 240 }

						using = portrait_base

						portrait_texture = "[Character.GetAnimatedPortrait( 'environment_hud', 'camera_torso', 'idle', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"
						background_texture = "gfx/portraits/portrait_transparent.dds"
						texture = "gfx/portraits/portrait_transparent.dds"
						mask = "gfx/portraits/portrait_mask_body.dds"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						widget = {
							size = { 200 200 }

							button = {
								name = "name_plate"

								parentanchor = bottom

								position = { 10 -10 }
								size = { 200 36 }

								using = Background_Letter_No_Frame

								alpha = 0.9

								onclick = "[DefaultOnCharacterClick( Character.GetID )]"

								tooltipwidget = {
									container_character_tooltip = {}
								}

								text_multi = {
									min_width = 144
									max_width = 144
									min_height = 34
									max_height = 34

									position = { 30 1 }

									text = "[Character.GetShortUINameNoTooltip]"
									default_format = "#light_background"
									align = vcenter|nobaseline|center
									using = Font_Size_Medium
									using = Font_Type_Flavor
									using = Text_Light_Background_Overrides
								}
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					spacing = 8

					# TODO - needs to be written
					text_multi = {
						text = "MIGRATION_WINDOW_NOMAD_INFO"
						default_format = "#low;italic"
						autoresize = yes
						max_width = 254
						align = nobaseline
						margin = { 2 0 }
					}

					text_single = {

						text = "MIGRATION_WINDOW_CHARACTER_MILITARY_STRENGTH"
						default_format = "#Weak"
						align = nobaseline
					}

					text_single = {
						text = "MIGRATION_WINDOW_CHARACTER_COMBINED_MILITARY_STRENGTH"
						default_format = "#Weak"
						align = nobaseline
					}

					button_standard = {
						name = "see_all_nomads"
						onclick = "[MigrationWindow.ToggleInvolvedCharacterListWindow]"
						size = { 200 36 }
						text = "MIGRATION_WINDOW_ALL_NOMADS_BUTTON"
					}

					expand = {}
				}
			}

			vbox = { # Fertility info about the target title
				name = "target_title"
				layoutpolicy_horizontal = expanding
				datacontext = "[MigrationWindow.GetTargetTitle]"
				datacontext = "[MigrationWindow.GetSituation]"
				datacontext = "[Title.GetPreferredCapital.GetCountyData]"
				visible = "[Title.IsValid]"

				margin = { 10 15 }

				background = {
					texture = "[County.GetCurrentPhaseType( Situation.Self ).GetIllustration]"
					fittype = centercrop
					alpha = 0.7
					using = Mask_Rough_Edges
				}

				background = {
					texture = "gfx/interface/component_tiles/tile_dark_area_02.dds"
					spriteType = Corneredtiled
					spriteborder = { 40 8 }

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						mirror = horizontal
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					# County Fertility in potential migration domain
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 10 0 }

						background = {
							margin = { 10 15 }
							using = Background_Area_Dark
							using = Mask_Rough_Edges
							alpha = 0.8

							modify_texture = {
								name = "mask"
								texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
								mirror = horizontal
							}
						}

						background = {
							margin = { 10 15 }
							using = Background_Area_Dark
							using = Mask_Rough_Edges
							alpha = 0.6
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 10

								coa_title_small_crown = {
									visible = "[Title.IsValid]"
								}

								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									hbox = { # Steppe Season
										layoutpolicy_horizontal = expanding
										margin = { 10 0 }

										text_single = {
											datacontext = "[MigrationWindow.GetDomainTitle]"
											text = "MIGRATION_WINDOW_DOMAIN_FERTILITY"
											autoresize = yes
											align = left|nobaseline
											max_width = 368
										}

										expand = {}
									}

									hbox = { # Steppe Season
										layoutpolicy_horizontal = expanding
										margin = { 10 0 }

										text_single = {
											text = "MIGRATION_WINDOW_CAPITAL_SUBREGION_LOCATION"
											align = left|nobaseline
											max_width = 368
										}

										expand = {}
									}

									hbox = { # Steppe Season
										layoutpolicy_horizontal = expanding
										margin = { 10 0 }
										visible = "[County.GetCurrentPhaseType( Situation.Self ).IsValid]"

										text_single = {
											text = "MIGRATION_WINDOW_STEPPE_SEASON_LABEL"
											align = left|nobaseline
											max_width = 184
										}

										text_single = {
											margin = { 5 0 }

											text = "[County.GetCurrentPhaseType( Situation.Self ).GetName]"
											default_format = "#high"
											align = left|nobaseline
											max_width = 184
										}

										expand = {}
									}

								}

								expand = {}
							}

							expand = {}
						}

						expand = {}
					}

					expand = {}
				}

				spacer = { size = { 0 30 } }

				# Target Domain Fertility Progress Bar
				hbox = {
					datacontext = "[MigrationWindow.GetTargetDomainFertilityBar]"
					layoutpolicy_horizontal = expanding
					margin = { 55 5 }
					margin_bottom = 15
					visible = "[County.GetCurrentPhaseType( Situation.Self ).IsValid]"

					fertility_bar = {
						blockoverride "button_enabled" {
							enabled = no
						}
						blockoverride "bar_tooltip" {
							tooltip = "[MigrationWindow.GetTargetDomainFertilityTooltip]"
						}
						blockoverride "button_tooltip" {
							tooltip = "[MigrationWindow.GetTargetDomainFertilityTooltip]"
						}
						blockoverride "grey_fertility_icon_visibility" {
							visible = "[MigrationWindow.IsAverageTargetDomainFertilityBetween( '(CFixedPoint)0.0', '(CFixedPoint)0.001' )]"
						}
						blockoverride "green_fertility_icon_visibility" {
							visible = "[MigrationWindow.IsAverageTargetDomainFertilityBetween( '(CFixedPoint)0.6', '(CFixedPoint)1.1' )]"
						}
						blockoverride "yellow_fertility_icon_visibility" {
							visible = "[MigrationWindow.IsAverageTargetDomainFertilityBetween( '(CFixedPoint)0.3', '(CFixedPoint)0.6' )]"
						}
						blockoverride "red_fertility_icon_visiblity" {
							visible = "[MigrationWindow.IsAverageTargetDomainFertilityBetween( '(CFixedPoint)0.001', '(CFixedPoint)0.3' )]"
						}
					}

					expand = {}
				}
			}

			### Other Effects
			vbox = {
				name = "other_effects_list"
				layoutpolicy_horizontal = expanding
				margin_bottom = 15
				margin_top = 5
				spacing = 5

				### label
				text_label_center = {
					text = "MIGRATION_WINDOW_OTHER_EFFECTS_LABEL"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2
					### List
					vbox_character_interaction_effects_simple = {
						datacontext = "[MigrationWindow.GetCustomMigrationEffects]"
						layoutpolicy_horizontal = expanding
						minimumsize = { -1 220 }

						blockoverride "visibility"
						{
							visible = "[InteractionEffectsDescription.HasRejectionEffect]"
						}
					}

					vbox_interaction_options = {
						layoutpolicy_horizontal = expanding
						blockoverride "checkbox_on_click"
						{
							onclick = "[MigrationWindow.RefreshEffects]"
						}
					}

					hbox_character_interaction_acceptance = {
						layoutpolicy_horizontal = expanding

					}
				}

				expand = {
					visible = "[Not(CharacterInteractionConfirmationWindow.ShouldShowAnswer)]"
					size = { 0 40 }
				}

				text_multi_on_decline_summary = {
					margin = { 10 5 }
					max_width = 450
				}

				### SEND BUTTON
				button_primary = {
					name = "send_button"
					enabled = "[MigrationWindow.GetTargetTitle.IsValid]"
					size = { 400 42 }
					text = "[CharacterInteractionConfirmationWindow.GetSendName]"
					onclick = "[MigrationWindow.OnSend]"
				}
			}

			expand = {}
		}
	}

	migration_involved_character_list_window = {
		visible_at_creation = no
		visible = "[MigrationWindow.IsInvolvedCharacterListWindowOpen]"
	}

	migration_color_selector = {
		parentanchor = bottom|hcenter
		position = { 0 -70 }
	}

	migration_tier_selector = {
		parentanchor = bottom|hcenter
		position = { 0 -10 }
	}

	error_horse = {
		parentanchor = bottom|hcenter
		position = { -300 0 }
		visible = "[And( Not( IsPauseMenuShown ), Not(ReleaseMode) )]"
	}

	widget = {
		name = "player_character_migration_view"
		size = { 100% 100% }
		parentanchor = bottom|left

		state = {
			name = _show
			using = Animation_FadeIn_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		datacontext = "[GetPlayer]"

		container = {
			#visible = "[And(And( Not( IsGameViewOpen( 'barbershop' ) ), And( GetPlayer.IsValid, Not( GetVariableSystem.Exists( 'hide_bottom_left_HUD' ) ) ) ), Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_character').GetValue, '(CFixedPoint)0' ) ))]"
			parentanchor = bottom|left
			ignoreinvisible = yes

			icon_hud_background = {
				visible = "[GreaterThanOrEqualTo_int32( Character.GetHudOptionalItemsCount, '(int32)3' )]"
				size = { 520 64 }
			}

			icon_hud_background = {
				visible = "[EqualTo_int32( Character.GetHudOptionalItemsCount, '(int32)2' )]"
				size = { 450 64 }
			}

			icon_hud_background = {
				visible = "[LessThanOrEqualTo_int32( Character.GetHudOptionalItemsCount, '(int32)1' )]"
				size = { 400 64 }
			}
		}

		# Player Character Portrait
		container = {
			parentanchor = bottom|left

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.15

				position = { 0 0 }
				alpha = 1
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.15

				position = { 0 50 }
				alpha = 0
			}

			portrait_hud = {
				scale = 1.3
				parentanchor = center
				position = { -20 -40 }
			}

			icon = {
				texture = "gfx/interface/hud/bottom_left_portrait_fade.dds"
				parentanchor = bottom|left
				color = { 0.12 0.12 0.12 1 }
			}

			icon = {
				texture = "gfx/interface/hud/bottom_left_portrait_fade.dds"
				parentanchor = bottom|left
				color = { 0.15 0.15 0.15 0.3 }
			}
		}

		container = {
			name = "bottom_left_bar_temporary_statuses"

			datacontext = "[GetPlayer]"

			parentanchor = bottom|left
			position = { 250 -70 }
			ignoreinvisible = yes
			alwaystransparent = no
		}
	}
}

types Migration
{
	type migration_color_selector = widget {
		allow_outside = yes
		filter_mouse = all
		alwaystransparent = yes

		size = { 320 60 }

		background = {
			using = Background_Area_Dark
			margin = { 10 0 }
			color = { 0.15 0.15 0.15 0.75 }
		}

		hbox = {
			text_single = {
				visible = "[MigrationWindow.IsShowRealm]"
				text = "MIGRATION_COLOR_SELECTOR_REALMS"
			}

			text_single = {
				visible = "[Not( MigrationWindow.IsShowRealm )]"
				text = "MIGRATION_COLOR_SELECTOR_FERTILITY"
			}

			hbox = {
				button_round = {
					size = { 40 40 }

					down = "[MigrationWindow.IsShowRealm]"
					onclick = "[MigrationWindow.ToggleRealmColor]"

					tooltip = "MIGRATION_COLOR_SELECTOR_REALMS"

					button_icon = {
						size = { 40 40 }
						parentanchor = center
						alwaystransparent = yes
						texture = "[GetMapMode( 'realms' ).GetIcon]"

						down = "[MigrationWindow.IsShowRealm]"
					}
				}

				button_round = {
					size = { 40 40 }

					down = "[Not(MigrationWindow.IsShowRealm)]"
					onclick = "[MigrationWindow.ToggleRealmColor]"

					tooltip = "MIGRATION_COLOR_SELECTOR_FERTILITY"

					button_icon = {
						name = migration_mapmode_ra_uses_this
						widgetid = migration_mapmode_ra_uses_this
						size = { 32 32 }
						parentanchor = center
						alwaystransparent = yes
						texture = "[GetMapMode( 'migration_counties' ).GetIcon]"

						down = "[Not(MigrationWindow.IsShowRealm)]"
					}
				}
			}
		}
	}

	type migration_tier_selector = widget {
		allow_outside = yes
		filter_mouse = all
		alwaystransparent = yes

		size = { 320 60 }

		background = {
			using = Background_Area_Dark
			margin = { 10 0 }
			color = { 0.15 0.15 0.15 0.75 }
		}

		hbox = {
			vbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					text = "MIGRATION_WINDOW_TIER_SELECTOR"
				}

				text_single = {
					text = "MIGRATION_WINDOW_CURRENT_TIER"
					default_format = "#high"
				}
			}

			expand = {}

			button_round = {
				size = { 40 40 }

				onclick = "[MigrationWindow.SetTitleTier('county')]"
				down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'county')]"

				tooltip = "county_plural"

				button_icon = {
					size = { 20 20 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/icons/flat_icons/map_modes/dejure_counties.dds"

					down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'county')]"
				}
			}

			button_round = {
				size = { 40 40 }

				onclick = "[MigrationWindow.SetTitleTier('duchy')]"
				down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'duchy')]"
				enabled = "[GetPlayer.GetActiveLawInGroupWithFlag( 'realm_law' ).HasFlag( 'migration_to_duchies', GetPlayer.Self)]"

				tooltip = "duchy_plural"
				tooltip_when_disabled = "MIGRATION_WINDOW_DEJURE_DUCHY_BLOCKED"

				button_icon = {
					size = { 32 32 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/icons/flat_icons/map_modes/dejure_duchies.dds"

					down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'duchy')]"
				}
			}

			button_round = {
				size = { 40 40 }

				onclick = "[MigrationWindow.SetTitleTier('kingdom')]"
				down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'kingdom')]"
				enabled = "[GetPlayer.GetActiveLawInGroupWithFlag( 'realm_law' ).HasFlag( 'migration_to_kingdoms', GetPlayer.Self)]"

				tooltip = "kingdom_plural"
				tooltip_when_disabled = "MIGRATION_WINDOW_DEJURE_KINGDOM_BLOCKED"

				button_icon = {
					size = { 32 32 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/icons/flat_icons/map_modes/dejure_kingdoms.dds"

					down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'kingdom')]"
				}
			}

			button_round = {
				size = { 40 40 }

				onclick = "[MigrationWindow.SetTitleTier('empire')]"
				down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'empire')]"
				enabled = "[GetPlayer.GetActiveLawInGroupWithFlag( 'realm_law' ).HasFlag( 'migration_to_empires', GetPlayer.Self)]"

				tooltip = "empire_plural"
				tooltip_when_disabled = "MIGRATION_WINDOW_DEJURE_EMPIRE_BLOCKED"

				button_icon = {
					size = { 32 32 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/icons/flat_icons/map_modes/dejure_empires.dds"

					down = "[EqualTo_string(MigrationWindow.GetTitleTier, 'empire')]"
				}
			}
		}
	}

	type migration_involved_character_list_window = window
	{
		# Name used too find the window, don't change
		name = "migration_involved_character_list_window"

		size = { 700 800 }
		parentanchor = center

		minimumsize = { 680 550 }
		layer = middle
		allow_outside = yes

		using = Window_Movable
		using = Window_Size_CharacterList
		using = Window_Background
		using = Window_Decoration

		datacontext = "[MigrationWindow.GetInvolvedCharacterList]"

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "MIGRATION_INVOLVED_CHARACTERS_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[MigrationWindow.CloseInvolvedCharacterListWindow]"
				}
			}

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "container_implementation" {
					fixedgridbox = {
						addcolumn = 590
						addrow = 126

						name = "characters_grid"
						datamodel_reuse_widgets = yes
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_involved_character_list_item = {
								size = { 590 122 }
							}
						}
					}

					text_single = {
						visible = "[Not(CharacterSelectionList.HasItems)]"
						layoutpolicy_vertical = expanding
						name = "no_match"
						text = "CHARACTER_FINDER_NO_MATCH"
					}
				}
			}

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding

				margin_bottom = 15

				button_primary = {
					text = "CLOSE_LABEL"
					onclick = "[MigrationWindow.CloseInvolvedCharacterListWindow]"
				}
			}
		}

		window_character_filter = {
			blockoverride "addition_filter" {
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
				}
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
				}
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
				}
				filter_item = {
					layoutpolicy_horizontal = expanding
					datacontext = "[CharacterSelectionList.GetFilter('alive_filter')]"
				}
			}
		}
	}

	type widget_involved_character_list_item = widget
	{
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 590 122 }

		background = {
			using = Background_Area_With_Header
		}

		widget = {
			parentanchor = top|right
			position = { -8 2 }
			size = { 160 30 }

			hbox = {
				name = "skills_grid"
				layoutpolicy_horizontal = expanding

				expand = {}

				datamodel = "[CharacterListItem.GetSkillItems]"

				item = {
					widget_skill_item_no_icon = {}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_vertical = expanding

				margin_top = 2

				portrait_head = {}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				margin_left = 4

				## Name
				hbox = {
					layoutpolicy_horizontal = expanding

					margin_top = 4
					margin_right = 8

					text_single = {
						layoutpolicy_horizontal = expanding

						text = "[Character.GetUINameNoTooltip]"
						align = nobaseline
						alwaystransparent = yes
						autoresize = no
						max_width = 300

						using = Font_Size_Medium
					}

					expand = {}
				}

				## Age
				hbox = {
					layoutpolicy_horizontal = expanding

					margin_top = 4

					using = character_age_or_death_text
					blockoverride "list_layout" {}

					block "character_relation"
					{
						text_single = {
							name = "character_relation"
							layoutpolicy_horizontal = expanding
							raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
							tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							default_format = "#low"
							autoresize = no
							align = nobaseline
							visible = "[Character.HasRelationTo( GetPlayer )]"
							alwaystransparent = yes
						}

						expand = {
							visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
						}
					}
				}

				## Extra description
				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "character_companion_description"
						layoutpolicy_horizontal = expanding
						raw_text = "[herd_i] [Character.GetDomicile.GetHerd]"
						autoresize = no
						align = nobaseline
						alwaystransparent = yes
					}
				}

				## Dynasty, Traits, Culture and Religion
				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area

						margin_left = 8
					}

					hbox = {
						## Dynasty
						widget = {
							size = { 40 40 }

							coa_house_small = {
								datacontext = "[Character.GetHouse]"
								scale = 0.6
							}
						}

						## Traits
						fixedgridbox = {
							name = "traits_grid"
							datamodel = "[CharacterListItem.GetTraits]"
							flipdirection = yes
							size = { 150 60 }
							addcolumn = 30
							addrow = 30
							maxhorizontalslots = 8
							maxverticalslots = 1

							item = {
								container = {
									visible = "[Trait.IsValid]"

									icon_trait = {
										blockoverride "icon_size"
										{
											size = { 30 30 }
										}

										blockoverride "tooltip_placement"
										{
											using = tooltip_se
										}

										blockoverride "glow_radius"
										{
											glow_radius = 3
										}
									}
								}
							}
						}
					}

					## Realm
					widget = {
						size = {45 40 }
						visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"

						block "claims_visibility" {}

						datacontext = "[CharacterListItem.GetFirstClaim]"

						coa_title_tiny_crown = {
							datacontext = "[Claim.GetTitle]"
							parentanchor = vcenter
							position = { 0 -3 }
							scale = 0.8

							using = tooltip_ne

							highlight_icon = {
								name = "pressed_claim"
								visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
								texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
								size = { 24 24 }
								parentanchor = bottom|right
							}

							highlight_icon = {
								name = "unpressed_claim"
								visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
								texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
								size = { 24 24 }
								parentanchor = bottom|right
							}

							highlight_icon = {
								name = "implicit_claim"
								visible = "[Claim.IsImplicit]"
								texture = "gfx/interface/icons/title_status/icon_claim_implicit.dds"
								size = { 24 24 }
								parentanchor = bottom|right
							}

							blockoverride "coa_tooltip"
							{
								tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
							}
						}

						text_single = {
							align = right
							minimumsize = { 15 0 }
							parentanchor = vcenter|right
							text = "[CharacterListItem.GetTitleItemCount]"

							tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
						}
					}

					expand = {}

					vbox = {
						layoutpolicy_vertical = expanding
						margin = { 0 2 }
						margin_right = 4

						divider_light = {
							layoutpolicy_vertical = expanding
						}
					}

					## Religion
					hbox = {
						margin_right = 16

						icon = {
							name = "faith_button"
							size = { 30 30 }
							datacontext = "[Character.GetFaith]"
							texture = "[Faith.GetIcon]"

							tooltipwidget = {
								faith_tooltip = {}
							}
						}

						hbox = {
							datacontext = "[Character.GetCulture]"

							tooltipwidget = {
								culture_tooltip = {}
							}

							using = tooltip_se

							hbox = {
								spacing = 4

								icon = {
									name = "culture"
									texture = "gfx/interface/icons/icon_culture.dds"
									size = { 30 30 }
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									max_width = 110
									align = nobaseline
									text = "CULTURE_LISTS_WINDOW"
								}
							}
						}
					}
				}
			}
		}
	}

	type nomad_widget = widget {

		name = "nomad_widget"

		block "visibility" {}

		size = { 180 50 }
		allow_outside = yes

		widget = {
			parentanchor = top
			position = { 0 -40 }
			size = { 180 100 }
			allow_outside = yes

			hbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin_left = 13
				spacing = -12
				allow_outside = yes

				vbox = { #LotR
					margin_top = 4
					margin_left = -38
					allow_outside = yes
					visible = "[IsOrc( Character )]"
					
					hbox = {
						layoutpolicy_horizontal = expanding
						parentanchor = center
						
						button_round = {
							size = { 55 55 }
							icon_round_button_base = { alwaystransparent = yes }
							text_single = {
								parentanchor = center
								raw_text = "#high Succession (Icon Here)#!"
							}
						}
					}
				}

				vbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					spacing = -10
					margin_top = 4
					allow_outside = yes
					visible = "[IsNomad( Character )]" #LotR

					# Fertility Bar
					fertility_bar = {
						blockoverride "bar_tooltip" {
							tooltipwidget = {
								domain_fertility_tooltip = {}
							}
							using = tooltip_ne
						}
						blockoverride "button_tooltip" {
							tooltip = "migration_counties_desc"
						}
						blockoverride "grey_fertility_icon_visibility" {
							visible = "[Character.IsLandlessRuler]"
						}
						blockoverride "green_fertility_icon_visibility" {
							visible = "[Character.IsAverageFertilityBetween( '(CFixedPoint)0.6', '(CFixedPoint)1.1' )]"
						}
						blockoverride "yellow_fertility_icon_visibility" {
							visible = "[Character.IsAverageFertilityBetween( '(CFixedPoint)0.3', '(CFixedPoint)0.6' )]"
						}
						blockoverride "red_fertility_icon_visiblity" {
							visible = "[Character.IsAverageFertilityBetween( '(CFixedPoint)0.0', '(CFixedPoint)0.3' )]"
						}
						blockoverride "fertility_fire_visibility" {
							visible = "[Character.IsAverageFertilityBetween( '(CFixedPoint)0.0', '(CFixedPoint)0.01' )]"
						}
					}

					hbox = {
						spacing = 2
						datacontext = "[Character.GetInvolvedMigrationSituation]"
						datacontext = "[Situation.GetCharacterCurrentPhase( Character.Self ).GetType]"

						button_round = {
							size = { 55 55 }
							tooltipwidget = {
								current_situation_phase = {
									blockoverride "call_to_action" {
										text_single = {
											layoutpolicy_horizontal = expanding
											margin_bottom = 16
											text = "SITUATION_CALL_TO_ACTION"
										}
									}
								}
							}
							using = tooltip_ne
							enabled = "[Character.HasInvolvedMigrationSituation]"
							onclick = "[ToggleGameViewData(Situation.GetWindowName, Situation.GetID)]"

							icon_round_button_base = {
								alwaystransparent = yes
							}

							button_situation = {
								name = "button_situation_steppe"
								size = { 40 40 }
								position = { 0 -1 }
								parentanchor = center
								alwaystransparent = yes
							}
						}

						button_round = {
							size = { 55 55 }
							onclick = "[Character.OpenPlayerInteraction( 'migration_interaction' )]"
							enabled = "[Character.IsPlayerInteractionValid( 'migration_interaction' )]"
							tooltip = "[Character.GetPlayerInteractionTooltip( 'migration_interaction' )]"

							icon_round_button_base = {
								alwaystransparent = yes
							}

							button_migrate = {
								name = "button_migrate"
								size = { 40 40 }
								position = { 0 -1 }
								parentanchor = center
								alwaystransparent = yes
							}
							using = tooltip_ne
						}
					}
				}

				spacer = {
					visible = "[IsNomad( Character )]"
					size = { 17 0 }
				}

				button = {
					datacontext = "[GetPlayer.GetActiveLawInGroupWithFlag('realm_law')]"
					size = { 100 100 }
					allow_outside = yes

					onclick = "[ToggleGameViewData( 'my_realm', 'bookmark_laws' )]"

					tooltipwidget = {
						general_law_tooltip = {
							blockoverride "call_to_action" {
								text_single = {
									layoutpolicy_horizontal = expanding
									text = "DOMINANCE_WIDGET_CALL_TO_ACTION"
									margin_bottom = 16
								}
							}
						}
					}

					icon_round_button_base = {
						parentanchor = center
						size = { 72 72 }
					}

					highlight_icon = {
						name = "dominance icon"
						size = { 72 72 }
						texture = "[Law.GetIcon]"
						parentanchor = center
					}

					widget = {
						parentanchor = hcenter|bottom
						size = { 68 16 }
						position = { 0 -7 }

						flowcontainer = {
							parentanchor = vcenter
							position = { 7 0 }
							spacing = 1

							widget = {
								size = { 10 10 }

								dominance_pip = {
									parentanchor = center
								}

								dominance_pip_on = {
									visible = "[GreaterThanOrEqualTo_int32( Law.GetIndexInLawGroup, '(int32)0')]"
									parentanchor = center
								}
							}

							widget = {
								size = { 10 10 }

								dominance_pip = {
									parentanchor = center
								}

								dominance_pip_on = {
									visible = "[GreaterThanOrEqualTo_int32( Law.GetIndexInLawGroup, '(int32)1')]"
									parentanchor = center
								}
							}

							widget = {
								size = { 10 10 }
								
								dominance_pip = {
									parentanchor = center
								}

								dominance_pip_on = {
									visible = "[GreaterThanOrEqualTo_int32( Law.GetIndexInLawGroup, '(int32)2')]"
									parentanchor = center
								}
							}

							widget = {
								size = { 10 10 }

								dominance_pip = {
									parentanchor = center
								}

								dominance_pip_on = {
									visible = "[GreaterThanOrEqualTo_int32( Law.GetIndexInLawGroup, '(int32)3')]"
									parentanchor = center
								}
							}

							widget = {
								size = { 10 10 }

								dominance_pip = {
									parentanchor = center
								}

								dominance_pip_on = {
									visible = "[GreaterThanOrEqualTo_int32( Law.GetIndexInLawGroup, '(int32)4')]"
									parentanchor = center
								}
							}
						}

						icon = {
							size = { 68 16 }
							texture = "gfx/interface/window_realm/dominance_bar_frame.dds"
						}
					}
				}
				
			}
		}
	}

	type fertility_bar = widget {
		name = "fertility_progressbar"
		size = { 92 20 }
		allow_outside = yes

		icon = {
			block "fertility_fire_visibility" { visible = no }
			allow_outside = no
			parentanchor = center
			size = { 150% 220% }
			texture = "gfx/interface/colors/white.dds"
			using = Color_Red

			shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"

			modify_texture = {
				name = "clouds"
				texture = "gfx/interface/component_masks/mask_clouds.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				texture_density = 6
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_glow.dds"
				mirror = vertical
				blend_mode = alphamultiply
			}

			state = {
				name = mask_a
				next = mask_b
				trigger_on_create = yes

				modify_texture = {
					name = "clouds"
					translate_uv = { 0 -1 }
				}
			}

			state = {
				name = mask_b
				next = mask_a
				duration = 8

				modify_texture = {
					name = "clouds"
					translate_uv = { 0 1 }
				}
			}
		}

		icon = {
			parentanchor = center
			size = { 92 26 }
			texture = "gfx/interface/window_scheme/scheme_success_progressbar_bg.dds"
		}

		hbox_complex_bar_progress = {
			blockoverride "texture_filled" {
				texture = "gfx/interface/progressbars/progress_grandeur_increase.dds"
			}
		}

		icon = {
			parentanchor = center
			size = { 124 82 }
			position = { -64 -14 }
			alwaystransparent = yes
			spriteType = CorneredTiled
			texture_density = 2
			texture = "gfx/interface/skinned/hud_stress_bg.dds"
		}

		icon = {
			parentanchor = center
			size = { 124 82 }
			position = { 28 -14 }
			alwaystransparent = yes
			spriteborder_right = 94
			spriteType = CorneredTiled
			texture_density = 2
			texture = "gfx/interface/skinned/hud_stress_bg.dds"
		}


		button_round = {
			parentanchor = left|vcenter
			position = { -40 -1 }
			onclick = "[SetMapMode(Select_CString(IsMapMode('migration_counties'), 'realms', 'migration_counties'))]"

			block "button_tooltip" {}
			using = tooltip_ne

			icon_round_button_base = {
				block "button_enabled" {}
			}

			### Grey Fertility
			icon = {
				parentanchor = center
				position = { 0 -1 }
				size = { 40 40 }
				alwaystransparent = yes
				texture = "gfx/interface/icons/flat_icons/map_modes/fertility.dds"
				block "grey_fertility_icon_visibility" {}

				modify_texture = {
					texture = "gfx/interface/colors/colors_textured.dds"
					framesize = { 96 96 }
					frame = 4
				}
			}

			### Green Fertility
			icon = {
				parentanchor = center
				position = { 0 -1 }
				size = { 40 40 }
				alwaystransparent = yes
				texture = "gfx/interface/icons/flat_icons/map_modes/fertility.dds"
				block "green_fertility_icon_visibility" {}

				modify_texture = {
					texture = "gfx/interface/colors/colors_textured.dds"
					framesize = { 96 96 }
					frame = 8
					alpha = 0.8
				}
			}

			### Yellow Fertility
			icon = {
				parentanchor = center
				position = { 0 -1 }
				size = { 40 40 }
				alwaystransparent = yes
				texture = "gfx/interface/icons/flat_icons/map_modes/fertility.dds"
				block "yellow_fertility_icon_visibility" {}

				modify_texture = {
					texture = "gfx/interface/colors/colors_textured.dds"
					framesize = { 96 96 }
					frame = 1
				}
			}

			### Red Fertility
			icon = {
				parentanchor = center
				position = { 0 -1 }
				size = { 40 40 }
				alwaystransparent = yes
				texture = "gfx/interface/icons/flat_icons/map_modes/fertility.dds"
				block "red_fertility_icon_visiblity" {}

				modify_texture = {
					texture = "gfx/interface/colors/colors_textured.dds"
					framesize = { 96 96 }
					frame = 9
				}
			}
		}

		hbox_complex_bar_next_marker = {

			block "bar_tooltip" {}

			blockoverride "marker" {
				widget = {
					parentanchor = center
					position = { 0 -16 }
					size = { 10 10 }

					divider = {
						parentanchor = center
						position = { 0 15 }
						size = { 4 20 }
					}

					icon = {
						parentanchor = center
						position = { 0 6 }
						size = { 96 23 }

						texture = "gfx/interface/window_domiciles/domicile_location_map_pin_arrow.dds"
					}
				}
			}
		}

		hbox_complex_bar_equlibrium_marker = {
			block "bar_tooltip" {}

			blockoverride "equilibrium_marker" {
				widget = {
					parentanchor = center
					position = { 0 -16 }
					size = { 10 10 }

					divider = {
						parentanchor = center
						position = { 0 15 }
						size = { 4 20 }
					}

					icon = {
						parentanchor = center
						position = { 0 6 }
						size = { 96 23 }

						texture = "gfx/interface/window_domiciles/domicile_location_map_pin_arrow.dds"
					}
				}
			}
		}
	}

	type dominance_pip = icon_flat_standard_black {
		size = { 10 10 }
		texture = "gfx/interface/window_realm/dominance_bar_fill.dds"
	}

	type dominance_pip_on = icon_flat_standard {
		size = { 10 10 }
		texture = "gfx/interface/window_realm/dominance_bar_fill.dds"
	}

	type current_situation_phase = container {
		container = {
			visible = "[Character.HasInvolvedMigrationSituation]"
			using = situation_phase_type_tooltip
		}
		container = {
			visible = "[Not( Character.HasInvolvedMigrationSituation )]"
			using = DefaultTooltipBackground

			cooltip_paragraph = {
				margin = { 15 10 }
				margin_bottom = 15
				text = "NO_MIGRATION_SITUATION"
			}
		}
	}

	type domain_fertility_tooltip = container {
		alwaystransparent = no

		object_tooltip_pop_out = {
			visible = "[DataModelHasItems( InGameBottomBar.GetDomainFertilityCounties )]"
			blockoverride "title_text"
			{
				margin = { 0 5 }
				text = "DOMAIN_FERTILITY_TOOLTIP_HEADER"
				default_format = "#T"
			}

			blockoverride "concept_link"
			{
				visible = no
			}

			blockoverride "main_description"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					datamodel = "[InGameBottomBar.GetDomainFertilityCounties]"

					item = {
						county_fertility_breakdown = {}
					}
				}
			}
		}

		container = {
			visible = "[Not( DataModelHasItems( InGameBottomBar.GetDomainFertilityCounties ) )]"
			using = GeneralTooltipSetup
			using = DefaultTooltipBackground
			alwaystransparent = no

			text_multi = {
				text = "DOMAIN_FERTILITY_TOOLTIP_UNLANDED"
				margin = { 15 10 }
				align = nobaseline
				autoresize = yes
				max_width = 450
			}
		}
	}


	type county_fertility_breakdown = vbox {
		datacontext = "[Title.GetCountyData]"
		layoutpolicy_horizontal = expanding
		margin_bottom = 15

		hbox = {
			layoutpolicy_horizontal = expanding

			margin_left = 60
			margin_bottom = -15

			# Name
			cooltip_paragraph = {
				text = "[Title.GetName|U]"
				default_format = "#high"
				align = nobaseline
			}

			expand = {}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			# COA
			coa_title_small = {}

			spacer = {
				size = { 5 0 }
			}

			# Current Fertility
			cooltip_paragraph = {
				text = "CURRENT_COUNTY_FERTILITY"
				max_width = 95
			}

			spacer = {
				size = { 10 0 }
			}

			# Monthly Change
			cooltip_paragraph = {
				datacontext = "[County.GetCountyFertilityChangeBreakdown]"

				text = "CURRENT_COUNTY_FERTILITY_CHANGE"

				tooltip_visible = "[ValueBreakdown.HasTooltip]"
				using = tooltip_se
				tooltipwidget = {
					widget_value_breakdown_tooltip = {}
				}
			}

		}

		cooltip_paragraph = {
			margin_left = 60
			margin_bottom = 10
			margin_top = -15
			text = "PROJECTED_COUNTY_FERTILITY_EQUILIBRIUM"
		}

		divider_light = {
			layoutpolicy_horizontal = growing
		}
	}
}

