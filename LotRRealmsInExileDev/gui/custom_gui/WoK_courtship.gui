types WoK_Courtship {
	type wok_hud_arranged_courtships = flowcontainer {
		name = "wok_courtship_schemes"
		datamodel = "[GetPlayer.MakeScope.GetList('arranged_courtships')]"
		parentanchor = vcenter
		spacing = 5
		margin = { 5 0 }

		item = {
			button_normal = {
				name = "tutorial_highlight_lifestyle_HUD_button"
				#onclick = "[BottomBarSchemeItem.OnClick]"
				datacontext = "[Scope.Scheme]"
				tooltip = "BOTTOMBAR_ARRANGED_COURTSHIP_TOOLTIP"
				size = { 60 60 }

				icon = {
					texture = "gfx/interface/buttons/button_lifestyles_base.dds"
					size = { 100% 100% }
				}

				icon = {
					name = "progress_frame"
					texture = "gfx/interface/progressbars/action_progress_frame.dds"
					size = { 100% 100% }
					parentanchor = center
					alpha = 0.5
				}

				progresspie = {
					name = "progress"
					size = { 60 60 }
					texture = "gfx/interface/progressbars/action_progress_thin.dds"
					framesize = { 124 124 }
					frame = 2
					widgetanchor = top|hcenter
					parentanchor = top|hcenter
					value = "[Scheme.GetProgressBar]"
				}

				highlight_icon = {
					visible = "[Not(Scheme.GetSchemeType.IsHostile)]"
					texture = "gfx/interface/icons/scheme_types/icon_scheme_personal.dds"
					alwaystransparent = yes
					size = { 45 45 }
					parentanchor = center
				}

				highlight_icon = {
					visible = "[Scheme.GetSchemeType.IsHostile]"
					texture = "gfx/interface/icons/icon_scheme.dds"
					alwaystransparent = yes
					size = { 45 45 }
					parentanchor = center
				}
			}
		}
	}
	type wok_intrigue_arranged_courtships = vbox {
		layoutpolicy_horizontal = expanding
		margin_top = 10

		text_label_center = {
			name = "label"
			layoutpolicy_horizontal = expanding

			text = "SCHEME_WINDOW_ARRANGED_COURTSHIPS"
		}

		vbox = {
			name = "known_schemes_grid"
			# visible = "[IntrigueWindow.HasKnownSchemes]"
			datamodel = "[GetPlayer.MakeScope.GetList('arranged_courtships')]"
			layoutpolicy_horizontal = expanding

			item = {
				wok_arranged_courtship_scheme_item = {
					#datacontext = "[Scope.GetScheme]"
					layoutpolicy_horizontal = expanding
				}
			}
		}

		text_multi = {
			name = "no_own_schemes"
			visible = "[Not(DataModelHasItems(GetPlayer.MakeScope.GetList('arranged_courtships')))]"
			layoutpolicy_horizontal = expanding
			minimumsize = { 0 110  }

			text = "SCHEME_WINDOW_NO_ARRANGED_COURTSHIPS"
			default_format = "#low"
			align = center

			background = {
				using = Background_Area
			}
		}
	}
	
	type wok_arranged_courtship_scheme_item = vbox {
		name = "arranged_schemes"
		datacontext = "[Scope.GetScheme]"

		background = {
			using = Background_Area_With_Header
		}
		hbox = {
			name = "my_own_scheme_header"
			layoutpolicy_horizontal = expanding

			margin = { 0 5 }
			margin_left = 20
			margin_right = 5

			background = {
				texture = "gfx/interface/window_scheme/scheme_panel_header_banner.dds"
				margin_top = -2
				margin_bottom = -3
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				icon = {
					texture = "[Scheme.GetSchemeType.GetIcon]"
					size = { 30 30 }
					alwaystransparent = yes

					tooltip = "SCHEME_WINDOW_TT_ITEM"

					background = {
						texture = "gfx/interface/window_scheme/scheme_panel_header_icon_bg.dds"
						margin = { 13 13 }
					}
				}

				text_single = {
					text = "SCHEME_WINDOW_ITEM_ARRANGED_COURTSHIP_NAME"
					using = Font_Size_Medium
					align = nobaseline
					max_width = 480
					margin_left = 15
				}

				icon = {
					visible = "[Scheme.IsExposed]"
					size = { 30 30 }
					texture = "gfx/interface/icons/schemes/icon_discovered_scheme.dds"

					tooltip = "SCHEME_WINDOW_EXPOSED_TOOLTIP"

					glow = {
						using = Color_Red
						using = Glow_Standard
						glow_radius = 3
					}

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default

						glow_alpha = 0.8
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default

						glow_alpha = 0.2
					}
				}

				expand = {}
			}

			button_cancel = {
				name = "cancel_button"
				size = { 30 30 }

				onclick = "[SchemeItem.OnCancelClick]"
				enabled = "[SchemeItem.CanCancelScheme]"
				tooltip = "[SchemeItem.GetCancelSchemeDescription]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }
			margin_left = 15

			portrait_head = {
				datacontext = "[Scheme.GetOwner]"
				using = tooltip_es
				blockoverride "portrait_button"
				{
					tooltip = "SCHEME_WINDOW_SCHEME_TARGET"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				hbox = {
					datacontext = "[SchemeItem.GetScheme]"
					visible = "[Scheme.GetSchemeType.IsBasic]"
					layoutpolicy_horizontal = expanding
					spacing = 5
					tooltip = "SCHEME_WINDOW_SUCCESS_BASIC_TOOLTIP"
					icon = {
						name = "success_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
					}
					text_single = {
						name = "success_chance"
						text = "SCHEME_WINDOW_SUCCESS_CHANCE"
						align = nobaseline
						max_width = 310
					}
					expand = {}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					tooltip = "SCHEME_WINDOW_PROGRESS_INFO_BREAKDOWN"
					icon = {
						name = "speed_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_scheme_speed.dds"
					}
					text_single = {
						name = "speed"
						visible = "[Scheme.IsUnfrozen]"
						text = "[SelectLocalization(Scheme.GetSchemeType.IsBasic, 'SCHEME_WINDOW_PROGRESS_INFO_BASIC', 'SCHEME_WINDOW_PROGRESS_INFO')]"
						align = nobaseline
						max_width = 250
					}
					text_single = {
						name = "scheme_frozen"
						visible = "[Scheme.IsFrozen]"
						text = "SCHEME_WINDOW_PROGRESS_FROZEN"
						align = nobaseline
						max_width = 250
					}
					expand = {}
				}
				hbox = {
					visible = "[Scheme.IsSecret]"
					layoutpolicy_horizontal = expanding
					spacing = 5
					tooltip = "SCHEME_WINDOW_SECRECY_TOOLTIP"
					icon = {
						name = "secrecy_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_secrecy.dds"
					}
					text_single = {
						name = "secrecy"
						text = "SCHEME_WINDOW_SECRECY"
						align = nobaseline
						max_width = 250
					}
					expand = {}
				}
				hbox = {
					visible = "[Scheme.IsSecret]"
					layoutpolicy_horizontal = expanding
					spacing = 5
					icon = {
						name = "breach_not_in_grace_period"
						visible = "[LessThanOrEqualTo_CFixedPoint( Scheme.MakeScope.Var('secrecy_grace_period').GetValue, '(CFixedPoint)0' )]"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_scheme_breach.dds"
					}
					icon = {
						name = "breach_in_grace_period"
						visible = "[Not( LessThanOrEqualTo_CFixedPoint( Scheme.MakeScope.Var('secrecy_grace_period').GetValue, '(CFixedPoint)0' ))]"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_scheme_breach_grace_period.dds"
					}
					text_single = {
						name = "breaches"
						text = "SCHEME_WINDOW_BREACHES"
						align = nobaseline
						max_width = 250
					}
					expand = {}
				}
				text_multi = {
					visible = "[And( Scheme.HasTaskContract, InDebugMode )]"
					layoutpolicy_horizontal = expanding
					raw_text= "#D Contract: [Scheme.GetTaskContract.GetNameNoTooltip]#!"
				}
				spacer = { size = { 60 60 }}
				expand = {}
				# hbox = {
				# 	widget = {
				# 		visible = "[SchemeItem.GetScheme.GetSchemeType.IsBasic]"
				# 		size = { 250 0 }
				# 	}
				# }
			}

			portrait_head = {
				datacontext = "[Scheme.GetTargetCharacter]"
				using = tooltip_es
				blockoverride "portrait_button"
				{
					tooltip = "SCHEME_WINDOW_SCHEME_TARGET"
				}
			}
		}
	}
}