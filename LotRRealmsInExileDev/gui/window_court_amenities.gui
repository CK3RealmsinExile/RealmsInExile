types RoyalCourtTypes
{

	type court_grandeur_expected_level_vbox = vbox {
		cooltip_paragraph = {
			layoutpolicy_horizontal	= expanding
			visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
			text = COURT_GRANDEUR_TOOLTIP_BELOW_EXPECTATION
		}
		cooltip_paragraph = {
			layoutpolicy_horizontal	= expanding
			visible = "[EqualTo_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
			text = COURT_GRANDEUR_TOOLTIP_AT_EXPECTATION
		}
		cooltip_paragraph = {
			layoutpolicy_horizontal	= expanding
			visible = "[GreaterThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel )]"
			text = COURT_GRANDEUR_TOOLTIP_ABOVE_EXPECTATION
		}

		vbox = {
			visible = "[NotEqualTo_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetCurrentLevelIgnoreGrace )]"

			spacer = {
				size = { 10 10 }
			}

			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[LessThan_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetMinimumExpectedLevel )]"
				text = COURT_GRANDEUR_TOOLTIP_BELOW_EXPECTATION_IGNORE_GRACE
			}
			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[EqualTo_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetMinimumExpectedLevel )]"
				text = COURT_GRANDEUR_TOOLTIP_AT_EXPECTATION_IGNORE_GRACE
			}
			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[GreaterThan_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetMinimumExpectedLevel )]"
				text = COURT_GRANDEUR_TOOLTIP_ABOVE_EXPECTATION_IGNORE_GRACE
			}
		}
	}


	# Requires CourtAmenitiesWindow datacontext
	type widget_court_grandeur_view = widget
	{

		container = {
			name = "royal_court_grandeur_view_tutorial_uses_this"
			widgetid = "royal_court_grandeur_view_tutorial_uses_this"
		}

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 0 }
			margin = { 20 0 }
			margin_top = -100
			texture_density = 2

			modify_texture = {
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				blend_mode = overlay
			}
		}

		widget = {
			name = "background_texture_sides"
			size = { 100% 100%}
			position = { 0 40 }

			icon = {
				name = "background_texture_sides_tier1"
				texture = "gfx/interface/window_roco_grandeur/sides_tier01.dds"
				size = { 100% 73}

				visible = "[LessThanOrEqualTo_int32(CourtGrandeurData.GetCurrentLevel, '(int32)4')]"
			}

			icon = {
				name = "background_texture_sides_tier2"
				texture = "gfx/interface/window_roco_grandeur/sides_tier02.dds"
				size = { 100% 73}

				visible = "[And(GreaterThan_int32(CourtGrandeurData.GetCurrentLevel, '(int32)4'),LessThanOrEqualTo_int32(CourtGrandeurData.GetCurrentLevel, '(int32)7'))]"
			}

			icon = {
				name = "background_texture_sides_tier3"
				texture = "gfx/interface/window_roco_grandeur/sides_tier03.dds"
				size = { 100% 73}

				visible = "[GreaterThan_int32(CourtGrandeurData.GetCurrentLevel, '(int32)7')]"
			}
		}

		icon = {
			name = "background_texture_top"
			size = { 100% 147 }
			position = { 0 32 }
			texture = "gfx/interface/window_roco_grandeur/court_grandeur_bg.dds"
		}

		widget = {
			name = "background_texture_trim"
			size = { 100% 70 }
			position = { 0 46 }

			icon = {
				name = "background_texture_trim_tier1"
				size = { 100% 70 }
				alpha = 0.5
				texture = "gfx/interface/window_roco_grandeur/trim_tier1.dds"

				visible = "[LessThanOrEqualTo_int32(CourtGrandeurData.GetCurrentLevel, '(int32)4')]"
			}

			icon = {
				name = "background_texture_trim_tier2"
				size = { 100% 70 }
				alpha = 0.5
				texture = "gfx/interface/window_roco_grandeur/trim_tier2.dds"

				visible = "[And(GreaterThan_int32(CourtGrandeurData.GetCurrentLevel, '(int32)4'),LessThanOrEqualTo_int32(CourtGrandeurData.GetCurrentLevel, '(int32)7'))]"
			}

			icon = {
				name = "background_texture_trim_tier3"
				size = { 100% 70 }
				alpha = 0.5
				texture = "gfx/interface/window_roco_grandeur/trim_tier3.dds"

				visible = "[GreaterThan_int32(CourtGrandeurData.GetCurrentLevel, '(int32)7')]"
			}
		}

		widget = {
			name = "illustration_left"
			size = {450 230}
			parentanchor = left|bottom

			background = {
				texture = "gfx/interface/illustrations/event_scenes/throneroom_west.dds"
				using = Mask_Rough_Edges
				alpha = 0.3

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}
		}

		widget = {
			name = "illustration_right"
			size = {450 230}
			parentanchor = right|bottom

			background = {
				texture = "gfx/interface/illustrations/event_scenes/throneroom_west.dds"
				using = Mask_Rough_Edges
				alpha = 0.3

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					blend_mode = alphamultiply
				}
			}
		}

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
		}

		widget = {
			size = { 100% 330 }
			parentanchor = bottom|hcenter
			allow_outside = yes

			widget = {
				size = { 100% 110 }
				datacontext = "[Character.GetCourtGrandeurData]"
				allow_outside = yes

				@progress_bar_size = 1000
				@progress_bar_spacing = @[progress_bar_size / 20] # Number of steps for level items

				flowcontainer = {
					name = "current_value_text"
					parentanchor = bottom|left
					spacing = 5
					margin_bottom = 10
					margin_left = 15

					icon_flat_standard = {
						name = "grandeur_icon"
						size = { 45 45 }
						texture = "gfx/interface/window_roco_grandeur/icon_grandeur.dds"
					}

					text_single = {
						name = "court_grandeur_label"
						text =  COURT_GRANDEUR_LABEL
						
						margin_top = 10
						using = Font_Size_Small
					}

					text_single = {
						name = "court_grandeur_current_value"
						text = "[CourtGrandeurData.GetCurrent|V0]"
						align = nobaseline
						margin_top = 10
						using = Font_Size_Medium
						default_format = "#underline"

						using = tooltip_ne

						tooltipwidget = { court_grandeur_progress_bar_tooltip = {} }
					}

					text_single = {
						name = "court_grandeur_current_baseline_value"
						datacontext = "[CourtGrandeurWindow.GetBaseBreakdownTooltip]"
						text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE_SIMPLE
						
						margin_top = 10
						using = Font_Size_Small

						using = tooltip_ne

						tooltip_visible = "[ValueBreakdown.HasTooltip]"
						tooltipwidget = { widget_value_breakdown_tooltip = {} }
					}
				}

				### progressbar ###
				widget = {
					parentanchor = center
					size = { 1100 40 }
					position = { 5 24 }
					allow_outside = yes

					text_single = {
						text = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MIN' )|V0]"
						align = right
						using = Font_Size_Medium
						parentanchor = left
						position = { 24 4 }
					}

					widget = {
						name = "grandeur_tutorial_uses_this"
						parentanchor = center
						size = { @progress_bar_size 40 }
						tooltipwidget = { court_grandeur_progress_bar_tooltip = {} }

						# Ensure a consistent background
						progressbar_royal_court = {
							name = "background"
							size = { @progress_bar_size 40 }
							value = 0

						}

						progressbar_royal_court = {
							name = "below_base_level"
							size = { @progress_bar_size 40 }
							value = "[CourtGrandeurData.GetBase]"
							min = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MIN' )]"
							max = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MAX' )]"

							noprogresstexture = "gfx/interface/progressbars/blank.dds"
							progresstexture = "gfx/interface/progressbars/progress_grandeur_increase.dds"
							alpha = "[Select_float( CourtAmenitiesWindow.HasChangedAnyAmenity, '(float)0.7', '(float)1.0' )]"

							marker = {
								name = "current_value"
								widget = {
									icon = {
										size = { 25 36 }
										position = { -20 2 }
										texture = "gfx/interface/progressbars/progressbar_center_glow.dds"
										color = { 0.80 0.96 0.82 0.9 }
									}
								}
							}

							#### GRANDEUR BAR ANIMATION INCREASE ####
							hbox = {
								margin = { 0 2 }
								visible = "[Not( GreaterThan_CFixedPoint( CourtGrandeurData.GetCurrent, CourtGrandeurData.GetBase ) )]"

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( FixedPointToFloat( CourtGrandeurData.GetCurrent ), '(float)100', '(int32)1000' )]"
								}

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( FixedPointToFloat( Subtract_CFixedPoint( CourtGrandeurData.GetBase, CourtGrandeurData.GetCurrent ) ), '(float)100', '(int32)1000' )]"

									#### HORIZONTAL WIPE ####
									icon = {
										size = { 100% 100% }
										parentanchor = vcenter
										texture = "gfx/interface/colors/white.dds"
										color = { 0.854 0.964 0.694 1 }
										alpha = 0

										modify_texture = {
											name = "horizontal_wipe"
											texture = "gfx/interface/progressbars/progressbar_center_glow_white_increase.dds"
											blend_mode = alphamultiply
										}

										state = {
											name = a
											next = b
											trigger_on_create = yes
											duration = 0
											alpha = 0

											modify_texture = {
												name = "horizontal_wipe"
												translate_uv = { 1 0 }
											}
										}

										state = {
											name = b
											next = c
											duration = 0.5
											alpha = 0.4
											on_finish = "[PdxGuiTriggerAllAnimations('grandeur_bar_glow')]"

											modify_texture = {
												name = "horizontal_wipe"
												translate_uv = { -1 0 }
											}
										}

										state = {
											name = c
											next = a
											duration = 1
											alpha = 0
											delay = 1.5
										}
									}

									#### GLOW ####
									icon = {
										name = "glow"
										texture = "gfx/interface/progressbars/progressbar_side_glow.dds"
										size = { 100% 100% }
										color = { 0.854 0.964 0.694 1 }
										alpha = 0

										state = {
											name = grandeur_bar_glow
											next = b
											duration = 0.1
											alpha = 0.4
										}

										state = {
											name = b
											duration = 1
											alpha = 0
											on_finish = "[PdxGuiTriggerAllAnimations('grandeur_bar_arrow_glow')]"
										}
									}

									#### ARROW ####
									icon = {
										name = "arrow"
										size = { 20 20 }
										position = { 20 0 }
										mirror = horizontal
										parentanchor = vcenter|right
										color = { 0.909 0.988 0.792 1 }
										alpha = 0.2
										visible = "[NotEqualTo_CFixedPoint( CourtGrandeurData.GetBase, CourtGrandeurData.GetCurrent )]"
										texture = "gfx/interface/icons/flat_icons/window_back.dds"

										modify_texture = {
											name = "color"
											texture = "gfx/interface/colors/white.dds"
										}

										state = {
											name = grandeur_bar_arrow_glow
											next = b
											duration = 1
											alpha = 0.2
										}

										state = {
											name = b
											duration = 1
											alpha = 0.4
										}
									}
								}

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOtherScaled( FixedPointToFloat( CourtGrandeurData.GetBase ), '(float)100', '(int32)1000' )]"

								}
							}
						}

						progressbar_royal_court = {
							name = "current_value_bar_below_baseline"
							layoutpolicy_horizontal = expanding
							size = { @progress_bar_size 40 }

							value = "[CourtGrandeurData.GetCurrent]"
							min = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MIN' )]"
							max = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MAX' )]"

							noprogresstexture = "gfx/interface/progressbars/blank.dds"
							visible = "[Not( GreaterThan_CFixedPoint( CourtGrandeurData.GetCurrent, CourtGrandeurData.GetBase ) )]"
							alpha = "[Select_float( CourtAmenitiesWindow.HasChangedAnyAmenity, '(float)0.7', '(float)1.0' )]"

							marker = {
								name = "current_value"
								widget = {
									icon = {
										size = { 25 36 }
										position = { -20 2 }
										texture = "gfx/interface/progressbars/progressbar_center_glow.dds"
										color = { 0.75 0.89 0.97 0.9 }
									}
									icon = {
										name = "current_value_divider"
										size = { 12 50 }
										position = { -5 -5 }
										texture = "gfx/interface/window_roco_grandeur/grandeur_bar_base_level.dds"
									}
								}
							}
						}

						progressbar_royal_court = {
							name = "current_value_bar_meeting_baseline"
							layoutpolicy_horizontal = expanding
							size = { @progress_bar_size 40 }

							progresstexture = "gfx/interface/progressbars/progress_grandeur_decrease.dds"

							value = "[CourtGrandeurData.GetCurrent]"
							min = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MIN' )]"
							max = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MAX' )]"

							noprogresstexture = "gfx/interface/progressbars/blank.dds"
							visible = "[GreaterThan_CFixedPoint( CourtGrandeurData.GetCurrent, CourtGrandeurData.GetBase )]"
							alpha = "[Select_float( CourtAmenitiesWindow.HasChangedAnyAmenity, '(float)0.7', '(float)1.0' )]"

							marker = {
								name = "current_value"
								widget = {
									icon = {
										size = { 25 36 }
										position = { -20 2 }
										texture = "gfx/interface/progressbars/progressbar_center_glow.dds"
										color = { 0.96 0.76 0.76 0.9 }
									}

									icon = {
										name = "current_value_divider"
										size = { 12 50 }
										position = { -5 -5 }
										texture = "gfx/interface/window_roco_grandeur/grandeur_bar_base_level.dds"
									}
								}
							}

							#### GRANDEUR BAR ANIMATION DECREASE ####
							hbox = {
								margin = { 0 2 }
								visible = "[GreaterThan_CFixedPoint( CourtGrandeurData.GetCurrent, CourtGrandeurData.GetBase )]"

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( FixedPointToFloat( CourtGrandeurData.GetBase ), '(float)100', '(int32)1000' )]"
								}

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( FixedPointToFloat( Subtract_CFixedPoint( CourtGrandeurData.GetCurrent, CourtGrandeurData.GetBase ) ), '(float)100', '(int32)1000' )]"

									#### HORIZONTAL WIPE ####
									icon = {
										size = { 100% 100% }
										parentanchor = vcenter
										texture = "gfx/interface/colors/white.dds"
										color = { 0.988 0.776 0.690 1 }
										alpha = 0

										modify_texture = {
											name = "horizontal_wipe"
											texture = "gfx/interface/progressbars/progressbar_center_glow_white_decrease.dds"
											blend_mode = alphamultiply
										}

										state = {
											name = a
											next = b
											trigger_on_create = yes
											duration = 0
											alpha = 0

											modify_texture = {
												name = "horizontal_wipe"
												translate_uv = { -1 0 }
											}
										}

										state = {
											name = b
											next = c
											duration = 0.5
											alpha = 0.4
											on_finish = "[PdxGuiTriggerAllAnimations('grandeur_bar_glow')]"

											modify_texture = {
												name = "horizontal_wipe"
												translate_uv = { 1 0 }
											}
										}

										state = {
											name = c
											next = a
											duration = 1
											alpha = 0
											delay = 1.5
										}
									}

									#### GLOW ####
									icon = {
										name = "glow"
										texture = "gfx/interface/progressbars/progressbar_side_glow.dds"
										size = { 100% 100% }
										color = { 0.988 0.776 0.690 1 }
										alpha = 0
										mirror = horizontal

										state = {
											name = grandeur_bar_glow
											next = b
											duration = 0.1
											alpha = 0.4
										}

										state = {
											name = b
											duration = 1
											alpha = 0
											on_finish = "[PdxGuiTriggerAllAnimations('grandeur_bar_arrow_glow')]"
										}
									}

									#### ARROW ####
									icon = {
										name = "arrow"
										size = { 20 20 }
										parentanchor = vcenter|right
										position = { 22 0 }
										color = { 0.988 0.776 0.690 1 }
										alpha = 0.2
										visible = "[NotEqualTo_CFixedPoint( CourtGrandeurData.GetBase, CourtGrandeurData.GetCurrent )]"
										texture = "gfx/interface/icons/flat_icons/window_back.dds"

										modify_texture = {
											name = "color"
											texture = "gfx/interface/colors/white.dds"
										}

										state = {
											name = grandeur_bar_arrow_glow
											next = b
											duration = 1
											alpha = 0.2
										}

										state = {
											name = b
											duration = 1
											alpha = 0.4
										}
									}
								}

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOtherScaled( FixedPointToFloat( CourtGrandeurData.GetCurrent ), '(float)100', '(int32)1000' )]"
								}
							}
						}

						progressbar_royal_court = {
							name = "above_base_level"
							size = { @progress_bar_size 40 }
							value = "[CourtGrandeurData.GetBase]"
							min = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MIN' )]"
							max = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MAX' )]"

							noprogresstexture = "gfx/interface/progressbars/blank.dds"
							visible = "[GreaterThan_CFixedPoint( CourtGrandeurData.GetCurrent, CourtGrandeurData.GetBase )]"
							alpha = "[Select_float( CourtAmenitiesWindow.HasChangedAnyAmenity, '(float)0.7', '(float)1.0' )]"

							marker = {
								name = "current_value"
								widget = {
									icon = {
										size = { 25 36 }
										position = { -20 2 }
										texture = "gfx/interface/progressbars/progressbar_center_glow.dds"
										color = { 0.75 0.89 0.97 0.9 }
									}
								}
							}
						}

						progressbar = {
							name = "new_base_level"
							size = { @progress_bar_size 40 }
							value = "[CourtAmenitiesWindow.GetNewGrandeurBaseline]"
							min = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MIN' )]"
							max = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MAX' )]"

							progresstexture = "gfx/interface/progressbars/blank.dds"
							noprogresstexture = "gfx/interface/progressbars/blank.dds"
							visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"


							marker = {
								name = "current_value"
								widget = {
									icon = {
										size = { 25 36 }
										position = { -20 2 }
										texture = "gfx/interface/progressbars/progressbar_center_glow.dds"
										color = { 0.9 0.9 0.9 1 }
									}
								}
							}
						}

						### Placeholder TIT-28275 Grandeur is above expectations
						# hbox = {
						# 	visible = "[GreaterThan_CFixedPoint( CourtGrandeurData.GetChangeTowardsBase, '(CFixedPoint)0' )]"

						# 	icon_flat_standard = {
						# 		size = { 20 20 }
						# 		mirror = horizontal
						# 		texture = "gfx/interface/icons/flat_icons/window_back.dds"
						# 	}
						# }

						### Placeholder TIT-28275 When changing Amenities that causes the Grandeur to change
						### from increasing to decreasing, or vice versa,
						### trigger an animation with a specific name. ie. "animation_amenities_change"

						### Note it only trigger is there is a change in increasing / decreasing
						### changing from already increasing to increasing will not trigger the animation
						#hbox = {
						#	icon_flat_standard = {
						#		size = { 25 25 }
						#		texture = "gfx/interface/icons/symbols/icon_arrow_up.dds"
						#		alpha = 0
						#		state = {
						#			name = "animation_amenities_change"
						#			using = Animation_FadeIn_Standard
						#			next = "fade_out"
						#		}
						#		state = {
						#			name = "fade_out"
						#			using = Animation_FadeOut_Standard
						#		}
						#	}
						#}

						### dividers ###
						flowcontainer = {
							name = "level_dividers"
							position = { 0 6 }
							allow_outside = yes
							spacing = @progress_bar_spacing

							datamodel = "[CourtGrandeurWindow.GetLevels]"

							item = {
								widget = {
									name = "level_divider"
									size = { 0 30 }
									allow_outside = yes

									icon = {
										visible = "[CourtGrandeurLevel.ShouldShow]"
										size = { 3 36 }
										position = { 0 14 }
										widgetanchor = center
										texture = "gfx/interface/colors/white.dds"
										color = { 1 1 1 1 }
										alpha = 0.2
										spriteType = Corneredtiled

										## EDGE FADE
										modify_texture = {
											texture = "gfx/interface/component_masks/mask_edge_3px.dds"
											spriteType = Corneredtiled
											spriteborder = { 4 4 }
											blend_mode = alphamultiply
										}

										### SCRATCHES
										modify_texture = {
											texture = "gfx/interface/component_masks/mask_scratches.dds"
											spriteType = Corneredtiled
											spriteborder = { 0 0 }
											blend_mode = alphamultiply
										}
									}
								}
							}
						}

						icon = {
							name = "grandeur_bar_bracket_left"
							texture = "gfx/interface/window_roco_grandeur/grandeur_bar_bracket_left.dds"
							size = { 29 60 }
							position = { -10 -10 }
							parentanchor = left
						}

						icon = {
							name = "grandeur_bar_bracket_right"
							texture = "gfx/interface/window_roco_grandeur/grandeur_bar_bracket_right.dds"
							size = { 29 60 }
							position = { 10 -10 }
							parentanchor = right
						}
					}

					### levels ###
					flowcontainer = {
						name = "level_items"
						parentanchor = top|hcenter
						position = { 0 -28 }
						spacing = @progress_bar_spacing

						datamodel = "[CourtGrandeurWindow.GetLevels]"
						allow_outside = yes
						ignoreinvisible = no

						item = {
							widget = {
								name = "level_item"
								size = { 0 20 }
								allow_outside = yes
								visible = "[CourtGrandeurLevel.ShouldShow]"

								### Expected grandeur level ###
								widget = {
									size = { 60 80 }
									position = { 0 10 }
									widgetanchor = center

									icon = {
										name = "highlight_current_level"
										size = { 80 80 }
										position = { 0 -10 }
										parentanchor = center
										texture = "gfx/interface/window_roco_grandeur/pin_highlight.dds"
										visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

										state = {
											name = _show
											using = Animation_Curve_Default
											duration = 0.3
											alpha = 0.7
										}

										state = {
											name = _hide
											using = Animation_Curve_Default
											duration = 0.6
											alpha = 0
										}

										state = {
											name = "a"
											next = "b"
											trigger_on_create = yes
											alpha = 0.7

											modify_texture = {
												name = "glow_1"
												rotate_uv = 0
											}

											modify_texture = {
												name = "glow_2"
												rotate_uv = 0
											}
										}

										state = {
											name = "b"
											next = "a"
											duration = 7

											modify_texture = {
												name = "glow_1"
												rotate_uv = 360
											}

											modify_texture = {
												name = "glow_2"
												rotate_uv = 360
											}
										}

										modify_texture = {
											name = "glow_1"
											texture = "gfx/interface/component_masks/mask_glow.dds"
											blend_mode = alphamultiply
										}

										modify_texture = {
											name = "glow_2"
											texture = "gfx/interface/component_masks/mask_glow.dds"
											blend_mode = alphamultiply
											mirror = horizontal
										}
									}

									widget = {
										name = "expected_grandeur_level"
										size = { 30 48 }
										allow_outside = yes
										parentanchor = bottom|hcenter

										### Expected grandeur pin
										icon = {
											framesize = { 96 96 }
											size = { 48 48 }
											parentanchor = bottom|hcenter
											position = { 0 5 }
											visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetMinimumExpectedLevel )]"
											frame = "[Select_int32( Not(EqualTo_int32(CourtGrandeurData.GetCurrentLevel, CourtGrandeurLevel.GetValue)), Select_int32( LessThan_int32(CourtGrandeurData.GetCurrentLevel, CourtGrandeurLevel.GetValue), '(int32)1', '(int32)2' ), '(int32)3' )]"
											texture = "gfx/interface/window_roco_grandeur/pin_expected_grandeur_bg.dds"
										}

										icon = {
											framesize = { 70 70 }
											size = { 35 35 }
											parentanchor = bottom|hcenter
											position = { 0 0 }
											visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetMinimumExpectedLevel )]"
											frame = "[BoolTo1And2( LessThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel ) )]"
											texture = "gfx/interface/window_roco_grandeur/pin_expected_grandeur_icon.dds"
										}

										warning_icon = {
											size = { 25 25 }
											parentanchor = top|hcenter
											position = { 0 -52 }
											allow_outside = yes
											visible = "[And(EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetMinimumExpectedLevel ), LessThan_int32( CourtGrandeurData.GetCurrentLevel, CourtGrandeurData.GetMinimumExpectedLevel ) )]"
										}

										tooltipwidget = {
											court_grandeur_level_tooltip = {}
										}
									}
								}

								widget = {
									name = "level_backgrounds"
									size = { 60 60 }
									widgetanchor = center

									### Level background level 1
									icon_grandeur_level = {
										texture = "gfx/interface/window_roco_grandeur/pin_grandeur_rank_01.dds"
										visible = "[LessThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, '(int32)4' )]"
									}

									### Level background level 2
									icon_grandeur_level = {
										texture = "gfx/interface/window_roco_grandeur/pin_grandeur_rank_02.dds"
										visible = "[GreaterThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, '(int32)5' )]"
									}

									### Level background level 3
									icon_grandeur_level = {
										texture = "gfx/interface/window_roco_grandeur/pin_grandeur_rank_03.dds"
										visible = "[GreaterThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, '(int32)8' )]"
									}

									tooltipwidget = {
										court_grandeur_level_tooltip = {}
									}
								}

								# In grace period, and this is either the start or end level
								widget = {
									visible = "[And( NotEqualTo_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetCurrentLevel ), And( GreaterThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevelIgnoreGrace ), LessThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel ) ) )]"
									size = { 60 60 }
									widgetanchor = center

									icon = {
										size = { 20 20 }
										parentanchor = top|right
										position = { -8 5 }
										texture = "gfx/interface/icons/icon_time.dds"
									}
								}

								### LEVEL ###
								text_single = {
									text = "[CourtGrandeurLevel.GetValue]"
									align = center
									widgetanchor = center
									parentanchor = center
									position = { 0 -13 }
								}
							}
						}
					}

					text_single = {
						text = "[GetDefine( 'NRoyalCourt', 'COURT_GRANDEUR_MAX' )|V0]"
						align = left
						parentanchor = right
						position = { -5 4 }
						using = Font_Size_Medium
					}
				}

				### WORLD RANKING ###
				flowcontainer = {
					parentanchor = bottom|right
					margin_bottom = 24
					margin_right = 20

					text_single = {
						text = "ROYAL_COURT_WINDOW_WORLD_RANK"
						align = right
						using = Font_Size_Small
						default_format = "#underline"
						tooltip = "[CourtGrandeurWindow.GetWorldRankTooltip]"
					}
				}
			}

			widget = {
				parentanchor = bottom
				size = { 100% 200 }

				flowcontainer = {
					name = "type_and_language_tutorial_uses_this"
					direction = vertical
					parentanchor = left
					spacing = 15
					margin_left = 20

					###### COURT TYPE #######
					flowcontainer_change_court_component = {
						name = "court_types"
						datacontext = "[RoyalCourtWindow.AccessCourtTypeWindow]"

						blockoverride "component_label"
						{
							text = "COURT_TYPE_LEVEL_MODIFIER"
						}

						blockoverride "component_button"
						{
							visible = "[Character.IsLocalPlayer]"

							text = "[CourtTypeWindow.GetActiveCourtTypeItem.GetNameNoTooltip]"
							tooltip = "TT_COURT_TYPE_BUTTON"
							onclick = "[CourtTypeWindow.ToggleShowHideCourtTypeWindow]"
							align = left
							default_format = "#high"
							margin_bottom = 5
						}

						blockoverride "component_text"
						{
							visible = "[Not( Character.IsLocalPlayer )]"
							text = "[CourtTypeWindow.GetActiveCourtTypeItem.GetNameNoTooltip]"
							tooltip = "[CourtTypeWindow.GetActiveCourtTypeItem.GetDescription]"
						}
					}

					###### COURT LANGUAGE #######
					flowcontainer_change_court_component = {
						name = "court_language"
						datacontext = "[Character.GetCulture]"
						datacontext = "[Character.GetCourtLanguage]"

						blockoverride "component_label"
						{
							text = "COURT_LANGUAGE_LABEL"
						}

						blockoverride "component_button"
						{
							enabled = yes
							text = "[CulturePillar.GetNameNoTooltip]"
							tooltip = "COURT_LANGUAGE_OPEN_VIEW_TOOLTIP"
							onclick = "[RoyalCourtWindow.CloseToLanguageWindow]"
							onclick = "[ToggleGameViewData( 'language', CulturePillar.Self )]"
							align = left
							default_format = "#high"
							margin_bottom = 5
						}
					}
				}

				###### COURT AMENITIES #######
				widget = {
					name = "amenities_tutorial_uses_this"
					size = { 1000 200 }
					parentanchor = center

					widget = {
						name = "court_amenity_line_vertical"
						parentanchor = top|hcenter
						position = { 5 -30 }
						size = { 15 46 }

						icon = {
							texture = "gfx/interface/window_roco_grandeur/line_vertical_court_amenities.dds"
							size = { 15 36 }
						}
					}

					widget = {
						name = "court_amenity_fashion"
						parentanchor = left|top
						position = { -30 0 }
						size = { 307 82}

						widget_court_amenity_left = {
							datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_fashion' )]"
						}
					}

					widget = {
						name = "court_amenity_line_horizontal_left"
						parentanchor = center
						position = { -146 -50 }
						size = { 46 15 }

						icon = {
							texture = "gfx/interface/window_roco_grandeur/line_horizontal_court_amenities.dds"
							size = { 48 15 }
						}
					}

					### Label & cost ###
					widget = {
						parentanchor = top|hcenter
						position = { 5 10 }
						size = { 180 75 }

						background = {
							margin = { 40 8 }
							using = Background_Area
						}

						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							expand = {
								layoutpolicy_vertical = expanding
							}

							text_single = {
								text =  COURT_AMENITIES_LABEL
								align = center
								using = Font_Size_Medium
								margin_top = -3
							}

							text_single = {
								text = "COURT_AMENITIES_EXPENSES_MONTHLY_COST"
								align = center
								margin_bottom = 6
								tooltip = "[CourtAmenitiesWindow.GetMonthlyCostBreakdown]"
							}

							text_single = {
								text = "COURT_AMENITIES_EXPENSES_NEW_MONTHLY_COST"
								align = center
								margin_bottom = 8
								margin_top = -6
								default_format = "#high"
								visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"
							}

							expand = {
								layoutpolicy_vertical = expanding
							}
						}
					}

					widget = {
						name = "court_amenity_line_horizontal_right"
						parentanchor = center
						position = { 152 -50}
						size = { 46 15 }

						icon = {
							texture = "gfx/interface/window_roco_grandeur/line_horizontal_court_amenities.dds"
							size = { 50 15 }
							mirror = horizontal
						}
					}

					widget = {
						name = "court_amenity_lodgings"
						parentanchor = right
						position = { -20 0 }
						size = { 307 82}

						widget_court_amenity_right = {
							datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_lodging_standards' )]"

							blockoverride "amenity_icon_texture"
							{
								texture = "gfx/interface/window_roco_grandeur/icon_amenity_lodgings.dds"
							}
						}
					}

					widget = {
						name = "court_amenity_dining"
						parentanchor = bottom|left
						position = { 98 -20 }
						size = { 307 82}

						allow_outside = yes

						widget_court_amenity_left = {
							datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_food_quality' )]"

							blockoverride "amenity_icon_texture"
							{
								texture = "gfx/interface/window_roco_grandeur/icon_amenity_dining.dds"
							}
						}
					}

					widget = {
						name = "court_amenity_lines_bottom"
						parentanchor = center
						position = { 5 -12}
						size = { 42 78 }

						icon = {
							parentanchor = center
							widgetanchor = right
							position = { -5 1 }
							size = { 42 62 }
							texture = "gfx/interface/window_roco_grandeur/line_corner_court_amenities.dds"
						}

						icon = {
							parentanchor = center
							widgetanchor = left
							position = { 5 1 }
							size = { 42 62 }
							mirror = horizontal
							texture = "gfx/interface/window_roco_grandeur/line_corner_court_amenities.dds"
						}
					}

					widget = {
						name = "court_amenity_servants"
						parentanchor = bottom|right
						position = { -148 -20 }
						size = { 307 82}

						allow_outside = yes

						widget_court_amenity_right = {
							datacontext = "[CourtAmenitiesWindow.GetCategory( 'court_servants' )]"
						}

						blockoverride "amenity_icon_texture"
						{
							texture = "gfx/interface/window_roco_grandeur/icon_amenity_servants.dds"
						}
					}
				}

				widget = {
					visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"
					parentanchor = vcenter|right
					size = { 350 210 }
					position = { -20 0 }

					using = Animation_ShowHide_Quick

					flowcontainer = {
						direction = vertical
						parentanchor = right
						spacing = 10
						margin_right = 17
						margin_top = 8
						margin_bottom = 14
						visible = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"

						background = {
							using = Background_Area_Dark
							alpha = 0.8

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
								blend_mode = alphamultiply
							}
						}

						flowcontainer = {
							icon = {
								parentanchor = vcenter|left
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
								size = { 30 30 }
							}

							text_multi = {
								name = "apply_warning"
								text = "COURT_AMENITIES_APPLY_WARNING"
								autoresize = yes
								max_width = 260
								align = center
								default_format = "#weak"
								margin_left = 5
								fontsize = 14
							}
						}

						###### APPLY #######
						button_primary_big = {
							text = APPLY
							size = { 280 40 }

							onclick = "[CourtAmenitiesWindow.OpenApplySettingsConfirmation]"
							enabled = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"

							tooltip = "AMENITIES_APPLY_TOOLTIP"
						}

						###### RESET #######
						button_standard = {
							text = RESET
							size = { 280 30 }

							onclick = "[CourtAmenitiesWindow.ResetSettings]"
							enabled = "[CourtAmenitiesWindow.HasChangedAnyAmenity]"

							tooltip = "AMENITIES_RESET_TOOLTIP"
						}
					}
				}
			}

			widget_court_amenity_changed = {
				visible = "[CourtAmenitiesWindow.HasAppliedAmenityChanges]"
				parentanchor = center
				position = { 0 -450 }
			}
		}
	}

	type widget_court_amenity_right = widget
	{
		size = { 368 98 }

		background = {
			using = Background_Area_With_Header

			modify_texture = {
				texture = "gfx/interface/window_roco_grandeur/mask_court_amenity_left.dds"
				blend_mode = alphamultiply
			}
		}

		widget = {
			name = "radio_button_bar"
			size = { 320 98 }

			icon = {
				name = "radio_button_bg"
				texture = "gfx/interface/window_roco_grandeur/amenity_level_bg.dds"
				size = { 256 54 }
				position = { 56 27 }
			}

			flowcontainer = {
				margin_left = 58
				margin_top = 6

				text_single = {
					text = "[CourtAmenitiesWindow.GetCurrentSettingName( CourtAmenitiesCategoryItem.Self )]"
					default_format = "#high"
					align = left
					margin_right = 5
					margin_top = -2
				}

			}

			text_single = {
				name = "current_level"
				# Account for levels being zero indexed
				text = "[Add_int32( CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ), '(int32)1' )]"
				align = center
				widgetanchor = center
				position = { 84 51 }
				using = Font_Size_Medium
			}

			widget = {
				name = "progressbar_widget"
				size = { 200 10 }
				position = { 120 50 }

				progressbar_standard = {
					name = "progressbar_court_amenities"
					layoutpolicy_horizontal = expanding
					size = { 150 10 }
					min = 0
					max = 100
					value = 0
				}
			}

			flowcontainer = {
				datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"
				spacing = 8
				margin_left = 110
				margin_top = 39

				item = {
					button_radio = {
						datacontext = "[CourtAmenitiesSettingItem.GetSetting]"
						size = { 30 30 }

						enabled = "[CourtAmenitiesWindow.CanApplyCourtAmenitySetting( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self )]"
						onclick = "[CourtAmenitiesWindow.SelectSetting( CourtAmenitiesSettingItem.AccessSelf )]"

						frame = 1

						button_radio = {
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							frame = 2

							alpha = 0.5
							alwaystransparent = yes
						}

						icon = {
							framesize = { 120 120 }
							frame = 1
							size = { 70 70 }
							position = { 1 1 }
							parentanchor = center
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							texture = "gfx/interface/window_roco_grandeur/radio_button_decoration.dds"
						}

						button_radio = {
							visible = "[And( CourtAmenitiesSettingItem.IsSelected, NotEqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) )]"
							frame = 2
							alwaystransparent = yes
						}

						tooltipwidget = {
							court_amenity_setting_tooltip_contents = {
								blockoverride "warning_description_text"
								{
									text = "[CourtAmenitiesWindow.GetSettingBlockerTooltip( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self  )]"
								}
							}
						}
						using = tooltip_ne
					}
				}
			}
		}

		icon= {
			name = "banner_icon"
			framesize = { 160 160 }
			size = { 94 94 }
			position = { -18 0 }

			block "amenity_icon_texture"
			{
				texture = "gfx/interface/window_roco_grandeur/icon_amenity_fashion.dds"
			}
		}
	}

	type widget_court_amenity_left = widget
	{
		size = { 368 98 }

		background = {
			using = Background_Area_With_Header

			modify_texture = {
				texture = "gfx/interface/window_roco_grandeur/mask_court_amenity_right.dds"
				blend_mode = alphamultiply
			}
		}

		widget = {
			name = "radio_button_bar"
			size = { 320 98 }

			icon = {
				name = "radio_button_bg"
				texture = "gfx/interface/window_roco_grandeur/amenity_level_bg.dds"
				size = { 256 54 }
				position = { 56 27 }
			}

			flowcontainer = {
				parentanchor = right
				margin_top = 6

				text_single = {
					text = "[CourtAmenitiesWindow.GetCurrentSettingName( CourtAmenitiesCategoryItem.Self )]"
					default_format = "#high"
					align = nobaseline
					margin = { 5 0 }
				}

				spacer = {
					size = { 4 0 }
				}


			}

			text_single = {
				name = "current_level"
				# Account for levels being zero indexed
				text = "[Add_int32( CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ), '(int32)1' )]"
				align = center
				widgetanchor = center
				position = { 84 51 }
				using = Font_Size_Medium
			}

			widget = {
				name = "progressbar_widget"
				size = { 200 10 }
				position = { 120 50 }

				progressbar_standard = {
					name = "progressbar_court_amenities"
					layoutpolicy_horizontal = expanding
					size = { 150 10 }
					min = 0
					max = 100
					value = 0
				}
			}


			flowcontainer = {
				datamodel = "[CourtAmenitiesCategoryItem.AccessPossibleSettings]"
				spacing = 8
				margin_left = 110
				margin_top = 39

				item = {
					button_radio = {
						datacontext = "[CourtAmenitiesSettingItem.GetSetting]"
						size = { 30 30}

						enabled = "[CourtAmenitiesWindow.CanApplyCourtAmenitySetting( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self )]"
						onclick = "[CourtAmenitiesWindow.SelectSetting( CourtAmenitiesSettingItem.AccessSelf )]"

						frame = 1

						button_radio = {
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							frame = 2

							alpha = 0.5
							alwaystransparent = yes
						}

						icon = {
							framesize = { 120 120 }
							frame = 1
							size = { 70 70 }
							position = { 1 1 }
							parentanchor = center
							visible = "[EqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) ]"
							texture = "gfx/interface/window_roco_grandeur/radio_button_decoration.dds"
						}

						button_radio = {
							visible = "[And( CourtAmenitiesSettingItem.IsSelected, NotEqualTo_int32( CourtAmenitiesSettingItem.GetLevel, CourtAmenitiesWindow.GetCurrentSettingLevel( CourtAmenitiesCategoryItem.Self ) ) )]"
							frame = 2
							alwaystransparent = yes
						}

						tooltipwidget = {
							court_amenity_setting_tooltip_contents = {
								blockoverride "warning_description_text"
								{
									text = "[CourtAmenitiesWindow.GetSettingBlockerTooltip( CourtAmenitiesCategoryItem.Self, CourtAmenitiesSettingItem.Self  )]"
								}
							}
						}
						using = tooltip_ne
					}
				}
			}
		}

		icon = {
			name = "banner_icon"
			framesize = { 160 160 }
			frame = 1
			size = { 94 94 }
			position = { 292 0 }

			block "amenity_icon_texture"
			{
				texture = "gfx/interface/window_roco_grandeur/icon_amenity_fashion.dds"
			}
		}
	}

	type court_grandeur_level_header_tooltip = object_tooltip_pop_out
	{
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = COURT_GRANDEUR_CURRENT_LEVEL_TITLE
			}
		}

		blockoverride "concept_link"
		{
			text = "[court_grandeur_level|E]"
		}

		blockoverride "description_text"
		{
			text = COURT_GRANDEUR_CURRENT_LEVEL_TOOLTIP
		}
	}

	type court_grandeur_level_tooltip = object_tooltip_pop_out
	{
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = COURT_GRANDEUR_LEVEL_TITLE
			}
		}

		blockoverride "concept_link"
		{
			text = "[court_grandeur_level|E]"
		}

		blockoverride "description_text"
		{
			text = COURT_GRANDEUR_LEVEL_TOOLTIP
		}

		blockoverride "extra_data"
		{
			vbox = {
				layoutpolicy_horizontal	= expanding

				cooltip_paragraph = {
					visible = "[LessThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_ACTIVE_LEVEL
				}

				cooltip_paragraph = {
					visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_CURRENT_LEVEL
				}

				cooltip_paragraph = {
					visible = "[GreaterThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_INACTIVE_LEVEL
				}

				cooltip_paragraph = {
					visible = "[And( NotEqualTo_int32( CourtGrandeurData.GetCurrentLevelIgnoreGrace, CourtGrandeurData.GetCurrentLevel ), And( GreaterThan_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevelIgnoreGrace ), LessThanOrEqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetCurrentLevel ) ) )]"

					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_CURRENT_LEVEL_GRACE_PERIOD
				}
			}
		}

		blockoverride "extra_data_after_description"
		{
			vbox = {
				visible = "[EqualTo_int32( CourtGrandeurLevel.GetValue, CourtGrandeurData.GetMinimumExpectedLevel )]"
				layoutpolicy_horizontal	= expanding

				spacer = {
					size = { 10 10 }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = COURT_GRANDEUR_EXPECTED_LEVEL
					default_format = "#bold"
				}

				court_grandeur_expected_level_vbox = {}
			}
		}
	}

	type court_grandeur_progress_bar_tooltip = object_tooltip_pop_out
	{
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = COURT_GRANDEUR_PROGRESS_TOOLTIP_HEADER
				align = nobaseline
			}
		}

		blockoverride "concept_link" {}

		blockoverride "extra_data"
		{
			cooltip_paragraph = {
				datacontext = "[CourtGrandeurWindow.GetBaseBreakdownTooltip]"
				layoutpolicy_horizontal	= expanding
				text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE

				tooltip_visible = "[ValueBreakdown.HasTooltip]"
				tooltipwidget = { widget_value_breakdown_tooltip = {} }
			}

			cooltip_paragraph = {
				datacontext = "[CourtGrandeurWindow.GetChangeTowardsBaseBreakdownTooltip]"
				visible = "[NotEqualTo_CFixedPoint( CourtGrandeurData.GetChangeTowardsBase, '(CFixedPoint)0' )]"
				layoutpolicy_horizontal	= expanding
				text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE_CHANGE

				tooltip_visible = "[ValueBreakdown.HasTooltip]"
				tooltipwidget = { widget_value_breakdown_tooltip = {} }
			}

			cooltip_paragraph = {
				layoutpolicy_horizontal	= expanding
				visible = "[NotEqualTo_int32( CourtGrandeurData.GetDaysUntilAtBase, '(int32)0' )]"
				text = COURT_GRANDEUR_PROGRESS_TOOLTIP_BASELINE_TIME
			}

			spacer = {
				size = { 10 10 }
			}

			court_grandeur_expected_level_vbox = {}
		}
	}

	type court_grandeur_expectations_tooltip = object_tooltip_pop_out
	{
		# datacontext = "[CourtGrandeurData.Self]"
		datacontext = "[GetCourtGrandeurDiffFromExpectedLevelModifier( CourtGrandeurData.GetDifferenceFromExpectedLevel )]"
		blockoverride "header_tt"
		{
			text_single = {
				margin = { 0 8 }
				text = "[StaticModifier.GetName|T]"
			}
		}

		blockoverride "concept_link"
		{
			text = "[court_grandeur_expectations|E]"
		}

		blockoverride "description_text"
		{
			text = COURT_GRANDEUR_EXPECTATIONS_TOOLTIP
		}
	}

	type flowcontainer_change_court_component = flowcontainer
	{
		direction = vertical
		spacing = 10

		flowcontainer = {
			margin_left = 5

			text_label_left = {
				block "component_label"
				{
					raw_text = "#D REPLACE ME#!"
				}
			}
		}

		container =  {
			button_standard = {
				size = { 300 45 }
				enabled = "[Character.IsLocalPlayer]"

				block "component_button"
				{
					raw_tooltip = "#D REPLACE ME#"
					raw_text = "#D REPLACE ME#"
				}

				button_change = {
					visible = "[Character.IsLocalPlayer]"
					parentanchor = right|vcenter
					position = { -10 0 }
					alwaystransparent = yes
					size = { 25 25 }
				}
			}

			text_single = {
				size = { 300 45 }
				autoresize = no
				margin = { 10 0 }
				align = nobaseline
				alwaystransparent = yes

				background = {
					using = Background_Area_Dark
				}

				block "component_text"
				{
					visible = no
				}
			}
		}
	}

	type widget_court_amenity_changed = widget {

		state = {
			name = _show
			next = "lingering_court_amenity_notification"

			scale = 1
			alpha = 1
			duration = 0.4
			bezier = { 0.5 0 1 0.5 }

			start_sound = {
				soundeffect = "event:/DLC/EP1/SFX/UI/Notifications/court_grandeur_amenity_icon_show"
			}
		}

		state = {
			name = "lingering_court_amenity_notification"
			delay = 3
			on_finish = "[CourtAmenitiesWindow.NotifyAmenityWidgetHidden]"
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.15
			bezier = { 0.5 0 1 0.5 }

			alpha = 0
			scale = 0
		}

		vbox = {
			set_parent_size_to_minimum = yes
			spacing = 0

			background = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
				color = { 0.1 0.1 0.1 1 }
				margin = { 0 10 }
				#spritetype = CorneredStretched
				#spriteborder = { 100 0 }

				using = Mask_Rough_Edges
			}

			text_single = {
				text = "COURT_AMENITIES_CHANGED_NOTIFICATION_HEADER"
				default_format = "#high"
				using = Font_Size_Big
				margin = { 100 0 }
			}

			spacer = {
				size = { 0 7 }
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
				size = { 0 5 }

				alpha = 0.4

				using = Color_Orange

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
					spritetype = CorneredStretched
					spriteborder = { 100 0 }

					blend_mode = alphamultiply
				}
			}

			spacer = {
				size = { 0 7 }
			}

			hbox = {
				datamodel = "[CourtAmenitiesWindow.GetCategories]"
				margin = { 300 0 }

				item = {
					hbox = {
						datamodel = "[CourtAmenitiesCategoryItem.GetPossibleSettings]"

						item = {
							widget = {
								visible = "[CourtAmenitiesSettingItem.WasSelected]"
								size = { 280 256 }

								widget = {
									parentanchor = center
									size = { 256 256 }

									icon = {
										parentanchor = center
										size = { 120% 120% }
										texture = "gfx/interface/colors/white.dds"
										using = Color_Bright_Yellow
										alpha = 0.15

										state = {
											name = "a"
											next = "b"
											trigger_on_create = yes
											alpha = 0.15

											modify_texture = {
												name = "glow_1"
												rotate_uv = 0
											}

											modify_texture = {
												name = "glow_2"
												rotate_uv = 0
											}
										}

										state = {
											name = "b"
											next = "a"
											duration = 15

											modify_texture = {
												name = "glow_1"
												rotate_uv = 360
											}

											modify_texture = {
												name = "glow_2"
												rotate_uv = 360
											}
										}

										modify_texture = {
											name = "glow_1"
											texture = "gfx/interface/component_masks/mask_glow.dds"
											blend_mode = alphamultiply
										}

										modify_texture = {
											name = "glow_2"
											texture = "gfx/interface/component_masks/mask_glow.dds"
											blend_mode = alphamultiply
											mirror = horizontal
										}
									}

									icon = {
										name = "amenity_background"
										size = { 100% 100% }
										texture = "gfx/interface/icons/amenities/court_amenity_background.dds"
									}

									icon = {
										name = "info_popup_image"
										size = { 100% 100% }
										texture = "[CourtAmenitiesSettingItem.GetSetting.GetIcon]"
									}

									text_single = {
										parentanchor = bottom|hcenter
										position = { 0 -5 }
										text = "[CourtAmenitiesSettingItem.GetSetting.GetName]"
										using = Font_Size_Medium
										default_format = "#high"
									}
								}
							}
						}
					}
				}
			}
		}
	}

	type icon_grandeur_level = icon {
		framesize = { 120 120 }
		size = { 60 60 }

		frame = "[Select_int32( Not(EqualTo_int32(CourtGrandeurData.GetCurrentLevel, CourtGrandeurLevel.GetValue)), Select_int32( LessThan_int32(CourtGrandeurData.GetCurrentLevel, CourtGrandeurLevel.GetValue), '(int32)1', '(int32)2' ), '(int32)3' )]"
	}
}
