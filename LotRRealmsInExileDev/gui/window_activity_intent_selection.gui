window = {
	name = "activity_intent_selection"
	datacontext = "[GetVariableSystem]"
	layer = middle
	allow_outside = yes
	size = { 1050 780 }
	position = { 26% 120 }

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Clear( 'activity_intent_selection_target_list' )]"
		position_y = 80
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_y = 200
	}

	vbox = {
		datacontext = "[ActivityIntentSelectionWindow.GetActivityType]"
		datacontext = "[ActivityIntentSelectionWindow.GetSelectedIntent]"
		size = { 100% 100% }

		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ACTIVITY_INTENT_SELECTION_HEADER"
			}
			blockoverride "button_close"
			{
				onclick = "[ActivityIntentSelectionWindow.Close]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			datacontext = "[GetIllustration( 'activity_intent_selection' )]"

			background = {
				texture = "[Illustration.GetTexture( GetPlayer.MakeScope )]"
				alpha = 0.3
				fittype = centercrop

				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}

			portrait_intent_selection = {
				datacontext = "[GetPlayer]"
				datacontext = "[ActivityIntentData.GetType]"
				visible = "[Not(EqualTo_string(ActivityType.GetKey,'activity_sorcery'))]" #LotR
				layoutpolicy_vertical = expanding

				alwaystransparent = yes
			}

			vbox = { #LotR
				ignoreinvisible = yes
				visible = "[EqualTo_string(ActivityType.GetKey,'activity_sorcery')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 8

				background = {
					using = Background_Area_Dark
					alpha = 0.8

					margin_left = 100

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}
				}
				
				text_single = {
					layoutpolicy_horizontal = expanding

					text = "LOTR_ACTIVITY_SELECT_SORCERY_SPELL"
					default_format = "#I"
					align = center|nobaseline

					margin = { 16 8 }

					button_back = {
						size = { 35 35 }
						position = { 10 -2 }
						visible = "[Or(VariableSystem.Exists( 'lotr_death_spells' ), Or(VariableSystem.Exists( 'lotr_deception_spells' ), VariableSystem.Exists( 'lotr_destruction_spells' )))]"
						onclick = "[VariableSystem.Clear( 'lotr_death_spells' )]"
						onclick = "[VariableSystem.Clear( 'lotr_deception_spells' )]"
						onclick = "[VariableSystem.Clear( 'lotr_destruction_spells' )]"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					divider_light = {
						layoutpolicy_horizontal = expanding

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
							blend_mode = alphamultiply
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[Not(Or(VariableSystem.Exists( 'lotr_death_spells' ), Or(VariableSystem.Exists( 'lotr_deception_spells' ), VariableSystem.Exists( 'lotr_destruction_spells' ))))]"
					button_standard = {
						size = { 200 50 }
						onclick = "[VariableSystem.Toggle( 'lotr_death_spells' )]"
						text_single = {
							text = search_death_spells_button
							layoutpolicy_horizontal = expanding
							parentanchor = center
							using = Font_Size_Medium
						}
					}
					button_standard = {
						size = { 200 50 }
						onclick = "[VariableSystem.Toggle( 'lotr_deception_spells' )]"
						text_single = {
							text = search_deception_spells_button
							layoutpolicy_horizontal = expanding
							parentanchor = center
							using = Font_Size_Medium
						}
					}
					button_standard = {
						size = { 200 50 }
						onclick = "[VariableSystem.Toggle( 'lotr_destruction_spells' )]"
						text_single = {
							text = search_destruction_spells_button
							layoutpolicy_horizontal = expanding
							parentanchor = center
							using = Font_Size_Medium
						}
					}
				}

				scrollbox = {
					name = "lotr_death_spell_selection"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[VariableSystem.Exists( 'lotr_death_spells' )]"
											allow_outside = yes

					minimumsize = { 0 570 }

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[GetTitleByKey('k_wastelands').MakeScope.Var('story_sorcery_spells').Story.MakeScope.GetList('death_spells')]"
							layoutpolicy_horizontal = expanding
							spacing = 5
							allow_outside = yes

							item = {
								widget = { # Divider
									size = { 200 75 }
									allow_outside = yes
									vbox = {
										allow_outside = yes
										text_single = {
											layoutpolicy_horizontal = expanding

											text = "[Localize(Concatenate(Scope.GetFlagName,'_name'))]"
											align = center
											background = {
												using = Background_Area_Dark
												margin = { 10 10}
												alpha = 1

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
													blend_mode = alphamultiply
												}
											}
										}
										widget = {
											allow_outside = yes
											hbox = {
												divider_light = {
													size = { 250 4 }

													using = Color_Orange

													modify_texture = {
														texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
														blend_mode = alphamultiply
													}
												}
											}
											widget = {
												size = { 250 35 }
												position = { -15 -15 }
												allow_outside = yes
												hbox = {
													allow_outside = yes
													button_radio = { #Button 1
														size = { 35 35 }
														frame = 1
														onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_01')).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_01')).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
															visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_01')).IsShown(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
														}
													}
													expand = {}
													button_radio = { #Button 2
														size = { 35 35 }
														frame = 1
														onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_02')).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_02')).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
															visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_02')).IsShown(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
														}
													}
													expand = {}
													button_radio = { #Button 3
														size = { 35 35 }
														frame = 1
														onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_03')).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_03')).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
															visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_03')).IsShown(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('spell_scope', MakeScopeFlag(Scope.GetFlagName) ).End)]"
														}
													}
												}
											}
										}
									}
								}
							}
						}
						spacer = { size = { 0 10 } }
						widget = {
							size = { 360 215 }
							background = {
								using = Background_Area_Dark
								alpha = 1
							}
							text_multi = {
								text = "activity_sorcery_effect_test"
								autoresize = yes
								max_width = 350
								parentanchor = center|top
								margin_top = 10
							}
						}
					}
					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_background_fade" {}
				}
				
				scrollbox = {
					name = "lotr_deception_spell_selection"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[VariableSystem.Exists( 'lotr_deception_spells' )]"

					minimumsize = { 0 570 }

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[GetTitleByKey('k_wastelands').MakeScope.Var('story_sorcery_spells').Story.MakeScope.GetList('deception_spells')]"
							layoutpolicy_horizontal = expanding
							spacing = 5

							item = {
								widget = { # Divider
									size = { 200 75 }
									vbox = {
										text_single = {
											layoutpolicy_horizontal = expanding

											text = "[Localize(Concatenate(Scope.GetFlagName,'_name'))]"
											align = center
											background = {
												using = Background_Area_Dark
												margin = { 10 10}
												alpha = 1

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
													blend_mode = alphamultiply
												}
											}
										}
										widget = {
											allow_outside = yes
											hbox = {
												divider_light = {
													size = { 250 4 }

													using = Color_Orange

													modify_texture = {
														texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
														blend_mode = alphamultiply
													}
												}
											}
											widget = {
												size = { 250 35 }
												position = { -15 -15 }
												hbox = {
													button_radio = {
														size = { 35 35 }
														frame = 1
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															alwaystransparent = yes
														}
													}
													expand = {}
													button_radio = {
														size = { 35 35 }
														frame = 1
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															alwaystransparent = yes
														}
													}
													expand = {}
													button_radio = {
														size = { 35 35 }
														frame = 1
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															alwaystransparent = yes
														}
													}
												}
											}
										}
									}
								}
							}
						}
						spacer = { size = { 0 10 } }
						widget = {
							size = { 360 215 }
							background = {
								using = Background_Area_Dark
								alpha = 1
							}
							text_multi = {
								text = "activity_sorcery_effect_test"
								autoresize = yes
								max_width = 350
								parentanchor = center|top
								margin_top = 10
							}
						}
					}
					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_background_fade" {}
				}

				scrollbox = {
					name = "lotr_destruction_spell_selection"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[VariableSystem.Exists( 'lotr_destruction_spells' )]"

					minimumsize = { 0 570 }

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[GetTitleByKey('k_wastelands').MakeScope.Var('story_sorcery_spells').Story.MakeScope.GetList('destruction_spells')]"
							layoutpolicy_horizontal = expanding
							spacing = 5

							item = {
								widget = { # Divider
									size = { 200 75 }
									vbox = {
										text_single = {
											layoutpolicy_horizontal = expanding

											text = "[Localize(Concatenate(Scope.GetFlagName,'_name'))]"
											align = center
											background = {
												using = Background_Area_Dark
												margin = { 10 10}
												alpha = 1

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
													blend_mode = alphamultiply
												}
											}
										}
										widget = {
											allow_outside = yes
											hbox = {
												divider_light = {
													size = { 250 4 }

													using = Color_Orange

													modify_texture = {
														texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
														blend_mode = alphamultiply
													}
												}
											}
											widget = {
												size = { 250 35 }
												position = { -15 -15 }
												hbox = {
													button_radio = {
														size = { 35 35 }
														frame = 1
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															alwaystransparent = yes
														}
													}
													expand = {}
													button_radio = {
														size = { 35 35 }
														frame = 1
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															alwaystransparent = yes
														}
													}
													expand = {}
													button_radio = {
														size = { 35 35 }
														frame = 1
														button_radio = {
															size = { 35 35 }
															frame = 2
															alpha = 1
															alwaystransparent = yes
														}
													}
												}
											}
										}
									}
								}
							}
						}
						spacer = { size = { 0 10 } }
						widget = {
							size = { 360 215 }
							background = {
								using = Background_Area_Dark
								alpha = 1
							}
							text_multi = {
								text = "activity_sorcery_effect_test"
								autoresize = yes
								max_width = 350
								parentanchor = center|top
								margin_top = 10
							}
						}
					}
					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_background_fade" {}
				}
			
			}


			vbox = {
				name = "intent_selection_step_1"
				visible = "[Not(VariableSystem.Exists( 'activity_intent_selection_target_list' ))]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 8

				background = {
					using = Background_Area_Dark
					alpha = 0.8

					margin_left = 100

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "ACTIVITY_INTENT_SELECTION_TEXT"
					default_format = "#I"
					align = center|nobaseline

					margin = { 16 8 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					divider_light = {
						layoutpolicy_horizontal = expanding

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
							blend_mode = alphamultiply
						}
					}
				}

				scrollbox = {
					name = "host_intents"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					minimumsize = { 0 200 }

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[ActivityIntentSelectionWindow.GetPotentialIntents]"
							layoutpolicy_horizontal = expanding
							spacing = 4

							item = {
								button_standard = {
									layoutpolicy_horizontal = expanding
									size = { 0 50 }

									onclick = "[ActivityIntentSelectionWindow.SelectIntent( ActivityIntent.Self )]"
									onclick = "[VariableSystem.ClearIf( 'activity_intent_selection_target_list', Not( ActivityIntent.HasTarget ) )]"
									enabled = "[ActivityIntentSelectionWindow.CanPickIntent( ActivityIntent.Self )]"

									tooltip = "ACTIVITY_CHANGE_INTENT_TOOLTIP"

									down = "[ObjectsEqual( ActivityIntentData.GetType, ActivityIntent.Self )]"

									alwaystransparent = "[ObjectsEqual( ActivityIntentData.GetType, ActivityIntent.Self )]"

									hbox = {
										size = { 100% 100% }
										margin = { 8 0 }
										spacing = 8

										highlight_icon = {
											size = { 40 40 }
											texture = "[ActivityIntent.GetIcon]"

											modify_texture = {
												texture = "gfx/interface/colors/colors_textured.dds"
												blend_mode = normal
												framesize = { 96 96 }

												block "master_color_frame" {
													frame = 1
												}
											}
										}

										text_single = {
											text = "[ActivityIntent.GetName]"
											align = nobaseline
											default_format = "#clickable"
											using = Font_Size_Medium
										}

										expand = {}
									}
								}
							}
						}
					}

					blockoverride "scrollbox_background" {}

					blockoverride "scrollbox_background_fade" {}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					divider_light = {
						layoutpolicy_horizontal = expanding

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
							blend_mode = alphamultiply
						}
					}
				}

				vbox = {
					name = "selected_intent_details"
					datacontext = "[ActivityIntentData.GetType]"

					layoutpolicy_horizontal = expanding

					margin = {16 0}
					margin_top = 8
					margin_bottom = 16


					hbox = {
						visible = "[ActivityIntent.HasTarget]"
						layoutpolicy_horizontal = expanding

						margin = { 8 0 }
						margin_bottom = 8

						text_label_left = {
							text = "ACTIVITY_INTENT_TARGET_LABEL"

							margin_right = 8
						}

						button_change = {
							onclick = "[VariableSystem.Toggle( 'activity_intent_selection_target_list' )]"

							tooltip = "ACTIVITY_CHANGE_INTENT_TARGET_TOOLTIP"
						}

						expand = {}
					}


					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 8 0 }

						selectable_target_portrait_widget = {
							name = "intent_target"
							datacontext = "[ActivityIntentData.GetTarget]"
							visible = "[ActivityIntent.HasTarget]"

							blockoverride "empty_slot"
							{
								onclick = "[VariableSystem.Toggle( 'activity_intent_selection_target_list' )]"
							}
						}

						expand = {
							visible = "[ActivityIntent.HasTarget]"
						}

						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							margin = { 8 0 }

							expand = {}

							text_single = {
								name = "select_target"
								visible = "[And( ActivityIntent.HasTarget, Not( ActivityIntentData.GetTarget.IsValid ) )]"

								text = "ACTIVITY_CHANGE_INTENT_SELECT_TARGET"
							}

							text_multi = {
								name = "intent_effects"
								visible = "[Or( Not( ActivityIntent.HasTarget ), ActivityIntentData.GetTarget.IsValid )]"

								text = "[ActivityIntent.GetDescription]"
								autoresize = yes
								max_width = 360
							}

							expand = {
								visible = "[ActivityIntent.HasTarget]"
							}
						}

						expand = {}
					}

					expand = {}
				}
			}

			vbox = {
				name = "intent_selection_step_2_target_character"
				datacontext = "[ActivityIntentSelectionWindow.GetSelectedIntent]"

				visible = "[VariableSystem.Exists( 'activity_intent_selection_target_list' )]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				margin_right = 8
				margin_top = 4

				background = {
					using = Background_Area_Dark
					alpha = 0.8

					margin_left = 100

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "ACTIVITY_CHANGE_INTENT_SELECT_TARGET_FOR_ACTIVITY"
					default_format = "#I"
					align = center|nobaseline

					margin = { 16 8 }

					button_change = {
						parentanchor = vcenter|right
						position = {-8 0 }

						onclick = "[VariableSystem.Toggle( 'activity_intent_selection_target_list' )]"

						tooltip = ACTIVITY_CHANGE_INTENT_TT
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					divider_light = {
						layoutpolicy_horizontal = expanding

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
							blend_mode = alphamultiply
						}
					}
				}

				vbox_character_list = {
					name = "intent_targets"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					datacontext = "[ActivityIntentSelectionWindow.AccessTargetList]"

					blockoverride "scrollbox_properties"
					{
						size = { 475 0 }
					}

					blockoverride "skill_sort_buttons" {}

					blockoverride "container_implementation" {
						fixedgridbox = {
							name = "characters_grid"
							datamodel = "[CharacterSelectionList.GetList]"
							visible = "[Not(CharacterSelectionList.IsBuildingList)]"
							addcolumn = 475
							addrow = 96

							item = {
								potential_selectable_target_portrait_widget = {
									size = { 475 94 }
									datacontext = "[CharacterListItem.GetCharacter]"

									blockoverride "onclick" {
										onclick = "[CharacterListItem.OnClick( 'select_intent_target' )]"
    	                            	onclick = "[VariableSystem.Clear( 'activity_intent_selection_target_list' )]"
									}
									blockoverride "extra_data"
									{
										warning_icon = {
											visible = "[ActivityIntentSelectionWindow.MayNotArriveInTime( ActivityGuestCustomData.Self )]"
											size = { 30 30 }

											texture = "gfx/interface/icons/symbols/icon_cross.dds"

											tooltip = "ACTIVITY_GUEST_MAY_NOT_ARRIVE"
										}
									}
								}
							}
						}
					}
				}
			}
		}

		hbox = {
			name = "cancel_or_confirm"
			layoutpolicy_horizontal = expanding

			margin = {16 16}
			spacing = 16

			background = {
				using = Background_Area
			}

			expand = {}

			button_standard = {
				text = "CANCEL"

				onclick = "[ActivityIntentSelectionWindow.Close]"
				shortcut = "close_window"
			}

			button_primary = {
				text = "CONFIRM"

				onclick = "[ActivityIntentSelectionWindow.Confirm]"
				onclick = "[ActivityIntentSelectionWindow.Close]"
				enabled = "[ActivityIntentSelectionWindow.CanConfirm]"

				tooltip = "[ActivityIntentSelectionWindow.GetCanConfirmDesc]"
			}

			expand = {}
		}
	}

	window_character_filter = {
		datacontext = "[ActivityIntentSelectionWindow.AccessTargetList]"
		size = { 510 650 }

		parentanchor = top|left
		widgetanchor = left
		position = { -20 20 }

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}
    	}
	}
}
