######################################################
################## CULTURE DIVERGENCE ################
######################################################

window = {
	name = "diverge_culture_window"
	datacontext = "[GetPlayer.GetCulture]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[DivergenceWindow.GetVassalConversionWindow]"
	parentanchor = center
	size = { 1220 950 }
	layer = middle
	using = Window_Background
	using = Window_Decoration
	movable = no #LotR

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Set( 'culture_creation_tab', 'pillars' )]"
		on_start = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]"
		on_start = "[GetVariableSystem.Clear('conversion_view_vassals')]"
		on_start = "[DivergenceWindow.SetTraditionCategory( DivergenceWindow.GetTraditionGrouping( 'realm' ).GetCategory )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		on_start = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]" #LotR
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "DIVERGE_CULTURE_WINDOW_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[DivergenceWindow.Close]"
				on_start = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]" #LotR
			}

			blockoverride "size"
			{
				maximumsize = { 800 -1 }
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			# Vassal conversion list
			vassal_conversion_preview = {
				visible = "[VariableSystem.Exists( 'conversion_view_vassals')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			}

			vbox = {
				name = "left_side"
				visible = "[Not( VariableSystem.Exists( 'conversion_view_vassals' ) )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 15
				margin_left = 2

				hbox = {
					spacing = 10

					button_standard = {
						name = "culture_name"
						size = { 530 60 }
						onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'name_selection' )]"

						onclick = "[GetScriptedGui('lotr_cultural_description_new_cultures').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" #LotR

						tooltip = CULTURE_CREATION_NAME_TOOLTIP

						text_multi = {
							name = "culture_name_label"
							size = { 100% 100% }
							margin = { 10 0 }
							fontsize_min = 16
							text = "DIVERGE_CULTURE_NAME"
							default_format = "#high"
							using = Font_Size_Big
							align = center|nobaseline
						}

						button_replace = {
							name = "reset"
							alwaystransparent = yes
							parentanchor = right|vcenter
							position = { -6 0 }
							size = { 40 40 }
						}
					}

					map_color_button = {
						blockoverride "mcb_click"
						{
							onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'color_selection' )]"
						}

						blockoverride "mcb_color"
						{
							tintcolor = "[DivergenceWindow.GetColor]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_top = 10
					margin_bottom = 10

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'pillars' )]"
						down = "[GetVariableSystem.HasValue( 'culture_creation_tab', 'pillars' )]"

						text_single = {
							text = "CULTURE_VIEW_PILLARS"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'traditions' )]"
						down = "[GetVariableSystem.HasValue( 'culture_creation_tab', 'traditions' )]"

						text_single = {
							text = "CULTURE_VIEW_TRADITIONS"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}
				}

				scrollbox = {
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'pillars' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					blockoverride "scrollbox_content"
					{
						vbox = {
							name = "pillars tab"
							spacing = 10

							text_label_center = {
								name = "header"
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_ETHOS"
								default_format = "#low"
							}

							vbox = {
								margin_left = 18

								fixedgridbox = {
									datamodel = "[DivergenceWindow.GetPossibleEthos]"
									flipdirection = yes
									addcolumn = 286
									addrow = 106
									datamodel_wrap = 2

									item = {
										widget = {
											size = { 268 96 }

											tooltipwidget = {
												using = culture_pillar_tooltip
											}

											button_standard_clean = {
												size = { 268 58 }
												down = "[DivergenceWindow.HasPillar( CulturePillar.Self )]"
												onclick = "[DivergenceWindow.SetPillar( CulturePillar.Self )]"


												icon = { #illustration
													name = "icon"
													parentanchor = center
													texture = "[CulturePillar.GetIcon]"
													size = { 100% 100% }

													using = Mask_Rough_Edges
												}

												background = {
													texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
													spriteType = Corneredtiled
													spriteborder = { 5 5 }
													margin = { -2 -2 }
												}

												text_label_center = {
													parentanchor = bottom|hcenter
													widgetanchor = center
													position = { 0 20 }
													text = "[CulturePillar.GetNameNoTooltip]"
													fontsize_min = 16
													align = center

													using = Font_Size_Medium
												}

												warning_icon = {
													visible = "[Not( DivergenceWindow.CanPickPillar( CulturePillar.Self ) )]"
													position = { 2 2 }
													size = { 30 30 }
													alwaystransparent = yes
													tooltip = "[DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self )]"
												}

												icon = {
													name = "selection_glow"
													visible = "[DivergenceWindow.HasPillar( CulturePillar.Self )]"
													parentanchor = center
													size = { 100% 100% }

													state = {
														trigger_on_create = yes

														name = max_glow
														next = min_glow
														duration = 1
														using = Animation_Curve_Default
														alpha = 0.5
													}

													state = {
														name = min_glow
														next = max_glow
														duration = 1.6
														using = Animation_Curve_Default
														alpha = 0.3
													}

													background = {
														texture = "gfx/interface/component_effects/innovation_glow.dds"
														margin = { 15 12 }
														spriteType = Corneredstretched
														spriteborder = { 30 30 }
														tintcolor = { 1 0.8 0.6 1 }
													}
												}
											}
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_LANGUAGE"
								default_format = "#low"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_right = 6

								fixedgridbox = {
									datamodel = "[DivergenceWindow.GetPossibleLanguage]"
									flipdirection = yes
									addcolumn = 172
									addrow = 40
									datamodel_wrap = 2

									item = {
										button_diverge_pillar_selection = {
											blockoverride "icon"
											{
												button_icon = {
													parentanchor = vcenter
													position = { 4 0 }
													size = { 26 26 }
													alwaystransparent = yes
													texture = "gfx/interface/icons/flat_icons/map_modes/court_languages.dds"
													framesize = { 220 220 }
												}
											}
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_HERITAGE"
								default_format = "#low"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_right = 6

								fixedgridbox = {
									datamodel = "[DivergenceWindow.GetPossibleHeritage]"
									flipdirection = yes
									addcolumn = 172
									addrow = 40
									datamodel_wrap = 2

									item = {
										button_diverge_pillar_selection = {
											blockoverride "icon"
											{
												button_icon = {
													parentanchor = vcenter
													position = { 4 0 }
													size = { 26 26 }
													alwaystransparent = yes
													texture = "gfx/interface/icons/culture_pillars/heritage.dds"
													framesize = { 220 220 }
												}
											}
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_MARTIAL_CUSTOM"
								default_format = "#low"
							}


							scrollarea = {
								maximumsize = { 600 100 }
								minimumsize = { 420 46 }
								autoresizescrollarea = yes
								scrollbarpolicy_horizontal = always_off

								scrollbar_vertical = {
									using = Scrollbar_Vertical
								}

								scrollwidget = {
									vbox = {
										fixedgridbox = {
											datamodel = "[DivergenceWindow.GetPossibleMartial]"
											flipdirection = yes
											addcolumn = 180
											addrow = 40
											datamodel_wrap = 3

											item = {
												button_diverge_pillar_selection = {}
											}
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_AESTHETICS"
								default_format = "#low"
							}

							fixedgridbox = {
								datamodel = "[DivergenceWindow.GetPossibleAesthetics]"
								flipdirection = yes
								addcolumn = 180
								addrow = 40
								datamodel_wrap = 2

								item = {
									button_standard = {
										down = "[DivergenceWindow.HasAesthetic( CultureAesthetics.Self )]"
										onclick = "[DivergenceWindow.SetAesthetic( CultureAesthetics.Self )]"
										tooltip = "CULTURE_AESTHETICS_DIVERGE_TOOLTIP"

										button_icon = {
											parentanchor = vcenter
											position = { 4 0 }
											size = { 26 26 }
											alwaystransparent = yes
											texture = "gfx/interface/icons/culture_pillars/aesthetics.dds"
											framesize = { 220 220 }
										}

										text_multi = {
											size = { 100% 100% }
											text = "CULTURE_AESTHETICS_DIVERGE_CULTURE"
											align = center|nobaseline
											default_format = "#clickable"
											margin = { 4 0 }
										}
									}
								}
							}

							expand = {}
						}
					}
				}

				scrollbox = {
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'traditions' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					blockoverride "scrollbox_content"
					{

						vbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 6

							vbox = {
								margin_top = 0
								margin_left = 30
								spacing = 4

								using = Animation_Tab_Switch

								fixedgridbox = {
									datamodel = "[DivergenceWindow.GetTraditions]"
									flipdirection = yes
									addcolumn = 250
									addrow = 195
									datamodel_wrap = 2

									item = {
										widget_tradition_selection_buttons = {
										}
									}
								}

								expand = {}
							}
						}
					}
				}

				scrollbox = {
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'aesthetics' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							spacing = 10

							expand = {}
						}
					}
				}

				expand = {}
			}

			divider = {
				layoutpolicy_vertical = expanding
			}

			### RIGHT PANEL
			widget = {
				name = "right_side"
				layoutpolicy_vertical = expanding
				minimumsize = { 510 0 }

				## Main right side view
				vbox = {
					visible = "[Not( VariableSystem.Exists('culture_creation_right_view') )]"
					spacing = 20
					margin_top = 12
					margin_bottom = 20

					vbox = {
						name = "info"
						layoutpolicy_horizontal = expanding
						margin = { 30 20 }
						spacing = 10

						vbox = {
							name = "blockers"
							visible = "[Not( DivergenceWindow.CanDiverge )]"
							layoutpolicy_horizontal = expanding
							spacing = 10

							text_label_left = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_BLOCKERS_HEADER"
								default_format = "#low"
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 10

								text_multi = {
									text = "[DivergenceWindow.GetDivergeBlockers]"
									autoresize = yes
									max_width = 440
								}
								expand = {}
							}
						}


						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "CULTURE_CREATION_NEW_CULTURE_HEADER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = 10

							text_multi = {
								autoresize = yes
								max_width = 440
								text = "CULTURE_CREATION_NEW_CULTURE_TEXT"
							}

							expand = {}
						}

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "CULTURE_CREATION_ACCEPTANCE_HEADER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = 10

							text_multi = {
								autoresize = yes
								max_width = 440
								text = "CULTURE_CREATION_DIVERGENCE_ACCEPTANCE_TEXT"
							}

							expand = {}
						}

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "CULTURE_CREATION_REALM_ADOPTION_HEADER"
							default_format = "#low"
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 6

							hbox = {
								layoutpolicy_horizontal = expanding

								text_multi = {
									autoresize = yes
									max_width = 440
									text = "CULTURE_CREATION_REALM_ADOPTION_TEXT"
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								button_standard = {
									name = "see_vassals"
									onclick = "[VariableSystem.Toggle( 'conversion_view_vassals' )]"
									text = "FAITH_CREATION_OPEN_VASSAL_LIST"
									down = "[VariableSystem.HasValue( 'conversion_view_vassals', 'true' )]"
								}

								expand = {}
							}
						}
					}

					expand = {}


					vbox = {
						name = "cost"
						tooltip = "DIVERGENCE_COST_TOOLTIP"

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "DIVERGENCE_TOTAL_COST"
							default_format = "#high"
							using = Font_Size_Medium
							align = nobaseline
							margin = { 5 0 }
							margin_top = 5

							background = {
								visible = "[Not( DivergenceWindow.CanPayCost )]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}

					text_multi = {
						name = "cooldown"
						layoutpolicy_horizontal = expanding
						align = center

						text = "CULTURE_DIVERGENCE_COOLDOWN"
						default_format = "#low"
						using = Font_Size_Small
						autoresize = yes
						max_width = 400
					}

					#Dwarven Biome tradition widget

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10
						visible = "[GetScriptedGui('lotr_is_dwarf_hybridise_trigger').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"

						hbox = {
							spacing = 5
							visible = "[Not(EqualTo_int32(PdxGuiWidget.AccessParent.AccessParent.FindChild('biomes').CountVisibleChildren, '(int32)1'))]"
							raw_tooltip = "Must select 1 biome tradition!"
							using = tooltip_se

							warning_icon = {
								
							}

							text_label_center = {
								raw_text = "#Xlight [PdxGuiWidget.AccessParent.AccessParent.FindChild('create_culture').FindChild('biomes').CountVisibleChildren] biome traditions selected"
							}
						}

						button_primary = {
							name = "create_culture"
							size = { 400 60 }
							onclick = "[DivergenceWindow.DivergeCulture]"
							onclick = "[DivergenceWindow.Close]"

							onclick = "[GetScriptedGui('lotr_culture_save_custom_description').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" #LotR

							enabled = "[DivergenceWindow.CanDiverge]"

							text = "DIVERGE_CULTURE_EXECUTE_LABEL"
							using = Font_Size_Medium
							tooltip = "DIVERGE_CULTURE_EXECUTE_TOOLTIP"

							hbox = {
								name = "biomes"
								datamodel = "[DivergenceWindow.GetTraditions]"
								item = {
									hbox = {
										visible = "[And(GetScriptedGui('lotr_dwarven_biome_tradition').IsShown( GuiScope.SetRoot( CultureTradition.MakeScope ).End ), DivergenceWindow.HasTradition( CultureTradition.Self ))]"
									}
								}
							}
						}
					}

					button_primary = {
						name = "create_culture"
						size = { 400 60 }
						visible = "[Not(GetScriptedGui('lotr_is_dwarf_hybridise_trigger').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"

						onclick = "[DivergenceWindow.DivergeCulture]"
						onclick = "[DivergenceWindow.Close]"

						onclick = "[GetScriptedGui('lotr_culture_save_custom_description').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" #LotR

						enabled = "[DivergenceWindow.CanDiverge]"

						text = "DIVERGE_CULTURE_EXECUTE_LABEL"
						using = Font_Size_Medium
						tooltip = "DIVERGE_CULTURE_EXECUTE_TOOLTIP"
					}
				}

				## Name selection
				vbox = {
					name = "name_selection"
					visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'name_selection' )]"
					margin = { 0 20 }
					margin_top = 30
					spacing = 10

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					text_single = {
						name = "header_label"
						text = "CULTURE_CREATION_NAMING_HEADER"
						default_format = "#I"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 50 0 }

						# The names of these are referenced in code. If you change them, they'll no longer get properly reset
						name_entry_big = {
							blockoverride "label"
							{
								text = "CULTURE_CREATION_NAMING_NAME"
							}

							blockoverride "editbox_properties"
							{
								name = "culture_name_edit"
								focus_on_visible = yes
								ontextedited = "[DivergenceWindow.OnEditName]"
								maxcharacters = 30
							}
						}

						widget = {
							size = { 10 10 }
						}

						name_entry_big = {
							blockoverride "label"
							{
								text = "CULTURE_CREATION_NAMING_COLLECTIVE_NOUN"
							}

							blockoverride "editbox_properties"
							{
								name = "culture_collective_noun_edit"
								ontextedited = "[DivergenceWindow.OnEditCollectiveNoun]"
								maxcharacters = 30
							}
						}

						widget = {
							size = { 10 10 }
						}

						name_entry_big = {
							blockoverride "label"
							{
								text = "CULTURE_CREATION_NAMING_PREFIX"
							}

							blockoverride "editbox_properties"
							{
								name = "culture_prefix_edit"
								ontextedited = "[DivergenceWindow.OnEditPrefix]"
								maxcharacters = 30
							}
						}
					}

					expand = {}

					button_standard = {
						name = "done"
						onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
						text = "DONE"
						default_format = "#high"
					}
				}

				vbox = {
					name = "color_selection"
					visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'color_selection' )]"
					margin = { 0 20 }
					margin_top = 15
					margin_left = 10
					spacing = 10

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "MAP_COLOR_SELECTION_LABEL"
						max_width = 280
					}

					colorpicker_simple = {
						visible = yes
						color = "[DivergenceWindow.GetColor]"
						oncoloredited = "[DivergenceWindow.SetColor]"
					}

					expand = {}

					button_standard = {
						name = "done"
						onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
						text = "DONE"
						default_format = "#high"
					}
				}

				## Tradition selection
				vbox = {
					name = "tradition_selection"
					visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'tradition_selection' )]"
					margin = { 0 15 }
					spacing = 12

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "CULTURE_CREATION_REPLACE_TRADITION_HEADER"
						max_width = 280
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding

							# The parameter for GetTraditionGrouping should match the categories in the traditions script
							button_tabs_replace_tradition_category = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'realm' )]"
							}

							button_tabs_replace_tradition_category = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'combat' )]"
							}

							button_tabs_replace_tradition_category = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'societal' )]"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = -2

							button_tabs_replace_tradition_category = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'ritual' )]"
							}

							button_tabs_replace_tradition_category = {
								datacontext = "[DivergenceWindow.GetTraditionGrouping( 'regional' )]"
							}
						}
					}



					vbox_diverge_traditions_list = {
						datacontext = "[DivergenceWindow.GetTraditionGrouping( 'realm' )]"
					}
					vbox_diverge_traditions_list = {
						datacontext = "[DivergenceWindow.GetTraditionGrouping( 'combat' )]"
					}
					vbox_diverge_traditions_list = {
						datacontext = "[DivergenceWindow.GetTraditionGrouping( 'societal' )]"
					}
					vbox_diverge_traditions_list = {
						datacontext = "[DivergenceWindow.GetTraditionGrouping( 'ritual' )]"
					}
					vbox_diverge_traditions_list = {
						datacontext = "[DivergenceWindow.GetTraditionGrouping( 'regional' )]"
					}

					hbox = {
						button_standard = {
							name = "done"
							onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
							onclick = "[DivergenceWindow.ClearSelectedTradition]"
							text = "CANCEL"
							default_format = "#high"
						}
					}
				}
			}
		}
	}
}

types DivergenceTypes
{
	type button_diverge_pillar_selection = button_standard {
		down = "[DivergenceWindow.HasPillar( CulturePillar.Self )]"
		onclick = "[DivergenceWindow.SetPillar( CulturePillar.Self )]"
		using = tooltip_se
		enabled = "[StringIsEmpty(DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self ))]"

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "above_description_text" {

				text = "[DivergenceWindow.GetPickPillarBlockers( CulturePillar.Self )]"
			}
		}

		block "icon"
		{
			button_icon = {
				parentanchor = vcenter
				position = { 4 0 }
				size = { 26 26 }
				alwaystransparent = yes
				texture = "[CulturePillar.GetIcon]"
				framesize = { 220 220 }
			}
		}

		text_multi = {
			size = { 100% 100% }
			margin = { 10 0 }
			text = "[CulturePillar.GetNameNoTooltip]"
			align = center|nobaseline
			default_format = "#clickable"
		}
	}

	type widget_tradition_selection_buttons = widget {
		size = { 220  184 }

		tooltipwidget = {
			using = culture_tradition_tooltip_clickable

			blockoverride "above_description_text" {
				text = "[DivergenceWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
			}
		}

		vbox = {
			button_standard = {
				size = { 220 120 }

				block "onclick" {
					onclick = "[DivergenceWindow.SetSelectedTradition( CultureTradition.Self )]"
					onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'tradition_selection' )]"
				}

				widget_tradition_icon = {
					block "icon_size" {
						size = { 220 120 }
					}
				}

				icon = {
					name = "selection_glow"
					visible = "[ObjectsEqual( CultureTradition.Self, DivergenceWindow.GetSelectedTradition )]"
					parentanchor = center
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}

			hbox = {
				text_label_center = {
					name = "name"
					maximumsize = { 220 44 }
					text = "[CultureTradition.GetNameNoTooltip]"
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right

					using = Font_Size_Medium
				}

				widget = {
					size = { 0 30 }
					allow_outside = yes

					warning_icon = {
						visible = "[Not( DivergenceWindow.CanPickTradition( CultureTradition.Self ) )]"
						size = { 30 30 }
						position = { 6 0 }
						widgetanchor = left
						alwaystransparent = yes
						tooltip = "[DivergenceWindow.GetPickTraditionBlockers( CultureTradition.Self )]"
					}
				}
			}


			text_label_center = {
				name = "cost"
				text = "[DivergenceWindow.GetTraditionCost( CultureTradition.Self )]"
				maximumsize = { 130 44 }
				fontsize_min = 12
				multiline = yes
				align = center
				elide = right
				default_format = "#weak"

				using = Font_Size_Small
				tooltip = "[DivergenceWindow.GetTraditionCostBreakdown( CultureTradition.Self )]"
			}
		}
	}

	type button_tabs_replace_tradition_category = button_standard {
		layoutpolicy_horizontal = expanding
		onclick = "[DivergenceWindow.SetTraditionCategory( TraditionGrouping.GetCategory )]"
		down = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		text = "TRADITION_CATEGORY_DIVERGE_NAME"
	}

	type map_color_button = button_standard_clean {
		name = "color_button"
		size = { 60 60 }
		tooltip = "CREATE_CULTURE_SELECT_COLOR"

		block "mcb_click"
		{
		}

		highlight_icon = {
			parentanchor = center
			size = { 58 58  }
			texture = "gfx/interface/colors/white.dds"

			block "mcb_color"
			{
			}

			using = Mask_Rough_Edges
		}
	}

	# Needs a wrapping vbox as otherwise the blockoverride for the scrollbox_content doesn't work
	type vbox_diverge_traditions_list = vbox {
		visible = "[DivergenceWindow.HasTraditionCategory( TraditionGrouping.GetCategory )]"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Animation_Tab_Switch

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					margin_top = 4
					margin_left = 6

					fixedgridbox = {
						flipdirection = yes
						addcolumn = 240
						addrow = 196
						datamodel_wrap = 2
						datamodel = "[TraditionGrouping.GetPossibleTraditions]"

						item = {
							widget_tradition_selection_buttons = {

								blockoverride "onclick" {
									onclick = "[DivergenceWindow.ReplaceTradition( CultureTradition.Self )]"
									onclick = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]"
								}
							}
						}
					}
				}
			}
		}
	}
}
