
######################################################
############### MARRIAGE INTERACTION #################
######################################################

window = {
	name = "marriage_interaction_window"
	widgetid = "marriage_interaction_window"
	datacontext = "[MarriageInteractionWindow.GetBaseWindow]"
	datacontext = "[MatchmakerInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	position = { 0 20 }
	parentanchor = center
	allow_outside = yes
	layer = middle

	using = Window_Size_CharacterList
	using = Window_Background
	using = Window_Decoration_Spike

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins

		hbox = {
			margin_bottom = -10
			layoutpolicy_horizontal = expanding

			header_pattern_interaction = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[CharacterInteractionConfirmationWindow.GetSendName]"
				}

				blockoverride "button_close"
				{
					onclick = "[MatchmakerInteractionWindow.Close]"

				}

				blockoverride "button_back"
				{
					visible = "[MarriageInteractionWindow.CanClear]"
					onclick = "[MatchmakerInteractionWindow.OnClear]"
					tooltip = "CLEAR_MARRIED_CHARACTERS"
				}
			}
		}

		widget_character_interaction_four_characters = {
			layoutpolicy_horizontal = expanding

			blockoverride "bg_illustration_datacontext"
			{
				datacontext = "[GetIllustration( 'character_religion_interior' )]"
			}

			blockoverride "bg_illustration"
			{
				texture = "[Illustration.GetTexture( CharacterInteractionConfirmationWindow.GetActor.MakeScope )]" #LotR
			}

			blockoverride "left_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( Character.Self, MatchmakerInteractionWindow.GetActorToMatch ) ) )]"
			}

			blockoverride "left_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetActorToMatch]"
			}

			blockoverride "left_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryActor]"
			}

			blockoverride "right_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( Character.Self, MatchmakerInteractionWindow.GetRecipientToMatch ) ) )]"
			}

			blockoverride "right_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"
			}

			blockoverride "right_character_label"
			{
				text = "INTERACTION_SPOUSE"
			}

			blockoverride "right_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryRecipient]"
			}

			blockoverride "button_left_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeActorCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertActorCharacter]"
			}

			blockoverride "button_left_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertActorCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertActorCharacter]"
			}

			blockoverride "button_right_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_right_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_clear"
			{
				enabled = "[MarriageInteractionWindow.CanClear]"
				onclick = "[MatchmakerInteractionWindow.OnClear]"
			}

			text_single = {
				parentanchor = bottom|left
				position = {8 -8}

				visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"

				using = Background_Area_Dark
				margin = {8 8}

				datacontext = "[MarriageInteractionWindow.GetMarriageInfo.GetBaseOffer]"
				datacontext = "[MatchmakerInteractionWindow.GetActorToMatch]"

				raw_text = "@prestige_icon! [MatchOffer.GetActorPrestige|+0]"
				tooltip = "MARRIAGE_PRESTIGE_TOOLTIP_OUR"
				align = nobaseline
			}

			text_single = {
				parentanchor = bottom|right
				position = {-8 -8}

				visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"

				using = Background_Area_Dark
				margin = {8 8}

				datacontext = "[MarriageInteractionWindow.GetMarriageInfo.GetBaseOffer]"
				datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"

				raw_text = "@prestige_icon! [MatchOffer.GetRecipientPrestige|+0]"
				tooltip = "MARRIAGE_PRESTIGE_TOOLTIP_THEIR"
				align = nobaseline
			}
		}


		vbox = {
			name = "marriage_info_and_send_offer"

			visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride = "scrollbox_content"
				{
					## Info about marriage after picking characters
					name = "info_about_marriage"

					vbox = {
						datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
						datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"
						
						layoutpolicy_horizontal = expanding
						spacing = 4

						text_multi = {
							name = "marriage_info"
							margin = { 8 0 }
							minimumsize = { 630 -1 }
							maximumsize = { 630 -1 }
							autoresize = yes
							text = "MARRIAGE_INFO"
						}

						vbox_marriage_interaction_marriage_details = {
							datacontext = "[MarriageInfo.GetBaseOffer]"
							layoutpolicy_horizontal = expanding
						}

						vbox_character_interaction_effects_contents = {}
					}
				}
			}

			### Send offer info
			vbox_arrangement_interaction_send_offer = {
				layoutpolicy_horizontal = expanding

				margin_bottom = 8

				blockoverride "button_content" {
					name = "tutorial_highlight_send_proposal_button"
					text = "send_marriage_proposal_button_name"
				}
			}

			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.HasCost]"
				tooltip = "[CharacterInteractionConfirmationWindow.GetCostTooltip]"

				text_single = {
					margin_bottom = 8
					text = "INTERACTION_COST_MARRIAGE"
				}
			}
		}

		### Character List
		vbox = {
			name = "character_list"
			visible = "[Not(MatchmakerInteractionWindow.HasPickedCharacters)]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 8
				margin_left = 17
				margin_top = 6
				ignoreinvisible = no

				button_checkbox_label = {
					visible = "[EqualTo_string(MatchmakerInteractionWindow.GetCharacterInteractionConfirmationWindow.GetSendName,Localize('marry_off_send'))]"
					datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"
					onclick = "[MarriageInfo.ToggleMatrilineal]"
					tooltip = "MARRIAGE_MATRILINEAL_TOGGLE_TOOLTIP"

					blockoverride "checkbox"
					{
						checked = "[MarriageInfo.IsMatrilineal]"
					}

					blockoverride "text"
					{
						text = "MARRIAGE_MATRILINEAL_TOGGLE"
					}
				}

				button_checkbox_label = {
					background = {
						texture = "gfx/interface/colors/white.dds"
						alpha = 0.2
						
						margin_top = -1
						margin_left = -28
						margin_right = 60

						modify_texture = {
							texture = "gfx/interface/component_masks/patterns/mask_pattern_01.dds"
							spriteType = corneredtiled
							blend_mode = alphamultiply
							texture_density = 1
						}

						modify_texture = {
							texture = "gfx/interface/colors/colors_textured.dds"
							blend_mode = normal
							framesize = { 96 96 }
							frame = 7
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_clouds.dds"
							blend_mode = alphamultiply
							spriteType = corneredTiled
							alpha = 0.5
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_scratches.dds"
							blend_mode = alphamultiply
							spriteType = corneredTiled
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}

					visible = "[And( HasDlcFeature( 'advanced_activities' ), HasDlcFeature( 'tours_and_tournaments' ) )]"
					datacontext = "[MarriageInteractionWindow.GetMarriageInfo]"

					enabled = "[MarriageInfo.IsGrandWeddingPromiseValid]"
					onclick = "[MarriageInfo.ToggleGrandWeddingPromise]"
					tooltip = "[MarriageInfo.GetGrandWeddingPromiseDesc]"

					blockoverride "checkbox"
					{
						checked = "[MarriageInfo.IsGrandWeddingPromise]"
					}

					blockoverride "text"
					{
						text = "MARRIAGE_GRAND_WEDDING_TOGGLE"
					}
				}


				text_single = {
					visible = "[Or( MatchmakerInteractionWindow.GetCharacterList.HasItems, MatchmakerInteractionWindow.HasTopCharacterItem )]"
					layoutpolicy_horizontal = expanding
					text = "[MarriageInteractionWindow.GetPrompt]"

					align = center|nobaseline
					autoresize = no
				}
			}

			divider = {
				layoutpolicy_horizontal = expanding
			}

			vbox_character_list = {
				datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
				datacontext = "[CharacterSelectionList.GetFilterWithDefault('fertility_filter', FixedPointToInt(GetPlayer.MakeScope.ScriptValue('is_elf_bool')))]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "container_implementation" {
					fixedgridbox = {
						addcolumn = 667
						addrow = 110
						name = "characters_grid"
						datamodel_reuse_widgets = yes

						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item = {
								size = { 630 110 }
							}
						}
					}

					blockoverride "bottom_middle_box" {
						hbox = {
							layoutpolicy_horizontal = expanding

							# Religion & Culture
							# hbox = {
							# 	layoutpolicy_vertical = expanding
							# 	margin_left = 5

							# 	# Faith
							# 	icon = {
							# 		name = "faith_button"
							# 		size = { 35 35 }
							# 		datacontext = "[Character.GetFaith]"
							# 		tooltipwidget = { faith_tooltip = {} }
							# 		texture = "[Faith.GetIcon]"
							# 	}

							# 	# Culture
							# 	widget = {
							# 		datacontext = "[Character.GetCulture]"
							# 		size = { 120 30 }

							# 		hbox = {
							# 			icon = {
							# 				name = "culture"
							# 				texture = "gfx/interface/icons/icon_culture.dds"
							# 				size = { 30 30 }
							# 			}

							# 			text_multi = {
							# 				layoutpolicy_horizontal = expanding
							# 				min_width = 90
							# 				max_width = 90
							# 				autoresize = yes
							# 				text = "CULTURE_LISTS_WINDOW"
							# 			}
							# 		}

							# 		tooltipwidget = {
							# 			culture_tooltip = {}
							# 		}

							# 		using = tooltip_se
							# 	}
							# }

							expand = {}

							hbox = {
								name = "alliances_grid"
								datamodel = "[CharacterListItem.GetOtherCharacterItems]"

								item = {
									container = {
										button = {
											parentanchor = center
											position = { 0 -20 }
											texture = "gfx/interface/icons/diplomatic_icons.dds"
											frame = 2
											framesize = { 120 120 }
											size = { 30 30 }
											tooltip_visible = no
										}

										coa_realm_tiny_crown = {
											tooltip = "MATCHMAKER_INTERACTION_ALLIANCE"
										}
									}
								}
							}
						}
					}
				}

				blockoverride "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[And( IsDataModelEmpty( CharacterSelectionList.GetList ), Not( MatchmakerInteractionWindow.HasTopCharacterItem ) )]"
					text = "NO_CHARACTERS_TO_SELECT"
				}

				blockoverride "special_character" {
					vbox = {
						datacontext = "[MatchmakerInteractionWindow.GetTopCharacterItem]"
						visible = "[MatchmakerInteractionWindow.HasTopCharacterItem]"
						layoutpolicy_horizontal = expanding

						widget_character_list_item = {
							layoutpolicy_horizontal = expanding
						}
					}
				}
			}
		}
	}

	window_character_filter = {
		name = "filter_window"
		datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_diff_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('fertility_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('trait_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('sexuality_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"

				blockoverride "filters" {

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('alliance_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('prestige_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('claim_filter')]"
					}
				}
			}
		}
	}
}
