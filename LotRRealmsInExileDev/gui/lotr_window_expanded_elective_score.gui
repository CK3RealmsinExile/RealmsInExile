window = {
	name = "lotr_expanded_elective_score_window"
	size = { 1011 900 }
	parentanchor = center

	# movable = no
	allow_outside = yes
	layer = windows_layer

    using = Window_Background 
    using = Window_Decoration
    using = Animation_ShowHide_Standard

	visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), And(GetPlayer.IsValid, GetPlayer.IsAlive)), And(IsDefaultGUIMode, GetVariableSystem.Exists( 'lotr_expanded_elective_score' ))))]"

	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Clear( 'display_allegiance' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position_x = -60
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard

	}

	state = {
		name = hide
		next = _hide
		position_x = 0
		trigger_when = "[GetVariableSystem.Exists( 'county_view_open' )]"
	}
	
	vbox = {
		using = Window_Margins
		restrictparent_min = yes
        spacing = 10
		ignoreinvisible = yes
		allow_outside = yes

		vbox = {
			layoutpolicy_horizontal = expanding
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "lotr_expanded_elective_header"
				}

				blockoverride "button_close"
				{
					onclick = "[GetVariableSystem.Clear('lotr_expanded_elective_score')]"
				}
			}
		}

		scrollarea = {
			name = "expanded_election_view"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			scrollwidget = {
				layoutpolicy_vertical = expanding 
				
				vbox = {
					layoutpolicy_vertical = expanding
					# spacing = 10
					margin_left = 10
					
					hbox = {
						datamodel = "[GetTitleByKey('k_wastelands').MakeScope.GetList('balan_lai_members')]" 
						spacing = 3
						margin_left = 220
						item = {
							portrait_head_small = {
								name = "portrait_left"
								datacontext = "[Scope.Char]"
							}
						}
						
					}

					divider_light = {
						layoutpolicy_horizontal = expanding 
						size = { 0 5 }
						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
							spritetype = CorneredStretched
							spriteborder = { 100 0 }
							
							blend_mode = alphamultiply
						}
					}

					datamodel = "[GetTitleByKey('k_wastelands').MakeScope.GetList('balan_lai_members')]" 

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							margin_left = 5
							datacontext = "[Scope.GetCharacter]"

							hbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[GetTitleByKey('k_wastelands').MakeScope.GetList('balan_lai_members')]" 

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[Scope.Char.GetFirstNameRegnal] of [Scope.Char.GetPrimaryTitle.GetNameNoTier]"
									using = Font_Size_Medium
									margin_bottom = 30
								}

								item = {
									widget = {
										size = { 88 1 } 

										text_single = {
											layoutpolicy_horizontal = expanding # script_value_elector_self_voting_pattern_balan_lai_leader_elective
											text = "[GuiScope.SetRoot(Scope.Char.MakeScope).AddScope('candidate', Character.MakeScope).ScriptValue('script_value_total_vote_score')]"
											# tooltip = 
											using = Font_Size_Medium
											parentanchor = center
											position = { 5 -10 }
										}


										divider_light = {
											layoutpolicy_vertical = expanding 
											size = { 5 200 }
											position = { -2 -170 }
										}
									}
								}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding 
								size = { 0 5 }
								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
									spritetype = CorneredStretched
									spriteborder = { 100 0 }
									
									blend_mode = alphamultiply
								}
							}
						}
					}
				}
			}
			scrollbar_vertical = {
				using = Scrollbar_Vertical
			}
			scrollbar_horizontal = {
				using = Scrollbar_Horizontal
			}
			expand = {}
		}
		expand = {}
	}
}