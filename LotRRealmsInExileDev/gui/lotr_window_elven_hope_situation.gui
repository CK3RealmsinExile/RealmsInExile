#######################################################
################ ELVEN HOPE SITUATION #################
#######################################################

window = {
	name = "lotr_window_elven_hope_situation"
	widgetid = "lotr_window_elven_hope_situation"
	datacontext = "[SituationWindow.GetSituation]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	
	layer = windows_layer
	movable = no
	allow_outside = yes

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		on_start = "[GetVariableSystem.Set( 'elven_hope_tab', 'elven_sub_regions' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins

				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 6

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "[Situation.GetNameNoTooltip]"
						}

						blockoverride "button_close"
						{
							onclick = "[SituationWindow.Close]"
						}
					}
				}
				
				hbox = { # Tabs
					layoutpolicy_horizontal = expanding
					margin_bottom = 5

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'elven_hope_tab', 'elven_sub_regions' )]"
						down = "[GetVariableSystem.HasValue( 'elven_hope_tab', 'elven_sub_regions' )]"
						#onclick = "[SituationWindow.SetActiveTab( 'elven_sub_regions' )]"
						#down = "[SituationWindow.IsTabActive( 'elven_sub_regions' )]"

						text_single = {
							text = "ELVEN_HOPE_TAB_1"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}
					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'elven_hope_tab', 'elven_catalysts' )]"
						down = "[GetVariableSystem.HasValue( 'elven_hope_tab', 'elven_catalysts' )]"

						text_single = {
							text = "ELVEN_HOPE_TAB_2"
							parentanchor = center

							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}
				}
				
				vbox = { # Subregions tab
					name = "tab_elven_subregions"
					visible = "[GetVariableSystem.HasValue( 'elven_hope_tab', 'elven_sub_regions' )]"
					#visible = "[SituationWindow.IsTabActive( 'elven_sub_regions' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					scrollbox = { # Shows sub-regions
						name = "sub_region_scrollbox"

						visible = "[Situation.HasMultipleSubRegions]"

						using = Animation_Tab_Switch

						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							texture = "gfx/interface/illustrations/situation_backgrounds/elven_hope.dds"
							using = Mask_Rough_Edges
							alpha = 0.9
						}

						min_height = 185
						max_height = 185

						blockoverride "scrollbox_content"
						{
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							vbox = {
								name = "sub_regions"
								layoutpolicy_horizontal = expanding
								spacing = 2

								datamodel = "[Situation.GetSubRegions]"

								item = {
									button_situation_subregion = { }
								}
							}

							blockoverride "scrollbox_expand" {
								expand = {}
							}
						}
					}
					
					vbox = { # Your sub-region & phase
						name = "current_sub_region"
						margin_top = 2
						layoutpolicy_horizontal = expanding

						datacontext = "[SituationWindow.GetSelectedSubRegion]"
						datacontext = "[SituationSubRegion.GetCurrentPhase]"

						visible = "[SituationSubRegion.IsValid]"

						text_label_center = {
							layoutpolicy_horizontal = expanding
							margin = { 10 5 }
							using = Background_Area_Dark
							visible = "[Situation.HasMultipleSubRegions]"

							text = "[SituationSubRegion.GetNameNoTooltip]"
							using = Font_Size_Medium
							align = nobaseline
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							min_height = 75

							margin = { 15 15 }

							datacontext = "[SituationSubRegion.GetCharacterParticipantGroup( GetPlayer )]"

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text_multi = {
									visible = "[Not( SituationParticipantGroup.IsValid )]"
									layoutpolicy_horizontal = expanding

									text = "SITUATION_WINDOW_NO_REGION_PARTICIPANT_GROUP"
									default_format = "#low"
									align = nobaseline
								}

								icon = {
									visible = "[SituationParticipantGroup.IsValid]"

									size = { 40 40 }
									texture = "[SituationParticipantGroup.GetType.GetIcon]"

									background = {
										texture = "gfx/interface/icons/situations/elven_hope/elven_rulers.dds"
										margin = { 5 5 }
									}
								}

								vbox = {
									visible = "[SituationParticipantGroup.IsValid]"

									margin_left = 10
									text_single = {
										layoutpolicy_horizontal = expanding
										text = "[SituationParticipantGroup.GetName]"
										align = nobaseline
									}

									text_single = {
										layoutpolicy_horizontal = expanding

										text = "[SelectLocalization( Situation.HasMultipleSubRegions, 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP_MULTI_SUBREGION', 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP' ) ]"

										align = nobaseline
										default_format = "#Weak"
									}
								}

								expand = {}

								button_standard_small = {
									onclick = "[SituationWindow.AccessParticipantCharacterList.Toggle]"
									text = "SITUATION_WINDOW_VIEW_PARTICIPANT_GROUPS"
								}
							}
						}

						vbox = { # CURRENT PHASE & EFFECTS
							layoutpolicy_horizontal = expanding

							margin = { 15 15 }

							background = {
								using = Background_Area
							}
							
							text_label_center = {
								min_width = 240
								layoutpolicy_horizontal = expanding
								text = "ELVEN_SITUATION_WINDOW_CURRENT_HEADER"
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 10
								spacing = 40
								
								hbox = {
									layoutpolicy_horizontal = expanding
									
									hbox = { # Phase name
										layoutpolicy_horizontal = expanding 
										
										icon = {
											size = { 40 40 }
											texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
											background = {
												texture = "gfx/interface/window_regency/regency_level_bg.dds"
												margin = { 5 5 }
											}

										}

										text_single = {
											layoutpolicy_horizontal = expanding
											margin_left = 10
											text = "[SituationPhase.GetType.GetName]"
											align = nobaseline
										}
									}

									fixedgridbox = { # Effects
										name = "leading_named_effect_sets"

										addcolumn = 48
										addrow = 48
										setitemsizefromcell = yes
										datamodel_wrap = 6
										maxhorizontalslots = 6
										maxverticalslots = 1
										flipdirection = yes
										layoutanchor = topleft

										datamodel = "[SituationSubRegion.GetCurrentPhase.GetType.GetModifierNamedSets]"
										item = {
											button_phase_named_set_item = {
												size = { 80 80 }
												enabled = yes
											}
										}
									}
								}
							}
							expand = {}
						}
					}
					
					vbox = { # Hope bars for all sub-regions
						name = "current_hope"
						margin_top = 5
						#using = Animation_Tab_Switch

						layoutpolicy_horizontal = expanding
						#layoutpolicy_vertical = expanding
						
						datacontext = "[SituationWindow.GetSituation]"
						datacontext = "[SituationWindow.GetSelectedOrLeadingFuturePhaseType]"
						
						#min_height = 185
						#max_height = 185
						
						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							using = Animation_Tab_Switch
							
							min_height = 370 
							max_height = 370
							
							spacing = 5
							
							blockoverride "scrollbox_content"
							{
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								### Lorien Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_LORIEN_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('lorien_hope_value')]" }
								}
								### Lindon Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_LINDON_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('lindon_hope_value')]" }
								}
								### Greenwood Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_GREENWOOD_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('greenwood_hope_value')]" }
								}
								### Nelornieth Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_NELORNIETH_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('nelornieth_hope_value')]" }
								}
								### Drel Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_DREL_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('drel_hope_value')]" }
								}
								### Kinnlai Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_KINNLAI_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('kinnlai_hope_value')]" }
								}
								### Anduin Vale Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_ANDUINVALE_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('anduinvale_hope_value')]" }
								}
								### Eriador Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_ERIADOR_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('eriador_hope_value')]" }
								}
								### Rhovanion Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_RHOVANION_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('rhovanion_hope_value')]" }
								}
								### Gondor Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_GONDOR_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('gondor_hope_value')]" }
								}
								### Ormal Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_ORMAL_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('ormal_hope_value')]" }
								}
								### Sumarieth Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_SUMARIETH_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('sumarieth_hope_value')]" }
								}
								### Haradwaith Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_HARADWAITH_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('haradwaith_hope_value')]" }
								}
								### Mordor Hope Value Bar ###
								progress_bars_for_hope_levels = {
									tooltip = "[SituationPhase.GetType.GetName]" 
									blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_MORDOR_HOPE_VALUE" }
									blockoverride "hope_value" { datacontext = "[Situation.MakeScope.Var('mordor_hope_value')]" }
								}
								
								blockoverride "scrollbox_expand" {
									expand = {}
								}
							}
						}

						spacer = { size = { 1 10 } }
						
						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						spacer = { size = { 1 3 } }
						
						text_label_center = {
							layoutpolicy_horizontal = expanding
							margin = { 10 5 }
							using = Background_Area_Solid
							text = "HOPE_TOOLTIP_GUI"
						}
					}
				
				}
				
				vbox = { # Catalysts tab
					name = "tab_elven_catalysts"
					visible = "[GetVariableSystem.HasValue( 'elven_hope_tab', 'elven_catalysts' )]"
					#visible = "[SituationWindow.IsTabActive( 'elven_catalysts' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch
				
					vbox = { # Catalysts
						name = "current_hope"
						margin_top = 5
						#using = Animation_Tab_Switch

						layoutpolicy_horizontal = expanding
						#layoutpolicy_vertical = expanding
						
						datacontext = "[SituationWindow.GetSituation]"
						datacontext = "[SituationWindow.GetSelectedOrLeadingFuturePhaseType]"
						
						vbox = { # Explanation what actions raise hope 
							layoutpolicy_horizontal = expanding
							
							text_label_center = {
								min_width = 240
								layoutpolicy_horizontal = expanding
								text = "ELVEN_SITUATION_CATALYSTS_HEADER"
							}
						}
						
						scrollbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							#using = Animation_Tab_Switch
							
							min_height = 750 
							max_height = 750
							
							blockoverride "scrollbox_content"
							{
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" #(doesn't work yet ~Aerien)
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_greenwood_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]"
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_lorien_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_lindon_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_nelornieth_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_drel_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_kinnlai_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_anduinvale_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_eriador_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_rhovanion_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_gondor_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_haradwaith_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_sumarieth_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_ormal_situation_localization')]" }
								}
								lotr_show_sub_region_catalyst = { ### Catalyst
									#visible = "[SituationSubRegion.IsValid]" 
									# blockoverride "catalyst_visible" { visible = yes } #Need to visible if you are participant in that region
									blockoverride "catalyst_datamodel" { datamodel = "[Situation.MakeScope.GetList('region_mordor_situation_localization')]" }
								}
								blockoverride "scrollbox_expand" {
									expand = {}
								}
							}
						}
					}

					expand = {
						visible = "[IsDataModelEmpty( SituationWindow.GetCatalystsForSelectedPhase ) )]"
					}
				}
			}
		}
	}

	window_situation_participant_groups = {
		datacontext = "[SituationWindow.AccessParticipantCharacterList]"
		datacontext = "[SituationWindowParticipantCharacterList.AccessCharacterList]"

		visible = "[SituationWindowParticipantCharacterList.IsVisible]"
	}
}

types Situation
{
	###########################
	## ↓↓↓ Added by Jaco ↓↓↓ ##
	###########################
	type progress_bars_for_hope_levels = widget {
		size = { 550 80 }
		allow_outside = yes
		vbox = {
			allow_outside = yes
			layoutpolicy_vertical = expanding
			spacing = 20
			### Header Text ###
			text_label_center = {
				layoutpolicy_horizontal = expanding
				using = Background_Area_Dark
				block "hope_value_header" {
					text = "DISPLAY_CURRENT_LINDON_HOPE_VALUE"
				}
			}

			### Progress Bar ###
			hbox = {
				block "hope_value" {
					datacontext = "[Situation.MakeScope.Var('lorien_hope_value')]"
				} 
				progressbar_gray_red = {
					block "hope_value" {
						datacontext = "[Situation.MakeScope.Var('lorien_hope_value')]"
					}
					visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' )]"
					size = { 100 20 }
					max = 200
					min = 0
					allow_outside = yes
					value = "[Scope.GetValue]"

					highlight_icon = { # Fading
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_fading' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}

					icon = { # 0 Value Marker
						size = { 30 40 }
						position = { -14 -30 }
						parentanchor = left
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_situation_zero')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}		
				progressbar_gray_red = { #Larger version
					block "hope_value" {
						datacontext = "[Situation.MakeScope.Var('lorien_hope_value')]"
					}
					visible = "[Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
					size = { 100 44 }
					max = 200
					min = 0
					allow_outside = yes
					value = "[Scope.GetValue]"

					### Horizontal Wipe Animation Left
					lotr_elven_progressbar_horizontal_swipe_left = {
						blockoverride "visible_swipe" {
							visible = "[Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
						}
					}
					# ### Horizontal Wipe Animation Right
					lotr_elven_progressbar_horizontal_swipe_right = {
						blockoverride "visible_swipe" {
							visible = "[Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
						}
					}

					highlight_icon = { # Fading
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_fading' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}

					icon = { # 0 Value Marker
						size = { 30 40 }
						position = { -14 -18 }
						parentanchor = left
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_situation_zero')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				
				progressbar_orange_red = {
					size = { 100 20 }
					visible = "[Not(And( Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' )))]"
					max = 400
					min = 200
					allow_outside = yes
					value = "[Scope.GetValue]"
 
					icon = { # Waning
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_waning' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
						glow = {
							glow_radius = 8
							using = Glow_Standard
							using = Color_Red
						}
					}

					icon = { # 200 Value Marker
						size = { 30 40 }
						position = { -14 -30 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_fading_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				progressbar_orange_red = { #Larger version
					size = { 100 44 }
					visible = "[And( Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
					max = 400
					min = 200
					allow_outside = yes
					value = "[Scope.GetValue]"
 
					### Horizontal Wipe Animation Left
					lotr_elven_progressbar_horizontal_swipe_left = {
						blockoverride "visible_swipe" {
							visible = "[And( Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
						}
					}
					### Horizontal Wipe Animation Right
					lotr_elven_progressbar_horizontal_swipe_right = {
						blockoverride "visible_swipe" {
							visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
						}
					}

					icon = { # Waning
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_waning' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
						glow = {
							glow_radius = 8
							using = Glow_Standard
							using = Color_Red
						}
					}

					icon = { # 200 Value Marker
						size = { 30 40 }
						position = { -14 -18 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_fading_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				
				progressbar_bright_orange_red = {
					size = { 100 20 }
					visible = "[Not(And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )))]"
					max = 600
					min = 400
					allow_outside = yes
					value = "[Scope.GetValue]"

					icon = { # Enduring
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_enduring' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}
				
					icon = { # 400 Value Marker
						size = { 30 40 }
						position = { -14 -30 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_waning_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				progressbar_bright_orange_red = { #Larger version
					size = { 100 44 }
					visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' ))]"
					max = 600
					min = 400
					allow_outside = yes
					value = "[Scope.GetValue]"

					### Horizontal Wipe Animation Left
					lotr_elven_progressbar_horizontal_swipe_left = {
						blockoverride "visible_swipe" {
							visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' ))]"
						}
					}
					### Horizontal Wipe Animation Right
					lotr_elven_progressbar_horizontal_swipe_right = {
						blockoverride "visible_swipe" {
							visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' ))]"
						}
					}

					icon = { # Enduring
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_enduring' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}
				
					icon = { # 400 Value Marker
						size = { 30 40 }
						position = { -14 -18 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_waning_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				
				progressbar_red_green = {
					size = { 100 20 }
					max = 800
					min = 600
					allow_outside = yes
					value = "[Scope.GetValue]"
					visible = "[Not(And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )))]"

					icon = { # Renewing
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_renewing' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}
				
					icon = { # 600 Value Marker
						size = { 30 40 }
						position = { -14 -30 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_enduring_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				progressbar_red_green = { #Larger version
					size = { 100 44 }
					max = 800
					min = 600
					allow_outside = yes
					value = "[Scope.GetValue]"
					visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' ))]"

					### Horizontal Wipe Animation Left
					lotr_elven_progressbar_horizontal_swipe_left = {
						blockoverride "visible_swipe" {
							visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' ))]"
						}
					}
					### Horizontal Wipe Animation Right
					lotr_elven_progressbar_horizontal_swipe_right = {
						blockoverride "visible_swipe" {
							visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' ))]"
						}
					}

					icon = { # Renewing
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_renewing' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}
				
					icon = { # 600 Value Marker
						size = { 30 40 }
						position = { -14 -18 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_enduring_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				
				progressbar_bright_green_red = {
					size = { 100 20 }
					max = 1000
					min = 800
					allow_outside = yes
					value = "[Scope.GetValue]"
					visible = "[Not(GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' ))]"

					icon = { # Thriving
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_thriving' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}

					icon = { # 800 Value Marker
						size = { 30 40 }
						position = { -14 -30 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_renewing_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}

					icon = { # 1000 Value Marker
						size = { 30 40 }
						position = { 13 -30 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = right

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_thriving_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
				progressbar_bright_green_red = { #Larger version
					size = { 100 44 }
					max = 1000
					min = 800
					allow_outside = yes
					value = "[Scope.GetValue]"
					visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )]"

					### Horizontal Wipe Animation Left
					lotr_elven_progressbar_horizontal_swipe_left = {
						blockoverride "visible_swipe" {
							visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )]"
						}
					}
					### Horizontal Wipe Animation Right
					lotr_elven_progressbar_horizontal_swipe_right = {
						blockoverride "visible_swipe" {
							visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )]"
						}
					}

					icon = { # Thriving
						datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_thriving' )]"
						size = { 40 40 }
						texture = "[SituationPhaseType.GetIcon]"
						parentanchor = center 
						background = {
							texture = "gfx/interface/window_regency/regency_level_bg.dds"
							margin = { 5 5 }
						}
						tooltipwidget = {
							using = lotr_elven_situation_modifier_named_set_tooltip
						}
					}

					icon = { # 800 Value Marker
						size = { 30 40 }
						position = { -14 -18 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = left

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_renewing_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}

					icon = { # 1000 Value Marker
						size = { 30 40 }
						position = { 13 -18 }
						texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
						alpha = 1
						parentanchor = right

						text_single = {
							parentanchor = center
							position = { 0 -3 }
							raw_text = "#V [EmptyScope.ScriptValue('elven_thriving_limit')|0]#!"
							align = center
							using = Font_Size_Small
						}
					}
				}
			}
		}
		
		expand = {}
	}
	###########################
	## ↑↑↑ Added by Jaco ↑↑↑ ##
	###########################

	type button_situation_subregion = button_standard {
		minimumsize = { 527 50 }

		layoutpolicy_horizontal = expanding

		onclick = "[SituationWindow.SetSelectedSubRegion( SituationSubRegion.Self )]"
		down = "[ObjectsEqual( SituationWindow.GetSelectedSubRegion.Self, SituationSubRegion.Self )]"

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			margin = { 4 0 }
			margin_right = 16
			spacing = 5

			icon = {
				size = { 40 40 }
				texture = "[SituationSubRegion.GetIcon]"
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				spacing = -3
				minimumsize = { 150 -1 }

				expand = {}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "[SituationSubRegion.GetNameNoTooltip]"
					default_format = "#clickable"
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "SITUATION_WINDOW_SUB_GROUP_SUBTITLE"
					align = nobaseline
				}

				expand = {}
			}



			widget = {
				size = { 40 40 }

				widget_level_marker = {
					blockoverride "visible_inactive" {
						visible = no
					}

					icon = {
						size = { 40 40 }
						texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
						parentanchor = center
					}
				}
			}
		}
	}
	
	type elven_hope_detail_view_content = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		widget = {
			size = { 550 80 }

			proportional_icon = {
				name = "illustrations"
				size = { 100% 100% }
				texture = "gfx/interface/illustrations/situation_backgrounds/elven_hope.dds"
				alpha = 0.7
				using = Mask_Rough_Edges
				
			}
		}

		# decision_detail_description_content = {}
		# decision_custom_widget_content = {}
	}

	type button_phase_named_set_item = button_round {
		datacontext = "[GetPlayer]"

		icon = {
			size = { 100% 100% }

			texture = "gfx/interface/buttons/button_lifestyles_base.dds"
		}

		icon = {
			size = { 80% 80% }
			position = { 0 0 }
			parentanchor = center
			alwaystransparent = yes
			texture = "[SituationModifierNamedSet.GetIcon]"
		}

		tooltipwidget = {
			using = situation_modifier_named_set_tooltip
		}
	}

	type window_situation_participant_groups = window  {
		name = "window_situation_participant_groups"
		widgetanchor = right
		position = { 30 100 }
		size = { 740 82% }

		layer = middle
		movable = yes

		using = Window_Background
		using = Window_Decoration_Spike
		using = Window_Size_CharacterList

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "SITUATION_PARTICIPANT_WINDOW_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[SituationWindowParticipantCharacterList.Close]"
				}
			}

			vbox = {
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }

				spacing = 10

				datamodel = "[SituationWindow.GetSelectedSubRegion.GetParticipantGroups]"

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						icon = {
							visible = "[SituationParticipantGroup.IsValid]"

							size = { 40 40 }
							texture = "[SituationParticipantGroup.GetType.GetIcon]"

							background = {
								texture = "gfx/interface/icons/situations/elven_hope/elven_rulers.dds"
								margin = { 5 5 }
							}
						}

						vbox = {
							margin_left = 10

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[SituationParticipantGroup.GetName]"
								align = nobaseline
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "SITUATION_PARTICIPANT_GROUP_SUBTITLE"
								align = nobaseline
								default_format = "#Weak"
							}
						}

						expand = {}

						button_standard_small = {
							onclick = "[SituationWindowParticipantCharacterList.ToggleSelectedParticipantGroup( SituationParticipantGroup.Self )]"
							down = "[ObjectsEqual( SituationWindowParticipantCharacterList.GetSelectedParticipantGroup.Self, SituationParticipantGroup.Self )]"
							text = "SITUATION_PARTICIPANT_GROUP_FILTER"
						}
					}
				}
			}

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "sort_buttons"
				{
					blockoverride "filters_visible" {
						visible = no
					}

					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding

						blockoverride "skill_sort_buttons" {}
					}
				}

				blockoverride "skill_sort_buttons" {}

				blockoverride "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[Not( CharacterSelectionList.HasItems )]"
					text = "SITUATION_PARTICIPANT_WINDOW_PARTICIPANT_EMPTY"
				}

				blockoverride "container_implementation"
				{
					fixedgridbox = {
						addcolumn = 630
						addrow = 92

						name = "characters_grid"
						datamodel_reuse_widgets = yes
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item_finder = {
								size = { 630 94 }
							}
						}
					}
				}
			}
		}
	}

	type lotr_elven_progressbar_horizontal_swipe_left = icon {
		size = { 100% 90% }
		parentanchor = vcenter
		texture = "gfx/interface/colors/white.dds"
		alpha = 0

		block "visible_swipe" {
			visible = yes
		}

		modify_texture = {
			name = "horizontal_wipe"
			texture = "gfx/interface/progressbars/progressbar_center_glow_white_decrease.dds"
			blend_mode = alphamultiply
		}

		state = {
			name = a
			next = b
			trigger_on_create = yes
			duration = 0
			alpha = 0

			modify_texture = {
				name = "horizontal_wipe"
				translate_uv = { -0.5 0 }
			}
		}

		state = {
			name = b
			next = c
			duration = 1
			alpha = 1
			on_finish = "[PdxGuiTriggerAllAnimations('grandeur_bar_glow')]"

			modify_texture = {
				name = "horizontal_wipe"
				translate_uv = { 1 0 }
			}
		}

		state = {
			name = c
			next = a
			duration = 0.5
			alpha = 0
			delay = 1.5
		}
	}

	type lotr_elven_progressbar_horizontal_swipe_right = icon {
		size = { 100% 90% }
		parentanchor = vcenter
		texture = "gfx/interface/colors/white.dds"
		alpha = 0

		block "visible_swipe" {
			visible = yes
		}

		modify_texture = {
			name = "horizontal_wipe"
			texture = "gfx/interface/progressbars/progressbar_center_glow_white_increase.dds"
			blend_mode = alphamultiply
		}

		state = {
			name = a
			next = b
			trigger_on_create = yes
			duration = 0
			alpha = 0

			modify_texture = {
				name = "horizontal_wipe"
				translate_uv = { 0.5 0 }
			}
		}

		state = {
			name = b
			next = c
			duration = 1
			alpha = 1
			on_finish = "[PdxGuiTriggerAllAnimations('grandeur_bar_glow')]"

			modify_texture = {
				name = "horizontal_wipe"
				translate_uv = { -1 0 }
			}
		}

		state = {
			name = c
			next = a
			duration = 0.5
			alpha = 0
			delay = 1.5
		}
	}

	type lotr_show_sub_region_catalyst = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		scrollbox = { # Shows catalyst
			using = Animation_Tab_Switch
			block "catalyst_visible" {
				visible = yes
			}

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			min_height = 185
			max_height = 185

			blockoverride "scrollbox_content"
			{
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2

					block "catalyst_datamodel" {
						datamodel = "[Situation.MakeScope.GetList('region_lorien_situation_localization')]"
					}

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 5
							spacer = { size = { 0 3 } }
							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 10

								spacer = { size = { 2 0 } }

								text_single = {
									raw_text = "#P +[Scope.Var('elven_hope_catalyst_loc_value').GetValue]#!"
									visible = "[EqualTo_string(Scope.Var('elven_hope_catalyst_positive_or_negative').GetFlagName, 'positive_effect')]"
									margin = { 5 5 }
									background = {
										using = Background_Area_Dark
										using = Mask_Rough_Edges
										margin = { 15 5 }
									}
								}

								text_single = {
									raw_text = "#N -[Scope.Var('elven_hope_catalyst_loc_value').GetValue]#!"
									visible = "[EqualTo_string(Scope.Var('elven_hope_catalyst_positive_or_negative').GetFlagName, 'negative_effect')]"
									margin = { 5 5 }
									background = {
										using = Background_Area_Dark
										using = Mask_Rough_Edges
										margin = { 15 5 }
									}
								}

								spacer = { size = { 5 0 } }

								text_multi = {
									text = "[Scope.Var('elven_hope_catalyst_loc_key').GetFlagName]"
									autoresize = yes
									max_width = 250
								}

								spacer = { size = { 5 0 } }

								text_single = {
									text = "[Scope.Var('elven_hope_catalyst_owner').Char.GetName]"
								}

								spacer = { size = { 2 0 } }
							}

							spacer = { size = { 0 3 } }

							divider_light = {
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}

				blockoverride "scrollbox_expand" {
					expand = {}
				}
			}
		}
	}
}

template lotr_elven_situation_modifier_named_set_tooltip {
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			margin = { 0 5 }
			text = "[SituationPhaseType.GetNameNoTooltip]"
			default_format = "#T"
		}

		blockoverride "main_description" {
			vbox = {
				name = "phase_type_desc"
				datacontext = "[SituationPhaseType.GetParentSituationType]"
				datacontext = "[GetSituationOfType( SituationType.Self )]"
				layoutpolicy_horizontal = expanding

				textbox = {
					name = "main_description"
					layoutpolicy_horizontal = expanding
					max_width = 400
					margin = { 0 5 }
					using = DefaultTooltipText
					multiline = yes
					text = "[SituationPhaseType.GetDesc]"
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					alwaystransparent = no
				}

				spacer = {
					size = { 0 10 }
				}

				vbox = {
					visible = "[SituationPhaseType.IsValid]"
					layoutpolicy_horizontal = expanding
					spacing = 8

					hbox = {
						layoutpolicy_horizontal = expanding
						text_single = {
							text = "SITUATION_PHASE_TYPE_MODIFIERS_LABEL"
							default_format = "#bold;italic"
							align = nobaseline
						}
						expand = {}
					}

					fixedgridbox = {
						name = "task_items"
						layoutpolicy_horizontal = expanding

						addcolumn = 56
						addrow = 48
						setitemsizefromcell = yes
						datamodel_wrap = 6
						maxhorizontalslots = 6
						maxverticalslots = 2
						flipdirection = yes
						layoutanchor = topleft

						datamodel = "[SituationPhaseType.GetModifierNamedSets]"
						item = {
							button_situation_phase_effect_item = {}
						}
					}
				}
			}
		}

		blockoverride "concept_link" {
			text = "SITUATION_PHASE_TYPE_CONCEPT_LINK"
		}
	}
} 