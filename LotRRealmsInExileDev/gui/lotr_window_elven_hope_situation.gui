#######################################################
################ ELVEN HOPE SITUATION #################
#######################################################
window = {
	name = "lotr_window_elven_hope_situation"
	widgetid = "lotr_window_elven_hope_situation"
	datacontext = "[SituationWindow.GetSituation]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	layer = windows_layer
	movable = no
	allow_outside = yes

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			vbox = {
				using = Window_Margins

				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 6

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "[Situation.GetNameNoTooltip]"
						}

						blockoverride "button_close"
						{
							onclick = "[SituationWindow.Close]"
						}
					}
				}
				
				# elven_hope_detail_view_content = { # Art at the top
				# }

				scrollbox = { # Shows sub-regions
					name = "sub_region_scrollbox"

					visible = "[Situation.HasMultipleSubRegions]"

					using = Animation_Tab_Switch

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					background = {
						texture = "gfx/interface/illustrations/situation_backgrounds/elven_hope.dds"
						using = Mask_Rough_Edges
						alpha = 0.9
					}

					min_height = 185
					max_height = 185

					blockoverride "scrollbox_content"
					{
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						vbox = {
							name = "sub_regions"
							layoutpolicy_horizontal = expanding
							spacing = 2

							datamodel = "[Situation.GetSubRegions]"

							item = {
								button_situation_subregion = { }
							}
						}

						blockoverride "scrollbox_expand" {
							expand = {}
						}
					}
				}
				
				vbox = { # Your sub-region & phase
					name = "current_sub_region"
					margin_top = 2
					layoutpolicy_horizontal = expanding

					datacontext = "[SituationWindow.GetSelectedSubRegion]"
					datacontext = "[SituationSubRegion.GetCurrentPhase]"

					visible = "[SituationSubRegion.IsValid]"

					text_label_center = {
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						using = Background_Area_Dark
						visible = "[Situation.HasMultipleSubRegions]"

						text = "[SituationSubRegion.GetNameNoTooltip]"
						using = Font_Size_Medium
						align = nobaseline
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						min_height = 75

						margin = { 15 15 }

						datacontext = "[SituationSubRegion.GetCharacterParticipantGroup( GetPlayer )]"

						background = {
							using = Background_Area
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							text_multi = {
								visible = "[Not( SituationParticipantGroup.IsValid )]"
								layoutpolicy_horizontal = expanding

								text = "SITUATION_WINDOW_NO_REGION_PARTICIPANT_GROUP"
								default_format = "#low"
								align = nobaseline
							}

							icon = {
								visible = "[SituationParticipantGroup.IsValid]"

								size = { 40 40 }
								texture = "[SituationParticipantGroup.GetType.GetIcon]"

								background = {
									texture = "gfx/interface/icons/situations/elven_hope/elven_rulers.dds"
									margin = { 5 5 }
								}
							}

							vbox = {
								visible = "[SituationParticipantGroup.IsValid]"

								margin_left = 10
								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[SituationParticipantGroup.GetName]"
									align = nobaseline
								}

								text_single = {
									layoutpolicy_horizontal = expanding

									text = "[SelectLocalization( Situation.HasMultipleSubRegions, 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP_MULTI_SUBREGION', 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP' ) ]"

									align = nobaseline
									default_format = "#Weak"
								}
							}

							expand = {}

							button_standard_small = {
								onclick = "[SituationWindow.AccessParticipantCharacterList.Toggle]"
								text = "SITUATION_WINDOW_VIEW_PARTICIPANT_GROUPS"
							}
						}
					}

					vbox = { # CURRENT PHASE & EFFECTS
						layoutpolicy_horizontal = expanding

						margin = { 15 15 }

						background = {
							using = Background_Area
						}
						
						text_label_center = {
							min_width = 240
							layoutpolicy_horizontal = expanding
							text = "ELVEN_SITUATION_WINDOW_CURRENT_HEADER"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = 10
							spacing = 40
							
							hbox = {
								layoutpolicy_horizontal = expanding
								
								hbox = { # Phase name
									layoutpolicy_horizontal = expanding 
									
									icon = {
										size = { 40 40 }
										texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
										background = {
											texture = "gfx/interface/window_regency/regency_level_bg.dds"
											margin = { 5 5 }
										}

									}

									text_single = {
										layoutpolicy_horizontal = expanding
										margin_left = 10
										text = "[SituationPhase.GetType.GetName]"
										align = nobaseline
									}
								}

								fixedgridbox = { # Effects
									name = "leading_named_effect_sets"

									addcolumn = 48
									addrow = 48
									setitemsizefromcell = yes
									datamodel_wrap = 6
									maxhorizontalslots = 6
									maxverticalslots = 1
									flipdirection = yes
									layoutanchor = topleft

									datamodel = "[SituationSubRegion.GetCurrentPhase.GetType.GetModifierNamedSets]"
									item = {
										button_phase_named_set_item = {
											size = { 80 80 }
											enabled = yes
										}
									}
								}
							}
						}
						expand = {}
					}

					# vbox = { # Possible future phases (TEMP)
					# 	layoutpolicy_horizontal = expanding
					# 	layoutpolicy_vertical = expanding

					# 	margin = { 15 15 }
					# 	margin_top = 10

					# 	background = {
					# 		using = Background_Area
					# 	}

					# 	vbox = {
					# 		name = "current_phase_widget"
					# 		datacontext = "[SituationSubRegion.GetCurrentPhase]"
					# 		datacontext = "[GetPlayer]"
					# 		layoutpolicy_horizontal = expanding

					# 		text_label_center = {
					# 			layoutpolicy_horizontal = expanding
					# 			text = "SITUATION_WINDOW_FUTURE_PHASES_HEADER"
					# 		}

					# 		vbox = {
					# 			layoutpolicy_horizontal = expanding

					# 			vbox = {
					# 				layoutpolicy_horizontal = expanding
					# 				datamodel = "[SituationPhase.GetFuturePhases]"

					# 				item = {
					# 					vbox = {
					# 						layoutpolicy_horizontal = expanding
					# 						min_height = 40

					# 						hbox = {
					# 							layoutpolicy_horizontal = expanding
					# 							layoutpolicy_vertical = expanding

					# 							icon = {
					# 								size = { 30 30 }
					# 								texture = "[FutureSituationPhase.GetType.GetIcon]"

					# 								background = {
					# 									texture = "gfx/interface/window_regency/regency_level_bg.dds"
					# 									margin = { 5 5 }
					# 								}
					# 							}

					# 							text_single = {
					# 								layoutpolicy_horizontal = expanding
					# 								layoutpolicy_vertical = expanding

					# 								margin_left = 10

					# 								text = "[FutureSituationPhase.GetType.GetName]"
					# 								max_width = 230
					# 								align = nobaseline
					# 							}

					# 							expand = {}
												
					# 							fixedgridbox = { # Effects
					# 								name = "leading_named_effect_sets"

					# 								addcolumn = 48
					# 								addrow = 48
					# 								setitemsizefromcell = yes
					# 								datamodel_wrap = 6
					# 								maxhorizontalslots = 6
					# 								maxverticalslots = 1
					# 								flipdirection = yes
					# 								layoutanchor = topleft

					# 								datamodel = "[FutureSituationPhase.GetType.GetModifierNamedSets]"
					# 								item = {
					# 									button_phase_named_set_item = {
					# 										size = { 80 80 }
					# 										enabled = yes
					# 									}
					# 								}
					# 							}
					# 						}
					# 					}
					# 				}
					# 			}
					# 		}
					# 	}
					# }
				}
				
				vbox = { # Hope bars for all sub-regions
					name = "current_hope"
					margin_top = 5
					layoutpolicy_horizontal = expanding
					
					datacontext = "[SituationWindow.GetSituation]"
					datacontext = "[SituationWindow.GetSelectedOrLeadingFuturePhaseType]"
					
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5
						
						### Lorien Hope Value Bar ###
						progress_bars_for_hope_levels = {
							tooltip = "[SituationPhase.GetType.GetName]" # Should show current phase tooltip if possible - doesn't work atm
							blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_LORIEN_HOPE_VALUE" }
							blockoverride "hope_value" { value = "[Situation.MakeScope.Var('lorien_hope_value').GetValue]" }
						}
						### Lindon Hope Value Bar ###
						progress_bars_for_hope_levels = {
							tooltip = "[SituationPhase.GetType.GetName]" # Should show current phase tooltip if possible - doesn't work atm
							blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_LINDON_HOPE_VALUE" }
							blockoverride "hope_value" { value = "[Situation.MakeScope.Var('lindon_hope_value').GetValue]" }
						}
						### Greenwood Hope Value Bar ###
						progress_bars_for_hope_levels = {
							tooltip = "[SituationPhase.GetType.GetName]" # Should show current phase tooltip if possible - doesn't work atm
							blockoverride "hope_value_header" { text = "DISPLAY_CURRENT_GREENWOOD_HOPE_VALUE" }
							blockoverride "hope_value" { value = "[Situation.MakeScope.Var('greenwood_hope_value').GetValue]" }
						}
					}
					
					divider_light = {
						layoutpolicy_horizontal = expanding
					}
					
					text_label_center = {
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						using = Background_Area_Solid
						text = "HOPE_TOOLTIP_GUI"
					}
				}

				spacer = { size = { 1 5 }}

				vbox = { # Possible future phases
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					datacontext = "[SituationWindow.GetSelectedOrLeadingFuturePhaseType]"

					visible = "[Not( IsDataModelEmpty( SituationWindow.GetCatalystsForSelectedPhase ) )]"

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						margin = { 15 15 }
						margin_top = 10

						background = {
							using = Background_Area
						}

						vbox = {
							name = "catalyst_information_area"

							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "SITUATION_WINDOW_FUTURE_CATALYSTS_HEADER"
							}

							scrollbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								blockoverride "scrollbox_background" {}
								blockoverride "scrollbox_background_fade" {}
								blockoverride "scrollbox_margins" {}

								blockoverride "scrollbox_content"
								{
									vbox = {
										name = "catalyst_entries"
										datamodel = "[SituationWindow.GetCatalystsForSelectedPhase]"

										datacontext = "[SituationWindow.GetSelectedSubRegion.GetCurrentPhase]"

										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding

										maximumsize = { 1000 50 }

										item = {
											hbox = {
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding

												hbox = {
													layoutpolicy_vertical = expanding

													background = {
														using = Background_Area_Dark
														using = Color_Green
														alpha = 0.1
														margin_left = 4
														margin_right = 6

													}

													background = {
														using = Background_Frame
														using = Color_Green
														alpha = 0.3
														margin_left = 4
														margin_right = 6

													}

													hbox = {
														layoutpolicy_horizontal = expanding
														icon = {
															size = { 25 25 }
															texture = "[SituationWindow.GetSelectedOrLeadingFuturePhaseType.GetIcon]"
														}
														text_single = {
															text = "[SituationCatalystEntry.GetPoints|+=]"
															align = nobaseline
														}
													}
												}

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													text = "[SituationCatalystEntry.GetCatalystDescription]"
													autoresize = no
													align = left|nobaseline
													max_width = 400
													margin = { 10 5 }
												}

												background = {
													using = Background_Area_Dark
												}

												hbox = {
													layoutpolicy_vertical = expanding
													min_width = 70

													background = {
														visible = "[GreaterThan_int32( SituationPhase.GetNumCompletionsOfCatalystForPhase( SituationWindow.GetSelectedOrLeadingFuturePhaseType, SituationCatalystEntry.GetCatalyst ), '(int32)0' )]"
														using = Background_Frame
														color = { 0.4 0.603 0.298 1 }
														alpha = 0.6
													}

													background = {
														visible = "[GreaterThan_int32( SituationPhase.GetNumCompletionsOfCatalystForPhase( SituationWindow.GetSelectedOrLeadingFuturePhaseType, SituationCatalystEntry.GetCatalyst ), '(int32)0' )]"
														using = Background_Area
														color = { 0.4 0.603 0.298 1 }
														alpha = 0.1
													}

													background = {
														visible = "[EqualTo_int32( SituationPhase.GetNumCompletionsOfCatalystForPhase( SituationWindow.GetSelectedOrLeadingFuturePhaseType, SituationCatalystEntry.GetCatalyst ), '(int32)0' )]"
														using = Background_Frame
														using = Color_Grey
														alpha = 0.4
													}

													background = {
														visible = "[EqualTo_int32( SituationPhase.GetNumCompletionsOfCatalystForPhase( SituationWindow.GetSelectedFuturePhaseType, SituationCatalystEntry.GetCatalyst ), '(int32)0' )]"
														using = Background_Area
														using = Color_Grey
														alpha = 0.1
													}

													text_single = {
														min_width = 70
														layoutpolicy_vertical = expanding

														align = nobaseline|center
														raw_text = "[Select_CString(GreaterThan_int32( SituationPhase.GetNumCompletionsOfCatalystForPhase( SituationWindow.GetSelectedOrLeadingFuturePhaseType, SituationCatalystEntry.GetCatalyst ), '(int32)0'), '#COLOR_GREEN ', '#COLOR_GRAY ')]x[SituationPhase.GetNumCompletionsOfCatalystForPhase(SituationWindow.GetSelectedOrLeadingFuturePhaseType, SituationCatalystEntry.GetCatalyst)]#!"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				expand = {
					visible = "[IsDataModelEmpty( SituationWindow.GetCatalystsForSelectedPhase ) )]"
				}
			}
		}
	}

	window_situation_participant_groups = {
		datacontext = "[SituationWindow.AccessParticipantCharacterList]"
		datacontext = "[SituationWindowParticipantCharacterList.AccessCharacterList]"

		visible = "[SituationWindowParticipantCharacterList.IsVisible]"
	}
}

types Situation
{
	###########################
	## ↓↓↓ Added by Jaco ↓↓↓ ##
	###########################
	type progress_bars_for_hope_levels = widget {
		size = { 550 80 }
		allow_outside = yes
		vbox = {
			allow_outside = yes
			layoutpolicy_vertical = expanding
			spacing = 20
			### Header Text ###
			text_label_center = {
				layoutpolicy_horizontal = expanding
				using = Background_Area_Dark
				block "hope_value_header" {
					text = "DISPLAY_CURRENT_LINDON_HOPE_VALUE"
				}
			}

			### Progress Bar ###
			progressbar_standard = {
				size = { 500 20 }
				max = 1000
				min = 0
				allow_outside = yes
				block "hope_value" {
					value = "[Situation.MakeScope.Var('lorien_hope_value').GetValue]"
				}
				icon = { # 0 Value Marker
					size = { 30 40 }
					position = { -12 -30 }
					texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
					alpha = 1

					text_single = {
						parentanchor = center
						position = { 0 -3 }
						raw_text = "#V [EmptyScope.ScriptValue('elven_situation_zero')|0]#!"
						align = center
						using = Font_Size_Small
					}
				}
				icon = { # Fading
					datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_fading' )]"
					size = { 40 40 }
					texture = "[SituationPhaseType.GetIcon]"
					position = { 30 -10 }
					background = {
						texture = "gfx/interface/window_regency/regency_level_bg.dds"
						margin = { 5 5 }
					}
					tooltipwidget = {
						using = lotr_elven_situation_modifier_named_set_tooltip
					}
					glow = {
						glow_radius = 8
						using = Glow_Standard
						using = Color_Red
					}
				}
				icon = { # 200 Value Marker
					size = { 30 40 }
					position = { 85 -30 }
					texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
					alpha = 1

					text_single = {
						parentanchor = center
						position = { 0 -3 }
						raw_text = "#V [EmptyScope.ScriptValue('elven_fading_limit')|0]#!"
						align = center
						using = Font_Size_Small
					}
				}
				icon = { # Waning
					datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_waning' )]"
					size = { 40 40 }
					texture = "[SituationPhaseType.GetIcon]"
					position = { 130 -10 }
					background = {
						texture = "gfx/interface/window_regency/regency_level_bg.dds"
						margin = { 5 5 }
					}
					tooltipwidget = {
						using = lotr_elven_situation_modifier_named_set_tooltip
					}
					glow = {
						glow_radius = 8
						using = Glow_Standard
						using = Color_Red
					}
				}
				icon = { # 400 Value Marker
					size = { 30 40 }
					position = { 186 -30 }
					texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
					alpha = 1

					text_single = {
						parentanchor = center
						position = { 0 -3 }
						raw_text = "#V [EmptyScope.ScriptValue('elven_waning_limit')|0]#!"
						align = center
						using = Font_Size_Small
					}
				}
				icon = { # Enduring
					datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_enduring' )]"
					size = { 40 40 }
					texture = "[SituationPhaseType.GetIcon]"
					position = { 230 -10 }
					background = {
						texture = "gfx/interface/window_regency/regency_level_bg.dds"
						margin = { 5 5 }
					}
					tooltipwidget = {
						using = lotr_elven_situation_modifier_named_set_tooltip
					}
				}
				icon = { # 600 Value Marker
					size = { 30 40 }
					position = { 286 -30 }
					texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
					alpha = 1

					text_single = {
						parentanchor = center
						position = { 0 -3 }
						raw_text = "#V [EmptyScope.ScriptValue('elven_enduring_limit')|0]#!"
						align = center
						using = Font_Size_Small
					}
				}
				icon = { # Renewing
					datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_renewing' )]"
					size = { 40 40 }
					texture = "[SituationPhaseType.GetIcon]"
					position = { 333 -10 }
					background = {
						texture = "gfx/interface/window_regency/regency_level_bg.dds"
						margin = { 5 5 }
					}
					tooltipwidget = {
						using = lotr_elven_situation_modifier_named_set_tooltip
					}
				}
				icon = { # 800 Value Marker
					size = { 30 40 }
					position = { 386 -30 }
					texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
					alpha = 1

					text_single = {
						parentanchor = center
						position = { 0 -3 }
						raw_text = "#V [EmptyScope.ScriptValue('elven_renewing_limit')|0]#!"
						align = center
						using = Font_Size_Small
					}
				}
				icon = { # Thriving
					datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'situation_elven_thriving' )]"
					size = { 40 40 }
					texture = "[SituationPhaseType.GetIcon]"
					position = { 427 -10 }
					background = {
						texture = "gfx/interface/window_regency/regency_level_bg.dds"
						margin = { 5 5 }
					}
					tooltipwidget = {
						using = lotr_elven_situation_modifier_named_set_tooltip
					}
				}
				icon = { # 1000 Value Marker
					size = { 30 40 }
					position = { 484 -30 }
					texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
					alpha = 1

					text_single = {
						parentanchor = center
						position = { 0 -3 }
						raw_text = "#V [EmptyScope.ScriptValue('elven_thriving_limit')|0]#!"
						align = center
						using = Font_Size_Small
					}
				}
			}
		
		}
		
		expand = {}
	}
	###########################
	## ↑↑↑ Added by Jaco ↑↑↑ ##
	###########################

	type button_situation_subregion = button_standard {
		minimumsize = { 527 50 }

		layoutpolicy_horizontal = expanding

		onclick = "[SituationWindow.SetSelectedSubRegion( SituationSubRegion.Self )]"
		down = "[ObjectsEqual( SituationWindow.GetSelectedSubRegion.Self, SituationSubRegion.Self )]"

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			margin = { 4 0 }
			margin_right = 16
			spacing = 5

			icon = {
				size = { 40 40 }
				texture = "[SituationSubRegion.GetIcon]"
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				spacing = -3
				minimumsize = { 150 -1 }

				expand = {}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "[SituationSubRegion.GetNameNoTooltip]"
					default_format = "#clickable"
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "SITUATION_WINDOW_SUB_GROUP_SUBTITLE"
					align = nobaseline
				}

				expand = {}
			}



			widget = {
				size = { 40 40 }

				widget_level_marker = {
					blockoverride "visible_inactive" {
						visible = no
					}

					icon = {
						size = { 40 40 }
						texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
						parentanchor = center
					}
				}
			}
		}
	}
	
	type elven_hope_detail_view_content = vbox {
		layoutpolicy_horizontal = expanding
		#layoutpolicy_vertical = expanding

		widget = {
			size = { 550 80 }

			proportional_icon = {
				name = "illustrations"
				size = { 100% 100% }
				texture = "gfx/interface/illustrations/situation_backgrounds/elven_hope.dds"
				alpha = 0.7
				using = Mask_Rough_Edges
				
			}
		}

		# decision_detail_description_content = {}
		# decision_custom_widget_content = {}
	}

	type button_phase_named_set_item = button_round {
		datacontext = "[GetPlayer]"

		icon = {
			size = { 100% 100% }

			texture = "gfx/interface/buttons/button_lifestyles_base.dds"
		}

		icon = {
			size = { 80% 80% }
			position = { 0 0 }
			parentanchor = center
			alwaystransparent = yes
			texture = "[SituationModifierNamedSet.GetIcon]"
		}

		tooltipwidget = {
			using = situation_modifier_named_set_tooltip
		}
	}

	type window_situation_participant_groups = window  {
		name = "window_situation_participant_groups"
		widgetanchor = right
		position = { 30 100 }
		size = { 740 82% }

		layer = middle
		movable = yes

		using = Window_Background
		using = Window_Decoration_Spike
		using = Window_Size_CharacterList

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "SITUATION_PARTICIPANT_WINDOW_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[SituationWindowParticipantCharacterList.Close]"
				}
			}

			vbox = {
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }

				spacing = 10

				datamodel = "[SituationWindow.GetSelectedSubRegion.GetParticipantGroups]"

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						icon = {
							visible = "[SituationParticipantGroup.IsValid]"

							size = { 40 40 }
							texture = "[SituationParticipantGroup.GetType.GetIcon]"

							background = {
								texture = "gfx/interface/icons/situations/elven_hope/elven_rulers.dds"
								margin = { 5 5 }
							}
						}

						vbox = {
							margin_left = 10

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[SituationParticipantGroup.GetName]"
								align = nobaseline
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "SITUATION_PARTICIPANT_GROUP_SUBTITLE"
								align = nobaseline
								default_format = "#Weak"
							}
						}

						expand = {}

						button_standard_small = {
							onclick = "[SituationWindowParticipantCharacterList.ToggleSelectedParticipantGroup( SituationParticipantGroup.Self )]"
							down = "[ObjectsEqual( SituationWindowParticipantCharacterList.GetSelectedParticipantGroup.Self, SituationParticipantGroup.Self )]"
							text = "SITUATION_PARTICIPANT_GROUP_FILTER"
						}
					}
				}
			}

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "sort_buttons"
				{
					blockoverride "filters_visible" {
						visible = no
					}

					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding

						blockoverride "skill_sort_buttons" {}
					}
				}

				blockoverride "skill_sort_buttons" {}

				blockoverride "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[Not( CharacterSelectionList.HasItems )]"
					text = "SITUATION_PARTICIPANT_WINDOW_PARTICIPANT_EMPTY"
				}

				blockoverride "container_implementation"
				{
					fixedgridbox = {
						addcolumn = 630
						addrow = 92

						name = "characters_grid"
						datamodel_reuse_widgets = yes
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item_finder = {
								size = { 630 94 }
							}
						}
					}
				}
			}
		}
	}
}

template lotr_elven_situation_modifier_named_set_tooltip {
	object_tooltip_pop_out = {
		blockoverride "title_text" {
			margin = { 0 5 }
			text = "[SituationPhaseType.GetNameNoTooltip]"
			default_format = "#T"
		}

		blockoverride "main_description" {
			vbox = {
				name = "phase_type_desc"
				datacontext = "[SituationPhaseType.GetParentSituationType]"
				datacontext = "[GetSituationOfType( SituationType.Self )]"
				layoutpolicy_horizontal = expanding

				textbox = {
					name = "main_description"
					layoutpolicy_horizontal = expanding
					max_width = 400
					margin = { 0 5 }
					using = DefaultTooltipText
					multiline = yes
					text = "[SituationPhaseType.GetDesc]"
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					alwaystransparent = no
				}

				spacer = {
					size = { 0 10 }
				}

				vbox = {
					visible = "[SituationPhaseType.IsValid]"
					layoutpolicy_horizontal = expanding
					spacing = 8

					hbox = {
						layoutpolicy_horizontal = expanding
						text_single = {
							text = "SITUATION_PHASE_TYPE_MODIFIERS_LABEL"
							default_format = "#bold;italic"
							align = nobaseline
						}
						expand = {}
					}

					fixedgridbox = {
						name = "task_items"
						layoutpolicy_horizontal = expanding

						addcolumn = 56
						addrow = 48
						setitemsizefromcell = yes
						datamodel_wrap = 6
						maxhorizontalslots = 6
						maxverticalslots = 2
						flipdirection = yes
						layoutanchor = topleft

						datamodel = "[SituationPhaseType.GetModifierNamedSets]"
						item = {
							button_situation_phase_effect_item = {}
						}
					}
				}
			}
		}

		blockoverride "concept_link" {
			text = "SITUATION_PHASE_TYPE_CONCEPT_LINK"
		}
	}
} 