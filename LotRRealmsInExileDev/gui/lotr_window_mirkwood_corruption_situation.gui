window = {
    name = "lotr_window_mirkwood_corruption_situation"
    widgetid = "lotr_window_mirkwood_corruption_situation"
    datacontext = "[SituationWindow.GetSituation]"
    datacontext = "[GetVariableSystem]"
    datacontext = "[GetPlayer]"
    parentanchor = top|right
    layer = windows_layer
    movable = no
    allow_outside = yes

    using = Window_Size_MainTab

    state = {
        name = _show
        using = Animation_FadeIn_Quick
        using = Sound_WindowShow_Standard
        using = Window_Position_MainTab
    }

    state = {
        name = _hide
        using = Animation_FadeOut_Quick
        using = Sound_WindowHide_Standard
        using = Window_Position_MainTab_Hide
    }

    margin_widget = {
        size = { 100% 100% }
        margin = { 0 26 }
        margin_right = 13
        widget = {
            size = { 100% 100% }

            vbox = {
                using = Window_Margins

                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding
                vbox = {
                    layoutpolicy_horizontal = expanding
                    spacing = 6

                    header_pattern = {
                        layoutpolicy_horizontal = expanding

                        blockoverride "header_text"
                        {
                            text = "[Situation.GetNameNoTooltip]"
                        }

                        blockoverride "button_close"
                        {
                            onclick = "[SituationWindow.Close]"
                        }
                    }
                }

                scrollbox = { # Shows sub-regions
                    name = "sub_region_scrollbox"

                    visible = "[Situation.HasMultipleSubRegions]"

                    using = Animation_Tab_Switch

                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding

                    background = {
                        texture = "gfx/interface/illustrations/situation_backgrounds/corrupted_mirkwood.dds"
                        using = Mask_Rough_Edges
                        alpha = 0.9
                    }

                    min_height = 185
                    max_height = 185

                    blockoverride "scrollbox_content"
                    {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        vbox = {
                            name = "sub_regions"
                            layoutpolicy_horizontal = expanding
                            spacing = 2

                            datamodel = "[Situation.GetSubRegions]"

                            item = {
                                button_situation_mirkwood_subregion = {
                                    visible = "[SituationSubRegion.GetCharacterParticipantGroup( GetPlayer ).IsValid]"
                                }
                            }
                        }

                        blockoverride "scrollbox_expand" {
                            expand = {}
                        }
                    }
                }

                # scrollbox = { # Shows Fully Corrupted Sub-regions
                #     name = "sub_region_scrollbox_corrupted"

                #     visible = "[Situation.HasMultipleSubRegions]"

                #     using = Animation_Tab_Switch

                #     layoutpolicy_horizontal = expanding
                #     layoutpolicy_vertical = expanding

                #     text_label_center = {
                #         min_width = 240
                #         layoutpolicy_horizontal = expanding
                #         align = center
                #         text = "MIRKWOOD_SITUATION_WINDOW_SUBREGIONS_HEADER"
                #     }

                #     background = {
                #         texture = "gfx/interface/illustrations/situation_backgrounds/corrupted_mirkwood.dds"
                #         using = Mask_Rough_Edges
                #         alpha = 0.9
                #     }

                #     min_height = 185
                #     max_height = 185

                #     blockoverride "scrollbox_content"
                #     {
                #         layoutpolicy_horizontal = expanding
                #         layoutpolicy_vertical = expanding

                #         vbox = { # Sub-region buttons (only active ones)
                #             name = "sub_regions_explicit"
                #             layoutpolicy_horizontal = expanding
                #             spacing = 2

                #             # ARADHRYND
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('aradhrynd').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('aradhrynd')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # TAURDUIN
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('taurduin').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('taurduin')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # TAUR-NU-FUIN
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('taur_nu_fuin').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('taur_nu_fuin')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # EMYN-I-FIRITH
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('emyn_i_firith').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('emyn_i_firith')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # NIVRIM
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('nivrim').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('nivrim')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # DUNDAEDELU
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('dundaedelu').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('dundaedelu')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # ANGALADH-RHUNEN  (note key vs var spelling)
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('angaladh_rhunen').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('angaladh_rhunen')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # MEN-I-NAUGRIM
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('men_i_naugrim').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('men_i_naugrim')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # GWATH ANGLENNOL
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('gwath_anglennol').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('gwath_anglennol')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # TAUR-E-NDAEDLOS
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('taur_e_ndaedlos').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('taur_e_ndaedlos')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }

                #             # AMON LANC
                #             hbox = {
                #                 layoutpolicy_horizontal = expanding
                #                 visible = "[ObjectsEqual(SituationWindow.GetSituation.GetSubRegionByKey('amon_lanc').GetCurrentPhase.GetType.Self, SituationWindow.GetSituation.GetType.GetPhaseType('the_web_of_night').Self)]"
                #                 datacontext = "[SituationWindow.GetSituation.GetSubRegionByKey('amon_lanc')]"
                #                 button_situation_mirkwood_subregion = { }
                #             }
                #         }


                #         blockoverride "scrollbox_expand" {
                #             expand = {}
                #         }
                #     }
                # }

                vbox = { # Your sub-region & phase
                    name = "current_sub_region"
                    margin_top = 2
                    layoutpolicy_horizontal = expanding

                    datacontext = "[SituationWindow.GetSelectedSubRegion]"
                    datacontext = "[SituationSubRegion.GetCurrentPhase]"

                    visible = "[SituationSubRegion.IsValid]"

                    text_label_center = {
                        layoutpolicy_horizontal = expanding
                        margin = { 10 5 }
                        using = Background_Area_Dark
                        visible = "[Situation.HasMultipleSubRegions]"

                        text = "[SituationSubRegion.GetNameNoTooltip]"
                        using = Font_Size_Medium
                        align = nobaseline
                    }

                    vbox = {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        min_height = 75

                        margin = { 15 15 }

                        datacontext = "[SituationSubRegion.GetCharacterParticipantGroup( GetPlayer )]"

                        background = {
                            using = Background_Area
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding

                            text_multi = {
                                visible = "[Not( SituationParticipantGroup.IsValid )]"
                                layoutpolicy_horizontal = expanding

                                text = "SITUATION_WINDOW_NO_REGION_PARTICIPANT_GROUP"
                                default_format = "#low"
                                align = nobaseline
                            }

                            icon = {
                                visible = "[SituationParticipantGroup.IsValid]"

                                size = { 40 40 }
                                texture = "[SituationParticipantGroup.GetType.GetIcon]"
                            }

                            vbox = {
                                visible = "[SituationParticipantGroup.IsValid]"

                                margin_left = 10
                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    text = "[SituationParticipantGroup.GetName]"
                                    align = nobaseline
                                }

                                text_single = {
                                    layoutpolicy_horizontal = expanding

                                    text = "[SelectLocalization( Situation.HasMultipleSubRegions, 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP_MULTI_SUBREGION', 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP' ) ]"

                                    align = nobaseline
                                    default_format = "#Weak"
                                }
                            }

                            expand = {}

                            button_standard_small = {
                                onclick = "[SituationWindow.AccessParticipantCharacterList.Toggle]"
                                text = "SITUATION_WINDOW_VIEW_PARTICIPANT_GROUPS"
                            }
                        }
                    }

                    vbox = { # CURRENT PHASE & EFFECTS
                        layoutpolicy_horizontal = expanding

                        margin = { 15 15 }

                        background = {
                            using = Background_Area
                        }

                        text_label_center = {
                            min_width = 240
                            layoutpolicy_horizontal = expanding
                            text = "MIRKWOOD_SITUATION_WINDOW_CURRENT_HEADER"
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding
                            margin_bottom = 10
                            spacing = 40

                            hbox = {
                                layoutpolicy_horizontal = expanding

                                hbox = { # Phase name
                                    layoutpolicy_horizontal = expanding

                                    icon = {
                                        size = { 40 40 }
                                        texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
                                        background = {
                                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                                            margin = { 5 5 }
                                        }

                                    }

                                    text_single = {
                                        layoutpolicy_horizontal = expanding
                                        margin_left = 10
                                        text = "[SituationPhase.GetType.GetName]"
                                        align = nobaseline
                                    }
                                }

                                fixedgridbox = { # Effects
                                    name = "leading_named_effect_sets"

                                    addcolumn = 48
                                    addrow = 48
                                    setitemsizefromcell = yes
                                    datamodel_wrap = 6
                                    maxhorizontalslots = 6
                                    maxverticalslots = 1
                                    flipdirection = yes
                                    layoutanchor = topleft

                                    datamodel = "[SituationSubRegion.GetCurrentPhase.GetType.GetModifierNamedSets]"
                                    item = {
                                        button_phase_named_set_item = {
                                            size = { 80 80 }
                                            enabled = yes
                                        }
                                    }
                                }
                            }
                        }
                        expand = {}
                    }

                    vbox = { # Corruption Bars
                        name = "current_corruption"
                        margin_top = 5
                        layoutpolicy_horizontal = expanding

                        vbox = {
                            layoutpolicy_horizontal = expanding
                            spacing = 5

                            ### Corruption Value Bar ###
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('aradhrynd').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_ARADHRYND_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('aradhrynd_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('taurduin').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_TAURDUIN_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('taurduin_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('taur_nu_fuin').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_TAUR_NU_FUIN_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('taur_nu_fuin_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('emyn_i_firith').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_EMYN_I_FIRITH_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('emyn_i_firith_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('nivrim').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_NIVRIM_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('nivrim_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('dundaedelu').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_DUNDAEDELU_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('dundaedelu_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('angaladh_rhunen').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_ANGALADH_RHUNEN_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('angaladh_rhunen_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('men_i_naugrim').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_MEN_I_NAUGRIM_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('men_i_naugrim_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('gwath_anglennol').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_GWATH_ANGLENNOL_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('gwath_anglennol_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('taur_e_ndaedlos'))]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_TAUR_E_NDAEDLOS_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('taur_e_ndaedlos_corruption_value')]" }
                            }
                            progress_bars_for_corruption_levels = {
                                tooltip = "[SituationPhase.GetType.GetName]"
                                visible = "[ObjectsEqual(SituationWindow.GetSelectedSubRegion.Self, SituationWindow.GetSituation.GetSubRegionByKey('amon_lanc').Self)]"
                                blockoverride "corruption_value_header" { text = "DISPLAY_CURRENT_AMON_LANC_CORRUPTION_VALUE" }
                                blockoverride "corruption_value" { datacontext = "[Situation.MakeScope.Var('amon_lanc_corruption_value')]" }
                            }
                        }

                        spacer = { size = { 1 10 } }

                        divider_light = {
                            layoutpolicy_horizontal = expanding
                        }

                        spacer = { size = { 1 3 } }

                        text_label_center = {
                            layoutpolicy_horizontal = expanding
                            margin = { 10 5 }
                            using = Background_Area_Solid
                            text = "CORRUPTION_TOOLTIP_GUI"
                        }
                    }
                }

                expand = {
                    visible = "[IsDataModelEmpty( SituationWindow.GetCatalystsForSelectedPhase ) )]"
                }
            }
        }
    }

    window_situation_participant_groups = {
        datacontext = "[SituationWindow.AccessParticipantCharacterList]"
        datacontext = "[SituationWindowParticipantCharacterList.AccessCharacterList]"

        visible = "[SituationWindowParticipantCharacterList.IsVisible]"
    }
}

types = Situation {

    type progress_bars_for_corruption_levels = widget {
        size = { 550 80 }
        allow_outside = yes
        vbox = {
            allow_outside = yes
            layoutpolicy_vertical = expanding
            spacing = 20
            ### Header Text ###
            text_label_center = {
                layoutpolicy_horizontal = expanding
                using = Background_Area_Dark
                block "corruption_value_header" {
                    text = "DISPLAY_CURRENT_CORRUPTION_VALUE"
                }
            }

            ### Progress Bar ###
            hbox = {
                block "corruption_value" {
                    datacontext = "[Situation.MakeScope.Var('[SituationSubRegion.GetNameNoTooltip]_corruption_value')]"
                }
                progressbar_bright_green_red = {
                    block "corruption_value" {
                        datacontext = "[Situation.MakeScope.Var('[SituationSubRegion.GetNameNoTooltip]_corruption_value')]"
                    }
                    visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' )]"
                    size = { 100 20 }
                    max = 200
                    min = 0
                    allow_outside = yes
                    value = "[Scope.GetValue]"

                    highlight_icon = { # Untainted Wood
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'untainted_wood' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 0 Value Marker
                        size = { 30 40 }
                        position = { -14 -30 }
                        parentanchor = left
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_situation_zero')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }
                progressbar_bright_green_red = { #Larger version
                    block "corruption_value" {
                        datacontext = "[Situation.MakeScope.Var('[SituationSubRegion.GetNameNoTooltip]_corruption_value')]"
                    }
                    visible = "[Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
                    size = { 100 44 }
                    max = 200
                    min = 0
                    allow_outside = yes
                    value = "[Scope.GetValue]"

                    ### Horizontal Wipe Animation Left
                    lotr_elven_progressbar_horizontal_swipe_left = {
                        blockoverride "visible_swipe" {
                            visible = "[Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
                        }
                    }
                    # ### Horizontal Wipe Animation Right
                    lotr_elven_progressbar_horizontal_swipe_right = {
                        blockoverride "visible_swipe" {
                            visible = "[Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
                        }
                    }

                    highlight_icon = { # Untainted Wood
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'untainted_wood' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 0 Value Marker
                        size = { 30 40 }
                        position = { -14 -18 }
                        parentanchor = left
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('elven_situation_zero')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }

                progressbar_bright_orange_red = {
                    size = { 100 20 }
                    visible = "[Not(And( Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' )))]"
                    max = 400
                    min = 200
                    allow_outside = yes
                    value = "[Scope.GetValue]"

                    icon = { # Whispers in the Leaves
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'whispers_in_the_leaves' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                        glow = {
                            glow_radius = 8
                            using = Glow_Standard
                            using = Color_Red
                        }
                    }

                    icon = { # 200 Value Marker
                        size = { 30 40 }
                        position = { -14 -30 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_untainted_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }
                progressbar_bright_orange_red = { #Larger version
                    size = { 100 44 }
                    visible = "[And( Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
                    max = 400
                    min = 200
                    allow_outside = yes
                    value = "[Scope.GetValue]"

                    ### Horizontal Wipe Animation Left
                    lotr_elven_progressbar_horizontal_swipe_left = {
                        blockoverride "visible_swipe" {
                            visible = "[And( Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
                        }
                    }
                    ### Horizontal Wipe Animation Right
                    lotr_elven_progressbar_horizontal_swipe_right = {
                        blockoverride "visible_swipe" {
                            visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)200' ))]"
                        }
                    }

                    icon = { # Whispers in the Leaves
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'whispers_in_the_leaves' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                        glow = {
                            glow_radius = 8
                            using = Glow_Standard
                            using = Color_Red
                        }
                    }

                    icon = { # 200 Value Marker
                        size = { 30 40 }
                        position = { -14 -18 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_untainted_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }

                progressbar_orange_red = {
                    size = { 100 20 }
                    visible = "[Not(And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' )))]"
                    max = 600
                    min = 400
                    allow_outside = yes
                    value = "[Scope.GetValue]"

                    icon = { # The Withering Shade
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'the_withering_shade' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 400 Value Marker
                        size = { 30 40 }
                        position = { -14 -30 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_whispers_in_the_leaves_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }
                progressbar_orange_red = { #Larger version
                    size = { 100 44 }
                    visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' ))]"
                    max = 600
                    min = 400
                    allow_outside = yes
                    value = "[Scope.GetValue]"

                    ### Horizontal Wipe Animation Left
                    lotr_elven_progressbar_horizontal_swipe_left = {
                        blockoverride "visible_swipe" {
                            visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' ))]"
                        }
                    }
                    ### Horizontal Wipe Animation Right
                    lotr_elven_progressbar_horizontal_swipe_right = {
                        blockoverride "visible_swipe" {
                            visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)400' ))]"
                        }
                    }

                    icon = { # The Withering Shade
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'the_withering_shade' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 400 Value Marker
                        size = { 30 40 }
                        position = { -14 -18 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_whispers_in_the_leaves_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }

                progressbar_gray_red = {
                    size = { 100 20 }
                    max = 800
                    min = 600
                    allow_outside = yes
                    value = "[Scope.GetValue]"
                    visible = "[Not(And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' )))]"

                    icon = { # Shadow's Grasp
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'shadows_grasp' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 600 Value Marker
                        size = { 30 40 }
                        position = { -14 -30 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_withering_shade_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }
                progressbar_gray_red = { #Larger version
                    size = { 100 44 }
                    max = 800
                    min = 600
                    allow_outside = yes
                    value = "[Scope.GetValue]"
                    visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' ))]"

                    ### Horizontal Wipe Animation Left
                    lotr_elven_progressbar_horizontal_swipe_left = {
                        blockoverride "visible_swipe" {
                            visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' ))]"
                        }
                    }
                    ### Horizontal Wipe Animation Right
                    lotr_elven_progressbar_horizontal_swipe_right = {
                        blockoverride "visible_swipe" {
                            visible = "[And(Not( GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )), GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)600' ))]"
                        }
                    }

                    icon = { # Shadow's Grasp
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'shadows_grasp' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 600 Value Marker
                        size = { 30 40 }
                        position = { -14 -18 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_withering_shade_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }

                progressbar_black_red = {
                    size = { 100 20 }
                    max = 1000
                    min = 800
                    allow_outside = yes
                    value = "[Scope.GetValue]"
                    visible = "[Not(GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' ))]"

                    icon = { # The Web of Night
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'the_web_of_night' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 800 Value Marker
                        size = { 30 40 }
                        position = { -14 -30 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_shadows_grasp_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }

                    icon = { # 1000 Value Marker
                        size = { 30 40 }
                        position = { 13 -30 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = right

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_web_of_night_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }
                progressbar_black_red = { #Larger version
                    size = { 100 44 }
                    max = 1000
                    min = 800
                    allow_outside = yes
                    value = "[Scope.GetValue]"
                    visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )]"

                    ### Horizontal Wipe Animation Left
                    lotr_elven_progressbar_horizontal_swipe_left = {
                        blockoverride "visible_swipe" {
                            visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )]"
                        }
                    }
                    ### Horizontal Wipe Animation Right
                    lotr_elven_progressbar_horizontal_swipe_right = {
                        blockoverride "visible_swipe" {
                            visible = "[GreaterThan_CFixedPoint( Scope.GetValue, '(CFixedPoint)800' )]"
                        }
                    }

                    icon = { # The Web of Night
                        datacontext = "[SituationWindow.GetSituation.GetType.GetPhaseType( 'the_web_of_night' )]"
                        size = { 40 40 }
                        texture = "[SituationPhaseType.GetIcon]"
                        parentanchor = center
                        background = {
                            texture = "gfx/interface/window_regency/regency_level_bg.dds"
                            margin = { 5 5 }
                        }
                        tooltipwidget = {
                            using = lotr_elven_situation_modifier_named_set_tooltip
                        }
                    }

                    icon = { # 800 Value Marker
                        size = { 30 40 }
                        position = { -14 -18 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = left

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_shadows_grasp_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }

                    icon = { # 1000 Value Marker
                        size = { 30 40 }
                        position = { 13 -18 }
                        texture = "gfx/interface/window_dynasty_house/small_arrow.dds"
                        alpha = 1
                        parentanchor = right

                        text_single = {
                            parentanchor = center
                            position = { 0 -3 }
                            raw_text = "#V [EmptyScope.ScriptValue('corruption_web_of_night_limit')|0]#!"
                            align = center
                            using = Font_Size_Small
                        }
                    }
                }
            }
        }

        expand = {}
    }
    type button_situation_mirkwood_subregion = button_standard {
        minimumsize = { 527 50 }

        layoutpolicy_horizontal = expanding

        onclick = "[SituationWindow.SetSelectedSubRegion( SituationSubRegion.Self )]"
        down = "[ObjectsEqual( SituationWindow.GetSelectedSubRegion.Self, SituationSubRegion.Self )]"

        hbox = {
            layoutpolicy_vertical = expanding
            layoutpolicy_horizontal = expanding

            margin = { 4 0 }
            margin_right = 16
            spacing = 5

            vbox = {
                layoutpolicy_vertical = expanding
                layoutpolicy_horizontal = expanding

                spacing = -3
                minimumsize = { 150 -1 }

                expand = {}

                text_single = {
                    layoutpolicy_horizontal = expanding

                    text = "[SituationSubRegion.GetNameNoTooltip]"
                    default_format = "#clickable"
                    align = nobaseline
                }

                text_single = {
                    layoutpolicy_horizontal = expanding

                    text = "SITUATION_WINDOW_SUB_GROUP_SUBTITLE"
                    align = nobaseline
                }

                expand = {}
            }



            widget = {
                size = { 40 40 }

                widget_level_marker = {
                    blockoverride "visible_inactive" {
                        visible = no
                    }

                    icon = {
                        size = { 40 40 }
                        texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
                        parentanchor = center
                    }
                }
            }
        }
    }

    type window_situation_participant_groups = window  {
        name = "window_situation_participant_groups"
        widgetanchor = right
        position = { 30 100 }
        size = { 740 82% }

        layer = middle
        movable = yes

        using = Window_Background
        using = Window_Decoration_Spike
        using = Window_Size_CharacterList

        state = {
            name = _show
            using = Animation_FadeIn_Quick
        }

        state = {
            name = _hide
            using = Animation_FadeOut_Quick
        }

        vbox = {
            using = Window_Margins

            header_pattern = {
                layoutpolicy_horizontal = expanding

                blockoverride "header_text"
                {
                    text = "SITUATION_PARTICIPANT_WINDOW_HEADER"
                }

                blockoverride "button_close"
                {
                    onclick = "[SituationWindowParticipantCharacterList.Close]"
                }
            }

            vbox = {
                layoutpolicy_vertical = preferred
                layoutpolicy_horizontal = expanding
                margin = { 10 0 }

                spacing = 10

                datamodel = "[SituationWindow.GetSelectedSubRegion.GetParticipantGroups]"

                item = {
                    hbox = {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        icon = {
                            visible = "[SituationParticipantGroup.IsValid]"

                            size = { 40 40 }
                            texture = "[SituationParticipantGroup.GetType.GetIcon]"
                        }

                        vbox = {
                            margin_left = 10

                            text_single = {
                                layoutpolicy_horizontal = expanding
                                text = "[SituationParticipantGroup.GetName]"
                                align = nobaseline
                            }

                            text_single = {
                                layoutpolicy_horizontal = expanding
                                text = "SITUATION_PARTICIPANT_GROUP_SUBTITLE"
                                align = nobaseline
                                default_format = "#Weak"
                            }
                        }

                        expand = {}

                        button_standard_small = {
                            onclick = "[SituationWindowParticipantCharacterList.ToggleSelectedParticipantGroup( SituationParticipantGroup.Self )]"
                            down = "[ObjectsEqual( SituationWindowParticipantCharacterList.GetSelectedParticipantGroup.Self, SituationParticipantGroup.Self )]"
                            text = "SITUATION_PARTICIPANT_GROUP_FILTER"
                        }
                    }
                }
            }

            vbox_character_list = {
                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding

                blockoverride "sort_buttons"
                {
                    blockoverride "filters_visible" {
                        visible = no
                    }

                    hbox_list_sort_buttons = {
                        layoutpolicy_horizontal = expanding

                        blockoverride "skill_sort_buttons" {}
                    }
                }

                blockoverride "skill_sort_buttons" {}

                blockoverride "scrollbox_empty_visibility"
                {
                    layoutpolicy_vertical = expanding
                    visible = "[Not( CharacterSelectionList.HasItems )]"
                    text = "SITUATION_PARTICIPANT_WINDOW_PARTICIPANT_EMPTY"
                }

                blockoverride "container_implementation"
                {
                    fixedgridbox = {
                        addcolumn = 630
                        addrow = 92

                        name = "characters_grid"
                        datamodel_reuse_widgets = yes
                        datamodel = "[CharacterSelectionList.GetList]"
                        visible = "[Not(CharacterSelectionList.IsBuildingList)]"

                        item = {
                            widget_character_list_item_finder = {
                                size = { 630 94 }
                            }
                        }
                    }
                }
            }
        }
    }

    type window_inactive_subregions = window {
        name = "window_inactive_subregions"
        widgetanchor = right
        position = { 30 100 }
        size = { 740 82% }

        layer = middle
        movable = yes

        using = Window_Background
        using = Window_Decoration_Spike

        state = {
            name = _show
            using = Animation_FadeIn_Quick
        }

        state = {
            name = _hide
            using = Animation_FadeOut_Quick
        }

    }
}