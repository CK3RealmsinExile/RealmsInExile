window = {
	name = "travel_route_edit_window"
	parentanchor = top|right
	position = { 0 70 }
	size = { 500 780 }
	movable = no

	using = Window_Background
	using = Window_Decoration

	datacontext = "[TravelRouteEditWindow.GetTravelPlanData]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 0
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		position_x = 200
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "TRAVEL_EDIT_ROUTE_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[TravelRouteEditWindow.Close]"
				shortcut = "close_window"
			}
		}

		vbox = {
			name = "contents"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			spacing = 10

			text_multi = {
				name = "instruction_text"

				text = "TRAVEL_EDIT_ROUTE_INSTRUCTION"
				align = center|nobaseline
				autoresize = yes
				default_format = "#I"
				max_width = 380

				margin = { 15 10 }

				background = {
					using = Background_Area_Dark
				}
			}

			scrollbox = {
				name = "route_scroll"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
	
				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 8
	
						datamodel = "[TravelPlanData.GetDestinations]"

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 8

							button_fixed_departure = {
								layoutpolicy_horizontal = expanding
							}
						}

						item = {
							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 8
	
								vbox = {
									name = "detours_between_destinations"
									visible = "[Not( IsDataModelEmpty( TravelPlanDestination.GetWaypoints ) )]"

									layoutpolicy_horizontal = expanding
									datamodel = "[TravelPlanDestination.GetWaypoints]"

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											hbox_add_detour_here = {
												visible = "[TravelRouteEditWindow.IsSelectingProvinceAt( TravelPlanDestination.GetIndex, TravelPlanWaypoint.GetIndex )]"

												layoutpolicy_horizontal = expanding
											}

											hbox_added_detour = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}

								hbox_add_detour_here = { 
									visible = "[Or( TravelRouteEditWindow.IsSelectingProvinceAtEnd( TravelPlanDestination.GetIndex ), And(  TravelRouteEditWindow.IsSelectingProvinceAtBegin( TravelPlanDestination.GetIndex ), IsDataModelEmpty( TravelPlanDestination.GetWaypoints ) ) )]"
									layoutpolicy_horizontal = expanding
								}

								button_fixed_destination = {
									layoutpolicy_horizontal = expanding
								}								
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin = { 15 0 }
				margin_bottom = 15

				spacing = 10

				text_multi = {
					name = "error_text"
					visible = "[Not( TravelRouteEditWindow.IsRouteValid )]"

					text = "[TravelRouteEditWindow.GetRouteValidDesc]"
					align = center|nobaseline
					autoresize = yes
					max_width = 380

					margin = { 10 10 }

					background = {
						using = Background_Area_Dark
					}
				}

				hbox = {
				 	spacing = 10

					button_primary = {
						visible = "[TravelRouteEditWindow.HasTravelStarted]"
						onclick = "[TravelRouteEditWindow.Close]"
						text = CANCEL
					}

					button_primary = {
						enabled = "[TravelRouteEditWindow.IsRouteValid]"
						onclick = "[TravelRouteEditWindow.ApplyChanges]"
						onclick = "[TravelRouteEditWindow.Close]"

						text = "APPLY"
					}
				}
			}
		}
	}
}


types TravelRouteEditTypes
{
	type hbox_add_detour_here = hbox {
		margin_left = 32

		hbox = {
			margin = {4 4}
			spacing = 4

			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Frame
			}

			text_single = {
				margin = { 10 10 }
				layoutpolicy_horizontal = expanding
				text = "TRAVEL_EDIT_ROUTE_SELECT_PROVINCE"
				default_format = "#I"
				align = nobaseline
			}

			button_cancel = {
				size = { 30 30 }
				onclick = "[TravelRouteEditWindow.StopProvinceSelection]"
			}
		}
	}

	type button_fixed_departure = button {
		datacontext = "[TravelPlanData.GetDepartureLocation]"
		datacontext = "[Province.GetTitle]"
		size = {0 60}

		using = State_Title_MouseEntry

		hbox = {
			using = travel_stop_bg

			margin = { 10 10 }
			spacing = 5

			coa_title_tiny = {
				datacontext = "[Province.GetCoATitle]"
				using = tooltip_ws
			}

			vbox = {
				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[Province.GetNameNoTooltip]"
					align = nobaseline
					default_format = "#V"
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "TRAVEL_EDIT_ROUTE_FIXED_SUB_LABEL_DEPARTURE"

					align = nobaseline
					default_format = "#weak"
				}
			}

			expand = {}

			vbox = {
				layoutpolicy_vertical = expanding

				button_plus = {
					visible = "[TravelRouteEditWindow.CanAddWaypointAfterDeparture]"
					onclick = "[TravelRouteEditWindow.AddWaypointAfterDeparture]"
					tooltip = TRAVEL_EDIT_ROUTE_ADD_DETOUR_TT
					inherit_visual_state = no

					background = {
						using = Background_Area_Dark
					}
				}
			}
		}
	}


	type button_fixed_destination = button {
		datacontext = "[TravelPlanDestination.GetProvince]"
		datacontext = "[Province.GetTitle]"
		size = {0 60}

		using = State_Title_MouseEntry

		hbox = {
			using = travel_stop_bg

			margin = { 10 10 }
			margin_right = 10
			spacing = 5

			coa_title_tiny = {
				datacontext = "[Province.GetCoATitle]"
				using = tooltip_ws
			}

			vbox = {				
				text_single = {
					layoutpolicy_horizontal = expanding
					
					text = "[Province.GetNameNoTooltip]"
					align = nobaseline
					default_format = "#V"
				}

				text_single = {
					datacontext = "[TravelPlanDestination.GetProvince]"
					layoutpolicy_horizontal = expanding
					
					text = "TRAVEL_EDIT_ROUTE_FIXED_SUB_LABEL"

					align = nobaseline
					default_format = "#weak"
				}
			}

			expand = {}

			vbox = {
				layoutpolicy_vertical = expanding

				button_plus = {
					visible = "[TravelRouteEditWindow.CanAddWaypointAfterDestination( TravelPlanDestination.GetIndex )]"
					onclick = "[TravelRouteEditWindow.AddWaypointAfterDestination( TravelPlanDestination.GetIndex )]"
					tooltip = TRAVEL_EDIT_ROUTE_ADD_DETOUR_TT
					inherit_visual_state = no

					background = {
						using = Background_Area_Dark
					}
				}
			}
		}
	}

	type hbox_added_detour = hbox {
		margin_left = 32

		button = {
			datacontext = "[TravelPlanWaypoint.GetProvince]"
			datacontext = "[Province.GetTitle]"
			layoutpolicy_horizontal = expanding
			size = {0 55}
			
			state = { #LotR
				trigger_when = "[GetScriptedGui('lotr_selected_province_is_in_valinor_trigger').IsValid(GuiScope.SetRoot( Province.MakeScope ).End)]"
				on_start = "[TravelRouteEditWindow.RemoveWaypoint( TravelPlanDestination.GetIndex, TravelPlanWaypoint.GetIndex )]"
			}

			using = State_Title_MouseEntry

			hbox = {
				using = travel_stop_bg

				hbox = {
					layoutpolicy_horizontal = expanding
					
					margin = { 10 10 }
					spacing = 5

					coa_title_tiny = {
						visible = "[Province.GetCoATitle.IsValid]"
						datacontext = "[Province.GetCoATitle]"
						using = tooltip_ws
					}

					widget = {
						visible = "[Not( Province.GetCoATitle.IsValid )]"
						size = { 42 42 }
						
						icon = {
							parentanchor = center
							texture = "[Province.GetTerrain.GetIcon]"
							position = { 1 0 }
							size = { 35 35 }
						}
					}

					text_single = {
						text = "TRAVEL_EDIT_ROUTE_DETOUR_LABEL"
						align = nobaseline
						max_width = 220
					}

					button_cancel = {
						visible = "[TravelRouteEditWindow.CanRemoveWaypoint( TravelPlanDestination.GetIndex, TravelPlanWaypoint.GetIndex )]"
						onclick = "[TravelRouteEditWindow.RemoveWaypoint( TravelPlanDestination.GetIndex, TravelPlanWaypoint.GetIndex )]"
						
						tooltip = TRAVEL_EDIT_ROUTE_REMOVE_DETOUR_TT

						
						inherit_visual_state = no
					}

					expand = {}

					vbox = {
						layoutpolicy_vertical = expanding

						button_plus = {
							visible = "[TravelRouteEditWindow.CanAddWaypointAfterWaypoint( TravelPlanDestination.GetIndex, TravelPlanWaypoint.GetIndex )]"
							onclick = "[TravelRouteEditWindow.AddWaypointAfterWaypoint( TravelPlanDestination.GetIndex, TravelPlanWaypoint.GetIndex )]"
							tooltip = TRAVEL_EDIT_ROUTE_ADD_DETOUR_TT
							inherit_visual_state = no

							background = {
								using = Background_Area_Dark
							}
						}
					}
				}
			}
		}
	}
}

template travel_stop_bg
{
	# for some reason these appear outside bounding box
	background = {
		using = Background_Area_Dark
	}

	background = {
		texture = "[Province.GetIllustration]"
		alpha = 0.6
		fittype = centercrop

		using = Mask_Rough_Edges

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
			blend_mode = alphamultiply
			mirror = horizontal
		}
	}
}
