### TITLE WINDOW

window = {
	name = "title_view_window"
	movable = no
	allow_outside = yes
	layer = windows_layer

	using = Window_Size_Sidebar
	using = Window_Background_Sidebar

	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Clear( 'display_allegiance' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position_x = -60
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins_Sidebar
		######################################################
		############ TITLE VIEW ( wastelands) ##############
		######################################################

		datacontext = "[TitleViewWindow.GetTitle]"
		datacontext = "[GetScriptedGui('gui_not_is_province_wastelands')]"
		visible = "[Not(ScriptedGui.IsShown( GuiScope.SetRoot( TitleViewWindow.GetTitle.MakeScope ).End))]"
		
		vbox = {
			name = "title_view_main_tab"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			background = {
					texture = "gfx/interface/illustrations/holding_types/wastelands.dds"
					fittype = centercrop
			}
			widget = {
				size = { 100% 100% }
					
				buttons_window_control = {
					parentanchor = top|right

					blockoverride "button_close"
					{
						onclick = "[TitleViewWindow.Close]"
					}

					blockoverride "button_back"
					{
						visible = "[HasViewHistory]"
						onclick = "[OpenFromViewHistory]"
						tooltip = "[GetViewHistoryTooltip]"
					}

					blockoverride "button_me"
					{
						visible = "[Not(Character.IsLocalPlayer)]"
						onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
					}

					blockoverride "button_pin" {}
				}
				text_label_center = {
					parentanchor = top|hcenter
					position = { 0 35 }
					text = "WASTELANDS_TITLE"
					fontsize = 35
				}
				text_single = {
					parentanchor = center|hcenter
					text = "WASTELANDS_INSTRUCTIONS"
					multiline = yes
					autoresize = yes
					max_width = 500
					fontsize = 20
					size = { 100% 100% }
				
					default_format = "#high"
					align = nobaseline
					background = {
						name = "skill_icon_bg"
						texture = "gfx/interface/component_tiles/tile_frame_thin_02_title.dds"
						color = { 1.0 1.0 1.0 0.7}
						frame = "[SkillItem.GetFrame]"
						#framesize = { 100% 100% }
						margin = { 20 20 }
					}
				}
			}
		}
	}

	vbox = {
		using = Window_Margins_Sidebar

		######################################################
		############ TITLE VIEW (no wastelands) ##############
		######################################################

		datacontext = "[TitleViewWindow.GetTitle]"
		datacontext = "[GetScriptedGui('gui_not_is_province_wastelands')]"
		visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( TitleViewWindow.GetTitle.MakeScope ).End)]"
		
		vbox = {
			name = "title_view_main_tab"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			### HEADER ###
			hbox = {
				name = "header_area"
				layoutpolicy_horizontal = expanding

				background = {
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					margin_bottom = 10
					spriteType = Corneredtiled
					spriteborder = { 0 18 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredtiled
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}

				vbox = {
					margin = { 10 5 }
					layoutpolicy_vertical = expanding

					coa_title_big_crown = {
						datacontext = "[TitleViewWindow.GetTitle]"
						tooltip = "[Title.GetCOADeJureTooltip]"

						icon = {
							name = "has_laws"
							visible = "[And( InDebugMode, TitleViewWindow.GetTitle.HasLaws) ]"
							parentanchor = bottom|right
							size = { 42 42 }
							texture = "gfx/interface/icons/title_status/icon_title_law.dds"
						}
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						ignoreinvisible = yes
						datacontext = "[TitleViewWindow.GetTitle]"
						layoutpolicy_horizontal = expanding
						spacing = 5

						hbox = {
							layoutpolicy_horizontal = expanding

							vbox = {
								margin_top = 22

								hbox = {
									layoutpolicy_horizontal = expanding
									ignoreinvisible = yes
									spacing = 5

									text_multi = {
										text = "[TitleViewWindow.GetTitle.GetNameNoTooltip|U]"
										default_format = "#high"
										max_width = 330
										autoresize = yes
										using = Font_Size_Big
									}

									button_edit_text = {
										visible = "[TitleViewWindow.GetTitle.CanPlayerCustomizeTitle]"
										onclick = "[OpenTitleCustomizationWindow(TitleViewWindow.GetTitle)]"
										tooltip = "CUSTOMIZE_TITLE"
									}

									expand = {}
								}

								vbox_title_type_text = {
									layoutpolicy_horizontal = expanding
								}
							}

							watch_window_button = {
								size = { 60 40 }
								onclick = "[AddWatchWindow( TitleViewWindow.GetTitle.MakeScope )]"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								buttons_window_control = {
									blockoverride "button_close"
									{
										onclick = "[TitleViewWindow.Close]"
										onclick = "[TitleViewWindow.CloseHistory]"
										onclick = "[TitleViewWindow.CloseClaimants]"
									}

									blockoverride "button_back"
									{
										visible = "[HasViewHistory]"
										onclick = "[OpenFromViewHistory]"
										tooltip = "[GetViewHistoryTooltip]"
									}

									blockoverride "button_me"
									{
										onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
									}
								}

								expand = {}
							}
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_right = 10
							spacing = 5

							text_single = {
								visible = "[Title.HasFaction]"
								datacontext = "[Title.GetFaction]"
								text = "TITLE_VIEW_FACTION"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								text_single = {
									layoutpolicy_horizontal = expanding
									name = "is_created"
									visible = "[Not(Title.HasHolder)]"
									text = "TV_NOT_CREATED"
								}

								vbox = {
									name = "existing_title"
									layoutpolicy_horizontal = expanding
									ignoreinvisible = yes
									visible = "[Title.HasHolder]"
									spacing = 4

									text_single = {
										name = "my_title"
										layoutpolicy_horizontal = expanding
										visible = "[EqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID )]"
										text = "TV_MY_TITLE"
									}

									text_single = {
										text = "TV_NO_CLAIM"
										layoutpolicy_horizontal = expanding
										visible = "[And(And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), Not(GetPlayer.HasClaimOnTitle(TitleViewWindow.GetTitle ))),Title.CanHaveClaim)]"
									}

									text_multi = {
										name = "have_claim"
										text = "[Title.GetClaimStateFor(GetPlayer)]"
										layoutpolicy_horizontal = expanding
										minimumsize = { 200 50 }
										visible = "[And(NotEqualTo_uint32( Title.GetHolder.GetID, GetPlayer.GetID ), GetPlayer.HasClaimOnTitle(TitleViewWindow.GetTitle ))]"
									}
								}

								expand = {}

							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes
								spacing = 3

								button_sidepanel_right = {
									name = "view_claimants"
									parentanchor = right
									onclick = "[TitleViewWindow.ToggleClaimants]"
									tooltip = "TITLE_CLAIMANTS_TOOLTIP"
									visible = "[Title.CanHaveClaim]"
									enabled = "[GreaterThan_int32( TitleViewWindow.GetNumberOfClaimants, '(int32)0' )]"

									blockoverride "button_text"
									{
										text = "TITLE_VIEW_CLAIMANTS"
									}
								}

								button_sidepanel_right = {
									name = "title history"
									parentanchor = right
									visible = "[And( Not( Title.IsBarony ), Not( Title.HasFaction ) )]"
									onclick = "[TitleViewWindow.ToggleHistory]"

									tooltip = "SHOW_TITLE_HISTORY"

									blockoverride "button_text"
									{
										text = "TITLE_HISTORY"
									}
								}


								text_single = {
									align = right
									parentanchor = right
									visible = "[Not(Title.CanHaveClaim)]"
									text = "TITLE_VIEW_NO_CLAIMANTS"
									tooltip = "TITLE_VIEW_NO_CLAIMANTS_TOOLTIP"
									default_format = "#weak"
								}
							}
						}

						### COUNTY PART OF ####
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5
							margin_right = 10
							margin_bottom = 10

							text_single = {
								text = "TITLE_VIEW_DE_JURE_PART_OF"
								visible = "[DataModelHasItems(TitleViewWindow.GetLiegeItems)]"
							}

							fixedgridbox = {
								name = "dejure_liege_grid"
								datamodel = "[TitleViewWindow.GetLiegeItems]"
								flipdirection = yes
								addcolumn = 40
								addrow = 40
								maxverticalslots = 1
								setitemsizefromcell = yes

								item = {
									widget = {
										size = { 40 50 }

										coa_title_tiny_crown = {
											datacontext = "[TitleItem.GetTitle]"
											position = { 0 -10 }

											using = tooltip_se
										}
									}
								}
							}

							expand = {}

							vbox = {
								visible = "[And(TitleViewWindow.GetTitle.HasHolder,TitleViewWindow.GetTitle.IsLanded)]"
								margin_left = 10
								margin_bottom = 5
								spacing = 5

								text_single = {
									margin_left = 5
									layoutpolicy_horizontal = expanding
									align = center
									max_width = 180
									raw_text = "[TitleViewWindow.GetTypeOfLanded]: "
								}

								button_tertiary = {
									datacontext = "[TitleViewWindow.GetHolding]"
									tooltip = "TITLE_VIEW_GO_TO_HOLDING"
									onclick = "[TitleViewWindow.GoToHolding]"
									size = { 120 30 }
									text = "[Holding.GetProvince.GetNameNoTooltip]"
								}
							}
						}
					}

					expand = {}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				### TABS ###
				hbox = {
					name = "tabs"
					visible = "[Not(IsDataModelEmpty(TitleViewWindow.GetTitleAllegianceVassals))]"
					layoutpolicy_horizontal = expanding

					button_tab = {
						layoutpolicy_horizontal = expanding
						name = "show_vassals"
						text = "TITLE_VIEW_DE_JURE"
						default_format = "#weak"
						down = "[Not( GetVariableSystem.Exists( 'display_allegiance' ) )]"
						onclick = "[GetVariableSystem.Clear( 'display_allegiance' )]"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						name = "show_allegiance"
						text = "TITLE_VIEW_VASSALS"
						default_format = "#weak"
						down = "[GetVariableSystem.Exists( 'display_allegiance' )]"
						onclick = "[GetVariableSystem.Set( 'display_allegiance', 'true' )]"
					}
				}

				vbox = {
					name = "dejure_tab_contents"
					datacontext = "[TitleViewWindow.GetTitle]"
					visible = "[And(DataModelHasItems(TitleViewWindow.GetVassalGroupItems), Not(Or(GetVariableSystem.Exists( 'display_allegiance' ), Or(Title.IsMercenaryCompany,Title.IsHolyOrder))))]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 10
					spacing = 15

					text_label_center = {
						text = "[TitleViewWindow.GetDeJureDescription]"
						max_width = 550
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 300 }

						using = title_window_background_illustration

						blockoverride "scrollbox_content" {
							vbox = {
								layoutpolicy_horizontal = expanding
								datamodel = "[TitleViewWindow.GetVassalGroupItems]"
								spacing = 10

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding

										vbox = {
											datamodel = "[DeJureVassalGroupItem.GetTitleItems]"
											layoutpolicy_horizontal = expanding
											spacing = 3

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[DeJureVassalGroupItem.GetOwnedBy]"
												default_format = "#low"
												max_width = 1000
												margin = { 0 10 }
											}

											item = {
												button_standard_list = {
													datacontext = "[TitleItem.GetTitle]"
													layoutpolicy_horizontal = expanding
													minimumsize = { 0 50 }
													onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
													onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
													button_ignore = none

													tooltipwidget = {
														using = LandedTitleTooltip
													}

													hbox = {
														# position = {0 -8}
														position = {0 -5 }
														margin = { 5 0 }
														coa_title_tiny_crown = {}

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[Title.GetNameNoTooltip|U]"
															default_format = "#high"
															margin = { 10 0 }
															max_width = 1000
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "tab_contents_empty"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[Not(Or(DataModelHasItems(TitleViewWindow.GetVassalGroupItems), GetVariableSystem.Exists( 'display_allegiance' )))]"

					using = title_window_background_illustration

					blockoverride "scrollbox_content" {
						vbox = {
							layoutpolicy_vertical = expanding

							container = {
								visible = "[Not(DataModelHasItems(TitleViewWindow.GetVassalGroupItems))]"

								text_single = {
									visible = "[Not(TitleViewWindow.GetTitle.IsBarony)]"
									text = "TITLE_VIEW_TITULAR"
									default_format = "#weak"
								}

								text_single = {
									visible = "[TitleViewWindow.GetTitle.IsBarony]"
									text = "TITLE_VIEW_BARONY_NO_DEJURE"
									default_format = "#weak"
								}
							}
						}
					}
				}

				vbox = {
					name = "vassals_tab_contents"
					visible = "[GetVariableSystem.Exists( 'display_allegiance' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 10
					spacing = 15

					text_label_center = {
						text = "TITLE_ALLEGIANCE_VASSAL_LIST"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 300 }

						blockoverride "scrollbox_content" {
							vbox = {
								datamodel = "[TitleViewWindow.GetTitleAllegianceVassals]"
								layoutpolicy_horizontal = expanding
								spacing = 3

								item = {
									button_standard_list = {
										layoutpolicy_horizontal = expanding
										minimumsize = { 0 50 }
										onclick = "[DefaultOnCharacterClick(Character.GetID)]"
										onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
										button_ignore = none

										hbox = {
											margin = { 5 0 }
											position = {0 -2 }

											coa_realm_tiny_crown = {}

											text_single = {
												text = "[Character.GetNameNoTooltip]"
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
											}
										}
									}
								}
							}
						}
					}
				}

				hbox = {
					margin = { 20 5 }
					datacontext = "[TitleViewWindow.GetTitle.GetPreferredCapital]"
					visible = "[And( Title.IsValid, Not( TitleViewWindow.GetTitle.HasFaction ) )]"

					text_single = {
						text = "TITLE_VIEW_DE_JURE_CAPITAL"
					}

					widget = {
						size = { 40 40 }

						coa_title_tiny_crown = {
							position = { 0 -10 }
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Title.GetName]"
					}
				}

				divider = {
					layoutpolicy_horizontal = expanding
				}

				vbox = {
					name = "create_title"
					visible = "[And( Not( Title.IsBarony ), Not( TitleViewWindow.GetTitle.HasHolder ) )]"
					margin = { 0 20 }
					spacing = 15

					text_single = {
						text = "TITLE_VIEW_NOT_CREATED"
						using = Font_Size_Big
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							tooltip = "[TitleViewWindow.GetMinimumDeJureTooltip]"

							icon = {
								name = "icon_yes"
								size = { 25 25 }
								texture = "gfx/interface/icons/symbols/icon_check.dds"
								visible = "[TitleViewWindow.HasEnoughCounties]"
							}

							icon = {
								name = "icon_no"
								size = { 25 25 }
								texture = "gfx/interface/icons/symbols/icon_cross.dds"
								visible = "[Not(TitleViewWindow.HasEnoughCounties)]"
							}

							text_single = {
								text = "[TitleViewWindow.GetMinimumDeJureText]"
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							tooltip = "[TitleViewWindow.GetMinimumGoldTooltip]"

							icon = {
								name = "icon_yes"
								visible = "[TitleViewWindow.HasEnoughGold]"
								size = { 25 25 }
								texture = "gfx/interface/icons/symbols/icon_check.dds"
							}

							icon = {
								name = "icon_no"
								visible = "[Not(TitleViewWindow.HasEnoughGold)]"
								size = { 25 25 }
								texture = "gfx/interface/icons/symbols/icon_cross.dds"
							}

							text_single = {
								text = "[TitleViewWindow.GetMinimumGoldText]"
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not( TitleViewWindow.HasTitlesOfTier )]"
							tooltip = "[TitleViewWindow.GetTitlesOfTierTooltip]"

							icon = {
								name = "icon_yes"
								visible = "[TitleViewWindow.HasTitlesOfTier]"
								size = { 25 25 }
								texture = "gfx/interface/icons/symbols/icon_check.dds"
							}

							icon = {
								name = "icon_no"
								visible = "[Not( TitleViewWindow.HasTitlesOfTier )]"
								size = { 25 25 }
								texture = "gfx/interface/icons/symbols/icon_cross.dds"
							}

							text_single = {
								text = "[TitleViewWindow.GetTitlesOfTierText]"
							}

							expand = {}
						}
					}

					text_single = {
						text = "[TitleViewWindow.GetGainText]"
					}

					button_primary = {
						enabled = "[TitleViewWindow.CanTitleBeCreated]"
						text = "TITLE_VIEW_CREATE_TITLE"
						onclick = "[TitleViewWindow.CreateTitle]"
						tooltip = "[TitleViewWindow.GetCreateTitleButtonTooltip]"
					}
				}

				vbox_strength_info = {
					visible = "[Title.IsMercenaryCompany]"
					datacontext = "[Title.GetMercenaryCompany]"

					blockoverride "hired_troops_knights" {
						text = "TITLE_VIEW_MERCENARY_NUMBER_OF_KNIGHTS"
					}

					blockoverride "hired_troops_soldiers" {
						text = "TITLE_VIEW_MERCENARY_NUMBER_OF_SOLDIERS"
					}

					blockoverride "strength_values" {
						value = "[CurrentAndMaxToProgressbarValueInt32( MercenaryCompany.GetCurrentSoldiers, MercenaryCompany.GetMaxSoldiers )]"
					}
				}

				vbox_strength_info = {
					visible = "[Title.IsHolyOrder]"
					datacontext = "[Title.GetHolyOrder]"
				}

				expand = {}

				#### PORTRAITS ###
				vbox = {
					name = "succession_info"
					visible = "[TitleViewWindow.GetTitle.HasHolder]"
					layoutpolicy_vertical = preferred
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 5 }

						vbox = {
							layoutpolicy_vertical = expanding
							datacontext = "[TitleViewWindow.GetTitle.GetHolder]"

							expand = {}

							portrait_torso = {}

							text_label_center = {
								text = "TITLE_VIEW_HOLDER"
								layoutpolicy_horizontal = expanding
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							visible = "[Not( Title.HasFaction )]"

							expand = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_right = 20
								spacing = 10

								text_multi = {
									visible = "[And( InDebugMode, TitleViewWindow.GetTitle.HasLaws) ]"
									layoutpolicy_horizontal = expanding
									margin = { 5 5 }
									size = { 0 100 }
									raw_text = "     [TitleViewWindow.GetSuccessionDescription]"

									icon = {
										name = "has_laws"
										size = { 25 25 }
										texture = "gfx/interface/icons/title_status/icon_title_law.dds"
									}
								}

								text_multi = {
									visible = "[Not(And( InDebugMode, TitleViewWindow.GetTitle.HasLaws))]"
									text = "[TitleViewWindow.GetSuccessionDescription]"
									layoutpolicy_horizontal = expanding
									margin = { 5 5 }
									size = { 0 80 }
								}

								vbox = {
									layoutpolicy_vertical = expanding

									button_round = {
										name = "show_election_window"
										datacontext = "[TitleViewWindow.GetTitle]"
										datacontext = "[Title.GetHolder]"
										visible = "[TitleViewWindow.GetTitle.HasSuccessionOrder('election')]"
										size = { 60 60 }
										tooltip = "TITLE_VIEW_SHOW_ELECTION_TT"
										onclick = "[TitleViewWindow.OpenElection]"

										button_election_vote = {
											alwaystransparent = yes
											parentanchor = center
											position = { 1 -1 }
											size = { 40 40 }
										}
									}
									expand = {}
								}
							}

							fixedgridbox = {
								datamodel = "[TitleViewWindow.GetLineOfSuccession]"
								datamodel_wrap = 4
								flipdirection = yes
								maxhorizontalslots = 4
								maxverticalslots = 1
								addcolumn = 90
								addrow = 100

								item = {
									container = {
										# animation_attention = {
										# 	size = {100% 100%}
										# 	visible = "[Character.IsLocalPlayer]"
										# }

										portrait_head_small = {}
									}
								}
							}

							vbox = {
								visible = "[Not(Title.IsHolyOrder)]"
								layoutpolicy_horizontal = expanding

								text_label_center = {
									text = "TITLE_VIEW_SUCCESSION"
									layoutpolicy_horizontal = expanding
								}
							}
						}

						expand = {}
					}
				}
			}


			hbox ={
				name = "buttons"
				margin = { 0 10 }
				spacing = 5
				visible = "[Not( Title.HasFaction )]"

				hbox = {
					spacing = 5

					vbox = {
						spacing = 5

						hbox = {
							datacontext = "[TitleViewWindow.GetTitle]"
							datacontext = "[Title.GetHolder]"
							visible = "[Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder))]"
							ignoreinvisible = yes
							spacing = 5

							button_tertiary = {
								name = "remove_law"
								visible = "[And( Character.IsLocalPlayer, TitleViewWindow.GetTitle.HasLaws )]"
								text = "TITLE_VIEW_CLEAR_LAWS"
								enabled = "[TitleViewWindow.CanClearLaws]"
								onclick = "[TitleViewWindow.ClearLaws]"
								tooltip = "[TitleViewWindow.GetClearLawsButtonTooltip]"
							}

							button_tertiary = {
								name = "open_laws"
								text = "TITLE_VIEW_SHOW_ADD_LAWS"
								visible = "[And( Character.IsLocalPlayer, TitleViewWindow.CanAddLaws )]"
								onclick = "[TitleViewWindow.ToggleLaws]"
							}

							button_standard = {
								name = "toggle_find_vassal"
								text = "FIND_VASSAL_HEADER"
								visible = "[And( And( ObjectsEqual( Title.GetHolder, GetPlayer ), TitleViewWindow.GetTitle.CanUseFindVassal( GetPlayer ) ), Not( Title.IsLeasedOut))]"

								onclick = "[TitleViewWindow.ToggleFindVassalListWindow]"
								tooltip = "FIND_VASSAL_BUTTON_TOOLTIP"
							}
						}

						hbox = {
							datacontext = "[TitleViewWindow.GetTitle]"
							datacontext = "[TitleViewWindow.GetTitle.GetHolder]"
							visible = "[Not(Or(Title.IsMercenaryCompany,Title.IsHolyOrder))]"
							spacing = 5

							button_tertiary = {
								name = "destroy_title"
								text = "TITLE_VIEW_DESTROY_TITLE"
								visible = "[TitleViewWindow.ShowDestroy]"
								enabled = "[TitleViewWindow.CanTitleBeDestroyed]"
								onclick = "[TitleViewWindow.DestroyTitle]"
								tooltip = "[TitleViewWindow.GetDestroyTitleButtonTooltip]"
							}

							button_tertiary = {
								name = "make_primary_title"
								text = "TITLE_VIEW_MAKE_PRIMARY"
								visible = "[And( Character.IsLocalPlayer, TitleViewWindow.CanMakePrimary )]"
								onclick = "[TitleViewWindow.MakePrimary]"
								tooltip = "TITLE_MAKE_PRIMARY_TOOLTIP"
							}

							button_primary = {
								name = "usurp_title"
								text = "TITLE_VIEW_USURP_TITLE"
								visible = "[And( Not(Character.IsLocalPlayer), TitleViewWindow.ShowUsurp )]"
								enabled = "[TitleViewWindow.CanTitleBeUsurped]"
								onclick = "[TitleViewWindow.UsurpTitle]"
								tooltip = "[TitleViewWindow.GetUsurpTitleButtonTooltip]"
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################


template title_view_window_side_pop_out
{
	position = { 0 80 }


	state = {
		name = _show
		using = Animation_FadeIn_Standard
		position_x = 590
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		position_x = 500
	}
}

template title_window_background_illustration
{
	background = {
		texture = "[GetIllustration( 'title_holding' ).GetTexture( TitleViewWindow.GetTitle.MakeScope )]"
		alpha = 0.5
		fittype = centercrop

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
			blend_mode = alphamultiply
			mirror = vertical
		}

		using = Mask_Rough_Edges
	}
}

types Title
{
	type vbox_title_type_text = vbox {

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Or(Title.IsMercenaryCompany, Or( Title.IsHolyOrder, Title.HasFaction )))]"
			text = "TV_TIER_INFO"
		}

		text_single = {
			layoutpolicy_horizontal = expanding
			visible = "[Not(Title.CanHaveClaim)]"
			text = "[Title.GetSpecialDescription]"
		}
	}
}
