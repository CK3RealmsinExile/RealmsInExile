######################################################
################# MEMORIES VIEW ######################
######################################################

window = {
	name = "memories_window"
	size = { 800 1000 }
	parentanchor = center
	datacontext = "[MemoriesWindow.GetCharacter]"

	layer = top

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration_Spike
	using = Animation_ShowHide_Standard

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "MEMORIES_WINDOW_HEADING"
			}

			blockoverride "button_close"
			{
				onclick = "[MemoriesWindow.Close]"
			}

			button_copy = {
				parentanchor = right|vcenter
				position = { -50 -4 }
				size = { 30 30 }
				onclick = "[MemoriesWindow.CopyMemoriesToClipboard]"
				tooltip = "MEMORIES_WINDOW_COPY_TO_CLIPBOARD"
			}

			button_pin = {
				parentanchor = right|vcenter
				position = { -80 -4 }
				name = "button_pin"
				visible = "[Not( MemoriesWindow.IsPinned )]"
				onclick = "[MemoriesWindow.TogglePinned]"
				tooltip = "MEMORIES_WINDOW_PIN_IT"
				using = tooltip_se
			}

			button_unpin = {
				parentanchor = right|vcenter
				position = { -80 -4 }
				name = "button_unpin"
				visible = "[MemoriesWindow.IsPinned]"
				onclick = "[MemoriesWindow.TogglePinned]"
				tooltip = "MEMORIES_WINDOW_PIN_IT"
				using = tooltip_se
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			datacontext = "[GetIllustration( 'character_private' )]"

			background = {
				texture = "[Illustration.GetTexture( Character.MakeScope )]"
				margin = { -5 0 }
				fittype = centercrop
				alpha = 1
							
				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
					mirror = vertical
				}
			}
			
			hbox = {

				portrait_button = {
					layoutpolicy_horizontal = preferred
					block "portrait_size"
					{
						size = { 220 285 }
					}
					using = portrait_base

					portrait_texture = "[Character.GetAnimatedPortrait( 'environment_council', 'camera_torso', 'chancellor', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"
					mask = "gfx/portraits/portrait_mask_council.dds"
					effectname = "NoHighlight"

					block "mask" {
						mask = "gfx/portraits/portrait_mask_council.dds"
					}
				}
			}

			vbox = {
				margin_left = 40
				margin_right = 10
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				text_multi = {
					margin_top = 10
					name = "memory_info_text"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "MEMORY_INFO"
					elide = right
					default_format = "#low"
				}

				hbox = {
					visible = "[Character.IsDeadAndValid]"
					layoutpolicy_horizontal = expanding
					margin_left = 10
					margin_top = 10
					margin_right = 10
					margin_bottom = 10
					background = {
						using = Background_Area_Dark
					}

 					icon = {
						name = "is_dead"
						size = { 20 20 }
						texture = "[Character.GetDeathReasonIcon]"
					}

					text_multi = {
						align = left|nobaseline
						margin_left = 10
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						text = "CHARACTER_DEAD_TOOLTIP"
					}
				}

				expand = {}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 4
					margin_right = 4
					margin_top = 10
					expand = {}

					button_standard = {
						name = "sort_order"
						size = { 25 25 }
						tooltip = "MEMORY_SORT_ORDER_TOOLTIP"
						using = tooltip_ne
						onclick = "[MemoriesWindow.ToggleListOrder]"

						button_icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
							framesize = { 66 66 }
							frame = "[BoolTo2And1( MemoriesWindow.IsListOrderDescending )]"

							alwaystransparent = yes

							blockoverride "button_frames"
							{
								effectname = "NoHighlight"
							}
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left = 4
			margin_right = 4

			vbox = {
				name = "paper_contract"
				margin_top = 12
				margin_bottom = 12
				margin_right = -3

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				using = Background_Letter
				spacing = 4

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_background" {}
						blockoverride "scrollbox_background_fade" {}
						blockoverride "scrollbox_content" {
							margin_top = 0
							margin_bottom = 0

							vbox = {
								datamodel = "[MemoriesWindow.GetFilteredMemories]"
								layoutpolicy_horizontal = expanding
								spacing = 0

								item = {

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_bottom = 5
										margin_left = 10
										margin_right = 10
										background = {
											using = Background_Area
											alpha = 0.4
										}

										watch_window_button = {
											size = { 60 20 }
											onclick = "[AddWatchWindow( CharacterMemory.MakeScope )]"
										}

										vbox = {
											size = { 26 26 }
											margin_top = 3
											margin_right = 5
											icon = {
												size = { 26 26 }
												texture = "[CharacterMemory.GetType.GetIcon]"
												alwaystransparent = yes
												alpha = 0.7
												tooltip = "[CharacterMemory.GetName|U]"
												using = tooltip_ws
											}
										}

										text_multi = {
											max_width = 440
											autoresize = yes
											align = left
											text = "MEMORIES_WINDOW_ENTRY"
											margin_right = 5
											elide = right
											default_format = "#light_background"
											using = Text_Light_Background_Overrides
										}

										expand = {}

										text_single = {
											alpha = 0.5
											text = "[CharacterMemory.GetCreationDate.GetString]"
											size = { 200 0 }
											align = right
											elide = right
											default_format = "#light_background"
										}
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[IsDataModelEmpty( MemoriesWindow.GetFilteredMemories )]"
							text = "CHARACTER_HAS_NO_MEMORIES"
						}
					}
				}
			}
		}
	}
}
