
widget = {
	name = "mainmenu_panel_bottom"
	parentanchor = bottom
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_show"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_hide"
		}
	}

	widget = {
		parentanchor = center
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
		icon = {
			texture = "gfx/interface/illustrations/main_menu/frontend_realms.dds"
			size = { 1920 1080 }
		}
		widget = {
			name = "left_panel"
			parentanchor = left|bottom
			position = { 0 495 }
			size = { 100% 100% }
			#alpha = 0.3
			#texture = "gfx/interface/frontend/frontend_main_menu_bg.dds"

			hbox = {
				datacontext = "[FrontEndMainView.AccessLoadView]"
				margin = { 0 0 }

				hbox = {
					margin_left = 20
					margin_bottom = -50
					button_group = {
						onclick = "[FrontEndMainView.OnSettings]"

						flowcontainer = {
							spacing = 5

							button_settings = {
								name = "settings"
								parentanchor = vcenter
								size = { 25 25 }
								alpha = 0.7
							}

							text_single = {
								parentanchor = vcenter
								max_width = 80
								min_width = 60
								autoresize = yes
								fontsize = 13

								text = "SETTINGS"
								default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
								align = nobaseline
							}
						}
					}
					button_group = {
						onclick = "[FrontEndMainView.OnLogin]"

						flowcontainer = {
							spacing = 18

							pops_login_accountwidget = {
								parentanchor = vcenter
								size = { 25 25 }
								alpha = 0.7

								blockoverride "properties" {
									onclick = "[FrontEndMainView.OnLogin]"
								}
							}

							text_single = {
								parentanchor = vcenter
								max_width = 80
								min_width = 80
								fontsize = 13

								text = "ACCOUNT"
								default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
								align = nobaseline
							}
						}
					}
				}
				spacer = { size = { 33 10 } }
				vbox = {
					margin_top = 0
					margin_bottom = 20
					margin_left = 50
					spacing = -10
					spacer = { size = { 10 10 }}
					hbox = {
						spacing = 10
						vbox = {
							spacing = 5

							text_single = {
								layoutpolicy_horizontal = expanding
								margin_left = 5
								text = "SINGLE_PLAYER"
								default_format = "#italic;glow_color:{0.1,0.1,0.1,1}"
							}
							hbox = {
								spacing = 10
								vbox = {
									button_primary_big_realms = {
										name = "continue_button_disabled"
										visible = "[Not(FrontEndLoadView.CanDoContinue)]"
										enabled = no

										text = "CONTINUE"
										default_format = "#weak"
										fontsize = 20
										tooltip = FRONTEND_NO_CONTINUE_TT

									}

									button_primary_big_realms = {
										name = "continue_button"
										datacontext = "[FrontEndLoadView.GetContinueSave]"
										visible = "[FrontEndLoadView.CanDoContinue]"
										enabled = "[Not( SaveGameItem.HasMissingDLCs )]"
										onclick = "[PdxGuiTriggerAllAnimations('main_menu_continue')]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_exit_leave')]"
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_leave','main_menu_glow_continue_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_enter','main_menu_glow_continue_leave')]"
										}

										state = {
											name = "main_menu_continue"
											delay = 1.5
											on_finish = "[FrontEndLoadView.OnContinue]"
										}

										state = {
											name = _mouse_release
											start_sound = {
												soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
											}
											on_start = "[FrontEndLoadView.PreContinueSaveCheck]"
										}

										text = "CONTINUE"
										fontsize = 20
										tooltip = FRONTEND_CONTINUE_TT

										hbox = {
											parentanchor = right|vcenter
											alwaystransparent = yes
											margin_right = 10

											ironman_save_icon = {
												visible = "[SaveGameItem.IsIronmanSave]"
												tooltip = "LOAD_IRONMAN_TOOLTIP"
											}

											invalid_save_icon = {
												visible = "[SaveGameItem.HasMissingDLCs]"
												tooltip = "[SaveGameItem.GetMissingDLCInfo]"
											}

											achievements_disabled_icon = {
												visible = "[SaveGameItem.HasAchievementBlockingGameRules]"
												tooltip = "[SaveGameItem.GetAchievementBlockingGameRulesInfo]"
											}

											achievements_disabled_icon = {
												visible = "[And( Not(SaveGameItem.HasAchievementBlockingGameRules), Not(SaveGameItem.CanGetAchievements) )]"
												tooltip = "ACHIEVEMENTS_DISABLED_SAVEGAME"
											}

											expand = {
												alwaystransparent = yes
											}

											coat_of_arms_icon = {
												name = "realm_flag"
												alwaystransparent = yes

												size = { 62 62 }
												coat_of_arms_slot = "[SaveGameItem.GetCoatOfArms.GetSlot('(int32)124','(int32)124')]"
												coat_of_arms = "[SaveGameItem.GetCoatOfArms.GetTexture('(int32)124','(int32)124')]"
												coat_of_arms_mask = "[SaveGameItem.GetPlayerGovernment.GetRealmMask]"

												coa_realm_overlay  = {
													texture = "[SaveGameItem.GetPlayerGovernment.GetRealmFrame('(int32)62')]"
													frame = "[SaveGameItem.GetPlayerTier]"
													framesize = { 62 71 }
													size = { 62 71 }
												}

												coa_realm_topframe  = {
													texture = "gfx/interface/coat_of_arms/topframe_62.dds"
													frame = "[SaveGameItem.GetPlayerTier]"
													framesize = { 62 71 }
													size = { 62 71 }
												}
											}
										}
									}
								}

								button_primary_big_realms = {
									name = "new_game_button"
									text = "NEW_GAME"
									fontsize = 20
									onclick = "[FrontEndMainView.OnNewGame]"

									state = {
										name = _mouse_hierarchy_enter
										on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_leave','main_menu_glow_new_enter')]"
									}

									state = {
										name = _mouse_hierarchy_leave
										on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_enter','main_menu_glow_new_leave')]"
									}
								}

								vbox = {
									button_primary_big_realms = {
										name = "load_game_button_disabled"
										visible = "[Not(FrontEndLoadView.CanDoContinue)]"
										enabled = no

										text = "LOAD"
										default_format = "#weak"
										fontsize = 20
										tooltip = FRONTEND_NO_CONTINUE_TT

									}

									button_primary_big_realms = {
										name = "load_game_button"
										visible = "[FrontEndLoadView.CanDoContinue]"
										text = "LOAD"
										fontsize = 20
										onclick = "[FrontEndMainView.OnLoad]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_leave','main_menu_glow_load_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_enter','main_menu_glow_load_leave')]"
										}
									}
								}
							}
							spacer = { size = { 5 5 } }
						}
						vbox = {
							spacing = 5
							text_single = {
								layoutpolicy_horizontal = expanding
								margin_left = 5
								text = "MULTI_PLAYER"
								default_format = "#italic;glow_color:{0.1,0.1,0.1,1}"
							}

							vbox = {
								spacing = 10
								hbox = {
									visible = "[And( POPSStatusIsLoggedIn, Not( POPStatusIsUserNameEmpty ) )]"
									spacing = 10

									button_primary_big_realms = {
										name = "host_button"
										text = "HOST_GAME"
										fontsize = 20
										onclick = "[FrontEndMainView.OnHost]"
										onclick = "[RefreshIllustration]"
										enabled = "[JominiIsMultiplayerAccessible]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
										}
									}

									button_primary_big_realms = {
										name = "join_button"
										text = "FRONTEND_JOIN_MULTIPLAYER"
										fontsize = 20
										onclick = "[FrontEndMainView.OnMultiPlayer]"
										onclick = "[RefreshIllustration]"
										enabled = "[JominiIsMultiplayerAccessible]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
										}
									}
								}

								hbox = {
									visible = "[Or( Not( POPSStatusIsLoggedIn ), POPStatusIsUserNameEmpty )]"
									spacing = 10

									button_primary_big_realms = {
										name = "host_button"
										text = "HOST_GAME"
										default_format = "#weak"
										fontsize = 20
										onclick = "[FrontEndMainView.OnLogin]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
										}

										icon_online_offline = {
											parentanchor = right|vcenter
											position = { -15 0 }
											frame = 2
										}
									}

									button_primary_big_realms = {
										name = "join_button"
										text = "FRONTEND_JOIN_MULTIPLAYER"
										default_format = "#weak"
										fontsize = 20
										onclick = "[FrontEndMainView.OnLogin]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
										}

										icon_online_offline = {
											parentanchor = right|vcenter
											position = { -15 0 }
											frame = 2
										}
									}
								}
								vbox = {
									margin_right = 0
									spacing = 5
									hbox = {
										spacing = 10

									}
								}
							}
						}
					}
				}
				expand = {}
				vbox = {
					margin_right = -20
					margin_bottom = 15
					hbox = {
						button_group = {
							onclick = "[OpenAchievements]"
							enabled = "[AreAchievementsAvailable]"
							tooltip = "[GetAchievementsAvailableString]"

							flowcontainer = {
								direction = vertical

								button_achievements = {
									name = "achievements"
									parentanchor = hcenter
									size = { 30 30 }
									alpha = 0.7
									enabled = "[AreAchievementsAvailable]"
								}

								text_single = {
									parentanchor = hcenter
									max_width = 80
									min_width = 80
									align = center
									fontsize = 13

									text = "ACHIEVEMENTS"
									default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
								}
							}
						}

						button_group = {
							onclick = "[ToggleEncyclopedia]"

							flowcontainer = {
								direction = vertical

								button_encyclopedia = {
									parentanchor = hcenter
									size = { 30 30 }
									alpha = 0.7
								}

								text_single = {
									parentanchor = hcenter
									max_width = 80
									min_width = 80
									align = center
									fontsize = 13
									fontsize_min = 10

									text = "HEADING_ENCYCLOPEDIA"
									default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
								}
							}
						}

						button_group = {
							onclick = "[FrontEndMainView.OnCredits]"

							flowcontainer = {
								direction = vertical

								button_credits = {
									parentanchor = hcenter
									size = { 25 25 }
									alpha = 0.7
								}

								text_single = {
									parentanchor = hcenter
									max_width = 80
									min_width = 80
									autoresize = yes
									align = center
									fontsize = 13

									text = "CREDITS"
									default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
								}
							}
						}
					}
					spacer = { size = { 0 10 } }
					button_primary = {
						name = "exit_game_button"
						visible = yes
						text = "EXIT_TO_DESKTOP"
						fontsize = 20
						onclick = "[FrontEndMainView.OnQuit]"

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_continue_leave')]"
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_leave','main_menu_glow_exit_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_enter','main_menu_glow_exit_leave')]"
						}
					}
				}
				spacer = { size = { 25 10 } }
			}
		}
	}

	clickable_version_number = {

		parentanchor = top|right
		position = { -15 5 }

		using = tooltip_se

		blockoverride "background"
		{

		}


	}

	widget = { #LotR
		size = { 155 30 }
		parentanchor = top|right
		position = { -49 50 }
		text_single = {
			text = lotr_mod_version
		}
		text_single = {
			text = lotr_mod_build
			position = { 0 18 }
		}
	}



	error_horse = {
		visible = "[Not(ReleaseMode)]"
		parentanchor = bottom|right
		position = { -80 -90 }
	}
}

