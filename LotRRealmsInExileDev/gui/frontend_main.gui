
widget = {
	name = "mainmenu_panel_bottom"
	parentanchor = bottom
	size = { 100% 100% }

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_show"
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_hide"
		}
	}

	widget = {
		parentanchor = center
		size = { 1920 1080 }
		scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
		icon = {
			texture = "gfx/interface/illustrations/main_menu/frontend_realms.dds"
			size = { 1920 1080 }
		}
		widget = {
			name = "left_panel"
			parentanchor = left|bottom
			position = { 0 495 }
			size = { 100% 100% }
			#alpha = 0.3
			#texture = "gfx/interface/frontend/frontend_main_menu_bg.dds"

			hbox = {
				datacontext = "[FrontEndMainView.AccessLoadView]"
				margin = { 0 0 }

				hbox = {
					margin_left = 20
					margin_bottom = -50
					button_group = {
						onclick = "[FrontEndMainView.OnSettings]"

						flowcontainer = {
							spacing = 5

							button_settings = {
								name = "settings"
								parentanchor = vcenter
								size = { 25 25 }
								alpha = 0.7
							}

							text_single = {
								parentanchor = vcenter
								max_width = 80
								min_width = 60
								autoresize = yes
								fontsize = 13

								text = "SETTINGS"
								default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
								align = nobaseline
							}
						}
					}
					button_group = {
						onclick = "[FrontEndMainView.OnLogin]"

						flowcontainer = {
							spacing = 18

							pops_login_accountwidget = {
								parentanchor = vcenter
								size = { 25 25 }
								alpha = 0.7

								blockoverride "properties" {
									onclick = "[FrontEndMainView.OnLogin]"
								}
							}

							text_single = {
								parentanchor = vcenter
								max_width = 80
								min_width = 80
								fontsize = 13

								text = "ACCOUNT"
								default_format = "#clickable;glow_color:{0.1,0.1,0.1,1}"
								align = nobaseline
							}
						}
					}
				}
				spacer = { size = { 33 10 } }
				vbox = {
					margin_top = 0
					margin_bottom = 20
					margin_left = 50
					spacing = -10
					spacer = { size = { 10 10 }}
					hbox = {
						spacing = 10
						vbox = {
							spacing = 5

							text_single = {
								layoutpolicy_horizontal = expanding
								margin_left = 5
								text = "SINGLE_PLAYER"
								default_format = "#italic;glow_color:{0.1,0.1,0.1,1}"
							}
							hbox = {
								spacing = 10
								vbox = {
									button_primary_big_realms = {
										name = "continue_button_disabled"
										visible = "[Not(FrontEndLoadView.CanDoContinue)]"
										enabled = no

										text = "CONTINUE"
										default_format = "#weak"
										fontsize = 20
										tooltip = FRONTEND_NO_CONTINUE_TT

									}

									button_primary_big_realms = {
										name = "continue_button"
										datacontext = "[FrontEndLoadView.GetContinueSave]"
										visible = "[FrontEndLoadView.CanDoContinue]"
										enabled = "[Not( SaveGameItem.HasMissingDLCs )]"
										onclick = "[PdxGuiTriggerAllAnimations('main_menu_continue')]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_exit_leave')]"
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_leave','main_menu_glow_continue_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_continue_enter','main_menu_glow_continue_leave')]"
										}

										state = {
											name = "main_menu_continue"
											delay = 1.5
											on_finish = "[FrontEndLoadView.OnContinue]"
										}

										state = {
											name = _mouse_release
											start_sound = {
												soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
											}
											on_start = "[FrontEndLoadView.PreContinueSaveCheck]"
										}

										text = "CONTINUE"
										fontsize = 20
										tooltip = FRONTEND_CONTINUE_TT

										hbox = {
											parentanchor = right|vcenter
											alwaystransparent = yes
											margin_right = 10

											ironman_save_icon = {
												visible = "[SaveGameItem.IsIronmanSave]"
												tooltip = "LOAD_IRONMAN_TOOLTIP"
											}

											invalid_save_icon = {
												visible = "[SaveGameItem.HasMissingDLCs]"
												tooltip = "[SaveGameItem.GetMissingDLCInfo]"
											}

											achievements_disabled_icon = {
												visible = "[SaveGameItem.HasAchievementBlockingGameRules]"
												tooltip = "[SaveGameItem.GetAchievementBlockingGameRulesInfo]"
											}

											achievements_disabled_icon = {
												visible = "[And( Not(SaveGameItem.HasAchievementBlockingGameRules), Not(SaveGameItem.CanGetAchievements) )]"
												tooltip = "ACHIEVEMENTS_DISABLED_SAVEGAME"
											}

											expand = {
												alwaystransparent = yes
											}

											coat_of_arms_icon = {
												name = "realm_flag"
												alwaystransparent = yes

												size = { 62 62 }
												coat_of_arms_slot = "[SaveGameItem.GetCoatOfArms.GetSlot('(int32)124','(int32)124')]"
												coat_of_arms = "[SaveGameItem.GetCoatOfArms.GetTexture('(int32)124','(int32)124')]"
												coat_of_arms_mask = "[SaveGameItem.GetPlayerGovernment.GetRealmMask]"

												coa_realm_overlay  = {
													texture = "[SaveGameItem.GetPlayerGovernment.GetRealmFrame('(int32)62')]"
													frame = "[SaveGameItem.GetPlayerTier]"
													framesize = { 62 71 }
													size = { 62 71 }
												}

												coa_realm_topframe  = {
													texture = "gfx/interface/coat_of_arms/topframe_62.dds"
													frame = "[SaveGameItem.GetPlayerTier]"
													framesize = { 62 71 }
													size = { 62 71 }
												}
											}
										}
									}
								}

								button_primary_big_realms = {
									name = "new_game_button"
									text = "NEW_GAME"
									fontsize = 20
									onclick = "[FrontEndMainView.OnNewGame]"

									state = {
										name = _mouse_hierarchy_enter
										on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_leave','main_menu_glow_new_enter')]"
									}

									state = {
										name = _mouse_hierarchy_leave
										on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_new_enter','main_menu_glow_new_leave')]"
									}
								}

								vbox = {
									button_primary_big_realms = {
										name = "load_game_button_disabled"
										visible = "[Not(FrontEndLoadView.CanDoContinue)]"
										enabled = no

										text = "LOAD"
										default_format = "#weak"
										fontsize = 20
										tooltip = FRONTEND_NO_CONTINUE_TT

									}

									button_primary_big_realms = {
										name = "load_game_button"
										visible = "[FrontEndLoadView.CanDoContinue]"
										text = "LOAD"
										fontsize = 20
										onclick = "[FrontEndMainView.OnLoad]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_leave','main_menu_glow_load_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_load_enter','main_menu_glow_load_leave')]"
										}
									}
								}
							}
							spacer = { size = { 5 5 } }
						}
						vbox = {
							spacing = 5
							text_single = {
								layoutpolicy_horizontal = expanding
								margin_left = 5
								text = "MULTI_PLAYER"
								default_format = "#italic;glow_color:{0.1,0.1,0.1,1}"
							}

							vbox = {
								spacing = 10
								hbox = {
									visible = "[And( POPSStatusIsLoggedIn, Not( POPStatusIsUserNameEmpty ) )]"
									spacing = 10

									button_primary_big_realms = {
										name = "host_button"
										text = "HOST_GAME"
										fontsize = 20
										onclick = "[FrontEndMainView.OnHost]"
										onclick = "[RefreshIllustration]"
										enabled = "[JominiIsMultiplayerAccessible]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
										}
									}

									button_primary_big_realms = {
										name = "join_button"
										text = "FRONTEND_JOIN_MULTIPLAYER"
										fontsize = 20
										onclick = "[FrontEndMainView.OnMultiPlayer]"
										onclick = "[RefreshIllustration]"
										enabled = "[JominiIsMultiplayerAccessible]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
										}
									}
								}

								hbox = {
									visible = "[Or( Not( POPSStatusIsLoggedIn ), POPStatusIsUserNameEmpty )]"
									spacing = 10

									button_primary_big_realms = {
										name = "host_button"
										text = "HOST_GAME"
										default_format = "#weak"
										fontsize = 20
										onclick = "[FrontEndMainView.OnLogin]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_leave','main_menu_glow_host_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_host_enter','main_menu_glow_host_leave')]"
										}

										icon_online_offline = {
											parentanchor = right|vcenter
											position = { -15 0 }
											frame = 2
										}
									}

									button_primary_big_realms = {
										name = "join_button"
										text = "FRONTEND_JOIN_MULTIPLAYER"
										default_format = "#weak"
										fontsize = 20
										onclick = "[FrontEndMainView.OnLogin]"
										tooltip = "[JominiGetMultiplayerAccessibleString]"

										state = {
											name = _mouse_hierarchy_enter
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_leave','main_menu_glow_join_enter')]"
										}

										state = {
											name = _mouse_hierarchy_leave
											on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_join_enter','main_menu_glow_join_leave')]"
										}

										icon_online_offline = {
											parentanchor = right|vcenter
											position = { -15 0 }
											frame = 2
										}
									}
								}
								vbox = {
									margin_right = 0
									spacing = 5
									hbox = {
										spacing = 10

									}
								}
							}
						}
					}
				}
				expand = {}
				vbox = {
					margin_right = -20
					margin_bottom = 15
					hbox = {
						button_group = {
							onclick = "[OpenAchievements]"
							enabled = "[AreAchievementsAvailable]"
							tooltip = "[GetAchievementsAvailableString]"

							flowcontainer = {
								direction = vertical

								button_achievements = {
									name = "achievements"
									parentanchor = hcenter
									size = { 30 30 }
									alpha = 0.7
									enabled = "[AreAchievementsAvailable]"
								}

								text_single = {
									parentanchor = hcenter
									max_width = 80
									min_width = 80
									align = center
									fontsize = 13

									text = "ACHIEVEMENTS"
									default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
								}
							}
						}

						button_group = {
							onclick = "[ToggleEncyclopedia]"

							flowcontainer = {
								direction = vertical

								button_encyclopedia = {
									parentanchor = hcenter
									size = { 30 30 }
									alpha = 0.7
								}

								text_single = {
									parentanchor = hcenter
									max_width = 80
									min_width = 80
									align = center
									fontsize = 13
									fontsize_min = 10

									text = "HEADING_ENCYCLOPEDIA"
									default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
								}
							}
						}

						button_group = {
							onclick = "[FrontEndMainView.OnCredits]"

							flowcontainer = {
								direction = vertical

								button_credits = {
									parentanchor = hcenter
									size = { 25 25 }
									alpha = 0.7
								}

								text_single = {
									parentanchor = hcenter
									max_width = 80
									min_width = 80
									autoresize = yes
									align = center
									fontsize = 13

									text = "CREDITS"
									default_format = "#low;glow_color:{0.1,0.1,0.1,1}"
								}
							}
						}
					}
					spacer = { size = { 0 10 } }
					button_primary = {
						name = "exit_game_button"
						visible = yes
						text = "EXIT_TO_DESKTOP"
						fontsize = 20
						onclick = "[FrontEndMainView.OnQuit]"

						state = {
							name = _mouse_hierarchy_enter
							on_start = "[PdxGuiInterruptAllAnimations('main_menu_glow_continue_leave')]"
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_leave','main_menu_glow_exit_enter')]"
						}

						state = {
							name = _mouse_hierarchy_leave
							on_start = "[PdxGuiInterruptThenTriggerAllAnimations('main_menu_glow_exit_enter','main_menu_glow_exit_leave')]"
						}
					}
				}
				spacer = { size = { 25 10 } }
			}
		}
	}

	clickable_version_number = {

		parentanchor = top|right
		position = { -15 5 }

		using = tooltip_se

		blockoverride "background"
		{

		}
	}

	widget = { #LotR
		size = { 155 30 }
		parentanchor = top|right
		position = { -49 50 }
		text_single = {
			text = lotr_mod_version
		}
		text_single = {
			text = lotr_mod_build
			position = { 0 18 }
		}
	}



	error_horse = {
		visible = "[Not(ReleaseMode)]"
		parentanchor = bottom|left
		position = { 50 -50 }
	}

	widget = {
		name = "challenge_character"
		# visible = "[FrontEndMainView.ShouldShowChallengeCharacter]" #LotR TODO - Jaco
		datacontext = "[FrontEndMainView.GetChallengeCharacter]"
		datacontext = "[ChallengeCharacter.GetBookmarkCharacter]"
		allow_outside = yes

		parentanchor = vcenter|right
		position = { -60 15 }
		size = { 400 744 }

		widget = {
			position = { 0 -40 }
			size = { 280 280 }
			parentanchor = top|hcenter

			icon = {
				texture = "gfx/interface/colors/black.dds"
				size = { 180% 180% }
				position = { -10 -10 }
				parentanchor = top|hcenter
				alpha = 0.5
				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphaMultiply
				}
			}

			icon = {
				texture = "gfx/interface/colors/black.dds"
				size = { 220% 220% }
				position = { -10 -10 }
				parentanchor = top|hcenter
				alpha = 0.5
				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphaMultiply
				}
			}

			coat_of_arms_icon = { #Dynasty
				size = { 100% 100% }
				visible = "[Not( BookmarkCharacter.HasDynastyHouse )]"
				parentanchor = top|hcenter
				coat_of_arms = "[BookmarkCharacter.GetDynastyTemplate.GetCoA.GetTexture('(int32)256','(int32)256')]"
				coat_of_arms_slot = "[BookmarkCharacter.GetDynastyTemplate.GetCoA.GetSlot('(int32)256','(int32)256')]"
				coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag.dds"

				modify_texture = {
					texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
					blend_mode = overlay
					spritetype = corneredTiled
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphaMultiply
				}
			}

			coat_of_arms_icon = { #Dynasty House
				size = { 100% 100% }
				visible = "[BookmarkCharacter.HasDynastyHouse]"
				parentanchor = top|hcenter
				coat_of_arms = "[BookmarkCharacter.GetDynastyHouseTemplate.GetCoA.GetTexture('(int32)256','(int32)256')]"
				coat_of_arms_slot = "[BookmarkCharacter.GetDynastyHouseTemplate.GetCoA.GetSlot('(int32)256','(int32)256')]"
				coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag.dds"

				modify_texture = {
					texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
					blend_mode = overlay
					spritetype = corneredTiled
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphaMultiply
				}
			}
		}

		portrait_button = {
			using = portrait_base
			size = { 240 240 }
			position = { 0 -42 }

			parentanchor = top|hcenter

			portrait_texture = "[FrontEndMainView.GetChallengeCharacterPortrait( 'environment_bookmarks_map', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
			mask = "gfx/portraits/portrait_mask_body.dds"

			blockoverride "grayscale" {}
			blockoverride "portrait_button_template_onmouseenter" {}
			blockoverride "portrait_button_template_onmouseleave" {}
			blockoverride "portrait_button_template_onclick" {}
			blockoverride "portrait_button_template_onrightclick" {}
			blockoverride "portrait_button_template_tooltip" {}
			alwaystransparent = yes
		}

		widget = {
			parentanchor = hcenter
			position = { 0 90 }
			size = { 300 200 }
			button_back = {
				parentanchor = left
				visible = "[InDebugMode]"
				size = { 30 30 }
				onclick = "[FrontEndMainView.GoPreviousChallengeCharacter]"
			}

			button_forward = {
				parentanchor = right
				visible = "[InDebugMode]"
				size = { 30 30 }
				onclick = "[FrontEndMainView.GoNextChallengeCharacter]"
			}
		}

		icon = {
			texture = "gfx/interface/component_decoration/decoration_frame_top_clean.dds"
			position = { -24 164 }
			spriteType = Corneredtiled
			spriteborder = { 100 0 }
			size = { 448 20 }
			texture_density = 2
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_bottom = 10

			spacer = {
				size = { 180 180 }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				background = {
					texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					color = { 0.025 0.025 0.05 0.8 }
					texture_density = 2
					alpha = 0.75
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = {0 10}

					background = {
						using = Background_Area_Dark
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						autoresize = no
						align = nobaseline|center
						text = "CHALLENGE_CHARACTER_SUGGESTION"
						default_format = "#high;glow_color:{0,0,0,1}"
					}

					text_single = {
						name = "character_name"
						layoutpolicy_horizontal = expanding
						autoresize = no
						align = nobaseline|center
						text = "CHALLENGE_CHARACTER_INFO"
						using = Font_Size_Big
						default_format = "#high;glow_color:{0,0,0,1}"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						autoresize = no
						align = nobaseline|center
						text = "[Select_CString( GreaterThanOrEqualTo_int32(Subtract_int32(ChallengeCharacter.GetStartDate.GetYear, '(int32)4033'),'(int32)0'), 'T.A.', 'S.A.' )] [Subtract_int32(ChallengeCharacter.GetStartDate.GetYear, '(int32)4033')]" #LotR
						default_format = "#medium;glow_color:{0,0,0,1}"
						using = Font_Size_Medium
						using = Font_Type_Flavor
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 24 0 }

					divider_light = {
						layoutpolicy_horizontal = expanding
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					# margin_top = 16

					expand = {layoutpolicy_horizontal = expanding}

					vbox = {
						layoutpolicy_vertical = expanding
						coa_dynasty_bookmark = {
							blockoverride "character" {}
							using = tooltip_ws

						}
						expand = {layoutpolicy_vertical = expanding}
					}
					
					expand = {layoutpolicy_horizontal = expanding}

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 4
						hbox = {
							layoutpolicy_horizontal = expanding
							min_width = 270
							spacing = 10
							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								text_single = {
									max_width = 140
									layoutpolicy_horizontal = expanding
									text = "BOOKMARK_CHARACTER_CULTURE"
									autoresize = no
									align = nobaseline
								}

								text_single = {
									max_width = 140
									layoutpolicy_horizontal = expanding
									text = "BOOKMARK_CHARACTER_RELIGION"
									autoresize = no
									align = nobaseline
								}
							}

							divider_light = {
								layoutpolicy_vertical = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5

								text_single = {
									max_width = 140
									layoutpolicy_horizontal = expanding
									text = "BOOKMARK_CHARACTER_GOVERNMENT"
									autoresize = no
									align = nobaseline
								}

								text_single = {
									max_width = 140
									layoutpolicy_horizontal = expanding
									text = "BOOKMARK_CHARACTER_REALM"
									autoresize = no
									align = nobaseline
									tooltip = "BOOKMARK_CHARACTER_REALM"
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "BOOKMARK_CHARACTER_DIFFICULTY"
							autoresize = no
							align = nobaseline
						}
					}
					expand = {layoutpolicy_horizontal = expanding}
				}

				# hbox = { #LotR
				# 	layoutpolicy_horizontal = expanding
				# 	margin = { 24 6 }

				# 	divider_light = {
				# 		layoutpolicy_horizontal = expanding
				# 	}
				# }

				hbox = { #LotR achievements
					layoutpolicy_horizontal = expanding
					vbox = { # Zibdin Herithur Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Zibdin Herithur')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/baruk_khazad.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_04_desc_tt"
							}
						}
					}
					vbox = { # Corsair-Lady Aglarin Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Corsair-Lady Aglarin')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/but_you_have_heard_of_me.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_65_desc_tt"
							}
						}
					}
					vbox = { # Master Rorimac Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Master Rorimac')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/thats_how_golf_was_invented.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_69_desc_tt"
							}
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/going_on_an_adventure.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_02_desc_tt"
							}
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/my_only_wish_to_catch_a_fish.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_05_desc_tt"
							}
						}
					}
					vbox = { # High Chieftain Sæbert Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'High Chieftain Sæbert')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/lords_of_bridle_and_wind.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_11_desc_tt"
							}
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/who_margoz.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_30_desc_tt"
							}
						}
					}
					vbox = { # Ar-Gimilkhad Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Ar-Gimilkhâd')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/lords_of_bridle_and_wind.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_11_desc_tt"
							}
						}
					}
					vbox = { # Taskral Kalafar Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Taskral Kalafar')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/the_old_the_true.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_71_desc_tt"
							}
						}
					}
					vbox = { # Izbâd Eldberk Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Izbâd Eldberk')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/a_glimpse_of_paradise.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_64_desc_tt"
							}
						}
					}
					vbox = { # Aran Lanthir Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Aran Lanthir')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/music_of_nelornieth.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_56_desc_tt"
							}
						}
					}
					vbox = { # Izbâd Argân Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Izbâd Argân')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/these_boots_were_made_for_walking.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_27_desc_tt"
							}
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/baruk_khazad.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_04_desc_tt"
							}
						}
					}
					vbox = { # Uchoryow Ôn-Ikanna Achievements
						visible = "[EqualTo_string(BookmarkCharacter.GetName, 'Uchoryow Ôn-Ikanna')]"
						layoutpolicy_horizontal = expanding
						hbox = { #LotR
							layoutpolicy_horizontal = expanding
							margin = { 24 6 }
							divider_light = { #LotR
								layoutpolicy_horizontal = expanding
							}
						}
						hbox = {
							spacing = 16
							highlight_icon = { 
								texture = "gfx/interface/icons/achievements/the_first_men.dds"
								size = { 64 64 }
								alpha = 0.7
								tooltip = "lesson_achievement_16_desc_tt"
							}
						}
					}
				}
				spacer = { size = { 0 10 }}

				# hbox = { #LotR - until we add our own here through 
				# 	datamodel = "[FrontEndMainView.AccessChallengeAchievements]"
				# 	spacing = 16
				# 	item = {

				# 		container = {

				# 			icon = {
				# 				visible = "[GUIAchievement.GetAchievement.IsUnlocked]"
				# 				texture = "[GUIAchievement.AccessTexture]"
				# 				size = { 64 64 }
				# 				alpha = "[Select_float(GUIAchievement.GetAchievement.IsUnlocked,'(float)1.0','(float)0.5')]"
				# 				#tooltip = "ACHIEVEMENT_UNLOCKED"
				# 				tooltip = "CHALLENGE_ACHIEVEMENT_TOOLTIP"
				# 			}

				# 			highlight_icon = {
				# 				visible = "[Not(GUIAchievement.GetAchievement.IsUnlocked)]"
				# 				texture = "[GUIAchievement.AccessTexture]"
				# 				size = { 64 64 }
				# 				alpha = "[Select_float(GUIAchievement.GetAchievement.IsUnlocked,'(float)1.0','(float)0.5')]"
				# 				#tooltip = "ACHIEVEMENT_LOCKED"
				# 				tooltip = "CHALLENGE_ACHIEVEMENT_TOOLTIP"

				# 				effectname = "GreyedOut"

				# 				highlight_icon = {
				# 					size = { 96% 97% }
				# 					parentanchor = center
				# 					texture = "gfx/interface/component_masks/mask_frame_horizontal.dds"
				# 					tintcolor = { 0 0 0 0.6 }
				# 				}
				# 			}
				# 		}
				# 	}
				# }

				vbox = {
					layoutpolicy_horizontal = expanding
					margin_bottom = 12

					background = {
						using = Background_Area_Light
						using = Mask_Rough_Edges
						margin_top = 4 #LotR
						margin_bottom = 12
					}

					text_multi = {
						name = "character_text"
						text = "[BookmarkCharacter.GetDescription]"
						size = { 330 250 }
						margin_bottom = 10
						align = left
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding

						expand = {}
						

						button_standard = {
							size = { 160 40 }
							onclick = "[FrontEndMainView.StartGameWithChallengeCharacter]"
							text = "START"
						}

						expand = {}

						button_tertiary = {
							name = "game_rules_button"
							size = { 160 40 }

							onclick = "[OpenGameRules]"
							hbox = {
								layoutpolicy_horizontal = expanding
								expand = {}
								button_rules = {
									size = { 25 25 }
									alwaystransparent = yes
								}

								text_single = {
									margin = { 4 0 }
									text = "GAME_RULES"
									align = nobaseline
									default_format = "#clickable"
									alwaystransparent = yes
								}
								
								vbox = {
									datacontext = "[GetGameRules]"
									achievements_enabled_icon = {
										visible = "[CanGetAchievements]"
										size = { 25 25 }
										tooltip = ACHIEVEMENTS_ENABLED
									}
									achievements_disabled_icon = {
										visible = "[Not( CanGetAchievements )]"
										size = { 25 25 }
										tooltip = ACHIEVEMENTS_DISABLED
									}
								}

								expand = {}
							}
						}

						expand = {}
					}
				}
			}
		}
		# icon = { #LotR
		# 	parentanchor = bottom
		# 	texture = "gfx/interface/component_decoration/decoration_frame_bottom.dds"
		# 	position = { -20 42 }
		# 	spriteType = Corneredtiled
		# 	spriteborder = { 100 0 }
		# 	size = { 440 20 }
		# 	texture_density = 2
		# }
	}

	# loaded_mods_icon = {
	# 	visible = "[And( HasLoadedMods, Not(ReleaseMode))]"
	# 	parentanchor = bottom|left
	# 	#tooltip = "[GetLoadedMods]"
	# 	position = { 140 -50 }
	# }

	#widget = {
	#	parentanchor = top|left
	#	size = { 800 100 }
	#	position = { 10 10 }
	#
	#	hbox = {
	#		layoutpolicy_horizontal = expanding
	#		layoutpolicy_vertical = expanding
	#
	#		vbox = {
	#			layoutpolicy_vertical = expanding
	#			margin_right = 10
	#			expand = {}
	#
	#			spacer = {
	#				size = { 0 12 }
	#			}
	#
	#			text_multi = {
	#				text = "DLC"
	#				autoresize = yes
	#				max_width = 70
	#				minimumsize = { 0 25 }
	#				align = top
	#				using = Font_Size_Medium
	#			}
	#
	#			expand = {}
	#		}
	#
	#		vbox = {
	#			layoutpolicy_horizontal = expanding
	#			layoutpolicy_vertical = expanding
	#			spacing = 4
	#
	#			hbox = { # DLCs
	#				layoutpolicy_horizontal = expanding
	#				layoutpolicy_vertical = expanding
	#				spacing = 10
	#
	#				scrollarea = {
	#					layoutpolicy_horizontal = expanding
	#					layoutpolicy_vertical = expanding
	#
	#					scrollbarpolicy_vertical = always_off
	#					scrollbarpolicy_horizontal = as_needed
	#
	#					scrollbar_horizontal = {
	#						scrollbar = {
	#							wheelstep = 60
	#							direction = horizontal
	#
	#							track = {
	#								button = {}
	#							}
	#
	#							slider = {
	#								button = {}
	#							}
	#
	#							dec_button = {
	#								button = {
	#								}
	#							}
	#
	#							inc_button = {
	#								button = {
	#								}
	#							}
	#						}
	#					}
	#
	#					scrollwidget = {
	#						hbox = {
	#							hbox = {
	#								datamodel = "[FrontEndMainView.GetDlcCollection.GetDlcs]"
	#								spacing = 5
	#
	#								item = {
	#									dlc_button = {
	#										size = { 50 50 }
	#									}
	#								}
	#							}
	#
	#							expand = {}
	#						}
	#					}
	#				}
	#			}
	#		}
	#	}
	#}
}

