######################################################
################### COUNTY VIEW ######################
######################################################

window = {
	name = "holding_view"
	widgetid = "holding_view"
	parentanchor = bottom|left
	allow_outside = yes
	movable = no
	layer = windows_layer
	size = { 605 750 }

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}

	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}

	alwaystransparent = yes

	vbox = {

		expand = {
			ignoreinvisible = yes
			layoutpolicy_vertical = expanding
		}

		vbox = {
			name = "window_content"
			margin_right = 40
			margin_top = 35
			alwaystransparent = no

			datacontext = "[HoldingView.GetHolding]"
			datacontext = "[HoldingView.GetProvince]"
			datacontext = "[HoldingView.GetHolder]"
			datacontext = "[Province.GetCounty]"

			background = {
				texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
				spriteType = Corneredtiled
				spriteborder = { 18 18 }
				margin = { -23 -17 }
				margin_left = 20
				margin_bottom = 20
				texture_density = 2

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_effect.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
			}

			hbox = {
				name = "county_header"
				layoutpolicy_horizontal = expanding
				margin_right = 15
				margin_left = 5
				margin_top = 5
				margin_bottom = 5
				spacing = 10

				background = {
					using = Background_Area_Dark
					margin_left = 5
				}

				coa_title_small = {
					datacontext = "[HoldingView.GetCountyTitle]"
				}

				vbox = {
					hbox = {
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes
						spacing = 5

						text_single = {
							text = "[HoldingView.GetCountyTitle.GetNameNoTooltip|U]"
							using = Font_Size_Big
							font = TitleFont
							max_width = 380
							fontsize_min = 16
						}

						button_edit_text = {
							visible = "[HoldingView.GetCountyTitle.CanPlayerCustomizeTitle]"
							onclick = "[OpenTitleCustomizationWindow(HoldingView.GetCountyTitle)]"
							tooltip = "CUSTOMIZE_TITLE"
						}

						expand = {}
					}

					vbox = {
						datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "your_county"
							visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_YOUR_COUNTY"
							margin_bottom = 5
							using = Font_Size_Small
							fontsize_min = 10
							max_width = 420
						}

						text_single = {
							name = "top_realm_county"
							visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_TOP_REALM_COUNTY"
							margin_bottom = 5
							using = Font_Size_Small
							fontsize_min = 10
							max_width = 420
						}

						text_single = {
							name = "foreign_county"
							visible = "[Not(Or(ObjectsEqual( Character.Self, GetPlayer ),Character.IsOtherLiegeOrAbove( GetPlayer )))]"
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_FOREIGN_COUNTY"
							margin_bottom = 5
							using = Font_Size_Small
							fontsize_min = 10
							max_width = 420
						}
					}
				}

				expand = {}

				### SIEGE AND RAID GOTO BUTTON ###
				button_group = {
					name = "open_siege_button"
					datacontext = "[HoldingView.GetProvince.GetSiege]"
					visible = "[HoldingView.GetProvince.HasActiveSiege]"
					onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
					tooltip = "[Siege.GetSiegeDescription]"
					using = tooltip_se
					shortcut = county_go_to_siege
					using = siege_goto_template
				}

				button_group = {
					name = "open_raid_button"
					datacontext = "[HoldingView.GetProvince.GetRaid]"
					visible = "[HoldingView.GetProvince.HasActiveRaid]"
					onclick = "[DefaultOnRaidClick( Raid.Self )]"
					tooltip = "MAP_RAID_TOOLTIP"
					shortcut = county_go_to_siege
					using = tooltip_se
					using = raid_goto_template
					blockoverride "tooltip" {}
				}

				buttons_window_control = {

					blockoverride "button_go_to"
					{
						tooltip = "GOTO_PROVINCE_TT"
						using = tooltip_ne
						onclick = "[HoldingView.PanToCountyCapital]"
					}

					blockoverride "button_back"
					{
						visible = "[HasViewHistory]"
						onclick = "[OpenFromViewHistory]"
						tooltip = "[GetViewHistoryTooltip]"
					}

					blockoverride "button_close"
					{
						onclick = "[HoldingView.Close]"
					}
				}
			}

			####################################
			########### COUNTY INFO ############
			####################################

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }
				spacing = 5

				hbox = {
					datamodel = "[HoldingView.GetDeJureLieges]"

					item = {
						coa_title_tiny_crown = {
							visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]"
							using = tooltip_se
						}
					}
				}

				text_single = {
					text = "DE_JURE_HIERARCHY"
					default_format = "#low"
				}

				expand = {}

				widget = {
					size = { 300 50 }
					scissor = yes

					hbox = {
						name = "county_modifiers_grid"
						datamodel = "[HoldingView.GetCountyModifiers]"

						button_round = {
							name = "move_domcicle_button"
							datacontext = "[GetPlayer.GetDomicile]"
							datacontext = "[HoldingView.GetProvince]"
							visible = "[IsLandlessAdventurer( GetPlayer )]"
							widgetid = "move_domcicle_button"
							size = { 50 50 }

							enabled = "[Domicile.CanMoveTo( Province.Self )]"
							onclick = "[OpenGameViewData( 'move_domicile_planner', Province.Self )]"

							tooltip = "[Domicile.GetType.GetMoveTooltip( Character.Self )]"
							tooltip_when_disabled = "[Domicile.GetMoveToTooltip( Province.Self )]"
							using = tooltip_ne

							button_icon = {
								alwaystransparent = yes
								parentanchor = center
								size = { 30 30 }
								texture = "gfx/interface/icons/flat_icons/move_camp.dds"
							}
						}

						expand = {}

						spacer = {
							visible = "[Or( IsLandlessAdventurer( GetPlayer ), County.IsFullyOccupied )]"
							size = { 8 0 }
						}

						item = {
							modifier_item_icon = {
								size = { 30 30 }

								blockoverride "icon_data" {
									using = tooltip_ne
								}
							}
						}

						widget = {
							datacontext = [County.GetCountyOccupant]
							visible = [County.IsFullyOccupied]
							size = { 50 50 }

							icon = {
								name = "war_icon"
								parentanchor = center
								size = { 50 50 }
								texture = "gfx/interface/icons/war_status/war_icon.dds"

							}

							coa_realm_tiny = {
								parentanchor = center

								blockoverride "coa_button" {
									onclick = "[DefaultOnRealmFlagClick(Character.GetID)]"
									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									button_ignore = none

									tooltip_visible = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
									tooltip = "COUNTY_OCCUPIER_TOOLTIP"
								}
							}
						}
					}
				}
			}

			hbox = { # County Fertility
				visible = "[County.UsesCountyFertility]"

				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 5 }
					margin_left = 10
					margin_right = 15
					spacing = 5

					background = {
						visible = "[County.IsInSituation( 'the_great_steppe' )]"
						texture = "[County.GetCurrentPhaseTypeInSituation('the_great_steppe').GetIllustration]"
						fittype = centercrop
						alpha = 0.6

						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
						}
					}

					background = {
						visible = "[Not( County.IsInSituation( 'the_great_steppe' ) )]"
						texture = "gfx/interface/illustrations/terrain_types/steppe.dds"
						fittype = centercrop
						alpha = 0.6

						using = Mask_Rough_Edges
					}

					vbox = { # County Fertility & Steppe Season
						datacontext = "[HoldingView.GetProvince.GetCounty]"
						datacontext = "[HoldingView.AccessCountyBreakdowns]"

						margin = { 5 5 }

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								text = "HOLDING_VIEW_COUNTY_FERTILITY_LABEL"
								align = left|nobaseline
								default_format = "#glow_color:{0.1,0.1,0.1,1.0}"
							}

							text_single = {
								text = "HOLDING_VIEW_COUNTY_FERTILITY_VALUE"
								default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
								align = left|nobaseline

							}

							tooltipwidget = {
								county_fertility_tooltip_container = {}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							text_single = {
								text = "HOLDING_VIEW_HERD_FROM_COUNTY_LABEL"
								align = left|nobaseline
								default_format = "#glow_color:{0.1,0.1,0.1,1.0}"
							}

							text_single = {
								text = "HOLDING_VIEW_HERD_FROM_COUNTY_VALUE"
								align = left|nobaseline
								default_format = "#glow_color:{0.1,0.1,0.1,1.0}"

								tooltip = "[County.GetHerdFromCountyTooltip]"
							}

							tooltipwidget = {
								county_fertility_tooltip_container = {}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[County.IsInSituation('the_great_steppe')]"
							spacing = 5

							text_single = {
								text = "HOLDING_VIEW_STEPPE_SEASON_LABEL"
								align = left|nobaseline
								default_format = "#glow_color:{0.1,0.1,0.1,1.0}"
							}

							text_single = {
								text = "[County.GetCurrentPhaseTypeInSituation('the_great_steppe').GetName]"
								default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
								align = left|nobaseline
							}

							expand = {}
						}
					}

					expand = {}

					button_round = {
						name = "abandon_lands_button"
						datacontext = "[HoldingView.GetCountyTitle]"
						visible = "[And(And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), Not(HoldingView.GetTitle.IsLeasedOut) ), Not(HoldingView.GetProvince.IsRealmCapital))]"

						onclick = "[CreateCommandPopup( Title.CreateHerderForTitle( GetPlayer ) )]"
						enabled = "[IsValidCommand( Title.CreateHerderForTitle( GetPlayer ) )]"
						tooltip = "[GetCommandDesc( Title.CreateHerderForTitle( GetPlayer ) )]"

						button_icon = {
							parentanchor = center
							size = { 27 27 }
							texture = "gfx/interface/icons/domicile_building/domicile_sheep_yurt.dds"
							alwaystransparent = yes
						}
					}

					widget = {
						size = { 150 60 }

						fertility_bar = {
							datacontext = "[HoldingView.GetProvince.GetCounty.GetTitle]"
							datacontext = "[HoldingView.AccessCountyFertilityBar]"
							datacontext = "[HoldingView.AccessCountyBreakdowns]"
							parentanchor = center
							position = { 18 0 }

							blockoverride "bar_tooltip" {
								tooltipwidget = {
									county_fertility_tooltip_container = {}
								}
								using = tooltip_ne
							}

							blockoverride "button_tooltip" {
								tooltipwidget = {
									county_fertility_tooltip_container = {}
								}
								using = tooltip_ne
							}

							blockoverride "grey_fertility_icon_visibility" {
								visible = no
							}

							blockoverride "green_fertility_icon_visibility" {
								visible = "[Title.IsAverageFertilityBetween( '(CFixedPoint)0.6', '(CFixedPoint)1.1' )]"
							}

							blockoverride "yellow_fertility_icon_visibility" {
								visible = "[Title.IsAverageFertilityBetween( '(CFixedPoint)0.3', '(CFixedPoint)0.6' )]"
							}

							blockoverride "red_fertility_icon_visiblity" {
								visible = "[Title.IsAverageFertilityBetween( '(CFixedPoint)0.0', '(CFixedPoint)0.3' )]"
							}
						}
					}
				}
			}

			hbox = {
				name = "county_info"
				datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
				visible = "[GetScriptedGui('gui_not_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]" # LotR
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
					margin_bottom = -2
				}

				hbox = {
					name = "holder_info"
					datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
					visible = "[Province.IsValid]"
					layoutpolicy_horizontal = expanding

					margin = { 5 5 }
					margin_right = 15

					background = {
						name = "Held_directly_by_me"
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"

						texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
						spriteType = Corneredtiled
						margin = { -7 -5 }
						using = Color_Green
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							texture_density = 2
							blend_mode = alphamultiply
						}
					}

					background = {
						name = "Held_by_someone_below_me"
						visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"

						texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
						spriteType = Corneredtiled
						margin = { -7 -5 }
						using = Color_Blue
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							texture_density = 2
							blend_mode = alphamultiply
						}
					}

					background = {
						name = "Held_under_my_Top_Liege,_but_Not_Me"
						visible = "[And(And(Not( ObjectsEqual( Character.Self, GetPlayer )),Not(Character.IsOtherLiegeOrAbove( GetPlayer ))),ObjectsEqual( Character.GetTopLiege, GetPlayer.GetTopLiege ))]"

						texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
						spriteType = Corneredtiled
						margin = { -7 -5 }
						using = Color_Bright_Yellow
						alpha = 0.2

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredtiled
							spriteborder = { 20 20 }
							texture_density = 2
							blend_mode = alphamultiply
						}
					}

					## Holder
					portrait_head = {}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						margin_top = 5
						margin_left = 5
						margin_bottom = 10

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_COUNTY_HOLDER"
							default_format = "#low"
						}

						text_multi = {
							datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
							visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
							layoutpolicy_horizontal = expanding

							text = "[Character.GetRelationToString( GetPlayer )]"
							autoresize = yes
							max_width = 170

							tooltip = "EXTENDED_RELATIONS_TOOLTIP"

						}

						text_multi = {
							datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
							layoutpolicy_horizontal = expanding

							text = "[Character.GetShortUINameNoTooltip|U]"
							autoresize = yes
							default_format = "#high"
							max_width = 170

						}

						expand = {}
					}
				}

				vbox = {
					name = "county_stats"
					datacontext = "[HoldingView.GetProvince.GetCounty]"
					datacontext = "[HoldingView.AccessCountyBreakdowns]"
					layoutpolicy_vertical = expanding

					margin = { 10 10 }
					margin_right = 15
					min_width = 260

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_CONTROL_LABEL"
						}

						text_single = {
							text = "[County.GetControlLevel]"
							default_format = "#high"

							margin = { 5 0 }

							tooltipwidget = {
								county_control_tooltip_container = {}
							}

							background = {
								visible = "[LessThan_CFixedPoint(County.GetControl, '(CFixedPoint)100')]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}

						text_single = {
							datacontext = "[CountyDataBreakdowns.AccessControl( County.Self )]"
							visible = "[Or( LessThan_CFixedPoint(County.GetControl, '(CFixedPoint)100'), LessThan_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0') )]"

							text = "COUNTY_CONTROL_CHANGE_MONTHLY"
							margin_right = 5

							tooltip_visible = "[ValueBreakdown.HasTooltip]"

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}
					}

					hbox = {
						datacontext = "[County.GetCount.GetGovernment]"
						datacontext = "[CountyDataBreakdowns.AccessDevelopmentChange( County.Self )]"
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_DEVELOPMENT_LABEL"
						}

						text_single = {
							visible = "[GovernmentType.IsAffectedByDevelopment]"

							text = "[County.GetDevelopmentLevel]"
							default_format = "#high"

							margin = { 5 0 }

							tooltipwidget = {
								county_development_tooltip_container = {}
							}
						}

						text_single = {
							visible = "[Not( GovernmentType.IsAffectedByDevelopment )]"

							text = "[County.GetDevelopmentLevel]"
							default_format = "#high;weak"

							margin = { 5 0 }

							tooltipwidget = {
								county_development_tooltip_container = {}
							}
						}

						text_single = {
							visible = "[GovernmentType.IsAffectedByDevelopment]"

							text = "[ValueBreakdown.GetValueIndicatorHideNone( '(CFixedPoint)-5', '(CFixedPoint)1' )]"

							margin_left = -5

							tooltip_visible = "[ValueBreakdown.HasTooltip]"

							tooltipwidget = {
								widget_value_breakdown_tooltip = {
									blockoverride "header_text" {
										text = "COUNTY_DEVELOPMENT_PROGRESS_MONTHLY_TOOLTIP_HEADER"
									}
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 3

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_COUNTY_OPINION_LABEL"
						}

						button_normal = {
							name = "in_faction"
							visible = "[HoldingView.IsInFaction]"
							size = { 20 20 }

							onclick = "[HoldingView.OnGotoFaction]"

							tooltip = "COUNTY_IN_FACTION_TOOLTIP"
							texture = "gfx/interface/icons/symbols/icon_warning.dds"
						}

						text_single = {
							datacontext = "[CountyDataBreakdowns.AccessOpinion( County.Self )]"

							text = "[ValueBreakdown.GetValue]"
							default_format = "#high"
							max_width = 160

							margin = { 5 0 }

							tooltip_visible = "[ValueBreakdown.HasTooltip]"

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}
					}

					hbox = {
						datacontext = "[County.GetCulture]"
						layoutpolicy_horizontal = expanding
						spacing = 2

						using = tooltip_ne

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_CULTURE_LABEL"
						}

						text_single = {
							visible = "[NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID)]"
							text = "COUNTY_CULTURE_ACCEPTANCE_DIFF_CULTURE"
							margin_right = 5
							max_width = 160

							tooltip = "CULTURE_ACCEPTANCE_TOOLTIP"
						}

						button_group = {
							onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"

							text_single = {
								text = "CULTURE_COUNTY_WINDOW"
								default_format = "#high"
								margin = { 5 0 }
								max_width = 120

								background = {
									visible = "[And( NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID), EqualTo_CFixedPoint( Culture.GetAcceptance( GetPlayer.GetCulture ), '(CFixedPoint)100') )]"
									margin = { 5 0 }
									using = Status_Good
								}

								background = {
									visible = "[And(And( NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID), NotEqualTo_CFixedPoint( Culture.GetAcceptance( GetPlayer.GetCulture ), '(CFixedPoint)100') ), NotEqualTo_CFixedPoint( Culture.GetAcceptance( GetPlayer.GetCulture ), '(CFixedPoint)0') )]"
									margin = { 5 0 }
									using = Status_Mixed
								}

								background = {
									visible = "[EqualTo_CFixedPoint( Culture.GetAcceptance( GetPlayer.GetCulture ), '(CFixedPoint)0') ) ]"
									margin = { 5 0 }
									using = Status_Bad
								}
							}

							tooltipwidget = {
								culture_tooltip = {
									blockoverride "extra_info"
									{
										text_single = {
											fonttintcolor = "[TooltipInfo.GetTintColor]"
											using = DefaultTooltipText
											visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
											text = "COUNTY_NOT_YOUR_CULTURE"
										}
									}
								}
							}
						}
					}

					hbox = {
						datacontext = "[County.GetFaith]"
						layoutpolicy_horizontal = expanding
						spacing = 2

						using = tooltip_ne

						tooltipwidget = {

							faith_tooltip = {

								blockoverride "extra_info" {
									using = faith_tooltip_click_default_extra_info

									text_single = {
										margin = { 10 0 }
										layoutpolicy_horizontal = expanding
										fonttintcolor = "[TooltipInfo.GetTintColor]"
										using = DefaultTooltipText
										visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
										text = "COUNTY_NOT_YOUR_FAITH"
									}
								}
							}
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_FAITH_LABEL"
						}

						vbox = {
							expand = {
								minimumsize = { 0 2 }
							}

							icon = {
								size = { 22 22 }
								datacontext = "[Province.GetCounty.GetFaith]"
								texture = "[Faith.GetIcon]"
							}
						}

						button_group = {
							onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"

							text_single = {
								visible = "[EqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
								text = "WINDOW_COUNTY_FAITH_NAME"
								default_format = "#high"
								margin_right = 5
								max_width = 160

							}

							text_single = {
								visible = "[NotEqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
								text = "WINDOW_COUNTY_FAITH_NAME"
								default_format = "#high"
								margin = { 5 0 }
								max_width = 160

								background = {
									margin = { 5 0 }
									using = Status_Bad
								}
							}
						}
					}
				}
			}

			divider = {
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					datamodel = "[HoldingView.GetCountyHoldings]"
					margin_left = 5
					spacing = 5

					item = {
						button_tab_dark = {
							datacontext = "[GUICountyHolding.GetHolding]"
							size = { 45 45  }

							down = "[GUICountyHolding.IsSelected]"
							alwaystransparent = "[GUICountyHolding.IsSelected]"
							onclick = "[GUICountyHolding.OnClick]"
							onclick = "[PdxGuiTriggerAllAnimations('holding_view_refresh')]"

							using = tooltip_ne
							tooltipwidget = { holding_tooltip_click = {} }

							icon_building_tab = {
								parentanchor = center
								position = { 0 1 }
								size = { 35 30 }
								texture = "[GUICountyHolding.GetHolding.GetType.GetTabIcon]"
								alwaystransparent = yes

								down = "[GUICountyHolding.IsSelected]"


								blockoverride "button_frames"
								{
									gfxtype = togglepushbuttongfx
									effectname = "NoHighlight"
									upframe = 4
									uphoverframe = 5
									uppressedframe = 6
									downframe = 5
								}
							}

							icon = {
								name = "realm_capital_icon"
								visible = "[GUICountyHolding.GetHolding.GetProvince.GetTitle.IsCountyCapital]"
								parentanchor = bottom|right
								position = { 1 -3 }
								size = { 24 24 }
								texture = "gfx/interface/icons/icon_capital.dds"
								framesize = { 60 60 }
								frame = 1

								background = {
									using = Background_Area_Dark

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_circle.dds"
										blend_mode = alphamultiply
									}
								}
							}
						}
					}
				}

				expand = {}
			}

			####################################
			########## HOLDING INFO ############
			####################################
			vbox = {
				name = "holding_info"
				visible = "[Not(GetScriptedGui('gui_dwarven_holdings').IsValid(GuiScope.SetRoot( HoldingView.GetProvince.MakeScope).End))]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				minimumsize = { 0 320 }
				margin = { 5 5 }

				### Settlement Buttons ###
				widget = { #LotR
				 	allow_outside = yes
				 	parentanchor = right|top
				 	
					
					vbox = {
						ignoreinvisible = yes
						
						position = { -265 110 }
						
					
					
						button_round  = { ## RETURN SETTLEMENT BACK TO WILDERNESS ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('return_settlement_county_to_wilderness', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('return_settlement_county_to_wilderness', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('return_settlement_county_to_wilderness', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('return_settlement_county_to_wilderness', Title.Self)]"
							
							

							button_abandon_holding = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
								
							}
						}
					
						button_round  = { ## FEUDALIZE INTO CASTLE HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_castle_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_castle_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_castle_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_castle_holding_interaction', Title.Self)]"

							button_feudalize_holding = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
							

						}	
					
						button_round  = { ## FEUDALIZE INTO CITY HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_city_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_city_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_city_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_city_holding_interaction', Title.Self)]"

							button_feudalize_holding_city = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
					
						button_round  = { ## FEUDALIZE INTO TEMPLE HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_temple_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_temple_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_temple_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_temple_holding_interaction', Title.Self)]"
							

							button_feudalize_holding_temple = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
								
							}
						}
					
						button_round  = { ## SETTLE AN ELVEN HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('settle_elven_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('settle_elven_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('settle_elven_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('settle_elven_holding_interaction', Title.Self)]"
						
							button_feudalize_holding_elven = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
								
							}
						}
					
						button_round  = { ## FEUDALIZE INTO DELVING HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_delving_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_delving_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_delving_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_delving_holding_interaction', Title.Self)]"

							button_feudalize_holding_delving = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
					
						button_round  = { ## TRIBALIZE AN ELVEN HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('tribalize_elven_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('tribalize_elven_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('tribalize_elven_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('tribalize_elven_holding_interaction', Title.Self)]"
						
							button_feudalize_holding = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
					}
				}
				

				state = {
					name = "holding_view_refresh"
					next = a
					alpha = 0.5
				}

				state = {
					name = "a"
					alpha = 1
					duration = 0.5
					using = Animation_Curve_Default
				}

				background = {
					using = Background_Area_Dark
					margin_left = 5
					margin_top = 3
				}

				background = {
					visible = "[HoldingView.HasHolding]"
					texture = "[HoldingView.GetHolding.GetIllustration]"
					alpha = 0.8

					fittype = centercrop

					modify_texture = {
						texture = "gfx/interface/window_county/mask_holding_illustration.dds"
						blend_mode = alphamultiply
						alpha = 0.95
					}
				}

				background = {
					visible = "[Not(HoldingView.HasHolding)]"
					texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
					alpha = 0.7

					fittype = centercrop

					modify_texture = {
						texture = "gfx/interface/window_county/mask_holding_illustration.dds"
						blend_mode = alphamultiply
						alpha = 0.95
					}
				}

				### TOP LEFT
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							coa_title_medium = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[HoldingView.GetTitle.HasHolder]"
							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes

								flowcontainer = {
									visible = "[HoldingView.GetTitle.HasHolder]"
									ignoreinvisible = yes
									spacing = 5

									text_single = {
										text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
										default_format = "#high"
										align = nobaseline
										using = Font_Size_Big
										max_width = 150
										fontsize_min = 14
										margin_left = 5

										tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
									}

									button_edit_text = {
										visible = "[HoldingView.GetProvince.GetTitle.CanPlayerCustomizeTitle]"
										parentanchor = vcenter
										size = { 25 25 }

										onclick = "[OpenTitleCustomizationWindow(HoldingView.GetProvince.GetTitle)]"

										tooltip = "CUSTOMIZE_TITLE"
									}

									widget = {
										size = { 30 30 }
										visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"

										icon = {
											name = "county_capital_icon"
											parentanchor = center
											size = { 30 30 }
											texture = "gfx/interface/icons/icon_capital.dds"
											framesize = { 60 60 }
											frame = 1

											tooltip = "COUNTY_CAPITAL_TOOLTIP"
										}
									}

									widget = {
										size = { 30 30 }
										visible = "[HoldingView.GetProvince.IsRealmCapital]"

										icon = {
											name = "realm_capital_icon"
											parentanchor = center
											size = { 30 30 }
											texture = "gfx/interface/icons/icon_capital.dds"
											framesize = { 60 60 }
											frame = 2

											tooltip = "REALM_CAPITAL_TOOLTIP"
										}
									}

									widget = {
										size = { 30 30 }

										button_move_capital = {
											name = "set_realm_capital_button"
											visible = "[HoldingView.PotentialSetRealmCapital]"
											texture = "gfx/interface/icons/flat_icons/move_capital.dds"

											enabled = "[HoldingView.CanSetRealmCapital]"
											onclick = "[HoldingView.SetRealmCapital]"

											tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
										}

										button_move_capital = {
											name = "set_county_capital_button"
											visible = "[HoldingView.CanSetCountyCapital]"
											texture = "gfx/interface/icons/flat_icons/move_capital.dds"

											onclick = "[HoldingView.SetCountyCapital]"

											tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
										}
									}
								}

								text_single = {
									visible = "[Not(HoldingView.GetTitle.HasHolder)]"
									text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
									default_format = "#medium"
									using = Font_Size_Big
									align = nobaseline
									margin_left = 5
								}

								flowcontainer = {
									datacontext = "[HoldingView.GetGUIHoldingBuilding]"
									ignoreinvisible = yes

									text_label_left = {
										text = "[HoldingView.GetHoldingDesc]"
										max_width = 210
										multiline = yes
										margin_left = 5
									}
								}

								text_single = {
									visible = "[HoldingView.GetProvince.IsOccupied]"
									text = "[HoldingView.GetOccupiedInfo]"
									default_format = "#high"
								}
							}

							expand = {}
						}

						expand = {}
					}

					### HOLDING STATUSES
					vbox = {
						layoutpolicy_vertical = expanding

						fixedgridbox = {
							name = "holding_statuses"
							datamodel = "[HoldingView.GetHoldingStatuses]"
							flipdirection = yes
							datamodel_wrap = 2
							maxverticalslots = 4

							addrow = 35
							addcolumn = 37

							item = {
								flowcontainer = {
									ignoreinvisible = yes

									icon = {
										name = "terrain"
										datacontext = "[HoldingStatus.GetTerrainType]"
										datacontext = "[HoldingView.GetProvince]"
										visible = "[HoldingStatus.IsTerrainType]"

										texture = "[Terrain.GetIcon]"
										size = { 35 35 }

										tooltip = "HOLDING_TERRAIN_TOTAL_TOOLTIP"
									}

									button_round = {
										name = "stationed_maa_button"
										datacontext = "[HoldingStatus.GetMAAOriginHere]"
										visible = "[HoldingStatus.IsMAAOriginHere]"
										size = { 35 35 }

										onclick = "[OpenGameView( 'military' )]"
										onclick = "[OpenGameViewData( 'men_at_arms', Regiment.GetID )]"

										tooltip = "VIEW_MAA_ORIGIN_TT"

										button_icon_highlight = {
											texture = "gfx/interface/icons/flat_icons/army_details.dds"
											parentanchor = center
											alwaystransparent = yes
											size = { 35 35 }
										}
									}

									icon = {
										datacontext = "[HoldingStatus.GetMAATypeOriginHere]"
										visible = "[HoldingStatus.IsMAATypeOriginHere]"

										texture = "[MenAtArmsType.GetIcon]"
										alwaystransparent = yes
										size = { 35 35 }

										tooltip = "SHOW_MAA_ORIGIN_TT"
									}

									flowcontainer = {
										visible = "[HoldingStatus.IsWinterLevel]"
										ignoreinvisible = yes

										icon = { # Mild Winter
											name = "winter_level_icon_mild"
											visible = "[EqualTo_int32( HoldingStatus.GetWinterLevel, '(int32)1' )]"
											texture = "gfx/interface/icons/terrain_types/winter_mild.dds"
											size = { 35 35 }

											tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
										}

										icon = { # Normal Winter
											name = "winter_level_icon_normal"
											visible = "[EqualTo_int32( HoldingStatus.GetWinterLevel, '(int32)2' )]"
											texture = "gfx/interface/icons/terrain_types/winter_normal.dds"
											size = { 35 35 }

											tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
										}

										icon = { # Harsh Winter
											name = "winter_level_icon_harsh"
											visible = "[EqualTo_int32( HoldingStatus.GetWinterLevel, '(int32)3' )]"
											texture = "gfx/interface/icons/terrain_types/winter_harsh.dds"
											size = { 35 35 }

											tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
										}
									}

									flowcontainer = {
										datacontext = "[HoldingStatus.GetEpidemic]"
										visible = "[HoldingStatus.IsEpidemic]"
										ignoreinvisible = yes

										button_epidemic = {
											blockoverride "extra_data"
											{
												datacontext = "[Epidemic.GetInfectionLevelIn( HoldingView.GetProvince )]"

												spacer = {
													size = { 0 16 }
												}

												cooltip_paragraph = {
													visible = "[EpidemicInfectionLevel.HasRealmModifier]"
													text = "[EpidemicInfectionLevel.GetRealmModifierDesc]"
												}

												cooltip_paragraph = {
													visible = "[Or( EpidemicInfectionLevel.HasProvinceModifier, EpidemicInfectionLevel.HasCountyModifier )]"
													text = "EPIDEMIC_MODIFIERS_PROVINCE_AND_COUNTY"
												}
											}

											blockoverride "infection_chance_text"
											{
												text = "EPIDEMIC_TOOLTIP_CHANCE_OF_INFECTION_SPECIFIC_PROVINCE"
											}
										}
									}


									flowcontainer = {
										datacontext = "[HoldingStatus.GetLegend]"
										visible = "[HoldingStatus.IsLegend]"
										ignoreinvisible = yes

										button_legend = {
											visible = "[Not( Or( Legend.IsCurrentlyPromotedInProvince( Province.Self ), Legend.WasPromotedOnCompletionInProvince( Province.Self ) ) )]"
											effectname = "GreyedOut"

											blockoverride "province_details" {
												text_multi = {
													layoutpolicy_horizontal = expanding
													autoresize = yes
													maximumsize = { 400 300 }

													text = "DISABLED_LEGEND_PROVINCE_MODIFIERS"
												}
											}
										}

										button_legend = {
											visible = "[Or( Legend.IsCurrentlyPromotedInProvince( Province.Self ), Legend.WasPromotedOnCompletionInProvince( Province.Self ) )]"
										}
									}

									flowcontainer = {
										datacontext = "[HoldingStatus.GetTimedModifier]"
										visible = "[HoldingStatus.IsTimedModifier]"
										ignoreinvisible = yes

										modifier_item_icon = {
											size = { 30 30 }

											blockoverride "icon_data"
											{
												using = tooltip_ne
											}
										}
									}
								}
							}
						}

						expand = {}
					}

					### HOLDING STATS
					vbox = {
						layoutpolicy_vertical = expanding
						visible = "[GetScriptedGui('gui_not_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]" # LotR

						margin = { 15 0 }
						margin_bottom = 10
						minimumsize = { 171 0 }
						spacing = 5

						background = {
							visible = "[HoldingView.HasHolding]"
							using = Background_Area_Dark
							alpha = 0.7
							margin_top = 9
						}

						### Tax Income
						hbox = {
							name = "tutorial_highlight_holding_view_taxes_box"
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							tooltip = "[Holding.GetTaxTooltip]"

							background = {
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_TAX"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_TAX_VALUE"
								default_format = "#V"
							}
						}

						### Raid loot
						hbox = {
							name = "tutorial_highlight_holding_view_loot_box"
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"

							background = {
								visible = "[Holding.GetProvince.IsRecentlyLooted]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_LOOT"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_LOOT_VALUE"
							}
						}

						### Levies
						vbox = {
							visible = "[And( HoldingView.HasHolding, Not( Holding.GetType.HasParameter( 'no_levies' ) ) )]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							hbox = {
								layoutpolicy_horizontal = expanding

								tooltip = "[Holding.GetLeviesTooltip]"

								background = {
									visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
									using = Status_Bad
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "LEVIES"
									default_format = "#high"
								}

								text_single = {
									text = "HOLDING_LEVY_SIZE"
									default_format = "#high"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								progressbar_standard_transparent = {
									layoutpolicy_horizontal = expanding
									size = { 0 10 }
									value = "[Holding.GetUnraisedLevyRatioPercent]"
									direction = horizontal
								}
							}
						}


						### Supply Level
						hbox = {
							layoutpolicy_horizontal = expanding

							tooltip = "[HoldingView.GetSupplyLimitTooltip]"

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "SUPPLY_LIMIT"
								default_format = "#high"
								max_width = 140
							}

							text_single = {
								raw_text = " [HoldingView.GetSupplyLimit|V]"
								default_format = "#high"
							}
						}


						### Plague Resistance
						hbox = {
							datacontext = "[Holding.GetProvince]"
							datacontext = "[HoldingView.AccessPlagueResistanceBreakdown]"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_EPIDEMIC_RESISTANCE"
								default_format = "#high"
							}

							expand = {}

							text_single = {
								text = "HOLDING_VIEW_EPIDEMIC_RESISTANCE_VALUE"
								default_format = "#high"
							}

							tooltip_visible = "[ValueBreakdown.HasTooltip]"

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}

						expand = {}
					}
				}

				### CONSTRUCT NEW HOLDING & CONSTRUCTING PROGRESS
				vbox = {
					visible = "[GetScriptedGui('gui_not_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]" # LotR
					hbox = {
						visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
						margin_bottom = 30

						button_standard_big = {
							name = "construct_holding"
							size = { 300 50 }
							text = "CREATE_NEW_HOLDING_BUTTON"

							enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
							onclick = "[HoldingView.OnConstructHoldingClick]"

							tooltip = "[HoldingView.GetHoldingConstructionTooltip]"

						}
					}

					hbox = {
						visible = "[HoldingView.IsBeingConstructed]"
						margin_bottom = 30

						vbox = {
							name = "constructing_holding"
							spacing = 5

							progressbar_standard = {
								name = "constructing_holding_progress"
								alwaystransparent = yes
								size = { 300 30 }
								value = "[HoldingView.GetConstructionProgressForSlot('(int32)0')]"
								direction = horizontal

								tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"

								text_single = {
									parentanchor = center
									text = "[HoldingView.GetConstructionTimeLeftForSlot('(int32)0')]"
									default_format = "#high"
									align = nobaseline
									using = Font_Size_Medium
								}
							}

							button_standard_big = {
								name = "cancel_holding_construction"
								size = { 300 30 }
								text = "CANCEL_HOLDING_CONSTRUCTION"
								visible = "[HoldingView.CanCancelConstruction]"

								onclick = "[HoldingView.CancelHoldingConstruction]"

								tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
							}
						}
					}
				}

				### LotR - Colonise a county
				vbox = {
					visible = "[GetScriptedGui('gui_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]"
					hbox = {
						margin_bottom = 15

						button_standard_big = {
							name = "construct_holding_wastelands"
							datacontext = "[HoldingView.GetTitle]"
						
							size = { 300 50 }
							text = "[Localize('COLONISE')] [HoldingView.GetProvince.GetCounty.GetTitle.GetNameNoTierNoTooltip]"
							onclick = "[GetScriptedGui('gui_can_colonise').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('wastelands', HoldingView.GetProvince.MakeScope ).End)]"
							tooltip = "[GetScriptedGui('gui_can_colonise').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('wastelands', HoldingView.GetProvince.MakeScope ).End )]"
							enabled = "[GetScriptedGui('gui_can_colonise').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('wastelands', HoldingView.GetProvince.MakeScope ).End)]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					allow_outside = yes

					### BOTTOM LEFT
					background = {
						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"

						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						spriteType = Corneredtiled
						using = Color_Blue
						alpha = 0.6

						margin_left = 4
						margin_bottom = 3

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_texture_01.dds"
							spriteType = Corneredtiled
							spriteborder = { 15 15 }
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					background = {
						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"

						texture = "gfx/interface/component_masks/mask_frame.dds"
						spriteType = Corneredstretched
						spriteborder = { 15 15 }
						using = Color_Blue
						alpha = 0.6

						margin_bottom = 7
						margin_left = 6

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					vbox = {
						layoutpolicy_vertical = expanding
						allow_outside = yes

						expand = {}

						hbox = {
							allow_outside = yes

							widget = {
								datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
								visible = "[And( NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetProvince.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder )]"
								allow_outside = yes
								size = { 85 90 }

								text_single = {
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Not(Title.IsLeasedOut)]"
									layoutpolicy_horizontal = expanding
									parentanchor = top|left
									position = { 0 -22 }
									allow_outside = yes

									text = "HOLDING_VIEW_HOLDER"
									default_format = "#low"

									margin_left = 5
								}

								text_single = {
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Title.IsLeasedOut]"
									layoutpolicy_horizontal = expanding
									parentanchor = top|left
									position = { 0 -22 }
									allow_outside = yes

									text = "HOLDING_VIEW_LESSEE"
									default_format = "#low"

									margin_left = 5
								}

								portrait_head_small = {
									blockoverride "opinion_box" {}
								}
							}

							widget = {
								size = { 30 90 }
								allow_outside = yes

								vbox = {
									name = "theocracy_property"
									layoutpolicy_vertical = expanding
									parentanchor = bottom
									allow_outside = yes

									expand = {}

									icon = {
										name = "church_property"
										datacontext = "[HoldingView.GetTitle]"
										visible = "[Title.IsUnderTheocraticLease]"
										size = { 30 30 }
										texture = "gfx/interface/icons/icon_holding_church.dds"

										tooltip = "CHURCH_PROPERTY_TOOLTIP"
									}

									container = {
										name = "revoke_lease_button"
										datacontext = "[HoldingView.GetTitle]"
										visible = "[Title.IsLeasedOut]"
										ignoreinvisible = yes

										button_round  = {
											datacontext = "[Title.GetLessee]"
											visible = "[And( Or(Title.GetHolder.IsLocalPlayer, Title.GetHolder.IsOtherLiegeOrAbove( GetPlayer )), Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction', Title.Self) )]"

											enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self)]"
											oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
											clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

											tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction', Title.Self)]"

											button_revoke_lease = {
												parentanchor = center
												onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction', Title.Self)]"
											}
										}
									}

									vbox = {
										button_round = {
											name = "toggle_find_vassal"
											datacontext = "[HoldingView.GetTitle]"
											datacontext = "[GetPlayer]"
											visible = "[And( And( ObjectsEqual( Title.GetHolder, Character.Self ), Title.CanUseFindVassal( Character.Self ) ), Not( Title.IsLeasedOut ) )]"

											onclick = "[HoldingView.ToggleFindVassalListWindow]"

											tooltip = "FIND_VASSAL_BUTTON_TOOLTIP"

											button_grant_title_to_vassal = {
												parentanchor = center
												alwaystransparent = yes
											}
										}

										hbox_title_shared_buttons = {
											datacontext = "[HoldingView.GetTitle]"
											datacontext = "[Title.GetHolder]"
										}
									}
								}
							}
						}
					}

					expand = {}

					vbox = {
						layoutpolicy_vertical = expanding
						margin_right = 3

						expand = {}

						# Showing special buildings even if the holding type do not allow buildings (has to be positioned differently)
						widget_building_item = {
							name = "special_building_no_others"
							datacontext = "[HoldingView.GetGUISpecialBuilding]"
							visible = "[And(HoldingView.HasSpecialBuildingSlot, HoldingView.GetHolding.GetType.HasParameter('no_buildings'))]"

							button_standard = {
								size = { 100% 100% }
								texture = "gfx/interface/buttons/button_special_building.dds"
								alwaystransparent = yes
								spriteborder = { 20 20 }
							}
						}
					}

					### BOTTOM RIGHT
					vbox = {
						layoutpolicy_vertical = expanding
						allow_outside = yes

						expand = {}

						flowcontainer = {
							visible = "[HoldingView.GetTitle.HasHolder]"
							direction = vertical
							ignoreinvisible = yes
							spacing = 3

							button_standard = {
								datacontext = "[HoldingView.GetGUIHoldingBuilding]"
								parentanchor = right
								size = { 171 85 }
								allow_outside = yes

								onclick = "[GUIBuildingItem.OnClick]"
								down = "[GUIBuildingItem.IsHighlighted]"
								enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"

								tooltip = "[GUIBuildingItem.GetTooltip]"

								vbox = {
									layoutpolicy_vertical = expanding
									margin = { 5 0 }

									### Fort Info
									hbox = {
										visible = "[HoldingView.GetProvince.HasFort]"
										layoutpolicy_horizontal = expanding
										spacing = 10
										margin_left = 2
										margin_right = 2
										margin_top = 5

										expand = {}

										widget = {
											size = { 50 40 }

											tooltip = "[HoldingView.GetGarrisonTooltip]"

											flowcontainer = {
												parentanchor = top|hcenter
												spacing = 3

												icon = {
													name = "icon_garrison"
													texture = "gfx/interface/icons/icon_garrison.dds"
													size = { 30 30 }
												}

												text_single = {
													text = "[HoldingView.GetCurrentGarrisonSize]"
													default_format = "#high"
												}
											}

											flowcontainer = {
												parentanchor = bottom|hcenter
												position = { 0 -2 }

												progressbar_standard_transparent = {
													size = { 70 10 }
													value = "[HoldingView.GetGarrisonRatio]"
													direction = horizontal
												}
											}
										}

										vbox = {
											layoutpolicy_vertical = expanding
											margin = { 5 0 }

											divider_light = {
												layoutpolicy_vertical = expanding
											}
										}

										vbox = {
											layoutpolicy_vertical = expanding
											margin_left = 5

											expand = {}

											hbox = {
												spacing = 3
												tooltip = "[Province.GetFortLevelTooltip]"

												icon = {
													name = "icon_fort"
													texture = "gfx/interface/window_siege/fort_icon.dds"
													size = { 30 25 }
												}

												text_single = {
													text = "[HoldingView.GetProvince.GetFortLevel]"
													default_format = "#high"
													align = nobaseline
												}
											}

											expand = {}
										}

										expand = {}
									}

									### No Fort Info
									hbox = {
										visible = "[Not( HoldingView.GetProvince.HasFort )]"
										layoutpolicy_horizontal = expanding
										margin = { 5 5 }

										widget = {
											size = { 45 30 }

											icon_building = {
												name = "building_icon"
												parentanchor = center
												position = { 0 5 }
												size = { 45 40 }
												texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
											}
										}
									}

									expand = {}

									widget = {
										size = { 161 40 }

										background = {
											using = Background_Area_Dark
											margin = { 4 -2 }
										}

										vbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = expanding

											expand = {}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 5 0 }
												spacing = 5

												expand = {}

												text_single = {
													text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
													max_width = 115
												}

												text_single = {
													visible = "[GUIBuildingItem.HasLevel]"
													text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
													size = { 15 20 }
													margin = { 5 0 }
													fontsize = 15
													default_format = "#low;bold"
													align = center

													background = {
														using = Background_Area_ExtraDark
													}
												}

												warning_icon = {
													name = "wrong_type"
													datacontext = "[HoldingView.GetHolder]"
													visible = "[And( Not( Holding.IsEmpty ), Not( Holding.IsValidForLesseeOrHolder ) )]"
													size = { 20 20 }

													tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
												}

												warning_icon = {
													name = "reduced_by_fixable_situation"
													visible = "[And( ObjectsEqual( GUIBuildingItem.Self, Holding.Self ), GUIBuildingItem.IsBuildingDisabled )]"
													size = { 20 20 }
												}

												expand = {}
											}

											widget = {
												visible = "[GUIBuildingItem.IsConstructing]"
												size = { 161 8 }

												progressbar_standard = {
													name = "holding_upgrade_progressbar"
													parentanchor = center
													size = { 167 10 }
													alwaystransparent = yes
													value = "[GUIBuildingItem.GetConstructingProgress]"
												}
											}

											expand = {}
										}
									}
								}
							}

							flowcontainer = {
								name = "buildings_grid_special"
								visible = "[Not(HoldingView.GetHolding.GetType.HasParameter('no_buildings'))]"
								ignoreinvisible = yes
								parentanchor = right

								# Upgrade buildings
								flowcontainer = {
									name = "buildings_grid"
									datamodel = "[HoldingView.GetBuildings]"
									ignoreinvisible = yes
									spacing = 3
									righttoleft = yes

									item = {
										widget_building_item = {
											blockoverride "enabled_block" { enabled = yes }
										}
									}
								}

								flowcontainer = {
									visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
									ignoreinvisible = yes
									margin_left = 3
									margin_right = -2

									widget_building_item = {
										name = "duchy_capital_building"
										datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
										visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"

										button_standard = {
											size = { 100% 100% }
											texture = "gfx/interface/buttons/button_duchy_capital.dds"
											alwaystransparent = yes
											spriteType = Corneredtiled
											spriteborder = { 18 18 }
										}
									}

									spacer = {
										size = { 3 0 }
									}

									widget_building_item = {
										name = "special_building"
										datacontext = "[HoldingView.GetGUISpecialBuilding]"
										visible = "[HoldingView.HasSpecialBuildingSlot]"

										button_standard = {
											size = { 100% 100% }
											texture = "gfx/interface/buttons/button_special_building.dds"
											alwaystransparent = yes
											spriteType = Corneredtiled
											spriteborder = { 18 18 }
										}
									}

									widget = {
										# This is needed to offset the building slots correctly when special building slots exist.
										name = "Conditional_margin_widget"
										size = { 0 0 }
										visible = "[HoldingView.HasSpecialBuildingSlot]"
									}
								}
							}
						}
					}
				}
			}

			#################################################
			########## LOTR DWARVEN HOLDING INFO ############
			#################################################

			vbox = {
				name = "lotr_holding_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				allow_outside = yes
				minimumsize = { 0 320 }
				margin = { 5 5 }
				visible = "[GetScriptedGui('gui_dwarven_holdings').IsValid(GuiScope.SetRoot( HoldingView.GetProvince.MakeScope).End)]"

					### Settlement Buttons ###
				widget = { #LotR
				 	allow_outside = yes
				 	parentanchor = left|top
				 	
					
					vbox = {
						
						ignoreinvisible = yes
						position = { 80 70 }
						
					
					
						button_round  = { ## RETURN SETTLEMENT BACK TO WILDERNESS ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('return_settlement_county_to_wilderness', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('return_settlement_county_to_wilderness', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('return_settlement_county_to_wilderness', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('return_settlement_county_to_wilderness', Title.Self)]"
							
							

							button_abandon_holding = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
								
							}
						}
					
						button_round  = { ## FEUDALIZE INTO CASTLE HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_castle_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_castle_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_castle_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_castle_holding_interaction', Title.Self)]"

							button_feudalize_holding = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
							

						}	
					
						button_round  = { ## FEUDALIZE INTO CITY HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_city_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_city_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_city_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_city_holding_interaction', Title.Self)]"

							button_feudalize_holding_city = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
					
						button_round  = { ## FEUDALIZE INTO TEMPLE HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_temple_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_temple_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_temple_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_temple_holding_interaction', Title.Self)]"
							

							button_feudalize_holding_temple = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
								
							}
						}
					
						button_round  = { ## SETTLE AN ELVEN HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('settle_elven_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('settle_elven_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('settle_elven_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('settle_elven_holding_interaction', Title.Self)]"
						
							button_feudalize_holding_elven = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
								
							}
						}
					
						button_round  = { ## FEUDALIZE INTO DELVING HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_into_delving_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_into_delving_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_into_delving_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_into_delving_holding_interaction', Title.Self)]"

							button_feudalize_holding_delving = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
					
						button_round  = { ## TRIBALIZE AN ELVEN HOLDING ###
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('tribalize_elven_holding_interaction', Title.Self) )]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('tribalize_elven_holding_interaction', Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('tribalize_elven_holding_interaction', Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('tribalize_elven_holding_interaction', Title.Self)]"
						
							button_feudalize_holding = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
					}
				}

				state = {
					name = "lotr_holding_view_refresh"
					next = lotr_a
					alpha = 0.5
				}

				state = {
					name = "lotr_a"
					alpha = 1
					duration = 0.5
					using = Animation_Curve_Default
				}

				background = {
					using = Background_Area_Dark
					margin_left = 5
					margin_top = 3
				}

				background = {
					# visible = "[HoldingView.HasHolding]"
					texture = "[HoldingView.GetHolding.GetIllustration]"
					visible = "[And(HoldingView.HasHolding, GetScriptedGui('gui_not_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End))]" #LotR
					alpha = 0.8

					fittype = centercrop

					modify_texture = {
						texture = "gfx/interface/window_county/mask_holding_illustration.dds"
						blend_mode = alphamultiply
						alpha = 0.95
					}
				}

				background = {
					# visible = "[Not(HoldingView.HasHolding)]"
					texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
					visible = "[GetScriptedGui('gui_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]" #LotR
					alpha = 0.7

					fittype = centercrop

					modify_texture = {
						texture = "gfx/interface/window_county/mask_holding_illustration.dds"
						blend_mode = alphamultiply
						alpha = 0.95
					}
				}

				### TOP LEFT
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 5

							coa_title_medium = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[HoldingView.GetTitle.HasHolder]"
							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes

								flowcontainer = {
									visible = "[HoldingView.GetTitle.HasHolder]"
									ignoreinvisible = yes
									spacing = 5

									text_single = {
										text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
										default_format = "#high"
										align = nobaseline
										using = Font_Size_Big
										max_width = 150
										fontsize_min = 14
										margin_left = 5

										tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
									}

									button_edit_text = {
										visible = "[HoldingView.GetProvince.GetTitle.CanPlayerCustomizeTitle]"
										parentanchor = vcenter
										size = { 25 25 }

										onclick = "[OpenTitleCustomizationWindow(HoldingView.GetProvince.GetTitle)]"

										tooltip = "CUSTOMIZE_TITLE"
									}

									widget = {
										size = { 30 30 }
										visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"

										icon = {
											name = "lotr_county_capital_icon"
											parentanchor = center
											size = { 30 30 }
											texture = "gfx/interface/icons/icon_capital.dds"
											framesize = { 60 60 }
											frame = 1

											tooltip = "COUNTY_CAPITAL_TOOLTIP"
										}
									}

									widget = {
										size = { 30 30 }
										visible = "[HoldingView.GetProvince.IsRealmCapital]"

										icon = {
											name = "lotr_realm_capital_icon"
											parentanchor = center
											size = { 30 30 }
											texture = "gfx/interface/icons/icon_capital.dds"
											framesize = { 60 60 }
											frame = 2

											tooltip = "REALM_CAPITAL_TOOLTIP"
										}
									}

									widget = {
										size = { 30 30 }

										button_move_capital = {
											name = "lotr_set_realm_capital_button"
											visible = "[HoldingView.PotentialSetRealmCapital]"
											texture = "gfx/interface/icons/flat_icons/move_capital.dds"

											enabled = "[HoldingView.CanSetRealmCapital]"
											onclick = "[HoldingView.SetRealmCapital]"

											tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
										}

										button_move_capital = {
											name = "lotr_set_county_capital_button"
											visible = "[HoldingView.CanSetCountyCapital]"
											texture = "gfx/interface/icons/flat_icons/move_capital.dds"

											onclick = "[HoldingView.SetCountyCapital]"

											tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
										}
									}
								}

								text_single = {
									visible = "[Not(HoldingView.GetTitle.HasHolder)]"
									text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
									default_format = "#medium"
									using = Font_Size_Big
									align = nobaseline
									margin_left = 5
								}

								flowcontainer = {
									datacontext = "[HoldingView.GetGUIHoldingBuilding]"
									ignoreinvisible = yes

									text_label_left = {
										text = "[HoldingView.GetHoldingDesc]"
										max_width = 210
										multiline = yes
										margin_left = 5
									}
								}

								text_single = {
									visible = "[HoldingView.GetProvince.IsOccupied]"
									text = "[HoldingView.GetOccupiedInfo]"
									default_format = "#high"
								}
							}

							expand = {}
						}

						expand = {}
					}

					### HOLDING STATUSES
					vbox = {
						layoutpolicy_vertical = expanding

						fixedgridbox = {
							name = "lotr_holding_statuses"
							datamodel = "[HoldingView.GetHoldingStatuses]"
							flipdirection = yes
							datamodel_wrap = 2
							maxverticalslots = 4

							addrow = 35
							addcolumn = 37

							item = {
								flowcontainer = {
									ignoreinvisible = yes

									icon = {
										name = "terrain"
										datacontext = "[HoldingStatus.GetTerrainType]"
										datacontext = "[HoldingView.GetProvince]"
										visible = "[HoldingStatus.IsTerrainType]"

										texture = "[Terrain.GetIcon]"
										size = { 35 35 }

										tooltip = "HOLDING_TERRAIN_TOTAL_TOOLTIP"
									}

									button_round = {
										name = "lotr_stationed_maa_button"
										datacontext = "[HoldingStatus.GetMAAOriginHere]"
										visible = "[HoldingStatus.IsMAAOriginHere]"
										size = { 35 35 }

										onclick = "[OpenGameView( 'military' )]"
										onclick = "[OpenGameViewData( 'men_at_arms', Regiment.GetID )]"

										tooltip = "VIEW_MAA_ORIGIN_TT"

										button_icon_highlight = {
											texture = "gfx/interface/icons/flat_icons/army_details.dds"
											parentanchor = center
											alwaystransparent = yes
											size = { 35 35 }
										}
									}

									icon = {
										datacontext = "[HoldingStatus.GetMAATypeOriginHere]"
										visible = "[HoldingStatus.IsMAATypeOriginHere]"

										texture = "[MenAtArmsType.GetIcon]"
										alwaystransparent = yes
										size = { 35 35 }

										tooltip = "SHOW_MAA_ORIGIN_TT"
									}

									flowcontainer = {
										visible = "[HoldingStatus.IsWinterLevel]"
										ignoreinvisible = yes

										icon = { # Mild Winter
											name = "lotr_winter_level_icon_mild"
											visible = "[EqualTo_int32( HoldingStatus.GetWinterLevel, '(int32)1' )]"
											texture = "gfx/interface/icons/terrain_types/winter_mild.dds"
											size = { 35 35 }

											tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
										}

										icon = { # Normal Winter
											name = "lotr_winter_level_icon_normal"
											visible = "[EqualTo_int32( HoldingStatus.GetWinterLevel, '(int32)2' )]"
											texture = "gfx/interface/icons/terrain_types/winter_normal.dds"
											size = { 35 35 }

											tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
										}

										icon = { # Harsh Winter
											name = "lotr_winter_level_icon_harsh"
											visible = "[EqualTo_int32( HoldingStatus.GetWinterLevel, '(int32)3' )]"
											texture = "gfx/interface/icons/terrain_types/winter_harsh.dds"
											size = { 35 35 }

											tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
										}
									}

									flowcontainer = {
										datacontext = "[HoldingStatus.GetEpidemic]"
										visible = "[HoldingStatus.IsEpidemic]"
										ignoreinvisible = yes

										button_epidemic = {
											blockoverride "extra_data"
											{
												datacontext = "[Epidemic.GetInfectionLevelIn( HoldingView.GetProvince )]"

												spacer = {
													size = { 0 16 }
												}

												cooltip_paragraph = {
													visible = "[EpidemicInfectionLevel.HasRealmModifier]"
													text = "[EpidemicInfectionLevel.GetRealmModifierDesc]"
												}

												cooltip_paragraph = {
													visible = "[Or( EpidemicInfectionLevel.HasProvinceModifier, EpidemicInfectionLevel.HasCountyModifier )]"
													text = "EPIDEMIC_MODIFIERS_PROVINCE_AND_COUNTY"
												}
											}

											blockoverride "infection_chance_text"
											{
												text = "EPIDEMIC_TOOLTIP_CHANCE_OF_INFECTION_SPECIFIC_PROVINCE"
											}
										}
									}


									flowcontainer = {
										datacontext = "[HoldingStatus.GetLegend]"
										visible = "[HoldingStatus.IsLegend]"
										ignoreinvisible = yes

										button_legend = {
											visible = "[Not( Or( Legend.IsCurrentlyPromotedInProvince( Province.Self ), Legend.WasPromotedOnCompletionInProvince( Province.Self ) ) )]"
											effectname = "GreyedOut"

											blockoverride "province_details" {
												text_multi = {
													layoutpolicy_horizontal = expanding
													autoresize = yes
													maximumsize = { 400 300 }

													text = "DISABLED_LEGEND_PROVINCE_MODIFIERS"
												}
											}
										}

										button_legend = {
											visible = "[Or( Legend.IsCurrentlyPromotedInProvince( Province.Self ), Legend.WasPromotedOnCompletionInProvince( Province.Self ) )]"
										}
									}

									flowcontainer = {
										datacontext = "[HoldingStatus.GetTimedModifier]"
										visible = "[HoldingStatus.IsTimedModifier]"
										ignoreinvisible = yes

										modifier_item_icon = {
											size = { 30 30 }

											blockoverride "icon_data"
											{
												using = tooltip_ne
											}
										}
									}
								}
							}
						}

						expand = {}
					}

					### HOLDING STATS
					vbox = {
						layoutpolicy_vertical = expanding
						visible = "[GetScriptedGui('gui_not_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]" # LotR

						margin = { 15 0 }
						margin_bottom = 10
						minimumsize = { 171 0 }
						spacing = 5

						background = {
							visible = "[HoldingView.HasHolding]"
							using = Background_Area_Dark
							alpha = 0.7
							margin_top = 9
						}

						### Tax Income
						hbox = {
							name = "lotr_tutorial_highlight_holding_view_taxes_box"
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							tooltip = "[Holding.GetTaxTooltip]"

							background = {
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_TAX"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_TAX_VALUE"
								default_format = "#V"
							}
						}

						### Raid loot
						hbox = {
							name = "lotr_tutorial_highlight_holding_view_loot_box"
							visible = "[HoldingView.HasHolding]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"

							background = {
								visible = "[Holding.GetProvince.IsRecentlyLooted]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_LOOT"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_LOOT_VALUE"
							}
						}

						### Levies
						vbox = {
							visible = "[And( HoldingView.HasHolding, Not( Holding.GetType.HasParameter( 'no_levies' ) ) )]"
							layoutpolicy_horizontal = expanding
							spacing = 3

							hbox = {
								layoutpolicy_horizontal = expanding

								tooltip = "[Holding.GetLeviesTooltip]"

								background = {
									visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
									using = Status_Bad
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "LEVIES"
									default_format = "#high"
								}

								text_single = {
									text = "HOLDING_LEVY_SIZE"
									default_format = "#high"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								progressbar_standard_transparent = {
									layoutpolicy_horizontal = expanding
									size = { 0 10 }
									value = "[Holding.GetUnraisedLevyRatioPercent]"
									direction = horizontal
								}
							}
						}


						### Supply Level
						hbox = {
							layoutpolicy_horizontal = expanding

							tooltip = "[HoldingView.GetSupplyLimitTooltip]"

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "SUPPLY_LIMIT"
								default_format = "#high"
								max_width = 140
							}

							text_single = {
								raw_text = " [HoldingView.GetSupplyLimit|V]"
								default_format = "#high"
							}
						}


						### Plague Resistance
						hbox = {
							datacontext = "[Holding.GetProvince]"
							datacontext = "[HoldingView.AccessPlagueResistanceBreakdown]"
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_EPIDEMIC_RESISTANCE"
								default_format = "#high"
							}

							expand = {}

							text_single = {
								text = "HOLDING_VIEW_EPIDEMIC_RESISTANCE_VALUE"
								default_format = "#high"
							}

							tooltip_visible = "[ValueBreakdown.HasTooltip]"

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}

						expand = {}
					}
				}

				### CONSTRUCT NEW HOLDING & CONSTRUCTING PROGRESS
				vbox = {
					visible = "[GetScriptedGui('gui_not_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]" # LotR
					hbox = {
						visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
						margin_bottom = 30

						button_standard_big = {
							name = "construct_holding"
							size = { 300 50 }
							text = "CREATE_NEW_HOLDING_BUTTON"

							enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
							onclick = "[HoldingView.OnConstructHoldingClick]"

							tooltip = "[HoldingView.GetHoldingConstructionTooltip]"

						}
					}

					hbox = {
						visible = "[HoldingView.IsBeingConstructed]"
						margin_bottom = 30

						vbox = {
							name = "constructing_holding"
							spacing = 5

							progressbar_standard = {
								name = "constructing_holding_progress"
								alwaystransparent = yes
								size = { 300 30 }
								value = "[HoldingView.GetConstructionProgressForSlot('(int32)0')]"
								direction = horizontal

								tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"

								text_single = {
									parentanchor = center
									text = "[HoldingView.GetConstructionTimeLeftForSlot('(int32)0')]"
									default_format = "#high"
									align = nobaseline
									using = Font_Size_Medium
								}
							}

							button_standard_big = {
								name = "cancel_holding_construction"
								size = { 300 30 }
								text = "CANCEL_HOLDING_CONSTRUCTION"
								visible = "[HoldingView.CanCancelConstruction]"

								onclick = "[HoldingView.CancelHoldingConstruction]"

								tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
							}
						}
					}
				}

				### LotR - Colonise a county
				vbox = {
					visible = "[GetScriptedGui('gui_is_province_wastelands').IsShown( GuiScope.SetRoot( HoldingView.GetProvince.MakeScope ).End)]"
					hbox = {
						margin_bottom = 30

						button_standard_big = {
							name = "construct_holding_wastelands"
							datacontext = "[HoldingView.GetTitle]"
						
							
							
							size = { 300 50 }
							text = "[Localize('COLONISE')] [HoldingView.GetProvince.GetCounty.GetTitle.GetNameNoTierNoTooltip]"
							onclick = "[GetScriptedGui('gui_can_colonise').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('wastelands', HoldingView.GetProvince.MakeScope ).End)]"
							tooltip = "[GetScriptedGui('gui_can_colonise').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('wastelands', HoldingView.GetProvince.MakeScope ).End )]"
							enabled = "[GetScriptedGui('gui_can_colonise').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('wastelands', HoldingView.GetProvince.MakeScope ).End)]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					allow_outside = yes

					### BOTTOM LEFT
					background = {
						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"

						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						spriteType = Corneredtiled
						using = Color_Blue
						alpha = 0.6

						margin_left = 4
						margin_bottom = 3

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_texture_01.dds"
							spriteType = Corneredtiled
							spriteborder = { 15 15 }
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					background = {
						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"

						texture = "gfx/interface/component_masks/mask_frame.dds"
						spriteType = Corneredstretched
						spriteborder = { 15 15 }
						using = Color_Blue
						alpha = 0.6

						margin_bottom = 7
						margin_left = 6

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							alpha = 0.9
							mirror = horizontal
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
							blend_mode = alphamultiply
							mirror = vertical
						}
					}

					widget = {
						size = { 30 90 }
						allow_outside = yes
			
						button_round = {
							name = "lotr_toggle_find_vassal"
							position = { 20 -50 }
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[GetPlayer]"
							visible = "[And( And( ObjectsEqual( Title.GetHolder, Character.Self ), Title.CanUseFindVassal( Character.Self ) ), Not( Title.IsLeasedOut ) )]"

							onclick = "[HoldingView.ToggleFindVassalListWindow]"

							tooltip = "FIND_VASSAL_BUTTON_TOOLTIP"

							button_grant_title_to_vassal = {
								parentanchor = center
								alwaystransparent = yes
							}
						}

						hbox_title_shared_buttons = {
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[Title.GetHolder]"
						}
					}

					expand = {}

					vbox = {
						layoutpolicy_vertical = expanding
						margin_right = 3

						expand = {}

						# Showing special buildings even if the holding type do not allow buildings (has to be positioned differently)
						widget_building_item = {
							name = "special_building_no_others"
							datacontext = "[HoldingView.GetGUISpecialBuilding]"
							visible = "[And(HoldingView.HasSpecialBuildingSlot, HoldingView.GetHolding.GetType.HasParameter('no_buildings'))]"

							button_standard = {
								size = { 100% 100% }
								texture = "gfx/interface/buttons/button_special_building.dds"
								alwaystransparent = yes
								spriteborder = { 20 20 }
							}
						}
					}
					
					### BOTTOM RIGHT
					vbox = {
						layoutpolicy_vertical = expanding
						allow_outside = yes

						expand = {}

						flowcontainer = {
							visible = "[HoldingView.GetTitle.HasHolder]"
							direction = vertical
							ignoreinvisible = yes
							spacing = 3
							allow_outside = yes

							button_standard = {
								datacontext = "[HoldingView.GetGUIHoldingBuilding]"
								parentanchor = right
								size = { 171 85 }
								allow_outside = yes

								onclick = "[GUIBuildingItem.OnClick]"
								down = "[GUIBuildingItem.IsHighlighted]"
								enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"

								tooltip = "[GUIBuildingItem.GetTooltip]"

								vbox = {
									layoutpolicy_vertical = expanding
									margin = { 5 0 }

									### Fort Info
									hbox = {
										visible = "[HoldingView.GetProvince.HasFort]"
										layoutpolicy_horizontal = expanding
										spacing = 10
										margin_left = 2
										margin_right = 2
										margin_top = 5

										expand = {}

										widget = {
											size = { 50 40 }

											tooltip = "[HoldingView.GetGarrisonTooltip]"

											flowcontainer = {
												parentanchor = top|hcenter
												spacing = 3

												icon = {
													name = "icon_garrison"
													texture = "gfx/interface/icons/icon_garrison.dds"
													size = { 30 30 }
												}

												text_single = {
													text = "[HoldingView.GetCurrentGarrisonSize]"
													default_format = "#high"
												}
											}

											flowcontainer = {
												parentanchor = bottom|hcenter
												position = { 0 -2 }

												progressbar_standard_transparent = {
													size = { 70 10 }
													value = "[HoldingView.GetGarrisonRatio]"
													direction = horizontal
												}
											}
										}

										vbox = {
											layoutpolicy_vertical = expanding
											margin = { 5 0 }

											divider_light = {
												layoutpolicy_vertical = expanding
											}
										}

										vbox = {
											layoutpolicy_vertical = expanding
											margin_left = 5

											expand = {}

											hbox = {
												spacing = 3
												tooltip = "[Province.GetFortLevelTooltip]"

												icon = {
													name = "icon_fort"
													texture = "gfx/interface/window_siege/fort_icon.dds"
													size = { 30 25 }
												}

												text_single = {
													text = "[HoldingView.GetProvince.GetFortLevel]"
													default_format = "#high"
													align = nobaseline
												}
											}

											expand = {}
										}

										expand = {}
									}

									### No Fort Info
									hbox = {
										visible = "[Not( HoldingView.GetProvince.HasFort )]"
										layoutpolicy_horizontal = expanding
										margin = { 5 5 }

										widget = {
											size = { 45 30 }

											icon_building = {
												name = "building_icon"
												parentanchor = center
												position = { 0 5 }
												size = { 45 40 }
												texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
											}
										}
									}

									expand = {}

									widget = {
										size = { 161 40 }

										background = {
											using = Background_Area_Dark
											margin = { 4 -2 }
										}

										vbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = expanding

											expand = {}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 5 0 }
												spacing = 5

												expand = {}

												text_single = {
													text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
													max_width = 115
												}

												text_single = {
													visible = "[GUIBuildingItem.HasLevel]"
													text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
													size = { 15 20 }
													margin = { 5 0 }
													fontsize = 15
													default_format = "#low;bold"
													align = center

													background = {
														using = Background_Area_ExtraDark
													}
												}

												warning_icon = {
													name = "wrong_type"
													datacontext = "[HoldingView.GetHolder]"
													visible = "[And( Not( Holding.IsEmpty ), Not( Holding.IsValidForLesseeOrHolder ) )]"
													size = { 20 20 }

													tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
												}

												warning_icon = {
													name = "reduced_by_fixable_situation"
													visible = "[And( ObjectsEqual( GUIBuildingItem.Self, Holding.Self ), GUIBuildingItem.IsBuildingDisabled )]"
													size = { 20 20 }
												}

												expand = {}
											}

											widget = {
												visible = "[GUIBuildingItem.IsConstructing]"
												size = { 161 8 }

												progressbar_standard = {
													name = "holding_upgrade_progressbar"
													parentanchor = center
													size = { 167 10 }
													alwaystransparent = yes
													value = "[GUIBuildingItem.GetConstructingProgress]"
												}
											}

											expand = {}
										}
									}
								}
							}
							
							widget = {
								name = "lotr_buildings_grid_special"
								visible = "[Not(HoldingView.GetHolding.GetType.HasParameter('no_buildings'))]"
								
								parentanchor = right
								size = { 280 66 }
								allow_outside = yes

								# Upgrade buildings

								fixedgridbox = {
									name = "lotr_buildings_grid"
									datamodel = "[HoldingView.GetBuildings]"
									datamodel_wrap = 2
									addcolumn = 58
									addrow = 58
									minimumsize = { 300 60 }
									maximumsize = { 500 60 }
									allow_outside = yes
									position = { -260 -60 }
										
									item = {
										widget_building_item = {
											blockoverride "enabled_block" { enabled = yes }
										}
									}
								}

								flowcontainer = {
									visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
									ignoreinvisible = yes
									margin_left = 3
									position = { 163 0 }

									widget_building_item = {
										name = "lotr_duchy_capital_building"
										datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
										visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"

										button_standard = {
											size = { 100% 100% }
											texture = "gfx/interface/buttons/button_duchy_capital.dds"
											alwaystransparent = yes
											spriteType = Corneredtiled
											spriteborder = { 18 18 }
										}
									}

									spacer = {
										size = { 3 0 }
									}

									widget_building_item = {
										name = "lotr_special_building"
										datacontext = "[HoldingView.GetGUISpecialBuilding]"
										visible = "[HoldingView.HasSpecialBuildingSlot]"

										button_standard = {
											size = { 100% 100% }
											texture = "gfx/interface/buttons/button_special_building.dds"
											alwaystransparent = yes
											spriteType = Corneredtiled
											spriteborder = { 18 18 }
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
########### CONSTRUCT NEW BUILDING WINDOW ############
######################################################

window = {
	name = "holding_tracks_view"
	size = { 100% 100% }
	movable = no
	layer = top
	datacontext = "[HoldingView.GetHolder]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 0
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_x = -50
	}

	alwaystransparent = yes

	hbox = {
		expand = {
			max_width = 610
		}

		widget = {
			layoutpolicy_vertical = expanding
			size = { 725 0 }

			vbox = {
				margin_top = 170
				margin_bottom = 10

				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 700 }

					## New Building
					vbox = {
						visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						margin = { 3 3 }
						margin_bottom = 5
						using = Window_Background_Subwindow

						header_pattern = {
							layoutpolicy_horizontal = expanding

							blockoverride "header_text"
							{
								text = "[HoldingView.GetTracksViewLabel]"
							}

							blockoverride "button_close"
							{
								onclick = "[HoldingView.CloseSubwindows]"
							}
						}

						building_in_vassal_warning_hbox = {}

						text_single = {
							layoutpolicy_horizontal = shrinking
							name = "prompt"
							text = "[HoldingView.GetTracksViewPrompt]"
							margin_bottom = 10
						}

						text_single = {
							visible = "[IsDataModelEmpty(HoldingView.GetPotentialBuildings)]"
							layoutpolicy_horizontal = shrinking
							name = "no_potential_buildings_text"
							text = "NO_POTENTIAL_BUILDINGS_WARNING"
							margin_bottom = 10
						}

						## Construct New Building
						container = {
							visible = "[Not(IsDataModelEmpty(HoldingView.GetPotentialBuildings))]"
							layoutpolicy_vertical = expanding

							scrollbox = {
								visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
								size = { 700 300 }
								autoresizescrollarea = yes
								maximumsize = { -1 800 }

								blockoverride "scrollbox_content"
								{
									name = "tracks_grid"
									datamodel = "[HoldingView.GetPotentialBuildings]"
									datacontext = "[HoldingView.GetProvince]"

									visible = "[HoldingView.IsSelectingNewBuilding]"
									spacing = 10
									set_parent_size_to_minimum = yes

									block "scrollbox_margins"
									{
										using = Scrollbox_Margins
										margin_right = 15
										margin_top = 5
									}

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											background = {
												using = Background_Area_Light
											}

											hbox = {
												name = "header"
												layoutpolicy_horizontal = expanding

												background = {
													using = Background_Area
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 10 }
													spacing = 10

													icon_building = {
														name = "building_icon"
														size = { 75 65 }
														texture = "[GUIPotentialBuildingItem.GetBuilding.GetTypeIcon]"
													}

													vbox = {
														spacing = 5
														layoutpolicy_horizontal = expanding

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeName]"
															using = Font_Size_Medium
															align = left
															autoresize = no
														}

														hbox = {
															button_tertiary = {
																text = "CONSTRUCT_BUILDINGS_DETAILS"

																onclick = "[GUIPotentialBuildingItem.ShowDetails]"
																tooltip = "CONSTRUCT_BUILDINGS_DETAILS_TT"
																using = tooltip_es
															}

															expand = {}
														}
													}

													expand = {}

													hbox = {
														spacing = 5

														hbox = {
															margin = { 5 5 }
															min_width = 120
															spacing = 10

															background = {
																using = Background_Area
																margin_bottom = 4
																margin_left = 6
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetGoldCost]"
																visible = "[GUIPotentialBuildingItem.HasGoldCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetPrestigeCost]"
																visible = "[GUIPotentialBuildingItem.HasPrestigeCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetPietyCost]"
																visible = "[GUIPotentialBuildingItem.HasPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															expand = {}
														}

														button_standard = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
															size = { 100 53 }
															enabled = "[GUIPotentialBuildingItem.CanConstruct]"
															tooltip = "[GUIPotentialBuildingItem.GetTooltip]"
															onclick = "[GUIPotentialBuildingItem.Construct]"
															onclick = "[HoldingView.CloseSubwindows]"
															text = "CONSTRUCT"
															using = tooltip_es
														}
													}
												}
											}

											hbox = {
												name = "dynamic_content"
												layoutpolicy_horizontal = expanding
												margin = {5 5}

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = {5 0}
													text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeDescription]"
													default_format = "#F"
													autoresize = yes
													max_width = 280
													min_width = 280
												}

												vbox = {
													spacing = 8

													hbox = {
														layoutpolicy_horizontal = expanding
														margin_left = 10

														text_label_left = {
															layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetBuilding]"
															text = CV_BUILDING_LEVEL_AND_NAME
															autoresize = no
														}
													}

													text_multi = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = yes
														max_width = 355
														min_width = 355
														text = "[GUIPotentialBuildingItem.GetBuilding.GetEffectDescriptionAtProvince( Character.Self, Province.Self )]"
														margin = { 15 10 }

														background = {
															using = Background_Frame
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						vbox = {
							visible = "[HoldingView.IsSelectingBuildingToConstruct]"
							layoutpolicy_horizontal = expanding
							alwaystransparent = no

							## Upgrade Building
							vbox = {
								name = "upgrade"
								datacontext = "[HoldingView.GetTrack]"
								layoutpolicy_horizontal = expanding
								#minimumsize = { 0 700 }
								using = Window_Background_Subwindow
								margin_bottom = 10

								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 15 10 }
									spacing = 10

									background = {
										using = Background_Area
									}

									icon_building = {
										name = "building_icon"
										texture = "[GUITrackItem.GetSelectedBuilding.GetTypeIcon]"
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetSelectedBuilding.GetTypeName]"
											using = Font_Size_Big
											default_format = "#high"
										}

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetBuildingTypeText]"
										}

										building_in_vassal_warning_hbox = {
										}
									}

									buttons_window_control = {
										blockoverride "button_close"
										{
											onclick = "[HoldingView.CloseSubwindows]"
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 15 5 }

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 5 10 }

										### PREVIOUS BUILDINGS
										hbox = {
											name = "level_track_previous"
											datamodel = "[GUITrackItem.GetPreLevelItems]"

											item = {
												hbox = {
													button_icon = {
														name = "track_icon"
														onclick = "[BuildingLevelItem.OnClick]"
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"

														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"

														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }

														background = {
															texture = "gfx/interface/window_county/building_status_circle.dds"
															framesize = { 120 120 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 3
															}
														}

														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
														}

														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}

													widget = {
														visible = "[GUITrackItem.HasCurrentBuilding]"
														layoutpolicy_horizontal = expanding
														size = { 5 6 }

														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }

															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}
												}
											}
										}

										### CURRENT BUILDING
										button_icon = {
											name = "current_building"
											visible = "[GUITrackItem.HasCurrentBuilding]"
											onclick = "[GUITrackItem.OnCurrentBuildingClick]"
											down = "[GUITrackItem.IsCurrentBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsCurrentBuildingSelected]"
											tooltip = "[GUITrackItem.GetCurrentBuildingTooltip]"
											using = tooltip_ws
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											using = tooltip_ne
											tooltip_offset = { 40 0 }

											background = {
												visible = "[Not(GUITrackItem.IsConstructingReplacement)]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 3
												}
											}

											background = {
												visible = "[GUITrackItem.IsConstructingReplacement]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												alpha = 0.5
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 3
												}
											}
											background = {
												visible = "[GUITrackItem.IsConstructingReplacement]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												frame = 2
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 3
												}
											}

											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsCurrentBuildingSelected]"
												texture = "[GUITrackItem.GetCurrentLevelIcon]"
											}

											icon = {
												visible = "[GUITrackItem.IsCurrentBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}

										expand = {
											visible = "[Not(And(GUITrackItem.HasCurrentBuilding, GUITrackItem.HasNextBuilding))]"
										}

										widget = {
											visible = "[And(GUITrackItem.HasCurrentBuilding, GUITrackItem.HasNextBuilding)]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }

											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}

										### NEXT BUILDING
										button_icon = {
											name = "next_building"
											visible = "[GUITrackItem.HasNextBuilding]"
											down = "[GUITrackItem.IsNextBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsNextBuildingSelected]"
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											onclick = "[GUITrackItem.OnNextBuildingClick]"
											tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
											using = tooltip_ne
											tooltip_offset = { 40 0 }

											background = {
												visible = "[And(GUITrackItem.IsConstructing, Not(GUITrackItem.IsConstructingReplacement))]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												frame = 2
												alpha = 0.5
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 4
												}
											}

											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsNextBuildingSelected]"
												alwaystransparent = yes
												texture = "[GUITrackItem.GetNextLevelIcon]"
												#frame = "[GUITrackItem.GetNextLevelIconFrame]"
											}

											icon = {
												visible = "[GUITrackItem.IsNextBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}

										widget = {
											visible = "[Not(IsDataModelEmpty( GUITrackItem.GetPostLevelItems ))]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }

											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}

										#Post Track
										### LEVEL TRACK
										hbox = {
											name = "level_track_next"
											datamodel = "[GUITrackItem.GetPostLevelItems]"

											item = {
												hbox = {
													widget = {
														layoutpolicy_horizontal = expanding
														size = { 5 6 }

														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}

													button_icon = {
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"
														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"
														onclick = "[BuildingLevelItem.OnClick]"
														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }

														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
															# frame = 2
														}

														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}
												}
											}
										}
									}

									spacer = {
										size = { 10 10 }
									}

									# Buliding info
									vbox = {
										layoutpolicy_horizontal = expanding

										background = {
											using = Background_Frame
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_top = 5
											margin_left = 15

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "[GUITrackItem.GetSelectedBuilding.GetNameNoTooltip]"
												default_format = "#high"
												using = Font_Size_Medium
											}
										}

										hbox = {
											name = "flavor_and_effect"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 5 5 }

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = { 10 5 }
													autoresize = yes
													max_width = 330
													min_width = 330
													text = "[GUITrackItem.GetSelectedBuilding.GetDescription]"
												}

												text_single = {
													datacontext = "[GUITrackItem.GetSelectedBuilding]"
													visible = "[InDebugMode]"
													margin = { 10 5 }

													layoutpolicy_horizontal = expanding
													text = "BUILDING_DEBUG_FULL"
												}

												hbox = {
													visible = "[And( And( Or( GUITrackItem.CanReplace, GUITrackItem.CanCancel ), GUITrackItem.IsCurrentBuildingSelected), Not( GUITrackItem.IsConstructing ) )]"
													spacing = 10
													margin_bottom = 5

													text_single = {
														text = "CURRENT_BUILDING"
														default_format = "#weak"
														align = nobaseline
													}
												}

												vbox = {
													visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')), Not(GUITrackItem.IsNextBuildingSelected))]"
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_bottom = 5
													spacing = 5

													text_label_left = {
														layoutpolicy_horizontal = expanding
														text = "UPGRADE_COST"
													}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 10
														margin = { 10 10 }

														hbox = {
															spacing = 10

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedGoldCost]"
																visible = "[GUITrackItem.HasSelectedGoldCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
																visible = "[GUITrackItem.HasSelectedPrestigeCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPietyCost]"
																visible = "[GUITrackItem.HasSelectedPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_visible = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
														}

														warning_icon = {
															name = "cant_construct"
															size = { 30 30 }
															tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
															visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
														}

														expand = {}
													}
												}

											}

											divider_light = {
												layoutpolicy_vertical = expanding
											}

											text_multi = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = yes
												max_width = 355
												min_width = 355
												text = "[GUITrackItem.GetSelectedBuilding.GetEffectDescriptionAtProvince( Character.Self, HoldingView.GetProvince )]"
												margin = { 15 10 }
											}
										}
									}

									vbox = {
										visible = "[GUITrackItem.IsConstructing]"
										layoutpolicy_horizontal = expanding
										margin = { 0 15 }
										spacing = 10

										text_single = {
											text = "HOLDING_VIEW_IN_PROGRESS"
											margin = { 0 5 }
										}

										hbox = {
											spacing = 10

											widget = {
												size = { 20 20 }
												allow_outside = yes

												button_round  = {
													name = "abort_button"
													parentanchor = center
													visible = "[GUITrackItem.CanShowCancel]"
													enabled = "[GUITrackItem.CanCancel]"
													onclick = "[GUITrackItem.Cancel]"
													tooltip = "[GUITrackItem.GetCancelTooltip]"

													button_cancel = {
														parentanchor = center
														alwaystransparent = yes
													}
												}
											}

											progressbar_standard = {
												name = "construct_progressbar"
												layoutpolicy_horizontal = expanding
												layoutstretchfactor_horizontal = 1
												size = { 300 25 }
												alwaystransparent = yes
												value = "[GUITrackItem.GetConstructionProgress]"

												text_single = {
													parentanchor = center
													text = "[GUITrackItem.GetConstructTimeLeft]"
													default_format = "#high"
													align = nobaseline
												}
											}
										}
									}

									spacing = 5

									hbox = {
										visible = "[Not(GUITrackItem.IsConstructing)]"
										spacing = 10
										margin = { 10 10 }

										vbox = {
											layoutpolicy_vertical = expanding

											expand = {}

											button_standard_back = {
												name = "back_button"
												text = "BACK_LABEL"
												visible = "[And(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'), Not(GUITrackItem.IsConstructing))]"
												onclick = "[GUITrackItem.GoBack]"
												oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
												clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
											}

											button_round = {
												name = "replace_button"
												onclick = "[GUITrackItem.Replace]"
												tooltip = "[GUITrackItem.GetReplaceTooltip]"
												visible = "[And(GUITrackItem.IsCurrentBuildingSelected, GUITrackItem.CanReplace)]"

												button_change = {
													alwaystransparent = yes
													parentanchor = center
												}
											}
										}
										vbox = {
											spacing = 10

											hbox = {
												visible = "[GUITrackItem.HasNextBuilding]"
												layoutpolicy_horizontal = expanding

												hbox = {
													margin = { 10 5 }
													margin_right = 15
													spacing = 10

													background = {
														using = Background_Area
														margin_bottom = 4
														margin_left = 6
													}

													text_single = {
														datacontext = "[GUITrackItem.GetNextGoldCost]"
														visible = "[GUITrackItem.HasNextGoldCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_visible = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}

														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}

													text_single = {
														datacontext = "[GUITrackItem.GetNextPrestigeCost]"
														visible = "[GUITrackItem.HasNextPrestigeCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_visible = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}

														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}


													hbox = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextPietyCost]"
														visible = "[GUITrackItem.HasNextPietyCost]"

														text_single = {
															text = "[ValueBreakdown.GetValue]"
															tooltip_visible = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = {}
															}
														}

														text_single = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
															raw_text = "@warning_icon!"
														}

														expand = {}
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextConstructionTime]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_visible = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}
													}
												}
											}

											button_primary = {
												onclick = "[GUITrackItem.OnClick]"
												onclick = "[HoldingView.CloseSubwindows]"

												tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
												enabled = "[GUITrackItem.CanConstructNextBuilding]"
												visible = "[GUITrackItem.HasNextBuilding]"
												text = "[SelectLocalization(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel, '(int32)1'),'CONSTRUCT','UPGRADE')]"
											}

										}
									}
								}
							}
						}

						expand = {}
					}

					expand = {}
				}
			}
		}

		expand = {}
	}
}

######################################################
############ HOLDING TYPE SELECTION VIEW #############
######################################################

window = {
	name = "holding_type_selection_view"
	movable = no
	layer = windows_layer
	parentanchor = bottom|hcenter
	position = { 40 -50 }
	using = Animation_ShowHide_Quick

	using = Window_Background_Subwindow

	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 4 4 }
		margin_bottom = 15
		spacing = 15

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "CREATE_NEW_HOLDING_HEADING"
			}

			blockoverride "button_close"
			{
				onclick = "[HoldingView.CloseHoldingConstruction]"
			}
		}

		building_in_vassal_warning_hbox = {}

		hbox = {
			name = "holding_types"
			datamodel = "[HoldingView.GetHoldingTypeItems]"
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin = { 10 10 }

			item = {
				vbox = {
					spacing = 5

					button_standard = {
						size = { 250 148 }
						enabled = "[HoldingTypeItem.CanConstructBuilding]"
						onclick = "[HoldingTypeItem.OnClick]"
						tooltip = "[HoldingTypeItem.GetTooltip]"
						datacontext = "[HoldingTypeItem.GetProvince]"

						widget = {
							scissor = yes
							size = { 247 146 }

							icon = {
								visible = "[HoldingTypeItem.CanConstructBuilding]"
								size = { 320 146 }
								texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
								using = Mask_Rough_Edges
								alpha = 0.7
							}

							highlight_icon = {
								visible = "[Not(HoldingTypeItem.CanConstructBuilding)]"
								size = { 320 146 }
								texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
								effectname = "GreyedOut"
								tintcolor = { 0.6 0.6 0.6 1 }
								using = Mask_Rough_Edges
							}
						}

						flowcontainer = {
							parentanchor = bottom|right
							ignoreinvisible = yes
							margin = { 5 5 }

							warning_icon = {
								name = "wrong_type"
								visible = "[Not(HoldingTypeItem.IsValidForPlayer)]"
								size = { 35 35 }
								tooltip = HOLDING_SELECTION_VIEW_WRONG_HOLDING_TYPE
							}
						}
					}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "[HoldingTypeItem.GetHoldingType.GetName]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CountyViewTypes
{
	type widget_building_item = widget {
		size = { 55 55 }
		block "enabled_block" {
			enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
		}
		tooltip = "[GUIBuildingItem.GetTooltip]"
		using = tooltip_ne

		button_standard = {
			name = "building_button"
			size = { 100% 100% }
			onclick = "[GUIBuildingItem.OnClick]"
			down = "[GUIBuildingItem.IsHighlighted]"

			button_icon = {
				name = "build_new_icon"
				visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
				parentanchor = center
				size = { 28 28 }
				alpha = 0.7
				texture = "gfx/interface/icons/flat_icons/plus.dds"
				alwaystransparent = yes
			}

			icon_building = {
				name = "building_icon"
				visible = "[Not( GUIBuildingItem.CanUpgrade )]"
				parentanchor = center
				size = { 45 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			highlight_icon_building = {
				name = "building_icon_can_upgrade"
				visible = "[GUIBuildingItem.CanUpgrade]"
				parentanchor = center
				size = { 45 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			text_single= {
				visible = "[And( GUIBuildingItem.HasLevel, Not( GUIBuildingItem.IsConstructing ) ) ]"
				text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
				parentanchor = bottom|right
				position = { -6 -2 }
				fontsize = 15
				default_format = "#low;bold"
				align = nobaseline

				background = {
					using = Background_Area_ExtraDark
					margin = { 5 0 }
				}
			}

			warning_icon = {
				name = "reduced_by_fixable_situation"
				visible = "[GUIBuildingItem.IsBuildingDisabled]"
				position = { 3 3 }
				size = { 20 20 }

			}
		}

		icon = {
			name = "building_slot"
			size = { 100% 100% }
			using = Background_Area
			visible = "[GUIBuildingItem.IsBuildingSlotShown]"
		}

		flowcontainer = {
			visible = "[And( GUIBuildingItem.HasLevel, GUIBuildingItem.IsConstructing ) ]"
			parentanchor = bottom|hcenter
			position = { 0 -3 }
			direction = vertical
			ignoreinvisible = yes

			widget = {
				size = { 15 15 }
				parentanchor = right

				text_single= {
					visible = "[GUIBuildingItem.HasLevel]"
					parentanchor = center
					position = { -1 0 }

					text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
					fontsize = 15
					default_format = "#low;bold"
					align = nobaseline

					background = {
						using = Background_Area_ExtraDark
						margin = { 5 0 }
					}
				}
			}

			progressbar_standard = {
				name = "construct_progressbar"
				visible = "[GUIBuildingItem.IsConstructing]"
				parentanchor = hcenter
				alwaystransparent = yes
				size = { 51 10 }
				value = "[GUIBuildingItem.GetConstructingProgress]"
				direction = horizontal
			}
		}
	}

	type building_in_vassal_warning_hbox = hbox
	{
		name = "vassal_warning"
		visible = "[Not( ObjectsEqual( HoldingView.GetHolder, GetPlayer ) )]"

		coa_title_tiny = {
			datacontext = "[HoldingView.GetHolder.GetPrimaryTitle]"
		}

		text_multi = {
			autoresize = yes
			text = "HOLDING_VIEW_BUILDING_IN_VASSAL"
		}
	}

	# Requires County and CountyDataBreakdowns data context
	type county_control_tooltip_container = container
	{
		using = GeneralTooltipSetup
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text"
			{
				margin = { 0 8 }
				text = "COUNTY_CONTROL_TOOLTIP_HEADER"
				default_format = "#T"
			}

			blockoverride "concept_link"
			{
				visible = no
			}

			blockoverride "main_description"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					cooltip_paragraph = {
						text = "[County.GetCountyControlEffectsDesc]"
					}

					spacer = {
						size = { 0 15 }
					}

					cooltip_paragraph = {
						datacontext = "[CountyDataBreakdowns.AccessControl( County.Self )]"

						text = "VALUE_BREAKDOWN_TEXT_LINK"

						tooltip_visible = "[ValueBreakdown.HasTooltip]"

						tooltipwidget = {
							widget_value_breakdown_tooltip = {}
						}
					}
				}
			}
		}
	}

	# Requires County and CountyDataBreakdowns data context
	type county_development_tooltip_container = container
	{
		using = GeneralTooltipSetup
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text"
			{
				margin = { 0 8 }
				text = "COUNTY_DEVELOPMENT_TOOLTIP_HEADER"
				default_format = "#T"
			}

			blockoverride "concept_link"
			{
				visible = no
			}

			blockoverride "main_description"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					datacontext = "[County.GetCount]"
					datacontext = "[Character.GetGovernment]"

					cooltip_paragraph = {
						visible = "[Not( GovernmentType.IsAffectedByDevelopment )]"
						text = "COUNTY_DEVELOPMENT_IGNORED_DESC"
					}

					cooltip_paragraph = {
						text = "[County.GetCountyDevelopmentEffectsDesc]"
					}

					spacer = {
						size = { 0 15 }
					}

					cooltip_paragraph = {
						text = "[County.GetDevelopmentProgressOutOfMax]"
					}

					cooltip_paragraph = {
						datacontext = "[CountyDataBreakdowns.AccessDevelopmentChange( County.Self )]"

						text = "VALUE_BREAKDOWN_TEXT_LINK"

						tooltip_visible = "[ValueBreakdown.HasTooltip]"

						tooltipwidget = {
							widget_value_breakdown_tooltip = {}
						}
					}
				}
			}
		}
	}

	# Requires County and CountyDataBreakdowns data context
	type county_fertility_tooltip_container = container
	{
		using = GeneralTooltipSetup
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text"
			{
				margin = { 0 8 }
				text = "COUNTY_FERTILITY_TOOLTIP_HEADER"
				default_format = "#T"
			}

			blockoverride "concept_link"
			{
				visible = no
			}

			blockoverride "main_description"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					cooltip_paragraph = {
						text = "PROJECTED_COUNTY_FERTILITY_EQUILIBRIUM"
					}

					cooltip_paragraph = {
						datacontext = "[CountyDataBreakdowns.AccessFertilityChange( County.Self )]"
						datacontext = "[HoldingView.AccessCountyBreakdowns]"

						text = "VALUE_BREAKDOWN_TEXT_LINK"

						tooltip_visible = "[ValueBreakdown.HasTooltip]"
						using = tooltip_se
						
						tooltipwidget = {
							widget_value_breakdown_tooltip = {}
						}
					}
				}
			}
		}
	}
}

types LotRCompatibilityTypes {
    type lotr_warning_county = widget { visible = no }
}