######################################################
##################### SITUATION ######################
######################################################
window = {
	name = "lotr_window_admin_factions_situation"
	widgetid = "lotr_window_admin_factions_situation"
	datacontext = "[SituationWindow.GetSituation]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	layer = windows_layer
	movable = no
	allow_outside = yes

	# Tabs setup
	oncreate = "[BindTabsContext]"
	oncreate = "[PdxGuiTabs.SetResetOnShown( '(bool)yes' )]"
	oncreate = "[PdxGuiTabs.AddTab( 'current_ideological_party' )]"
	oncreate = "[PdxGuiTabs.AddTab( 'all_ideological_parties' )]"

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		on_start = "[GetVariableSystem.Set( 'view_political_group', 'militarists' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 13

		widget = {
			size = { 100% 100% }

			widget = {
				size = { 100% 100% }
				visible = "[PdxGuiTabs.IsTabSet( 'current_ideological_party' )]"
				vbox = {
					using = Window_Margins
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 6

						header_pattern = {
							layoutpolicy_horizontal = expanding

							blockoverride "header_text"
							{
								text = "[Situation.GetNameNoTooltip]"
							}

							blockoverride "button_close"
							{
								onclick = "[SituationWindow.Close]"
							}
						}
					}

					vbox = {
						name = "current_sub_region"
						margin_top = 2
						layoutpolicy_horizontal = expanding

						datacontext = "[SituationWindow.GetSelectedSubRegion]"
						datacontext = "[SituationSubRegion.GetCurrentPhase]"

						visible = "[SituationSubRegion.IsValid]"
						
						hbox_tab_buttons = { #Tab buttons
							name = "tab_buttons"
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "button_tab"
							{
								texture = "gfx/interface/buttons/button_tab_light_bg.dds"
							}

							blockoverride "tab_name"
							{
								text = "[PdxGuiTabItem.LocalizeTab( 'admin_factions_tab' )]"
								default_format = "#high"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							margin = { 15 15 }

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 10
								spacing = 40

								text_label_center = {
									min_width = 240
									layoutpolicy_horizontal = expanding
									text = "SITUATION_WINDOW_CURRENT_HEADER"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								text_single = {
									fontsize = 18
									layoutpolicy_horizontal = expanding

									text = "LOTR_SITUATION_WINDOW_CURRENT_PHASE"
									align = nobaseline
								}

								fixedgridbox = {
									name = "leading_named_effect_sets"

									addcolumn = 48
									addrow = 48
									setitemsizefromcell = yes
									datamodel_wrap = 6
									maxhorizontalslots = 6
									maxverticalslots = 1
									flipdirection = yes
									layoutanchor = topleft

									datamodel = "[SituationSubRegion.GetCurrentPhase.GetType.GetModifierNamedSets]"
									item = {
										button_phase_named_set_item = {
											size = { 80 80 }
											enabled = yes
										}
									}
								}
							}
						}
					}


					hbox = {
						layoutpolicy_horizontal = expanding
						margin_bottom = 10
						spacing = 40

						text_label_center = {
							min_width = 240
							layoutpolicy_horizontal = expanding
							text = "SITUATION_WINDOW_PHASE_EFFECTS"
						}
					}
 
					expand = {
						visible = "[IsDataModelEmpty( SituationWindow.GetCatalystsForSelectedPhase ) )]"
					}
				}
			}
			
			widget = {
				size = { 100% 100% }
				visible = "[PdxGuiTabs.IsTabSet( 'all_ideological_parties' )]"
				vbox = {
					using = Window_Margins
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 6

						header_pattern = {
							layoutpolicy_horizontal = expanding

							blockoverride "header_text"
							{
								text = "[Situation.GetNameNoTooltip]"
							}

							blockoverride "button_close"
							{
								onclick = "[SituationWindow.Close]"
							}
						}
					}
					
					vbox = {
						margin_top = 2
						layoutpolicy_horizontal = expanding
						margin_left = 3
						margin_right = 7
						
						hbox_tab_buttons = {
							name = "tab_buttons"
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "button_tab"
							{
								texture = "gfx/interface/buttons/button_tab_light_bg.dds"
							}

							blockoverride "tab_name"
							{
								text = "[PdxGuiTabItem.LocalizeTab( 'admin_factions_tab' )]"
								default_format = "#high"
							}
						}
						
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							min_height = 75

							margin = { 15 15 }

							datacontext = "[Situation.GetParticipantGroupByCharacter( GetPlayer )]"

							background = {
								using = Background_Area
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								icon = {
									visible = "[SituationParticipantGroup.IsValid]"

									size = { 40 40 }
									texture = "[SituationParticipantGroup.GetType.GetIcon]"

									background = {
										texture = "gfx/interface/buttons/button_lifestyles_base.dds"
										margin = { 5 5 }
									}
								}

								vbox = {
									visible = "[SituationParticipantGroup.IsValid]"

									margin_left = 10
									text_single = {
										layoutpolicy_horizontal = expanding
										text = "[SituationParticipantGroup.GetName]"
										align = nobaseline
									}

									text_single = {
										layoutpolicy_horizontal = expanding

										text = "[SelectLocalization( Situation.HasMultipleSubRegions, 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP_MULTI_SUBREGION', 'SITUATION_WINDOW_YOUR_PARTICIPANT_GROUP' ) ]"

										align = nobaseline
										default_format = "#Weak"
									}
								}

								expand = {}

								button_standard_small = {
									onclick = "[SituationWindow.AccessParticipantCharacterList.Toggle]"
									text = "SITUATION_WINDOW_VIEW_PARTICIPANT_GROUPS"
								}
							}
						}

						scrollarea = {
							name = "lotr_faction_leaders"
							size = { 560 225 }
							allow_outside = yes
							scrollbarpolicy_vertical = always_off
							scrollbarpolicy_horizontal = as_needed
							scrollbar_horizontal = {
								using = Scrollbar_Horizontal
							}
							background = {
								using = Background_Area
							}
							
							scrollwidget = { #Top 4 characters of a faction
								hbox = {
									using = Scrollbox_Margins
									allow_outside = yes
									datamodel = "[SituationWindow.GetSituation.GetParticipantGroups]"

									item = {
										hbox = {
											# parentanchor = center
											datamodel = "[SituationParticipantGroup.GetSituation.MakeScope.GetList(Concatenate(SituationParticipantGroup.GetType.GetKey,'_top_four'))]"
											visible = "[EqualTo_string(GetVariableSystem.Get('view_political_group'), SituationParticipantGroup.GetType.GetKey)]"
											ignoreinvisible = yes
											
											spacing = 3
											item = {
												widget = {
													datacontext = "[Scope.GetCharacter]"
													size = { 125 130 }

													widget = {
														size = { 125 130 }
														visible = "[ObjectsEqual(SituationParticipantGroup.GetSituation.MakeScope.Var(Concatenate(SituationParticipantGroup.GetType.GetKey,'_faction_leader')).Char, Scope.Char)]"
														background = {
															using = Background_Portrait_Glow
															color = { 0.9 0.8 0.6 0.6 }
														}
													}
													widget = {
														size = { 125 130 }
														visible = "[Not(ObjectsEqual(SituationParticipantGroup.GetSituation.MakeScope.Var(Concatenate(SituationParticipantGroup.GetType.GetKey,'_faction_leader')).Char, Scope.Char))]"
														background = {
															using = Background_Portrait_Glow
															color = { 0.9 0.8 0.6 0.6 }
															alpha = 0.2
														}
													}
													
													portrait_button = {
														parentanchor = bottom|hcenter
														size = { 125 160 }
														using = portrait_base

														block "portrait_texture"
														{
															portrait_texture = "[Character.GetPortrait('environment_torso', 'camera_torso', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
														}

														block "portrait_mask"
														{
															mask = "gfx/portraits/portrait_mask_torso.dds"
														}

														effectname = "NoHighlight"

														block "portrait_button" {}
													}
													text_label_center = {
														visible = "[ObjectsEqual(SituationParticipantGroup.GetSituation.MakeScope.Var(Concatenate(SituationParticipantGroup.GetType.GetKey,'_faction_leader')).Char, Scope.Char)]"
														text = "admin_factions_political_leader"
														position = { 15 -30 }
														parentanchor = top
														align = center
													}
													coa_realm_small = {
														parentanchor = bottom|left
														position = { -2 1 }
														scale = 0.8
													}
													portrait_opinion = {
														parentanchor = bottom|hcenter
														position = { 20 -2 }
													}
													text_label_center = {
														text = "admin_factions_individual_power"
														position = { 25 30 }
														parentanchor = bottom
														align = center
														tooltipwidget = { #Testing
															object_tooltip_pop_out = {
																blockoverride "title_text" { text = "achievement_55" }
																blockoverride "concept_link" { visible = no }
																blockoverride "main_description" { cooltip_paragraph = { text = "lesson_achievement_55_main_menu_desc_tt" } }
															}
														}
													}
													# tooltipwidget = {
													# 	admin_factions_power_value_breakdown_widget = {}
													# }
												}
											}
										}
									}
								}
							}
						}

						hbox = { #Tabs with faction icons
							spacing = 10

							button_tab = { #Militarists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_militarists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'militarists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'militarists' )]"
							}

							button_tab = { #Absolutists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_absolutists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'absolutists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'absolutists' )]"
							}

							button_tab = { #Uniformists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_uniformists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'uniformists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'uniformists' )]"
							}

							button_tab = { #Pacifists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_pacifists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'pacifists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'pacifists' )]"
							}

							button_tab = { #Provincialists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_provincialists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'provincialists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'provincialists' )]"
							}

							button_tab = { #Pluralists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_pluralists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'pluralists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'pluralists' )]"
							}

							button_tab = { #Dissolutionists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_centrists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'centrists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'centrists' )]"
							}

							button_tab = { #Centrists
								size = { 60 60 }
								icon = {
									texture = "gfx/interface/icons/situations/lotr_admin_factions_situation/group_dissolutionists.dds"
									size = { 50 50 }
									parentanchor = center
								}
								onclick = "[GetVariableSystem.Set( 'view_political_group', 'dissolutionists' )]"
								down = "[GetVariableSystem.HasValue( 'view_political_group', 'dissolutionists' )]"
							}
						}
					
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							datamodel = "[SituationWindow.GetSituation.GetParticipantGroups]"

							item = {
								vbox = {
									visible = "[EqualTo_string(GetVariableSystem.Get('view_political_group'), SituationParticipantGroup.GetType.GetKey)]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									spacing = 10

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_left = 5
										margin_right = 5

										text_single = {
											text = "[SituationParticipantGroup.GetName]"
										}

										expand = {}

										vbox = {
											text_single = {
												text = "admin_factions_total_political_power"
											}
											text_single = {
												raw_text = "admin_factions_total_member_count"
											}
										}
									}

									text_label_center = {
										layoutpolicy_horizontal = expanding
										text = "admin_factions_faction_effects"
										align = center
										min_width = 540
									}
									scrollbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										size = { 550 300 }
										blockoverride "scrollbox_content" {
											widget = {

											}
										}
									}

									vbox = {
										hbox = {
											layoutpolicy_horizontal = expanding
											margin_bottom = 10
											spacing = 40

											text_label_center = {
												min_width = 240
												layoutpolicy_horizontal = expanding
												text = "admin_faction_decisions"
											}
										}
										button_standard = {
											size = { 550 50 }
											text_single = {
												raw_text = "#debug This is example text 1.0#!"
												parentanchor = center
											}
										}
										spacer = { size = { 1 10 } }
										button_standard = {
											size = { 550 50 }
											text_single = {
												raw_text = "#debug This is example text 2.0#!"
												parentanchor = center
											}
										}
									}
								}
							}
						}
					}

					expand = {}
				}
			}
		}
	}

	window_situation_participant_groups = {
		datacontext = "[SituationWindow.AccessParticipantCharacterList]"
		datacontext = "[SituationWindowParticipantCharacterList.AccessCharacterList]"

		visible = "[SituationWindowParticipantCharacterList.IsVisible]"
	}
}

types Situation
{
	type button_situation_subregion = button_standard {
		minimumsize = { 527 50 }

		layoutpolicy_horizontal = expanding

		onclick = "[SituationWindow.SetSelectedSubRegion( SituationSubRegion.Self )]"
		down = "[ObjectsEqual( SituationWindow.GetSelectedSubRegion.Self, SituationSubRegion.Self )]"

		hbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			margin = { 4 0 }
			margin_right = 16
			spacing = 5

			icon = {
				size = { 40 40 }
				texture = "[SituationSubRegion.GetIcon]"
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				spacing = -3
				minimumsize = { 150 -1 }

				expand = {}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "[SituationSubRegion.GetNameNoTooltip]"
					default_format = "#clickable"
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "SITUATION_WINDOW_SUB_GROUP_SUBTITLE"
					align = nobaseline
				}

				expand = {}
			}



			widget = {
				size = { 40 40 }

				widget_level_marker = {
					blockoverride "visible_inactive" {
						visible = no
					}

					icon = {
						size = { 40 40 }
						texture = "[SituationSubRegion.GetCurrentPhase.GetType.GetIcon]"
						parentanchor = center
					}
				}
			}

			text_single = {
				size = { 30 20 }
				text = "[SituationSubRegion.GetCurrentPhase.GetRelativeProgress|0%]"
				autoresize = no
				align = center|nobaseline
			}

			widget = {
				size = { 40 40 }

				widget_level_marker = {
					blockoverride "highlight_addon" {
						visible = no
					}

					icon = {
						size = { 40 40 }
						texture = "[SituationSubRegion.GetCurrentPhase.GetLeadingPhaseType.GetIcon]"
						parentanchor = center
					}
				}
			}
		}
	}

	type button_phase_named_set_item = button_round {
		datacontext = "[GetPlayer]"

		icon = {
			size = { 100% 100% }

			texture = "gfx/interface/buttons/button_lifestyles_base.dds"
		}

		icon = {
			size = { 80% 80% }
			position = { 0 0 }
			parentanchor = center
			alwaystransparent = yes
			texture = "[SituationModifierNamedSet.GetIcon]"
		}

		tooltipwidget = {
			using = situation_modifier_named_set_tooltip
		}
	}

	type admin_factions_power_value_breakdown_widget = container
	{
		using = GeneralTooltipSetup
		alwaystransparent = no

		object_tooltip_pop_out = {
			blockoverride "title_text"
			{
				margin = { 0 3 }
				text = "SORCERY_TITLE"
				default_format = "#T"
			}

			blockoverride "concept_link"
			{
				visible = no
			}

			blockoverride "main_description"
			{
				vbox = {
					layoutpolicy_horizontal = expanding

					cooltip_paragraph = {
						text = "admin_factions_individual_power_breakdown"
					}

					spacer = {
						size = { 0 10 }
					}
				}
			}
		}
	}

	type window_situation_participant_groups = window  {
		name = "window_situation_participant_groups"
		widgetanchor = right
		position = { 30 100 }
		size = { 740 82% }

		layer = middle
		movable = yes

		using = Window_Background
		using = Window_Decoration_Spike
		using = Window_Size_CharacterList

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "SITUATION_PARTICIPANT_WINDOW_HEADER"
				}

				blockoverride "button_close"
				{
					onclick = "[SituationWindowParticipantCharacterList.Close]"
				}
			}

			vbox = {
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = expanding
				margin = { 10 0 }

				spacing = 10

				datamodel = "[SituationWindow.GetSelectedSubRegion.GetParticipantGroups]"

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						icon = {
							visible = "[SituationParticipantGroup.IsValid]"

							size = { 40 40 }
							texture = "[SituationParticipantGroup.GetType.GetIcon]"

							background = {
								texture = "gfx/interface/buttons/button_lifestyles_base.dds"
								margin = { 5 5 }
							}
						}

						vbox = {
							margin_left = 10

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[SituationParticipantGroup.GetName]"
								align = nobaseline
							}

							hbox = {
								spacing = 10
								text_single = {
									layoutpolicy_horizontal = expanding
									text = "SITUATION_PARTICIPANT_GROUP_SUBTITLE"
									align = nobaseline
									default_format = "#Weak"
								}

								text_single = { #Faction Power
									layoutpolicy_horizontal = expanding
									raw_text = "#V Faction Power:#! [SituationParticipantGroup.GetSituation.MakeScope.Var(Concatenate(SituationParticipantGroup.GetType.GetKey,'_faction_power')).GetValue]"
									visible = "[InDebugMode]"
									align = nobaseline
									default_format = "#Weak"
								}

								text_single = { #Faction Leader
									layoutpolicy_horizontal = expanding
									raw_text = "#V Faction Leader:#! [SituationParticipantGroup.GetSituation.MakeScope.Var(Concatenate(SituationParticipantGroup.GetType.GetKey,'_faction_leader')).Char.GetTitledFirstNameRegnal]"
									visible = "[InDebugMode]"
									align = nobaseline
									default_format = "#Weak"
								}
							}
						}

						expand = {}

						button_standard_small = {
							onclick = "[SituationWindowParticipantCharacterList.ToggleSelectedParticipantGroup( SituationParticipantGroup.Self )]"
							down = "[ObjectsEqual( SituationWindowParticipantCharacterList.GetSelectedParticipantGroup.Self, SituationParticipantGroup.Self )]"
							text = "SITUATION_PARTICIPANT_GROUP_FILTER"
						}
					}
				}
			}

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "sort_buttons"
				{
					blockoverride "filters_visible" {
						visible = no
					}

					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding

						blockoverride "skill_sort_buttons" {}
					}
				}

				blockoverride "skill_sort_buttons" {}

				blockoverride "scrollbox_empty_visibility"
				{
					layoutpolicy_vertical = expanding
					visible = "[Not( CharacterSelectionList.HasItems )]"
					text = "SITUATION_PARTICIPANT_WINDOW_PARTICIPANT_EMPTY"
				}

				blockoverride "container_implementation"
				{
					fixedgridbox = {
						addcolumn = 630
						addrow = 92

						name = "characters_grid"
						datamodel_reuse_widgets = yes
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item_finder = {
								size = { 630 94 }
							}
						}
					}
				}
			}
		}
	}
}
