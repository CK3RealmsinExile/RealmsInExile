window = {
	name = "inventory_view"
	widgetid = "inventory_view"
	visible = "[And( InventoryView.IsVisible, Not(IsGameViewOpen('barbershop')) )]"
	size = { 1280 840 } #LotR
	layer = middle

	position = { 620 100 }

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration_Spike

	datacontext = "[GetVariableSystem]"
	datacontext = "[InventoryView.GetCharacter]"
	datacontext = "[InventoryView.GetCharacter.GetInventory]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear( 'court_artifacts' )]"
		on_start = "[GetVariableSystem.Clear( 'claims' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		on_finish = "[AccessLocalPlayerCachedData.AccessNewArtifacts.ClearNewArtifactsOfCategory( 'inventory' )]"
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "INVENTORY_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[InventoryView.Close]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			###LEFT SIDE
			widget = {
				name = "left side"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 510 0 }

				background = {
					texture = "gfx/interface/icons/inventory/character_paperdoll.dds"
					fittype = centercrop
					alpha = 0.6
					margin_bottom = -100
					margin_left = -10
					margin_right = -10
					margin_top = 20
				}

				widget = {
					name = "equipped_inventory_artifacts_top_bar"
					layoutpolicy_horizontal = expanding
					position = { 150 0 }
					allow_outside = yes

					text_label_center = {
						datacontext = "[InventoryView.GetCharacter]"
						layoutpolicy_horizontal = expanding
						align = center|nobaseline
						text = "INVENTORY_EQUIPPED_ARTIFACTS_HEADER"
						margin = { 0 2 }
					}
				}

				widget = {
					name = "antiquarian"
					position = { 20 0 }
					allow_outside = yes
					visible = "[Not( IsLandlessAdventurer( InventoryView.GetCharacter ) )]"

					vbox = {
						parentanchor = top
						alwaystransparent = yes

						portrait_head_small = {
							name = "antiquarian_portrait"
							datacontext = "[InventoryView.GetCharacter.GetCharacterEmployedAs( 'antiquarian_court_position' )]"

							blockoverride "portrait_button"
							{
								onclick = "[ShowAppointCourtPositionIfNoEmployee( InventoryView.GetCharacter.GetID, 'antiquarian_court_position' )]"
								enabled = "[InventoryView.GetCharacter.IsLocalPlayer]"

								icon_flat_standard_gold = {
									visible = "[And( InventoryView.GetCharacter.IsLocalPlayer, Not( InventoryView.GetCharacter.GetCharacterEmployedAs( 'antiquarian_court_position' ).IsValid ) )]"
									parentanchor = center
									size = { 30 30 }

									texture = "gfx/interface/icons/flat_icons/plus.dds"
								}	
							}

							blockoverride "portrait_button_no_character_text"
							{
								text = "[SelectLocalization( InventoryView.GetCharacter.IsLocalPlayer,'PORTRAIT_NO_ANTIQUARIAN','CHARACTER_TOOLTIP_NO_PORTRAIT')]"
							}
						}

						text_single = {
							text = "ANTIQUARIAN"
						}
					}
				}

				widget_inventory_slot = {
					name = "head_slot"
					datacontext = "[Inventory.GetSlot('crown')]"
					parentanchor = top|hcenter
					position = { 0 40 }
				}

				widget_inventory_slot = {
					name = "regalia_slot"
					datacontext = "[Inventory.GetSlot('regalia')]"
					parentanchor = vcenter|right
					position = { 0 -50 }
				}

				widget_inventory_slot = {
					name = "weapon_slot"
					datacontext = "[Inventory.GetSlot('weapon')]"
					parentanchor = vcenter|left
					position = { 0 -50 }
				}

				widget_inventory_slot = {
					name = "armor_slot"
					datacontext = "[Inventory.GetSlot('armor')]"
					parentanchor = center
					position = { 0 -50 }
				}

				widget = {
					name = "trinket_widget_hight"
					parentanchor = bottom|hcenter
					position = { 0 -120 }
					allow_outside = yes

					widget_inventory_slot = {
						name = "trinket_1_slot"
						datacontext = "[Inventory.GetSlot('trinket_1')]"
						parentanchor = bottom|hcenter
						position = { -185 0 }
					}

					widget_inventory_slot = {
						name = "trinket_2_slot"
						datacontext = "[Inventory.GetSlot('trinket_2')]"
						parentanchor = bottom|hcenter
						position = { -62 0 }
					}

					widget_inventory_slot = {
						name = "trinket_3_slot"
						datacontext = "[Inventory.GetSlot('trinket_3')]"
						parentanchor = bottom|hcenter
						position = { 62 0 }
					}

					widget_inventory_slot = {
						name = "trinket_4_slot"
						datacontext = "[Inventory.GetSlot('trinket_4')]"
						parentanchor = bottom|hcenter
						position = { 185 0 }
					}
				}

				widget = {
					parentanchor = bottom|hcenter
					position = { 0 -12 }
					size = { 510 100 }
					allow_outside = yes

					vbox = {
						hbox = {
							spacing = 10

							button_standard = {
								datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
								visible = "[Not( Character.HasRoyalCourt )]"
								text = "INVENTORY_TAB_COURT_ARTIFACTS"

								tooltip = "[SelectLocalization( Inventory.HasAnyCourtArtifact, 'INVENTORY_TAB_COURT_ARTIFACTS_TOOLTIP', 'NO_COURT_ARTIFACTS' )]"

								onclick = "[VariableSystem.Toggle( 'court_artifacts' )]"
								onclick = "[VariableSystem.Clear( 'claims' )]"
								onclick = "[InventoryView.ClearSelectedSlot]"
								onclick = "[LocalPlayerNewArtifacts.ClearNewArtifactsOfCategory( 'court' )]"

								down = "[VariableSystem.Exists( 'court_artifacts' )]"

								button_round = {
									size = { 20 20 }
									parentanchor = top|right
									visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
									text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )]"
								}
							}

							button_standard = {
								datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
								visible = "[Character.HasRoyalCourt]"
								text = "ROYAL_COURT"

								tooltip = "INVENTORY_COURT_ARTIFACTS_BUTTON_TOOLTIP"

								onclick = "[VariableSystem.Set( 'artifacts_tab', 'artifacts' )]"
								onclick = "[Character.OpenRoyalCourtView( 'artifacts' )]"

								onclick = "[InventoryView.Close]"
								onclick = "[LocalPlayerNewArtifacts.ClearNewArtifactsOfCategory( 'court' )]"

								button_round = {
									visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
									parentanchor = vcenter|right
									size = { 20 20 }
									position = { -5 0 }
									text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )]"
								}
							}

							button_standard = {
								datacontext = "[InventoryView.GetArtifactClaimsList]"
								text = "INVENTORY_TAB_CLAIMS_HIS_HER_MY"
								enabled = "[And( DataModelHasItems( ArtifactClaimsList.GetClaims ), Not( InventoryView.HasSelectedSlot ) )]"
								tooltip = "[SelectLocalization( DataModelHasItems( ArtifactClaimsList.GetClaims ), 'INVENTORY_TAB_CLAIMS_TOOLTIP', 'NO_ARTIFACT_CLAIMS' )]"
								onclick = "[VariableSystem.Toggle( 'claims' )]"
								onclick = "[VariableSystem.Clear( 'court_artifacts' )]"
								down = "[VariableSystem.Exists( 'claims' )]"
							}
						}

						button_standard = {
							name = "commission_decision"
							datacontext = "[GetDecisionWithKey('commission_artifact_decision')]"
							visible = "[And( Character.IsLocalPlayer, Decision.IsShownForPlayer )]"
							size = { 350 45 }

							onclick = "[InventoryView.Close]"
							onclick = "[OpenGameViewData( 'decision_detail', Decision.Self )]"

							widget = {
								parentanchor = center
								size = { 346 41 }
								scissor = yes

								icon = {
									name = "illustration"
									visible = "[Decision.IsPossibleForPlayer]"
									parentanchor = right|vcenter

									alpha = 0.7
									position = { 30 0 }
									size = { 250 100 }
									mirror = horizontal

									block "decision_texture_icon" {
										texture = "[Decision.GetPicture( GetPlayer.Self )]"
									}

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								highlight_icon = {
									visible = "[Not(Decision.IsPossibleForPlayer)]"
									parentanchor = right|vcenter

									alpha = 0.7
									size = { 250 100 }
									mirror = horizontal
									effectname = "GreyedOut"
									tintcolor = { 0.6 0.6 0.6 0.7 }

									block "decision_texture_highlight" {
										texture = "[Decision.GetPicture( GetPlayer.Self )]"
									}

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								icon = {
									parentanchor = center
									size = { 346 41 }

									texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
									spriteType = Corneredtiled
									spriteborder = { 5 5 }
								}
							}

							hbox = {
								margin = { 20 0 }
								margin_right = 10

								text_single = {
									name = "title"
									visible = "[Decision.IsPossibleForPlayer]"
									text = "[Decision.GetTitleForPlayer]"
									layoutpolicy_horizontal = growing

									align = nobaseline
									default_format = "#clickable"
								}

								text_single = {
									name = "title2"
									visible = "[Not(Decision.IsPossibleForPlayer)]"
									layoutpolicy_horizontal = growing
									text = "[Decision.GetTitleForPlayer]"

									align = nobaseline
									block "default_format" {
										default_format = "#low"
									}
								}

								highlight_icon = {
									name = "not_possible"
									visible = "[Not(Decision.IsPossibleForPlayer)]"
									size = { 30 30 }
									texture = "gfx/interface/icons/symbols/icon_cross.dds"

								}
							}
						}
					}
				}
			}

			divider = {
				layoutpolicy_vertical = expanding
			}

			# right side is other artifacts and claims
			vbox = {
				name = "right_side"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				minimumsize = { 590 -1 }
				maximumsize = { 590 -1 }

				vbox = {
					name = "equip_artifacts_top_bar"
					visible = "[And( Not( VariableSystem.Exists( 'claims' ) ), Not( VariableSystem.Exists( 'court_artifacts' ) ) )]"
					layoutpolicy_horizontal = expanding
					margin_top = 10

					text_label_center = {
						layoutpolicy_horizontal = expanding
						align = center
						text = "SELECT_ARTIFACT"
						max_width = 440
					}

					hbox = {
						name = "artifact_slot_tabs"
						visible = "[And( Not( VariableSystem.Exists( 'claims' ) ), Not( VariableSystem.Exists( 'court_artifacts' ) ) )]"
						datamodel = "[InventoryView.GetUniqueInventorySlotTypes]"
						layoutpolicy_horizontal = expanding
						margin_top = 10

						button_tab = { # Show all artifacts tab
							size = { 110 42 }

							onclick = "[InventoryView.ClearSelectedSlot]"
							down = "[Not( InventoryView.HasSelectedSlot )]"

							tooltip = ARTIFACT_SORTING_TAB_ALL_TOOLTIP
							using = tooltip_above

							hbox = {
								margin = { 10 0 }

								text_single = {
									layoutpolicy_horizontal = expanding
									align = center
									text = "ARTIFACT_SORTING_ALL_BUTTON"
								}

								text_single = {
									min_width = 30
									align = center
									text = "[Inventory.GetNumOfArtifactInCategory( 'inventory' )]"
								}
							}
						}

						item = {
							widget_inventory_slot_tab = {
								name = "artifact_slot_type"
								datacontext = "[Inventory.GetSlot('crown')]"
								visible = "[InventorySlotType.IsInventoryType]"
							}
						}
					}
				}

				vbox = {
					name = "court_artifacts_top_bar"
					visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'court_artifacts' ) )]"
					layoutpolicy_horizontal = expanding
					margin = { 20 0 }
					margin_top = 10
					margin_bottom = 5
					spacing = 5

					text_label_center = {
						layoutpolicy_horizontal = expanding
						align = center
						text = "[court_artifacts|E]"
						max_width = 440
					}

					text_multi = {
						datacontext = "[InventoryView.GetCharacter]"
						layoutpolicy_horizontal = expanding
						text = "CHARACTER_WITHOUT_ROYAL_COURT_COURT_ARTIFACT_TAB"
						autoresize = yes
						align = center 
						default_format = "#weak"
						max_width = 520
					}
				}

				hbox = {
					name = "claims_top_bar"
					visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'claims' ) )]"
					layoutpolicy_horizontal = expanding

					text_label_center = {
						layoutpolicy_horizontal = expanding
						align = center|nobaseline
						text = "[artifact_claims|E]"
						margin = { 0 2 }
						max_width = 440
					}
				}

				hbox = { # artifact sorting
					name = "artifact_sorting"
					visible = "[Not( VariableSystem.Exists( 'claims' ) )]"
					layoutpolicy_horizontal = expanding
					margin = { 10 5 }
					spacing = 5

					button_standard = {
						name = "sort_order"
						size = { 25 25 }
						tooltip = "ARTIFACT_SORT_ORDER_TOOLTIP"
						using = tooltip_ne
						onclick = "[InventoryView.ToggleArtifactSortOrder]"

						button_icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
							framesize = { 66 66 }
							frame = "[BoolTo2And1(InventoryView.IsArtifactSortOrderDescending)]"

							alwaystransparent = yes

							blockoverride "button_frames"
							{
								effectname = "NoHighlight"
							}
						}
					}

					dropdown_menu_standard = {
						name = "sort_artifacts"

						blockoverride "dropdown_properties"
						{
							datamodel = "[InventoryView.GetArtifactSortOptions]"
							onselectionchanged = "[InventoryView.SortArtifacts]"
							selectedindex = "[InventoryView.GetArtifactSortOptionsIndex]"
						}

						blockoverride "dropdown_active_item_properties"
						{
							text = "[Localize( CString.GetString )]"
						}

						blockoverride "dropdown_item_properties"
						{
							text = "[Localize( CString.GetString )]"
						}
					}

					expand = {}
				}

				hbox = { # claims sorting
					name = "claim_sorting"
					visible = "[VariableSystem.Exists( 'claims' )]"
					layoutpolicy_horizontal = expanding
					margin = { 10 5 }
					spacing = 5

					datacontext = "[InventoryView.GetArtifactClaimsList]"

					button_standard = {
						name = "sort_order"
						size = { 25 25 }
						tooltip = "ARTIFACT_CLAIM_SORT_ORDER_TOOLTIP"
						using = tooltip_ne
						onclick = "[ArtifactClaimsList.ToggleSortOrder]"

						button_icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
							framesize = { 66 66 }
							frame = "[BoolTo2And1( ArtifactClaimsList.IsSortOrderDescending )]"

							alwaystransparent = yes

							blockoverride "button_frames"
							{
								effectname = "NoHighlight"
							}
						}
					}

					dropdown_menu_standard = {
						name = "sort_claims"

						blockoverride "dropdown_properties"
						{
							datamodel = "[ArtifactClaimsList.GetSortOptions]"
							onselectionchanged = "[ArtifactClaimsList.SortClaims]"
							selectedindex = "[ArtifactClaimsList.GetSortOptionsIndex]"
						}

						blockoverride "dropdown_active_item_properties"
						{
							text = "[Localize( CString.GetString )]"
						}

						blockoverride "dropdown_item_properties"
						{
							text = "[Localize( CString.GetString )]"
						}
					}

					expand = {}
				}

				scrollbox = { # court artifacts
					name = "court_artifacts"
					visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'court_artifacts' ) )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							name = "artifacts_list"
							datamodel = "[InventoryView.GetSortedArtifacts]"
							layoutpolicy_horizontal = expanding
							spacing = 6

							item = {
								widget_artifact_entry = {
									visible = "[Artifact.IsCourtArtifact]"
									datacontext = "[InventoryView.GetCharacter.GetInventory]"
									datacontext = "[InventoryView.GetSelectedSlot]"

									blockoverride "background_button_overrides"
									{
										alwaystransparent = yes
										enabled = no
									}

									blockoverride "portrait" {
										expand = { minimumsize = { 0 0 } }
									}
								}
							}
						}
					}

					blockoverride "scrollbox_empty"
					{
						visible = "[IsDataModelEmpty( InventoryView.GetSortedArtifacts )]"
						text = "CHARACTER_HAS_NO_ARTIFACTS"
					}
				}

				scrollbox = { # artifact claims
					name = "artifact_claims"
					datacontext = "[InventoryView.GetArtifactClaimsList]"
					visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'claims' ) )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							name = "artifacts_list"
							datamodel = "[ArtifactClaimsList.GetClaims]"
							addcolumn = 570
							addrow = 122

							item = {
								artifact_claim = {
									datacontext = "[ArtifactClaim.GetArtifact]"
									datacontext = "[InventoryView.GetCharacter]"
								}
							}
						}
					}

					blockoverride "scrollbox_empty"
					{
						visible = "[IsDataModelEmpty( ArtifactClaimsList.GetClaims )]"
						text = "CHARACTER_HAS_NO_CLAIMED_ARTIFACTS"
					}
				}

				scrollbox = { # artifact list
					name = "artifacts"
					visible = "[And( Not( VariableSystem.Exists( 'court_artifacts' ) ), Not( VariableSystem.Exists( 'claims' ) ))]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							name = "equippable_artifacts_list"
							datamodel = "[InventoryView.GetSortedArtifacts]"
							layoutpolicy_horizontal = expanding
							spacing = 8

							item = {
								widget_artifact_entry = {
									datacontext = "[InventoryView.GetCharacter.GetInventory]"
									datacontext = "[InventoryView.GetSelectedSlot]"
									datacontext = "[InventoryView.GetSelectedSlot.GetType]"

									visible = "[And( Artifact.IsInventoryArtifact, Or(  Not( InventoryView.HasSelectedSlot ), InventorySlot.CanHoldArtifact( Artifact.Self ) ) )]"


									tooltipwidget = {
										artifact_tooltip = {
											blockoverride "extra_information"
											{
												hbox = {
													layoutpolicy_horizontal = expanding

													text_multi = {
														visible = "[InventoryView.GetCharacter.IsLocalPlayer]"
														text = "[InventoryView.GetArtifactOnClickTooltip( Artifact.Self )]"
														max_width = 500
														autoresize = yes
														using = Font_Size_Small
													}

													expand = {}
												}
											}
										}
									}

									using = tooltip_es

									blockoverride "background_button_overrides"
									{
										onclick = "[InventoryView.OnClickArtifact( Artifact.Self )]"
										enabled = "[InventoryView.GetCharacter.IsLocalPlayer]"
										down = "[Inventory.IsEquipped( Artifact.Self )]"
									}

									blockoverride "portrait" {
										expand = { minimumsize = { 0 0 } }
									}
								}
							}
						}
					}

					blockoverride "scrollbox_empty"
					{
						visible = "[Or( Not( Inventory.HasAnyInventoryArtifact ), And( InventoryView.HasSelectedSlot, Not( Inventory.HasArtifactsOfSlotType( InventoryView.GetSelectedSlot.GetType ) ) ) )]"
						text = "CHARACTER_HAS_NO_ARTIFACTS"
					}
				}
			}
		}
	}
}

types InventoryViewTypes
{
	type widget_inventory_slot = widget
	{
		size = { 150 140 }


		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

		icon = { # Glow Effect
			#	visible = "[And(RoyalCourtWindow.IsSelectedSlot( InventorySlot.Self ), InventorySlot.IsEmpty)]"
			visible = "[InventoryView.IsSelectedSlot( InventorySlot.Self )]"
			size = { 120% 120% }
			texture = "gfx/interface/colors/white.dds"
			using = Color_Bright_Yellow
			alpha = 0.7
			parentanchor=center

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.3
				alpha = 0.7
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.6
				alpha = 0
			}

			state = {
				name = "a"
				next = "b"
				trigger_on_create = yes
				alpha = 0.7

				modify_texture = {
					name = "glow_1"
					rotate_uv = 0
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 0
				}
			}

			state = {
				name = "b"
				next = "a"
				duration = 7

				modify_texture = {
					name = "glow_1"
					rotate_uv = 360
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 360
				}
			}

			modify_texture = {
				name = "glow_1"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "glow_2"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		widget = {
			using = Window_Background_NoDecoration
			size = {100% 100%}
		}

		text_single = {
			parentanchor = top|hcenter
			text = "[InventorySlot.GetName]"
			position = { 0 -6 }
		}

		button_artifact = {
			name = "equipped_artifact_button"
			datacontext = "[InventorySlot.GetArtifact]"
			visible = "[Not( InventorySlot.IsEmpty )]"
			parentanchor = center
			size = { 100 100 }

			using = tooltip_se

			down = "[InventoryView.IsSelectedSlot( InventorySlot.Self )]"

			blockoverride "on_click"
			{
				onclick = "[InventoryView.OnClickSlot( InventorySlot.Self )]"
				onclick = "[GetVariableSystem.Clear( 'court_artifacts' )]"
			}

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('unequip_button').TriggerAnimation('hover_enter')]"
			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('unequip_button').TriggerAnimation('hover_leave')]"
			}

			button_round = {
				name = "unequip_button"
				parentanchor = top|right
				size = { 30 30 }

				visible = "[And( Not(InventorySlot.IsEmpty), InventoryView.GetCharacter.IsLocalPlayer )]"
				alpha = 0

				state = {
					name = hover_enter
					alpha = 1
					duration = 0.4
					using = Animation_Curve_Default
				}

				state = {
					name = hover_leave
					alpha = 0
					duration = 0.6
					using = Animation_Curve_Default
				}

				onclick = "[InventoryView.Unequip( InventorySlot.GetArtifact )]"
				tooltip = "UNEQUIP_QUICK_TT"

				button_icon_highlight = {
					parentanchor = center
					size = { 30 30 }
					texture = "gfx/interface/icons/flat_icons/cancel_small.dds"
				}
			}
		}

		button_icon = {
			name = "empty_slot_button"
			datacontext = "[InventorySlot]"
			datacontext = "[InventoryView]"
			visible = "[And( InventorySlot.IsEmpty, InventoryView.GetCharacter.IsLocalPlayer )]"
			parentanchor = center
			size = { 60 60 }

			texture = "[InventorySlot.GetType.GetIcon]"
			spriteType = Corneredtiled
			spriteborder = { 2 2 }

			tooltip = "INVENTORY_SLOT_TT"
			onclick = "[InventoryView.ToggleSelectedSlot( InventorySlot.Self )]"
			onclick = "[GetVariableSystem.Clear( 'court_artifacts' )]"
			down = "[InventoryView.IsSelectedSlot( InventorySlot.Self )]"
		}

		button_round = {
			parentanchor = bottom|right
			position = { -20 -20 }
			size = { 20 20 }
			alwaystransparent = yes
			visible = "[And( InventoryView.GetCharacter.IsLocalPlayer, GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlot.GetSlotTypeString ), '(int32)0' ) )]"

			text_single = {
				parentanchor = center
				text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlot.GetSlotTypeString )]"
				align = nobaseline
			}
		}

		widget = {
			parentanchor = bottom|hcenter
			position = { 0 10 }
			datacontext = "[InventorySlot.GetArtifact]"

			hbox = {
				visible = "[And( Not(InventorySlot.IsEmpty), Artifact.IsDurabilityLow) ]"
				spacing = 2
				tooltip = "[Artifact.GetDurabilityTooltip]"
				margin = { 8 3 }
				set_parent_size_to_minimum = yes

				icon_flat_standard = {
					size = { 20 20 }
					texture = "gfx/interface/icons/flat_icons/quality.dds"
				}

				expand = {}

				hbox = {
					spacing = 2

					text_single = {
						max_width = 80
						text = "ARTIFACT_YEARS_UNTIL_DECAY"
						using = Font_Size_Small
						align = nobaseline
					}

					expand = {}

					icon = {
						size = { 20 20 }
						texture = "gfx/interface/icons/symbols/icon_warning.dds"
					}
				}

				background = {
					margin = { 20 2 }

					texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
					spriteType = Corneredtiled
					spriteborder = { 40 8 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}
			}
		}
	}

	type widget_inventory_slot_tab = button_tab
	{
		size = { 96 42 }
		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
		down = "[InventoryView.SelectedSlotHasType( InventorySlotType.Self )]"
		onclick = "[InventoryView.OnClickSlotTypeTab( InventorySlotType.Self )]"

		tooltip = ARTIFACT_SORTING_TAB_TOOLTIP
		using = tooltip_above

		button_icon = {
			parentanchor = center
			position = { 0 1 }
			size = { 30 30 }
			texture = "[InventorySlotType.GetIcon]"
			alwaystransparent = yes
		}

		button_round = {
			visible = "[And( InventoryView.GetCharacter.IsLocalPlayer, GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlotType.GetSlotTypeString ), '(int32)0' ) )]"
			parentanchor = bottom|right
			position = { -6 -4 }
			size = { 20 20 }
			alwaystransparent = yes

			text_single = {
				parentanchor = center
				text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlotType.GetSlotTypeString )]"
				align = nobaseline
			}
		}
	}

	type hbox_artifact_durability = hbox
	{
		visible = "[Artifact.IsValid]"
		spacing = 2
		tooltip = "[Artifact.GetDurabilityTooltip]"

		icon_flat_standard = {
			size = { 20 20 }
			texture = "gfx/interface/icons/flat_icons/quality.dds"
		}

		progressbar_standard = {
			name = "durability_high"
			visible = "[Not( Artifact.IsDurabilityLow )]"
			size = { 100 10 }

			min = 0
			max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
			value = "[FixedPointToFloat( Artifact.GetDurability )]"
		}

		progressbar_standard = {
			name = "durability_low"
			visible = "[Artifact.IsDurabilityLow]"
			size = { 100 10 }

			min = 0
			max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
			value = "[FixedPointToFloat( Artifact.GetDurability )]"
		}

		hbox = {
			spacing = 4

			text_single = {
				visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
				max_width = 80
				text = "ARTIFACT_YEARS_UNTIL_DECAY"
				using = Font_Size_Small
				align = nobaseline
			}

			icon = {
				visible = "[Artifact.IsDurabilityLow]"
				size = { 20 20 }
				texture = "gfx/interface/icons/symbols/icon_warning.dds"
			}
		}

		expand = {}
	}

	type widget_artifact_entry = widget
	{
		# Requires
		# datacontext = character
		# datacontext = Inventory
		# datacontext = InventorySlot

		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
		datacontext = "[GetIllustration( 'artifact_regional_pattern' )]"
		size = { 560 110 }
		using = tooltip_above

		button_standard = {
			size = { 92% 100% }

			framesize = { 252 80 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }

			icon =  {
				texture = "[Illustration.GetTexture( Artifact.GetCulture.MakeScope )]"
				spriteType = Corneredtiled
				size = { 100% 15% }
				color = "[Artifact.GetRarityColor]"
				alpha = 0.2
				alwaystransparent = yes
			}

			icon =  {
				texture = "[Illustration.GetTexture( Artifact.GetCulture.MakeScope )]"
				spriteType = Corneredtiled
				size = { 100% 15% }
				color = "[Artifact.GetRarityColor]"
				alpha = 0.2
				alwaystransparent = yes
				parentanchor = bottom
			}

			icon = {
				parentanchor = center
				size = { 511 106 }

				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
			}

			block "button"
			{
				enabled = "[Character.IsLocalPlayer]"
				clicksound = "event:/DLC/EP1/SFX/UI/inventory_artifact_place"
			}

			block "overlay"
			{
				using = default_character_list_overlay
			}

			block "background_button_overrides" {}

			tooltipwidget = {
				artifact_tooltip = {}
			}

			using = tooltip_es

			block "new_artifact"
			{
				icon = {
					name = "new_artifact_glow"
					visible = "[LocalPlayerNewArtifacts.IsNewArtifact( Artifact.Self )]"
					parentanchor = center
					position = { 0 1 }
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}
		}

		flowcontainer = {
			name = "equip_status"
			visible = "[Inventory.IsEquipped( Artifact.Self )]"
			parentanchor = top|right
			widgetanchor = top|right
			position = { -52 18 }

			allow_outside = yes

			text_single = {
				text = "EQUIPPED_ARTIFACT"
				align = right|nobaseline
				tooltip = "ARTIFACT_EQUIPPED_TOOLTIP"
				default_format = "#weak"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				name = "icon"
				layoutpolicy_vertical = expanding
				margin = { 2 2 }

				icon_artifact = {
					blockoverride "tooltipwidget" {}
				}

				block "new_artifact"
				{
					text_single = {
						visible = "[LocalPlayerNewArtifacts.IsNewArtifact( Artifact.Self )]"
						margin_top = -14
						text = "NEW_ARTIFACT"
						align = nobaseline

						tooltip = "NEW_ARTIFACT_TOOLTIP"
					}
				}
			}

			vbox = {
				name = "text"
				layoutpolicy_vertical = expanding
				margin_top = 4
				margin_bottom = 10

				expand = {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[Artifact.GetRarityAndSlotType]"
					max_width = 300
					using = Font_Size_Small
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					text = "[Artifact.GetNameNoTooltip]"
					margin_top = 7 #LotR
					autoresize = yes
					max_width = 350
					using = Font_Size_Medium
					default_format = "#high"
					alwaystransparent = yes
				}

				spacer = {
					size = { 0 6 }
				}

				hbox_artifact_durability = {
					layoutpolicy_horizontal = expanding
					# simple tooltip override so that the durability tooltip doesnt show up here
					tooltip = ""
				}

				expand = {}
			}

			expand = {}
		}

		widget = {
			name = "horizontal_hostile_minor_buttons"
			visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"

			parentanchor = center
			position = { 112 14 }
			allow_outside = yes

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 2

				button_round = {
					name = "steal"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/scheme.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
				}

				button_round = {
					name = "declare_war"
					size = { 35 35 }

					button_icon_highlight = {
						size = { 25 25 }
						parentanchor = center
						texture = "gfx/interface/icons/flat_icons/declare_war.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
					onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
				}

				button_round = {
					name = "duel"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/duel.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
				}

				expand = {}
			}
		}

		widget = {
			name = "round_buttons"
			size = { 40 105 }
			parentanchor = right|vcenter
			position = { 2 0 }
			allow_outside = yes

			datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

			vbox = {
				layoutpolicy_vertical = expanding

				button_round = {
					name = "reforge"
					size = { 35 35 }

					button_icon_highlight = {
						size = { 25 25 }
						parentanchor = center
						texture = "gfx/interface/icons/flat_icons/reforge.dds"
					}
					visible = "[Artifact.GetOwner.IsLocalPlayer]"

					onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
					onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
					enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
					tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"

					icon = {
						name = "selection_glow"
						visible = "[Artifact.IsDurabilityLow]"
						parentanchor = center
						size = { 45 45 }

						state = {
							trigger_on_create = yes

							name = max_glow
							next = min_glow
							duration = 1
							using = Animation_Curve_Default
							alpha = 0.5
						}

						state = {
							name = min_glow
							next = max_glow
							duration = 1.6
							using = Animation_Curve_Default
							alpha = 0.3
						}

						background = {
							texture = "gfx/interface/component_masks/mask_fade_circle.dds"
							tintcolor = { 1 0.8 0.6 1 }
						}
					}
				}

				button_round = {
					name = "destroy"

					size = { 35 35 }

					button_icon_highlight = {
						size = { 25 25 }
						parentanchor = center
						texture = "gfx/interface/icons/flat_icons/destroy_artifact.dds"
					}

					visible = "[Character.IsPlayerInteractionShown( 'destroy_artifact_interaction' )]"
					enabled = "[Character.IsPlayerInteractionWithTargetArtifactValid( 'destroy_artifact_interaction', Artifact.Self )]"
					onclick = "[Character.OpenPlayerInteractionWithTargetArtifact( 'destroy_artifact_interaction', Artifact.Self )]"
					tooltip = "[Character.GetPlayerInteractionWithTargetArtifactTooltip( 'destroy_artifact_interaction', Artifact.Self )]"
				}

				button_round = {
					name = "details"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						position = { 0 -6 }
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/dots.dds"
					}

					onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
					onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
					tooltip = "ARTIFACT_DETAILS"
				}
			}
		}
	}

	type artifact_claim = widget
	{
		# Requires
		# datacontext = Inventory
		# datacontext = InventorySlot

		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

		size = { 560 118 }
		using = tooltip_es

		widget = {
			name = "background"
			size = { 78% 100% }

			background = {
				using = Background_Area_Dark
			}

			tooltipwidget = {
				artifact_tooltip = {}
			}
		}

		widget = {
			name = "detail_button"
			parentanchor = center
			position = { 160 -16 }
			allow_outside = yes

			button_round = {
				name = "details"
				size = { 35 35 }

				onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
				onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
				tooltip = "ARTIFACT_DETAILS"

				button_icon_highlight = {
					parentanchor = center
					position = { 0 -6 }
					size = { 25 25 }
					texture = "gfx/interface/icons/flat_icons/dots.dds"
				}
			}
		}

		widget = {
			name = "horizontal_icons"
			parentanchor = center
			position = { 40 15 }
			allow_outside = yes

			hbox = {
				visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
				layoutpolicy_horizontal = expanding
				spacing = 2

				button_round = {
					name = "steal"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/scheme.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('start_stealing_back_artifact')]"

					using = tooltip_below
				}

				button_round = {
					name = "declare_war"
					size = { 35 35 }

					button_icon_highlight = {
						size = { 25 25 }
						parentanchor = center
						texture = "gfx/interface/icons/flat_icons/declare_war.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
					onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
					using = tooltip_below
				}

				button_round = {
					name = "duel"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/duel.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
				}

				expand = {}
			}
		}

		widget = {
			name = "item_and_owner"
			size = { 425 118 }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				parentanchor = left
				margin = { 2 2 }

				vbox = {
					layoutpolicy_vertical = expanding

					icon_artifact = {
						blockoverride "tooltipwidget" {}
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 4

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "rarity"
							layoutpolicy_horizontal = expanding
							text = "[Artifact.GetRarityAndType]"
							max_width = 190
							using = Font_Size_Small
						}

						expand = {}

						text_single = {
							name = "house_claim"
							layoutpolicy_horizontal = expanding
							visible = "[ArtifactClaim.IsHouseClaim]"
							text = "ARTIFACT_HOUSE_CLAIM"
							align = right
							max_width = 130
						}

						text_single = {
							name = "personal_claim"
							layoutpolicy_horizontal = expanding
							visible = "[ArtifactClaim.IsPersonalClaim]"
							text = "ARTIFACT_PERSONAL_CLAIM"
							align = right
							max_width = 130
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							text = "[Artifact.GetNameNoTooltip]"
							autoresize = yes
							max_width = 300
							using = Font_Size_Medium
							default_format = "#high"
						}

						expand = {}
					}

					hbox_artifact_durability = {
						layoutpolicy_horizontal = expanding
						margin_left = -3
						margin_top = 8
						# simple tooltip override so that the durability tooltip doesnt show up here
						tooltip = ""

						expand = {}
					}

					expand = {}
				}
			}
		}

		widget = {
			name = "portrait_artifact_owner"
			size = { 90 110 }
			parentanchor = right
			position = { 4 0 }

			block "portrait"
			{
				vbox = {
					name = "righthand_portrait"
					margin_top = 2
					margin_right = -6

					portrait_head_small = {
						datacontext = "[Artifact.GetOwner]"
						name = "owner_portrait"
					}

					text_single = {
						text = "OWNER"
						align = nobaseline
					}
				}
			}
		}
	}

	type icon_artifact = icon {
		size = { 90 90 }

		block "tooltipwidget" {
			tooltipwidget = {
				artifact_tooltip = {}
			}
		}

		icon = {
			name = "rarity_icon"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_bg.dds"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}

		icon = {
			name = "unique_icon"
			visible = "[Artifact.IsUnique]"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_unique.dds"
		}

		icon = {
			name = "artifact_icon"
			size = { 90% 90% }
			parentanchor = center

			texture = "[Artifact.GetIcon]"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}
	}

	type button_artifact = button {
		size = { 90 90 }
		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

		icon = {
			name = "rarity_icon"
			size = { 100% 100% }
			parentanchor = top
			alwaystransparent = yes

			texture = "gfx/interface/icons/artifact/artifact_bg.dds"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}

		icon = {
			name = "unique_icon"
			visible = "[Artifact.IsUnique]"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_unique.dds"
		}

		button = {
			name = "artifact_icon"
			size = { 90% 90% }
			parentanchor = center

			texture = "[Artifact.GetIcon]"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }

			block "on_click"
			{
				onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
				onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
			}
		}

		tooltipwidget = {
			artifact_tooltip = {}
		}
	}
}
