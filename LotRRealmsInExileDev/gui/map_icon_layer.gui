
hbox = {
	name = "layer_hbox"

	window = {
		name = "layer_window"
		visible = "[Not( IsPauseMenuShown )]"
		layoutpolicy_horizontal = Expanding
		layoutpolicy_vertical = Expanding
		alwaystransparent = yes
		movable = no
		resizable = no
		filter_mouse = none

		widget = {
			name = "bottom_layer"
			size = { 100% 100% }
			alwaystransparent = yes
		}

		widget = {
			name = "middle_layer"
			size = { 100% 100% }
			alwaystransparent = yes
		}

		widget = {
			name = "top_layer"
			size = { 100% 100% }
			alwaystransparent = yes
		}
	}
}

### Unified province icon
widget = {
	name = "province_map_icon"
	widgetanchor = center
	allow_outside = yes

	### ALL ITEMS
	flowcontainer = {
		parentanchor = center
		direction = vertical
		ignoreinvisible = yes
		allow_outside = yes

		### Spacer pushing items depending on zoom level
		widget = {
			visible = "[And( LessThan_int32( GetZoomLevel, '(int32)9' ), Or( ProvinceIcon.HasCoa, ProvinceIcon.HasLocationIcons ) )]"
			name = "offset_widget_v"
			size = { 2 0 }

			state = {
				name = "map_zoom_0"
				size = { 2 120 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_1"
				size = { 2 90 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_2"
				size = { 2 50 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_3"
				size = { 2 40 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_4"
				size = { 2 30 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_5"
				size = { 2 20 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_6"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_7"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_8"
				size = { 2 0 }
				duration = 0.25
			}
		}

		### TOP ITEMS
		widget = {
			parentanchor = hcenter
			allow_outside = yes

			flowcontainer = {
				parentanchor = bottom|hcenter
				direction = vertical
				ignoreinvisible = yes
				allow_outside = yes

				### Flow 1 | Domicile Camp
				flowcontainer = {
					name = "flow_province_1"
					datacontext = "[GetPlayer.GetDomicile]"
					visible = "[And( ProvinceIcon.HasDomicile, Domicile.GetType.HasMapPinAnchor( 'up' ) )]"
					parentanchor = hcenter

					allow_outside = yes

					layoutpolicy_horizontal = shrinking
					layoutpolicy_vertical = preferred

					### Domicile UP (CAMP)
					domicile_location_icon = {
						name = "domicile_up"
						datacontext = "[GetPlayer.GetDomicile]"
					}
				}

				### Flow 2 | Character Pin, Activity, Task Contract, Combat
				flowcontainer = {
					name = "flow_province_2"
					visible = "[Or( ProvinceIcon.HasCombat, Or( ProvinceIcon.HasTaskContract, Or( ProvinceIcon.HasActivity, And( ProvinceIcon.HasCharacter, Not( ProvinceIcon.HasDomicile ) ) ) ) )]"
					ignoreinvisible = yes
					allow_outside = yes
					parentanchor = hcenter

					layoutpolicy_horizontal = shrinking
					layoutpolicy_vertical = preferred

					### Character Pin
					widget_character_icon = {
						datacontext = "[ProvinceIcon.GetFocusCharacter]"
						visible = "[And( ProvinceIcon.HasCharacter, Not( ProvinceIcon.HasDomicile ))]"
						parentanchor = center

						size = { 84 95 }

						state = {
							name = "map_zoom_close"
							size = { 84 95 }
							duration = 0.25
							trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
						}

						state = {
							name = "map_zoom_far"
							size = { 67 76 }
							duration = 0.25
							trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
						}
					}

					### Combat icons
					widget_combat_icon = {
						visible = "[And(ProvinceIcon.HasCombat, Not(And(CombatMapIcon.RightIsNeutral, CombatMapIcon.LeftIsNeutral)))]"
						allow_outside = yes
						size = { 0 60 }
					}

					widget_combat_icon_small = {
						visible = "[And(ProvinceIcon.HasCombat, And(CombatMapIcon.RightIsNeutral, CombatMapIcon.LeftIsNeutral))]"
						allow_outside = yes
						size = { 0 60 }
					}

					### Activities
					flowcontainer = {
						visible = "[ProvinceIcon.HasActivity]"
						ignoreinvisible = yes

						datamodel = "[ProvinceIcon.GetActivities]"
						item = {
							activity_location_icon = {}
						}
					}

					### Task Contracts
					flowcontainer = {
						visible = "[ProvinceIcon.HasTaskContract]"

						ignoreinvisible = yes

						datamodel = "[ProvinceIcon.GetTaskContracts]"
						item = {
							task_contract_location_icon = {}
						}
					}
				}

				### Push widgets up when zoomed in
				widget = {
					size = { 2 0 }

					state = {
						name = "map_zoom_0"
						size = { 2 55 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_1"
						size = { 2 35 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_2"
						size = { 2 20 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_3"
						size = { 2 20 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_4"
						size = { 2 0 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_5"
						size = { 2 0 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_6"
						size = { 2 0 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_7"
						size = { 2 0 }
						duration = 0.25
					}

					state = {
						name = "map_zoom_8"
						size = { 2 0 }
						duration = 0.25
					}
				}
			}
		}

		### Flow 3 | Coat of Arms, Estates
		flowcontainer = {
			visible = "[Or( ProvinceIcon.HasUnits, Or( ProvinceIcon.HasWarfareIcons, Or( ProvinceIcon.HasDomicile, ProvinceIcon.HasCoa ) ) )]"
			parentanchor = hcenter
			allow_outside = yes
			ignoreinvisible = yes

			### Domicile LEFT (ESTATE)
			widget = {
				name = "domicile_left"
				datacontext = "[GetPlayer.GetDomicile]"
				visible = "[ProvinceIcon.HasDomicile]"

				allow_outside = yes

				domicile_location_icon = {
					visible = "[And( Domicile.GetType.HasMapPinAnchor( 'left' ), Not( ProvinceIcon.HasCoa ) )]"
					widgetanchor = bottom|right
					position = { 0 12 }
				}
				domicile_location_icon = {
					visible = "[And( Domicile.GetType.HasMapPinAnchor( 'left' ), ProvinceIcon.HasCoa)]"
					widgetanchor = top|right
					position = { 0 -12 }
				}
			}

			flowcontainer_realm_capital = {
				datacontext = "[ProvinceIcon.GetOwner]"
				datacontext = "[ProvinceIcon.GetCapitalIcon]"
				visible = "[ProvinceIcon.HasCoa]"

				blockoverride "coa_button"
				{
					tooltip = "[Character.GetDefaultRealmFlagTooltip]"
					onclick = "[DefaultOnRealmFlagClick(Character.GetID)]"
					onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
					button_ignore = "[ProvinceIcon.GetArmyIgnoreClick]"

					tooltip_visible = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
				}
			}


			### Flow 4 | Warfare icons
			flowcontainer = {
				visible = "[ProvinceIcon.HasWarfareIcons]"
				parentanchor = hcenter
				allow_outside = yes
				ignoreinvisible = yes

				widget = {
					parentanchor = vcenter
					allow_outside = yes
					visible = "[ProvinceIcon.HasWarfareIcons]"

					state = {
						name = warfare_in
						using = Animation_FadeIn_Standard
						trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)9' )]"
					}

					state = {
						name = warfare_out
						using = Animation_FadeOut_Standard
						trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)8' )]"
					}

					flowcontainer_warfare_status = {
						visible = "[ProvinceIcon.HasCoa]"
						parentanchor = left|bottom
						allow_outside = yes
						position = { 30 85 }
					}

					flowcontainer_warfare_status = {
						visible = "[And( And( Not( ProvinceIcon.HasCoa ), Not( ProvinceIcon.HasLocationIcons ) ), ProvinceIcon.HasCombat )]"
						allow_outside = yes
						position = { 120 10 }
					}

					flowcontainer_warfare_status = {
						visible = "[And( And( Not( ProvinceIcon.HasCoa ), Not( ProvinceIcon.HasLocationIcons ) ), Not( ProvinceIcon.HasCombat ) )]"
						allow_outside = yes
						position = { 20 15 }
					}

					flowcontainer_warfare_status = {
						visible = "[And( Not( ProvinceIcon.HasCoa ), ProvinceIcon.HasLocationIcons )]"
						allow_outside = yes
						position = { 60 30 }
					}
				}
			}

			### Flow 5 | Unit icons
			flowcontainer = {
				visible = "[ProvinceIcon.HasUnits]"
				ignoreinvisible = yes
				allow_outside = yes

				widget = {
					name = "offset_widget_h"
					visible = "[And( ProvinceIcon.HasUnits, ProvinceIcon.HasCoa )]"
					size = { 0 2 }


					state = {
						name = shift_right
						size = { 30 2 }
						duration = 0.25
						trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)7' )]"
					}

					state = {
						name = shift_above
						size = { 0 2 }
						duration = 0.25
						trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)6' )]"
					}
				}

				widget = {
					parentanchor = vcenter
					allow_outside = yes

					state = {
						name = units_fade_in
						trigger_when = "[Not( ProvinceIcon.HasHolding )]"
						using = Animation_FadeIn_Standard
					}

					state = {
						name = units_fade_out
						trigger_when = "[ProvinceIcon.HasHolding]"
						using = Animation_FadeOut_Standard
					}

					flowcontainer_unit_items = {
						allow_outside = yes
						parentanchor = vcenter
						position = { 0 0 }
					}
				}
			}
		}

		widget = {
			parentanchor = hcenter
			allow_outside = yes
			alpha = 1
			visible = "[ProvinceIcon.HasLocationIcons]"

			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				ignoreinvisible = yes
				allow_outside = yes

				### Flow 6 | The Blue Banner + Holding Icons (Fort Level, Tax & Levies)
				flowcontainer_holding_info = {
					visible = "[ProvinceIcon.HasHolding]"
				}

				### Flow 7 | Council Task
				flowcontainer_active_tasks = {
					parentanchor = hcenter
					visible = "[ProvinceIcon.HasCouncilTasks]"
					datamodel = "[ProvinceIcon.GetCouncilTasks]"
				}
			}
		}
	}
}

### Unit
container = {
	datacontext = "[UnitMapIconHandler.GetUnitIcon]"
	name = "unit_widget"
	allow_outside = yes

	widget_unit_icon_item = {
		position = { -93 10 }

		alpha = 1
	}
}

container = {
	datacontext = "[UnitMapIconHandler.GetUnitIcon]"
	name = "unit_widget_flat_map"

	widget_unit_icon_item = {
		position = { -65 10 }
		widgetanchor = vcenter
	}
}

### RALLY POINT
container = {
	name = "rally_point_widget"
	position = { -48 -10 }
	widgetanchor = center

	button_rally_point = {
		datacontext = "[RallyPointMapIcon.GetRallyPoint]"
		visible = "[RallyPointMapIcon.ShouldBeShown]"
		alwaystransparent = "[Not( RallyPointMapIcon.CanClick )]" # Ignore the clicks if we are moving or placing a rally point so it filters through to the map to handle it instead of trying to show the info of the not existing rally point
	}
}

### Major river ford
widget = {
	name = "ford_widget"
	size = { 40 40 }
	widgetanchor = center

	tooltip = "[StraitMapIcon.GetTooltip]"

	icon = {
		name = "ford_icon"
		visible = "[StraitMapIcon.ShouldBeShown]"

		using = Animation_ShowHide_Quick

		size = { 40 40 }
		texture = "gfx/interface/icons/map_icons/ford.dds"
	}
}

### Strait
widget = {
	name = "strait_widget"
	size = { 40 40 }
	widgetanchor = center

	tooltip = "[StraitMapIcon.GetTooltip]"

	icon = {
		name = "strait_icon"
		visible = "[StraitMapIcon.ShouldBeShown]"

		using = Animation_ShowHide_Quick

		size = { 40 40 }
		texture = "gfx/interface/icons/map_icons/strait.dds"
	}
}

#### Domicile and task contracts Icon for flat map
widget = {
	name = "flat_landless_widget"

	allow_outside = yes

	flowcontainer = {
		parentanchor = center
		allow_outside = yes
		direction = vertical
		ignoreinvisible = yes

		domicile_location_icon = {
			visible = "[FlatLandlessMapIcon.HasDomicile]"
			datacontext = "[GetPlayer.GetDomicile]"
		}

		flowcontainer = {
			allow_outside = yes
			datamodel = "[FlatLandlessMapIcon.GetTaskContracts]"

			item = {
				task_contract_location_icon = {}
			}
		}
	}
}

### Title capital
container = {
	name = "title_capital_widget"
	widgetanchor = center
	allow_outside = yes

	# Animations have been removed for now, should be part of map_realm_coa types

	background = {
		texture = "gfx/interface/component_masks/mask_fade_circle.dds"
		color = { 0.1 0.1 0.1 1 }
		visible = "[TitleCapitalMapIcon.GetTitle.GetHolder.IsValid]"
		margin = { 15 5 }
		margin_bottom = 15
		alpha = 0.6
	}

	coa_title_small_crown = {
		datacontext = "[TitleCapitalMapIcon.GetTitle]"
		alpha = "[Select_float( TitleCapitalMapIcon.GetTitle.GetHolder.IsValid, '(float)1.0', '(float)0.7' )]"
	}
}


### Combat prediction
container = {
	name = "combat_prediction_widget"
	widgetanchor = top|hcenter
	position = { 0 60 }

	icon = {
		name = "prediction_icon"
		texture = "gfx/interface/icons/map_icons/combat_prediction_icon.dds"
		size = { 40 40 }
		framesize = { 120 120 }
		frame = "[CombatPredictionMapIcon.GetPredictionLevelFrame]"
		tooltipwidget = {
			using = combat_prediction_tooltip
		}
		using = tooltip_above
	}
}

### Fleet prediction
flowcontainer = {
	name = "fleet_embark_widget"
	widgetanchor = top|hcenter
	direction = horizontal
	tooltip = "[FleetPredictionMapIcon.GetEmbarkCostBreakdownTooltip]"
	using = tooltip_above

	icon = {
		name = "prediction_icon"
		texture = "gfx/interface/icons/map_icons/naval_transportation.dds"
		parentanchor = vcenter
	}

	flowcontainer = {
		parentanchor = vcenter
		text_label_left = {

			text = "MAP_ICON_EMBARK_COST"
			autoresize = yes
		}
		#ugly spacer to make the text and icon align vertically
		spacer = {
			size = {0 30}
		}
	}


}

### Council Task

container = {
	name = "council_task_widget"

	flowcontainer_active_tasks = {
		widgetanchor = center
		datamodel = "[ActiveCouncilTaskIcon.GetTasks]"
	}
}

### Province move attrition
widget = {
	name = "province_move_attrition_widget"
	size = { 30 30 }
	widgetanchor = center
	tooltip = "[ProvinceMovementAttritionIcon.GetTooltip]"

	highlight_icon = {
		name = "attrition"
		position = { 0 0 }
		size = { 30 30 }
		texture = "gfx/interface/icons/map_icons/attrition_icon.dds"
	}
}

### Holy Site
flowcontainer = {
	name = "holy_site_widget"
	widgetanchor = center
	datacontext = "[HolySiteIcon.GetHolySite]"
	datacontext = "[GuiHolySiteItem.GetHolySite]"
	direction = vertical

	ignoreinvisible = yes

	button_normal = {
		parentanchor = hcenter
		background = {
			alpha = 0
			visible = "[GuiHolySiteItem.IsHeldByFaith]"
			texture = "gfx/interface/component_masks/mask_circle.dds"
			margin = { -10 -10 }
			glow = {
				color = { 0.2 0.2 0.2 0.6 }
				glow_radius = 6

				glow_generation_rules= {
					glow_alpha_mask = 0
					glow_blur_passes = 10
					glow_texture_downscale = 5.5f
					glow_ignore_inside_pixels = yes
				}
			}
		}

		background = {
			alpha = 0
			visible = "[Not( GuiHolySiteItem.IsHeldByFaith )]"
			texture = "gfx/interface/component_masks/mask_circle.dds"

			glow = {
				color = { 1 0.2 0.2 0.5 }
				glow_radius = 9

				glow_generation_rules= {
					glow_alpha_mask = 0
					glow_blur_passes = 10
					glow_texture_downscale = 5.5f
					glow_ignore_inside_pixels = yes
				}
			}
		}

		name = "faith_icon"
		texture = "[GuiHolySiteItem.GetFaith.GetIcon]"
		size = { 60 60 }
		onclick = "[HolySite.GetBarony.SelectTitle]"
		tooltip = "FAITH_WINDOW_HOLY_SITE_TOOLTIP"
	}

	text_label_center = {
		parentanchor = hcenter
		visible = "[GuiHolySiteItem.IsHeldByFaith]"
		text = "[HolySite.GetBarony.GetNameNoTierNoTooltip]"
		default_format = "#high"
	}

	text_label_center = {
		parentanchor = hcenter
		visible = "[Not( GuiHolySiteItem.IsHeldByFaith )]"
		text = "[HolySite.GetBarony.GetNameNoTierNoTooltip]"
		default_format = "#medium"
	}
}

### house CoA
container = {
	name = "house_coa_icon"
	widgetanchor = center
	ignoreinvisible = yes

	coa_house_medium = {
		datacontext = "[DynastyHouseIcon.GetHouse]"
		parentanchor = center
		position = { 0 -5 }
	}
}

### Court language
flowcontainer = {
	name = "court_language_widget"
	widgetanchor = center

	datacontext = "[GetPlayer]"
	datacontext = "[Character.GetCulture]"

	button_group_court_language_data = {
		name = "grandest_language"
		datacontext = "[CCourtLanguageMapIcon.GetGrandestLanguage]"
		visible = "[CCourtLanguageMapIcon.HasGrandestLanguage]"
	}

	button_group_court_language_data = {
		name = "native_language"
		datacontext = "[CCourtLanguageMapIcon.GetNativeLanguage]"
		visible = "[CCourtLanguageMapIcon.HasNativeLanguage]"
	}
}

### Landless Rulers
widget = {
	name = "landless_rulers_map_widget"
	allow_outside = yes

	datacontext = "[LandlessRulersMapIcon.GetProvince]"
	datacontext = "[GetLobbyHelper]"

	state = {
		name = _mouse_hierarchy_enter
		on_start = "[GetVariableSystem.Set( 'domicile_expand_all_in_province', Province.GetTag )]"
		on_finish = "[GetVariableSystem.Set( 'domicile_expand_all_in_province', Province.GetTag  )]"
	}

	state = {
		name = _mouse_hierarchy_leave
		on_finish = "[GetVariableSystem.Clear( 'domicile_expand_all_in_province' )]"
	}

	flowcontainer = {
		direction = vertical
		parentanchor = bottom|hcenter
		allow_outside = yes

		flowcontainer = {
			name = "normal_map_icon"

			# Explicit check on the index due to frame updates and lifetimes.
			visible = "[And( And( Not( LobbyHelperWindow.IsLandlessTabSelected ), GreaterThan_int32( LandlessRulersMapIcon.GetValidDomicilesCount, '(int32)0' ) ), LessThan_int32( LandlessRulersMapIcon.GetFirstValidDomicileIndex, GetDataModelSize( LandlessRulersMapIcon.GetDomiciles ) ) )]"

			ignoreinvisible = yes
			allow_outside = yes

			widget_landless_ruler_pin = {
				datacontext = "[LandlessRulersMapIcon.GetFirstValidDomicile]"
				datacontext = "[Domicile.GetOwner]"

				allow_outside = yes

				state = {
					name = "map_zoom_close"
					size = { 84 95 }
					duration = 0.25
					trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
				}

				state = {
					name = "map_zoom_far"
					size = { 32 32 }
					duration = 0.25
					trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
				}

				widget = {
					visible = "[And( GreaterThan_int32( LandlessRulersMapIcon.GetValidDomicilesCount, '(int32)1' ), Not(GetVariableSystem.HasValue( 'domicile_expand_all_in_province', Province.GetTag ) ) )]"
					size = { 48 48 }
					
					state = {
						name = "map_zoom_close"
						size = { 48 48 }
						duration = 0.25
						trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
					}

					state = {
						name = "map_zoom_far"
						size = { 32 32 }
						duration = 0.25
						trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
					}
					
					parentanchor = right|vcenter
					widgetanchor = left|vcenter

					position = { 0 -5 }

					background = {
						texture = "gfx/interface/icons/icon_bg_small.dds"
					}

					text_single = {
						parentanchor = center

						text = MAP_ICON_LANDLESS_RULERS_COUNT
						align = center
						default_format = "#strong_glow;high"

						position = { 0 -3 }

						using = Font_Size_Small
					}
				}

				flowcontainer = {
					visible = "[GetVariableSystem.HasValue( 'domicile_expand_all_in_province', Province.GetTag )]"
					datamodel = "[DataModelSkipFirst( LandlessRulersMapIcon.GetDomiciles, Add_int32( LandlessRulersMapIcon.GetFirstValidDomicileIndex, '(int32)1' ) )]"

					ignoreinvisible = yes
					parentanchor = right|vcenter
					widgetanchor = left|vcenter

					item = {
						widget_landless_ruler_pin = {
							datacontext = "[Domicile.GetOwner]"
							visible = "[LandlessRulersMapIcon.ShouldShowRuler( Character.Self )]"

							size = { 67 76 }

							state = {
								name = "map_zoom_close"
								size = { 84 95 }
								duration = 0.25
								trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
							}

							state = {
								name = "map_zoom_far"
								size = { 32 32 }
								duration = 0.25
								trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
							}
						}
					}
				}
			}
		}

		flowcontainer = {
			name = "lobby_map_icon"

			# Explicit check on the index due to frame updates and lifetimes.
			visible = "[And( And( LobbyHelperWindow.IsLandlessTabSelected, GreaterThan_int32( LandlessRulersMapIcon.GetValidDomicilesCount, '(int32)0' ) ), LessThan_int32( LandlessRulersMapIcon.GetFirstValidDomicileIndex, GetDataModelSize( LandlessRulersMapIcon.GetDomiciles ) ) )]"

			ignoreinvisible = yes

			widget_landless_ruler_pin = {
				datacontext_from_model = {
					datamodel = "[Province.GetDomiciles]"
					index = "[LobbyHelperWindow.GetFirstValidDomicileIndex( Province.Self )]"
				}

				datacontext = "[Domicile.GetOwner]"
				visible = "[And( And( Domicile.GetType.HasLobbyMapPin, Character.IsLandlessRuler), GetLobbyHelper.CharacterHasGovernment( Character.Self ) )]"

				state = {
					name = "map_zoom_close"
					size = { 84 95 }
					duration = 0.25
					trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
				}

				state = {
					name = "map_zoom_far"
					size = { 32 32 }
					duration = 0.25
					trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
				}
			}

			widget = {
				visible = "[And( GreaterThan_int32( LobbyHelperWindow.CountFilteredDomicilesInProvince( Province.Self ), '(int32)1' ), Not(GetVariableSystem.HasValue( 'domicile_expand_all_in_province', Province.GetTag ) ) )]"

				size = { 48 48 }
				
				state = {
					name = "map_zoom_close"
					size = { 48 48 }
					duration = 0.25
					trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
				}

				state = {
					name = "map_zoom_far"
					size = { 32 32 }
					duration = 0.25
					trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
				}
				
				parentanchor = vcenter

				background = {
					texture = "gfx/interface/icons/icon_bg_small.dds"
				}

				text_single = {
					parentanchor = center

					position = { 0 -3 }

					text = lobby_more_domiciles_count
					align = center
					default_format = "#strong_glow;high"

					using = Font_Size_Small
				}
			}

			flowcontainer = {
				datamodel = "[DataModelSkipFirst( Province.GetDomiciles, Add_int32( LobbyHelperWindow.GetFirstValidDomicileIndex( Province.Self ), '(int32)1' ) )]"
				visible = "[GetVariableSystem.HasValue( 'domicile_expand_all_in_province', Province.GetTag )]"

				ignoreinvisible = yes

				state = {
					name = _show
					using = Animation_FadeIn_Standard
				}

				state = {
					name = _hide
					using = Animation_FadeOut_Standard
				}

				item = {
					widget_landless_ruler_pin = {
						datacontext = "[Domicile.GetOwner]"
						visible = "[And( And( Domicile.GetType.HasLobbyMapPin, Character.IsLandlessRuler), GetLobbyHelper.CharacterHasGovernment( Character.Self ) )]"

						state = {
							name = "map_zoom_close"
							size = { 84 95 }
							duration = 0.25
							trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
						}

						state = {
							name = "map_zoom_far"
							size = { 32 32 }
							duration = 0.25
							trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
						}
					}
				}
			}
		}

		### Push widgets up when zoomed in
		widget = {
			size = { 2 0 }

			state = {
				name = "map_zoom_0"
				size = { 2 55 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_1"
				size = { 2 35 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_2"
				size = { 2 20 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_3"
				size = { 2 20 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_4"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_5"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_6"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_7"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_8"
				size = { 2 0 }
				duration = 0.25
			}
		}
	}
}

### Men at Arms Origin
widget = {
	name = "men_at_arms_origin_widget"
	widgetanchor = center
	position = { 0 -60 }

	datacontext = "[MAAOriginMapIcon.GetMAAType]"
	datacontext = "[MAAOriginMapIcon.GetProvince]"
	datacontext = "[MAAOriginMapIcon.GetOwningTitle]"

	vbox = {
		margin = { 20 5 }
		set_parent_size_to_minimum = yes

		background = {
			using = Background_Area_Dark
			alpha = 0.9

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_rough_edges.dds"
				blend_mode = alphamultiply
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }

			text_label_center = {
				visible = "[MAAOriginMapIcon.IsExistingLocation]"
				text = "REGIMENT_ORIGIN_LOCATION_MAP"
				default_format = "#high"
				using = Font_Size_Medium
				layoutpolicy_horizontal = expanding
				align = center
			}
			text_label_center = {
				visible = "[Not( MAAOriginMapIcon.IsExistingLocation )]"
				text = "REGIMENT_ORIGIN_NEW_LOCATION_MAP"
				default_format = "#high"
				using = Font_Size_Medium
				layoutpolicy_horizontal = expanding
				align = center
			}

			widget = { #icon_capital asset has lots of empty space sadly
				visible = "[Province.IsRealmCapital]"
				size = { 26 20 }

				tooltip = "REALM_CAPITAL_TOOLTIP"

				icon = {
					name = "realm_capital_icon"
					parentanchor = center
					position = {0 -5}
					size = { 38 38 }
					framesize = { 63 63 }
					texture = "gfx/interface/icons/icon_capital.dds"

					frame = 2
				}
			}
		}

		vbox_maa_province_stats_numbers = {
			name = "location_stat_impact"
			layoutpolicy_horizontal = expanding
			set_parent_size_to_minimum = yes
		}
	}
}

### Title Troops
widget = {
	name = "title_troops_map_widget"
	datacontext = "[TitleTroopsMapIcon.GetTitle]"
	widgetanchor = center
	allow_outside = yes
	position = { 78 00 }
	size = { 200 100 }

	hbox = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		allow_outside = yes

		# CoA
		widget = {
			datacontext = "[Title.GetHolder]"
			size = { 44 72 }
			allow_outside = yes

			icon = {
				name = "ally_war_icon"
				visible = "[TitleTroopsMapIcon.IsMyAlly]"
				parentanchor = center
				position = { -6 -21 }

				size = { 60 63 }
				texture = "gfx/interface/icons/map_coa/icon_ally.dds"
			}

			icon = {
				name = "at_war_icon"
				visible = "[TitleTroopsMapIcon.IsAtWarWithMe]"
				parentanchor = center
				position = { 0 -20 }
				size = { 55 55 }
				texture = "gfx/interface/icons/map_coa/icon_at_war_big.dds"
			}

			icon = {
				name = "player_icon"
				visible = "[Character.IsPlayer]"

				texture = "gfx/interface/icons/map_coa/icon_player.dds"
				framesize = { 156 156 }
				frame = 3

				position = { 0 -14 }
				size = { 72 72 }
				parentanchor = center
			}

			coa_title_small_crown = {
				parentanchor = center
				position = { 0 -5 }

				blockoverride "coa_button" {
					onclick = "[OpenAdministrativeArmyDetailView( Title.Self )]"
				}

				icon = {
					parentanchor = top|right
					position = { 5 9 }
					size = { 24 24 }
					texture = "gfx/interface/icons/currencies/icon_influence_01.dds"
					visible = "[And( Title.HasDiscountedTitleMaa(GetPlayer.Self), Not( Title.GetHolder.IsPlayer ) )]"

					glow = {
						color = { 0 0 0 0.8 }
						glow_radius = 3
						using = Glow_Standard
					}
				}
			}

			tooltipwidget = {
				widget_theme_troops_tooltip = {}
			}
		}

		widget = {
			allow_outside = yes
			size = { 140 100 }

			vbox = {
				allow_outside = yes
				layoutpolicy_vertical = expanding

				expand = {}

				# Banner & Army size
				hbox = {
					layoutpolicy_horizontal = expanding
					allow_outside = yes

					hbox = {
						background = {
							visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
							spriteType = Corneredtiled
							spriteborder_right = 60
							texture_density = 2
							texture = "gfx/interface/window_military/military_map_theme_banner_blue.dds"

							margin_top = -2
							margin_bottom = 2
							margin_right = 40
						}

						background = {
							visible = "[And( Not( Title.IsAdministrativeArmyAvailableForHire ), Not( Title.IsAdministrativeArmyHiredByLocalPlayer ) )]"
							spriteType = Corneredtiled
							spriteborder_right = 60
							texture_density = 2
							texture = "gfx/interface/window_military/military_map_theme_banner_no_troops.dds"

							margin_top = -2
							margin_bottom = 2
							margin_right = 40
						}

						background = {
							visible = "[Title.IsAdministrativeArmyAvailableForHire]"
							spriteType = Corneredtiled
							spriteborder_right = 60
							texture_density = 2
							texture = "gfx/interface/window_military/military_map_theme_banner_green.dds"

							margin_top = -2
							margin_bottom = 2
							margin_right = 40
						}

						spacer = {
							size = { 40 20 }
						}

						text_single = {
							text = "TITLE_TROOPS_MAPMODE_EXTRA_CURRENT_ARMY_SIZE"

							visible = "[LessThan_int32( GetZoomLevel, '(int32)20' )]"
						}
					}
					expand = {}
				}

				# Small CoAs
				widget = {
					visible = "[GreaterThan_int32( GetDataModelSize(TitleTroopsMapIcon.GetHiredTitles), '(int32)0' )]"
					allow_outside = yes
					size = { 140 28 }

					fixedgridbox = {
						position = { 23 0 }
						parentanchor = vcenter
						datamodel = "[TitleTroopsMapIcon.GetHiredTitles]"
						flipdirection = yes
						addrow = 34
						addcolumn = 34
						datamodel_wrap = 4
						maxverticalslots = 1

						background = {
							using = Background_Area_Solid
							alpha = 0.9
							margin_left = 5
							margin_right = 20
							margin_bottom = 13

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
								blend_mode = alphamultiply
							}
						}

						item = {
							coa_title_tiny_crown = {
								scale = 0.85

								blockoverride "coa_onclick" {
									onclick = "[OpenAdministrativeArmyDetailView( Title.Self )]"
								}
								using = tooltip_se

								icon = {
									parentanchor = top|right
									position = { 5 9 }
									size = { 20 20 }
									texture = "gfx/interface/icons/currencies/icon_influence_01.dds"
									visible = "[Title.HasDiscountedTitleMaa(GetPlayer.Self)]"

									glow = {
										color = { 0 0 0 0.8 }
										glow_radius = 3
										using = Glow_Standard
									}
								}
							}
						}
					}

					widget = {
						datacontext = "[TitleTroopsMapIcon.GetTitle]"
						parentanchor = right|vcenter
						size = { 20 20 }
						using = CoA_Title_Defaults

						blockoverride "coa_onclick" {}

						text_single = {
							visible = "[GreaterThan_int32( GetDataModelSize(TitleTroopsMapIcon.GetHiredTitles), '(int32)4' )]"
							parentanchor = center

							text = "[GetNumberAbove_int32( GetDataModelSize(TitleTroopsMapIcon.GetHiredTitles), '(int32)4' )|=]"
							align = center
							default_format = "#underline"

							tooltipwidget = {
								widget_theme_troops_tooltip = {}
							}
						}
					}
				}

				expand = {}
			}
			widget = {
				name = "troops_icon"
				size = { 38 38 }
				parentanchor = vcenter
				position = { 0 -2 }

				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/icons/map_icons/troops_yours.dds"
					visible = "[Title.IsAdministrativeArmyHiredByLocalPlayer]"
				}

				icon = {
					visible = "[And( Not( Title.IsAdministrativeArmyAvailableForHire ), Not( Title.IsAdministrativeArmyHiredByLocalPlayer ) )]"
					size = { 100% 100% }
					texture = "gfx/interface/icons/map_icons/troops_none.dds"
				}

				icon = {
					size = { 100% 100% }
					texture = "gfx/interface/icons/icon_soldier.dds"
					visible = "[Title.IsAdministrativeArmyAvailableForHire]"
				}
			}
		}

		expand = {}
	}
}


### Theme Type widget
widget = {
	name = "theme_type_map_widget"
	datacontext = "[ThemesTypeMapIcon.GetTitle]"
	datacontext = "[ThemesTypeMapIcon.GetThemeType]"
	datacontext = "[ThemesTypeMapIcon.GetGovernor]"
	widgetanchor = center
	allow_outside = yes
	tooltip_offset = { 28 -40 }

	widget = {
		datacontext = "[Title.GetHolder]"
		allow_outside = yes

		icon = {
			name = "player_icon"
			visible = "[Character.IsPlayer]"

			texture = "gfx/interface/icons/map_coa/icon_player.dds"
			framesize = { 156 156 }
			frame = 3

			position = { 0 -14 }
			size = { 72 72 }
			parentanchor = center
		}

		coa_title_small_crown = {
			parentanchor = center
			blockoverride "coa_button" {
				onclick = "[OpenAdminVassalDetailView( Title.Self )]"
			}
		}

		text_single = {
			position = { 10 10 }
			text = ADMIN_WINDOW_THEME_ADMINISTRATION_TYPE_TEXT_ICON
			max_width = 90
			fontsize = 18
		}
	}

	tooltipwidget = {
		container = {
			using = GeneralTooltipSetup
			alwaystransparent = no

			object_tooltip_pop_out = {
				blockoverride "header_additions" {
					margin_top = -4

					coa_title_small_crown = {
						size = { 40 50 }
						blockoverride "coa_tooltip" {}
						blockoverride "coa_hover_glow_visible"
						{
							visible = no
						}
					}
				}

				blockoverride "title_text" {
					text = "[Title.GetNameWithUnderlyingNoTooltip|U]"
				}

				blockoverride "subheading" {
					text_single = {
						layoutpolicy_horizontal = expanding
					}
				}

				blockoverride "concept_link" {}

				blockoverride "main_description" {
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[ObligationLevel.GetName]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ADMIN_VASSAL_MAP_MODE_TT_EFFICIENCY"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ADMIN_VASSAL_MAP_MODE_TT_TAXES"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "ADMIN_VASSAL_MAP_MODE_TT_TROOPS"
					}
				}
			}
		}
	}
}


### Activity planner
widget = {
	name = "activity_planner_widget"

	datacontext = "[ActivityPlannerMapIcon.GetProvince]"
	datacontext = "[ActivityPlannerMapIcon.GetActivityType]"
	datacontext = "[ActivityPlannerMapIcon.GetTravelDangerData]"
	datacontext = "[ActivityPlannerMapIcon.GetTravelPointsOfInterestData]"

	allow_outside = yes

	flowcontainer = {
		widgetanchor = bottom|hcenter

		direction = vertical
		ignoreinvisible = yes
		allow_outside = yes

		widget_character_icon = {
			name = "current_location"

			parentanchor = hcenter

			datacontext = "[GetPlayer]"
			visible = "[ActivityPlannerMapIcon.IsCurrentLocation]"

			size = { 84 95 }

			state = {
				name = "map_zoom_close"
				size = { 84 95 }
				duration = 0.25
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far"
				size = { 67 76 }
				duration = 0.25
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}
		}

		widget_provisions_low = {
			visible = "[ActivityPlannerMapIcon.HasTravelProvisionsLow]"
			parentanchor = center
		}

		widget_provisions_critical = {
			visible = "[ActivityPlannerMapIcon.HasTravelProvisionsCritical]"
			parentanchor = center
		}

		container_travel_danger = {
			name = "travel_danger"
			visible = "[And( ActivityPlannerMapIcon.HasTravelDanger, Not( ActivityPlannerMapIcon.IsSelectedDestination ) )]"
			parentanchor = center
		}

		widget_travel_points_of_interest = {
			visible = "[ActivityPlannerMapIcon.HasTravelPointsOfInterest]"
		}

		# Activity related icons
		flowcontainer = {
			visible = "[Or(ActivityPlannerMapIcon.CanSelectDestination, ActivityPlannerMapIcon.IsSelectedDestination )]"
			direction = vertical
			ignoreinvisible = yes
			allow_outside = yes

			parentanchor = hcenter

			# Icon at your current capital
			icon = {
				name = "realm_capital_icon"
				parentanchor = hcenter
				background = {
					using = Background_Area_Dark
					alpha = 0.9
					margin_top = -9
					margin_right = -3
					margin_left = -3
					margin_bottom = 3
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_circle.dds"
						blend_mode = alphamultiply
					}
				}
				visible = "[ActivityPlannerMapIcon.IsCapital]"

				size = { 50 50 }
				framesize = { 63 63 }

				texture = "gfx/interface/icons/icon_capital.dds"
				frame = 2

				tooltip = "REALM_CAPITAL_TOOLTIP"
			}

			# Character pin of province holder (only for 'holder' type activity planners)
			widget_character_icon = {
				datacontext = "[Province.GetTitle.GetHolder]"
				visible = "[And( ActivityPlannerMapIcon.IsSelectingDestinations, And( ActivityType.IsPlannerType('holder'), And( LessThan_int32( GetZoomLevel, '(int32)16' ), And( Character.IsValid, Not( Character.IsPlayer ) ) ) ) )]"

				parentanchor = hcenter
				size = { 56 63 }

				state = {
					name = "map_zoom_close"
					size = { 56 63 }
					duration = 0.25
					alpha = 1
					trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
				}

				state = {
					name = "map_zoom_far"
					size = { 42 48 }
					duration = 0.25
					alpha = 0
					trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
				}
			}

			# Holder opinion of you
			button = {
				datacontext = "[Province.GetTitle.GetHolder]"
				visible = "[And( ActivityPlannerMapIcon.IsSelectingDestinations, And( ActivityType.IsPlannerType('holder'), And( Character.IsValid, Not( Character.IsPlayer ) ) ) ) )]"

				parentanchor = hcenter
				allow_outside = yes

				onclick = "[DefaultOnCharacterClick(Character.GetID)]"

				size = { 70 20 }

				portrait_opinion = {
					parentanchor = hcenter

					vassal_stance_icon = {
						visible = "[And( Character.IsVassalOf( GetPlayer ), LessThan_int32( GetZoomLevel, '(int32)14' ) )]"
						name = "vassal_stance"
						size = { 20 20 }
					}

					portrait_status_icons = {
						visible = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
						blockoverride "direction" {
							direction = horizontal
						}
					}
				}
			}

			# Name of province
			text_label_center = {
				allow_outside = yes
				visible = "[And(ActivityType.IsPlannerType('province'), Not(EqualTo_string( ActivityType.GetKey(), 'activity_journey')))]"

				parentanchor = hcenter
				text = "[Province.GetNameNoTooltip]"
			}

			# Name of special building
			text_label_center = {
				allow_outside = yes
				visible = "[And(ActivityType.IsPlannerType('province'), EqualTo_string( ActivityType.GetKey(), 'activity_journey') ))]"

				parentanchor = hcenter
				text = "[Province.GetHolding.GetSpecialBuildingType.GetName]"
			}
			
			# Special building skills
			text_label_center = {
				allow_outside = yes
				visible = "[And(ActivityType.IsPlannerType('province'), EqualTo_string( ActivityType.GetKey(), 'activity_journey') ))]"
			
				parentanchor = hcenter
				text = "[Province.Custom('GetSpecialBuildingDiplomacySkill')][Province.Custom('GetSpecialBuildingMartialSkill')][Province.Custom('GetSpecialBuildingLearningSkill')][Province.Custom('GetSpecialBuildingStewardshipSkill')][Province.Custom('GetSpecialBuildingIntrigueSkill')]"
			}

			# Activity Type Pin
			button = {
				size = { 43 46 }
				parentanchor = hcenter

				visible = "[Or( ActivityType.IsPlannerType('province'), Or( Not( ActivityPlannerMapIcon.IsSelectingDestinations ), Not(  ActivityPlannerMapIcon.IsSelectedDestination ) ) )]"

				state = {
					name = "map_zoom_close"
					size = { 86 92 }
					duration = 0.25
					trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
				}

				state = {
					name = "map_zoom_far"
					size = { 57 62 }
					duration = 0.25
					trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
				}

				icon = {
					visible = "[ActivityType.IsGrandActivity]"
					texture = "gfx/interface/window_activities/pin_grand_activity_location.dds"
					size = { 100% 100% }
				}

				icon = {
					visible = "[Not( ActivityType.IsGrandActivity )]"
					texture = "gfx/interface/window_activities/pin_activity_location.dds"
					size = { 100% 100% }
				}

				tooltip = "[ActivityPlannerMapIcon.GetProvinceTooltip]"

				onclick = "[ActivityPlannerMapIcon.OnClick]"

				highlight_icon = {
					parentanchor = center
					alwaystransparent = yes
					texture = "[Province.GetTerrain.GetIcon]"
					size = { 38 38 }
					position = { 0 -5 }
				
					visible = "[EqualTo_string( ActivityType.GetKey(), 'activity_roaming')]"
					
					state = {
						name = "map_zoom_close"
						size = { 52 52 }
						position = { 0 -5 }
						duration = 0.25
						trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
					}
				
					state = {
						name = "map_zoom_far"
						size = { 33 33 }
						position = { 0 -3 }
						duration = 0.25
						trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
					}
				}
				
				highlight_icon = {
					parentanchor = center
					alwaystransparent = yes
					texture = "[Province.GetHolding.GetSpecialBuildingType.GetTypeIcon]"
					size = { 44 38 }
					position = { 0 -5 }
					#mipmaplodbias = -1
				
					visible = "[EqualTo_string( ActivityType.GetKey(), 'activity_journey')]"
					
					modify_texture = {
						texture = "gfx/interface/colors/colors_textured.dds"
						blend_mode = add
						framesize = { 96 96 }

						block "master_color_frame" {
							frame = 1
						}
					}
					
					state = {
						name = "map_zoom_close"
						size = { 44 38 }
						position = { 0 -8 }
						duration = 0.25
						trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
					}
				
					state = {
						name = "map_zoom_far"
						size = { 28 24 }
						position = { -1 -4 }
						duration = 0.25
						trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
					}
				}

				highlight_icon = {
					parentanchor = center
					alwaystransparent = yes
					texture = "[ActivityType.GetIcon]"
					size = { 38 38 }
					position = { 0 -5 }
					
					visible = "[And(Not(EqualTo_string( ActivityType.GetKey(), 'activity_journey')), Not(EqualTo_string( ActivityType.GetKey(), 'activity_roaming')))]"

					state = {
						name = "map_zoom_close"
						size = { 38 38 }
						position = { 0 -5 }
						duration = 0.25
						trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
					}

					state = {
						name = "map_zoom_far"
						size = { 25 25 }
						position = { 0 -3 }
						duration = 0.25
						trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
					}
				}
			}
		}
	}
}

flowcontainer_realm_capital = {
	name = "realm_capital_small_widget"
	widgetanchor = center
	allow_outside = yes

	blockoverride "capital_datacontext" {
		datacontext = "[CapitalMapIcon.GetOwner]"
	}
	blockoverride "coa_realm_map_small_visible" {
		visible = "[And(EqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)3'), RealmCapitalSmallMapIcon.ShouldShowRealm)]" #Count Rank
	}
	blockoverride "coa_realm_map_medium_visible" {
		visible = "[And(EqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)4'), RealmCapitalSmallMapIcon.ShouldShowRealm)]" #Duke Rank
	}
	blockoverride "coa_realm_map_big_visible" {
		visible = "[And(GreaterThanOrEqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)5'), RealmCapitalSmallMapIcon.ShouldShowRealm)]" #King or Empire Rank
	}
}

### TRAVEL PROVINCE
widget = {
	name = "travel_province_widget"
	widgetanchor = center

	datacontext = "[TravelProvinceMapIcon.GetDangerData]"
	datacontext = "[TravelProvinceMapIcon.GetPointsOfInterestData]"

	allow_outside = yes

	flowcontainer = {
		parentanchor = bottom|hcenter
		direction = vertical
		allow_outside = yes
		ignoreinvisible = yes

		widget_character_icon = {
			name = "current_location"

			parentanchor = hcenter

			datacontext = "[GetPlayer]"
			visible = "[TravelProvinceMapIcon.IsCurrentLocation]"

			size = { 84 95 }

			state = {
				name = "map_zoom_close"
				size = { 84 95 }
				duration = 0.25
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far"
				size = { 67 76 }
				duration = 0.25
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}
		}

		container_travel_danger = {
			visible = "[TravelProvinceMapIcon.HasDanger]"
			parentanchor = hcenter
		}

		widget_travel_points_of_interest = {
			visible = "[TravelProvinceMapIcon.HasPointsOfInterest]"
		}

		### Push widgets up when zoomed in
		widget = {
			size = { 2 0 }

			state = {
				name = "map_zoom_0"
				size = { 2 55 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_1"
				size = { 2 35 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_2"
				size = { 2 20 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_3"
				size = { 2 20 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_4"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_5"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_6"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_7"
				size = { 2 0 }
				duration = 0.25
			}

			state = {
				name = "map_zoom_8"
				size = { 2 0 }
				duration = 0.25
			}
		}
	}

	widget_provisions_low = {
		visible = "[TravelProvinceMapIcon.HasTravelProvisionsLow]"
		parentanchor = bottom|hcenter
		position = { 0 35 }
	}

	widget_provisions_critical = {
		visible = "[TravelProvinceMapIcon.HasTravelProvisionsCritical]"
		parentanchor = bottom|hcenter
		position = { 0 35 }
	}
}

flowcontainer = {
	name = "unique_building_widget"
	ignoreinvisible = yes
	widgetanchor = center
	position = { 0 -10 }

	background = {
		using = Background_Area_Dark_Border
		margin_top = 1
		margin_bottom = 4
		margin_right = 3
		margin_left = 3
	}
	datacontext = "[UniqueBuildingIcon]"
	datacontext = "[UniqueBuildingIcon.GetBuildingType]"

	tooltip = "MAP_ICON_UNIQUE_BUILDING"

	icon_building = {
		name = "possible_building"
		visible = "[Not( UniqueBuildingIcon.IsBuilt )]"
		size = { 50 50 }
		texture = "[Building.GetTypeIcon]"

		alpha = "[Select_float( UniqueBuildingIcon.CanConstruct, '(float)1.0', '(float)0.5' )]"


	}

	highlight_icon_building = {
		name = "constructed_building"
		visible = "[UniqueBuildingIcon.IsBuilt]"
		size = { 50 50 }
		texture = "[Building.GetTypeIcon]"

		alpha = "[Select_float( UniqueBuildingIcon.IsEnabled, '(float)1.0', '(float)0.5' )]"
	}
}

types MapIcons
{
	type button_group_court_language_data = button_group
	{
		onclick = "[OpenGameViewData( 'language', CulturePillar.Self )]"
		tooltip = "COURT_LANGUAGE_OPEN_VIEW_TOOLTIP"

		vbox = {
			set_parent_size_to_minimum = yes
			margin ={ 20 0 }
			margin_bottom = 5


			background = {
				using = Background_Area_Dark
				alpha = 0.9

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					blend_mode = alphamultiply
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }

				text_label_center = {
					text = "COURT_LANGUAGE_NAME"
					default_format = "#high"
					using = Font_Size_Medium
					layoutpolicy_horizontal = expanding
					align = center
				}
			}

			text_single = {
				text = "IS_NATIVE_LANGUAGE"
				visible = "[ObjectsEqual( Culture.GetLanguage, CulturePillar.Self )]"
			}

			hbox = {
				margin_left = -4
				icon_culture_pillar = {
					name = "grandeur_icon"
					texture = "gfx/interface/window_roco_grandeur/icon_grandeur.dds"
					size = { 40 40 }
				}
				text_grandeur_from_language = {
					margin_bottom = 8
				}
			}
		}
	}

	type animations_map_coa = widget {
		size = { 10 10 }

		icon = {
			name = "at_war_anim"
			visible = "[CapitalMapIcon.IsAtWarWithMe]"

			parentanchor = center
			texture = "gfx/interface/icons/map_coa/at_war_icon.dds"
			size = { 95% 95% }

			modify_texture = {
				name = anim_mask1
				texture = "gfx/interface/icons/map_coa/at_war_mask.dds"
				blend_mode = alphamultiply

			}

			modify_texture = {
				name = anim_mask2
				texture = "gfx/interface/icons/map_coa/at_war_mask.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = overlay
				texture = "gfx/interface/icons/map_coa/at_war_effect.dds"
				blend_mode = colordodge
			}

			state = {
				name = a
				next = b
				duration = 0.0
				trigger_on_create = yes

				modify_texture = {
					name = anim_mask1
					translate_uv = {0 0 }
				}

				modify_texture = {
					name = anim_mask2
					translate_uv = {0 -1 }
				}
			}

			state = {
				name = b
				next = a
				duration = 10

				modify_texture = {
					name = anim_mask1
					translate_uv = {0 1 }
				}

				modify_texture = {
					name = anim_mask2
					translate_uv = {0 0 }
				}
			}

			state = {
				trigger_on_create = yes
				name = start
				next = right

				duration = 0.0

				modify_texture = {
					name = overlay
					translate_uv = {0 0 }
				}
			}

			state = {
				name = right
				next = left

				duration = 7

				modify_texture = {
					name = overlay
					translate_uv = {0 1 }
				}
			}

			state = {
				name = left
				next = right
				duration = 0.0
				delay = 0

				modify_texture = {
					name = overlay
					translate_uv = {0 -0.6 }
				}
			}
		}

		icon = {
			name = "ally_war_anim"

			block "visible_ally" {
				visible = "[CapitalMapIcon.IsMyAllyInWar]"
			}

			parentanchor = center
			texture = "gfx/interface/icons/map_coa/ally_icon.dds"
			size = { 100% 100% }

			modify_texture = {
				name = overlay
				texture = "gfx/interface/icons/map_coa/ally_effect.dds"
				blend_mode = colordodge
				rotate_uv = 0
			}

			state = {
				name = right
				next = left

				duration = 15

				modify_texture = {
					name = overlay
					rotate_uv = 360
				}
			}

			state = {
				name = left
				next = right

				duration = 0
				delay = 0


				modify_texture = {
					name = overlay
					rotate_uv = 0
				}
			}

			state = {
				trigger_on_create = yes
				name = start
				next = right

				duration = 0.0

				modify_texture = {
					name = overlay
					rotate_uv = 0
				}
			}

			modify_texture = {
				name = overlay2
				texture = "gfx/interface/icons/map_coa/ally_effect.dds"
				blend_mode = colordodge
				rotate_uv = 0
			}

			state = {
				name = right2
				next = left2

				duration = 15

				modify_texture = {
					name = overlay2
					rotate_uv = -360
				}
			}

			state = {
				name = left2
				next = right2

				duration = 0
				delay = 0


				modify_texture = {
					name = overlay2
					rotate_uv = 0
				}
			}

			state = {
				trigger_on_create = yes
				name = start
				next = right

				duration = 0.0

				modify_texture = {
					name = overlay2
					rotate_uv = 0
				}
			}
		}
	}

	type coa_realm_map_big = widget {
		size = { 70 110 }

		container = {
			parentanchor = center
			scale = 1

			state = {
				name = "map_zoom_close"
				scale = 1
				duration = 0.25
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far"
				scale = 0.8
				duration = 0.25
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}

			animations_map_coa = {
				name = "animations"
				parentanchor = center
				position = { 0 -35 }
				size = { 120 110 }
			}

			icon = {
				name = "ally_war_icon"
				visible = "[CapitalMapIcon.IsMyAlly]"
				parentanchor = center
				position = { -8 -30 }

				size = { 72 78 }
				texture = "gfx/interface/icons/map_coa/icon_ally.dds"
			}

			icon = {
				name = "at_war_icon"
				visible = "[CapitalMapIcon.IsAtWarWithMe]"
				parentanchor = center
				position = { 0 -20 }
				size = { 80 80 }
				texture = "gfx/interface/icons/map_coa/icon_at_war_big.dds"
			}


			icon = {
				name = "player_icon"
				visible = "[CapitalMapIcon.GetOwner.IsPlayer]"

				texture = "gfx/interface/icons/map_coa/icon_player.dds"
				framesize = { 156 156 }
				frame = 4

				position = { 0 -10 }
				size = { 100 100 }
				parentanchor = center
			}

			coa_realm_medium_crown = {
				parentanchor = center
			}
		}
	}

	type coa_realm_map_medium = widget {
		size = { 55 80 }


		container = {
			parentanchor = center
			scale = 1

			state = {
				name = "map_zoom_close"
				scale = 1
				duration = 0.25
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far"
				scale = 0.8
				duration = 0.25
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}


			animations_map_coa = {
				name = "animations"
				parentanchor = center
				position = { 0 -25 }
				size = { 85 80 }
			}

			icon = {
				name = "ally_war_icon"
				visible = "[CapitalMapIcon.IsMyAlly]"
				parentanchor = center
				position = { -6 -21 }

				size = { 60 63 }
				texture = "gfx/interface/icons/map_coa/icon_ally.dds"
			}

			icon = {
				name = "at_war_icon"
				visible = "[CapitalMapIcon.IsAtWarWithMe]"
				parentanchor = center
				position = { 0 -20 }
				size = { 55 55 }
				texture = "gfx/interface/icons/map_coa/icon_at_war_big.dds"
			}

			icon = {
				name = "player_icon"
				visible = "[CapitalMapIcon.GetOwner.IsPlayer]"

				texture = "gfx/interface/icons/map_coa/icon_player.dds"
				framesize = { 156 156 }
				frame = 3

				position = { 0 -14 }
				size = { 72 72 }
				parentanchor = center
			}

			coa_realm_small_crown = {
				parentanchor = center
				position = { 0 -5 }
			}
		}
	}

	type coa_realm_map_small = widget {
		size = { 40 50 }

		animations_map_coa = {
			name = "animations"
			parentanchor = center
			position = { 1 -15 }
			size = { 60 65 }
		}

		icon = {
			name = "ally_war_icon"
			visible = "[CapitalMapIcon.IsMyAlly]"
			parentanchor = center
			position = { -4 -15 }

			size = { 42 42 }
			texture = "gfx/interface/icons/map_coa/icon_ally.dds"
		}

		icon = {
			name = "at_war_icon"
			visible = "[CapitalMapIcon.IsAtWarWithMe]"
			parentanchor = center
			position = { 0 -5 }
			size = { 40 40 }
			texture = "gfx/interface/icons/map_coa/icon_at_war_big.dds"
		}

		icon = {
			name = "player_icon"
			visible = "[CapitalMapIcon.GetOwner.IsPlayer]"

			texture = "gfx/interface/icons/map_coa/icon_player.dds"
			framesize = { 156 156 }
			frame = 2

			position = { 0 -7 }
			size = { 48 48 }
			parentanchor = center
		}

		coa_realm_tiny_crown = {
			parentanchor = center
		}
	}

	### Holding
	type flowcontainer_holding_info = flowcontainer  {
		datacontext = "[ProvinceIcon.GetHolding]"
		direction = vertical
		ignoreinvisible = yes
		tooltipwidget = { holding_tooltip = {} }
		allow_outside = yes

		# widget = {
		# 	coa_realm_map_small = {
		# 		datacontext = "[Title.GetLessee]"
		# 		#	visible = "[And(Title.IsLeasedOut,Title.GetLessee.GetPrimaryTitle.IsHolyOrder)]"

		# 		position = { 30 0 }

		# 		tooltip = "[holy_order|E]"
		# 		alwaystransparent = no
		# 		widgetanchor = bottom|left
		# 		allow_outside = yes
		# 	}
		# }

		flowcontainer = {
			parentanchor = hcenter
			allow_outside = yes
			margin_top = -6

			container = {
				name = "name_banner"

				icon = {
					size = { 100% 36 }
					texture = "gfx/interface/icons/banners/banner_blue_center.dds"
					spriteType = Corneredtiled
					spriteborder = { 72 0 }
					spriteborder_right = 114
					texture_density = 4
					using = Holding_Mouse_Entry
				}

				flowcontainer = {
					margin_left = 25
					margin_right = 25
					ignoreinvisible = yes

					button_group = {
						onclick = "[ToggleGameViewData( 'holding_view', Holding.GetProvince )]"

						hbox = {
							set_parent_size_to_minimum = yes

							spacer = {
								size = { 20 20 }
							}

							text_single = {
								snap_to_pixels = no
								margin_top = 8

								text = "[ProvinceIcon.GetTitle.GetNameNoTierNoTooltip]"
								default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
								using = Font_Type_Flavor
								fontsize = 17
							}

							widget = {
								name = "tutorial_highlight_capital_holding"
								size = { 33 33 }
								tooltip = "REALM_CAPITAL_TOOLTIP"
								visible = "[Holding.GetProvince.IsRealmCapital]"

								icon = {
									name = "realm_capital_icon"
									parentanchor = left|vcenter
									position = { 0 1 }
									size = { 38 38 }
									framesize = { 63 63 }
									texture = "gfx/interface/icons/icon_capital.dds"
									frame = 2
								}
							}

							spacer = {
								size = { 20 20 }
							}
						}
					}
				}
			}

			widget = {
				allow_outside = yes
				flowcontainer_unit_items = {
					allow_outside = yes
					visible = "[ProvinceIcon.HasUnits]"
				}
			}
		}

		widget = {
			visible = "[And( Not( Holding.GetHolder.IsAtWar ), ProvinceIcon.HasHoldingDetails )]"
			parentanchor = hcenter
			size = { 150 28 }
			allow_outside = yes

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				margin = { 50 0 }
				margin_top = 20
				margin_bottom = 20
				alpha = 0.6
			}

			flowcontainer = {
				name = "holding_info"
				parentanchor = center
				ignoreinvisible = yes
				allow_outside = yes

				widget = {
					allow_outside = yes

					flowcontainer = {
						position = { -10 0 }
						widgetanchor = right
						ignoreinvisible = yes

						icon = {
							visible = "[Holding.CanConstructAnyBuilding(GetPlayer)]"
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/map_icons/county_building_available.dds"
							tooltip = "MY_REALM_WINDOW_CONSTRUCT_BUILDING"
						}

						icon = {
							visible = "[Holding.IsLowControl]"
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/map_icons/county_low_control.dds"
							tooltip = "MY_REALM_WINDOW_MAP_ICON_LOW_CONTROL"
						}
					}
				}

				flowcontainer = {
					spacing = 3

					icon = {
						parentanchor = vcenter
						size = { 25 25 }
						texture = "gfx/interface/icons/icon_gold.dds"
					}

					text_single = {
						name = "tax_text"
						snap_to_pixels = no
						text = "[Holding.GetIncome|1]"
						default_format = "#high"
						align = nobaseline
						fontsize = 17
						margin_top = 5 #LotR
					}
				}

				spacer = {
					size = { 10 10 }
				}

				flowcontainer = {
					spacing = 3

					icon = {
						parentanchor = vcenter
						size = { 25 25 }
						texture = "gfx/interface/icons/icon_soldier.dds"
					}

					text_single = {
						name = "levies_text"
						snap_to_pixels = no
						text = "[Holding.GetMaxLevySize]"
						default_format = "#high"
						align = nobaseline
						fontsize = 17
						margin_top = 5 #LotR
					}
				}
			}
		}

		widget = {
			parentanchor = hcenter
			visible = "[And( Holding.GetHolder.IsAtWar, ProvinceIcon.HasHoldingDetails )]"

			#using = Animation_MapIcon_Fade
			#blockoverride "icon_size"
			#{
			size = { 150 28 }
			#}

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				margin = { 50 0 }
				margin_top = 15
				margin_bottom = 20
				alpha = 0.6
			}

			flowcontainer = {
				name = "holding_info_war"
				parentanchor = center
				ignoreinvisible = yes

				widget = {
					flowcontainer = {
						position = { -10 0 }
						widgetanchor = right
						ignoreinvisible = yes

						icon = {
							visible = "[Holding.CanConstructAnyBuilding(GetPlayer)]"
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/map_icons/county_building_available.dds"
							tooltip = "MY_REALM_WINDOW_CONSTRUCT_BUILDING"
						}

						icon = {
							visible = "[Holding.IsLowControl]"
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/map_icons/county_low_control.dds"
							tooltip = "MY_REALM_WINDOW_MAP_ICON_LOW_CONTROL"
						}
					}
				}

				flowcontainer = {
					spacing = 3

					icon = {
						size = { 25 25 }
						texture = "gfx/interface/icons/text_icons/icon_holding.dds"
					}

					text_single = {
						name = "fort_text"
						datacontext = "[ProvinceIcon.GetProvince]"
						visible = "[Province.HasFort]"
						snap_to_pixels = no

						text = "[Province.GetFortLevel]"
						default_format = "#high"
						align = nobaseline
						fontsize = 17
						margin_top = 5 #LotR
					}
				}

				spacer = {
					size = { 10 10 }
				}

				flowcontainer = {
					spacing = 3

					icon = {
						size = { 25 25 }
						texture = "gfx/interface/icons/icon_garrison.dds"
					}

					text_single = {
						name = "garrison_text"
						snap_to_pixels = no

						text = "[Holding.GetCurrentGarrisonSize]"
						default_format = "#high"
						align = nobaseline
						fontsize = 17
						margin_top = 5 #LotR
					}
				}
			}
		}
	}

	### CHARACTER
	type widget_character_icon = widget {
		button = {
			name = "portrait_pin"
			parentanchor = bottom|hcenter

			texture = "gfx/interface/icons/map_icons/portrait_pin.dds"
			# Using percentages so it's relative to the size of the top widget
			size = { 100% 100% }

			tooltip = "[Character.GetLocationDesc]"
			onclick = "[DefaultOnCharacterClick(Character.GetID)]"

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.1 0.1 0.1 1 }
				margin = { 20 20 }
				alpha = 0.5
			}

			block "widget_character_icon_overrides" { }

			portrait_button = {
				parentanchor = bottom|hcenter
				# Using percentages so it's relative to the size of the top widget
				size = { 95% 105% }
				using = portrait_base
				portrait_texture = "[Character.GetPortrait('environment_head', 'camera_shoulders', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				mask = "gfx/portraits/portrait_mask_map.dds"
				effectname = "NoHighlight"

				using = Portrait_Background_Glows

				block "portrait_button_properties" { }

				highlight_icon = {
					name = "prison_bars"
					visible = "[Character.IsImprisoned]"
					visible_at_creation = no
					size = { 100% 100% }
					parentanchor = center
					effectname = "NoHighlight"
					texture = "gfx/portraits/portrait_prison_shoulders.dds"

					modify_texture = {
						name = "mask"
						texture =  "gfx/portraits/portrait_mask_map.dds"
						spriteType = Corneredstretched
						blend_mode = alphamultiply
					}
				}
			}
		}
	}

	type button_rally_point = button_normal {
		name = "rally_point_button"
		size = { 34 34 }
		texture = "gfx/interface/window_military/banner_icon.dds"
		tintcolor = "[RallyPoint.GetIconColor]"

		block "rally_point_click" {
			onclick = "[RallyPointMapIcon.OnClick]"
		}

		tooltip = "RP_TOOLTIP_CLICK"
	}

	type flowcontainer_active_tasks = flowcontainer {
		spacing = 6
		margin = { 5 5 }

		item = {
			icon = {
				visible = "[Not( ActiveCouncilTask.IsFrozen )]"
				texture = "gfx/interface/icons/map_icons/map_council_task_base.dds"
				size = { 52 52 }

				tooltipwidget = {
					container = {
						using = DefaultTooltipBackground
						using = GeneralTooltipSetup
						layoutpolicy_horizontal = preferred
						alwaystransparent = no
						flowcontainer = {
							layoutpolicy_horizontal = preferred
							ignoreinvisible = yes
							text_single = {
								name = "frozen"
								margin = { 12 12 }
								margin_top = 3

								text = ACTIVE_COUNCIL_TASK_FROZEN_TT
								visible = "[ActiveCouncilTask.IsFrozen]"
							}

							council_task_map_icon_tooltip_widget = {
								name = "active"
								visible = "[Not( ActiveCouncilTask.IsFrozen )]"
							}
						}
					}
				}

				progresspie = {
					name = "progress"
					parentanchor = center
					size = { 46 46 }
					texture = "gfx/interface/progressbars/action_progress_thick.dds"
					framesize = { 128 128 }
					frame = 2
					value = "[ActiveCouncilTask.GetProgressPie]"
					min = 0
					max = 1
				}

				button_normal = {
					name = "council_task"
					parentanchor = center
					alwaystransparent = no
					texture = "[ActiveCouncilTask.GetTaskType.GetIcon]"
					framesize = { 140 140 }
					size = { 38 38 }
					onclick = "[ProvinceIcon.OnActiveTaskClick( ActiveCouncilTask.Self )]"
				}

				highlight_icon = {
					name = "inactive"
					parentanchor = center
					size = { 15 15 }
					texture = "gfx/interface/icons/symbols/icon_cross.dds"
					visible = "[ActiveCouncilTask.IsFrozen]"
				}
			}
		}
	}


	### Brief: widget_lobby_helper_landless_ruler_count
	#
	# Needs datacontext:
	#	Province
	#		The Province being checked.
	#	LobbyHelperWindow
	#		Has access to the helper functions needed for filtering.
	#
	type widget_lobby_helper_landless_ruler_count = widget {

		state = {
			name = _show
			using = Animation_FadeIn_Standard
		}

		background = {
			texture = "gfx/interface/icons/icon_bg_small.dds"
		}

		text_single = {
			parentanchor = center
			
			text = lobby_more_domiciles_count
			align = center
			default_format = "#strong_glow;high"

			using = Font_Size_Small
		}
	}

	type widget_landless_ruler_pin = widget_character_icon
	{
		allow_outside = yes
		block "pins_size"
		{
			size = { 67 76 }
		}

		blockoverride "widget_character_icon_overrides"
		{
			visible = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
		}

		blockoverride "portrait_button_properties"
		{
			using = tooltip_se
		}

		icon = {
			size = { 32 32 }
			position = { 0 -16 }
			parentanchor = top|hcenter
			visible = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"

			texture = "[Character.GetGovernment.GetIcon]"
		}

		coa_realm_tiny = {
			parentanchor = bottom|left

			using = tooltip_se
		}
	}

	type domicile_location_icon = widget
	{
		name = "domicile_icon"
		datacontext = "[GetPlayer]"
		size = { 96 96 }

		allow_outside = yes
		alwaystransparent = no

		tooltip = "[Domicile.GetMapPinTooltip( Character.Self )]"

		state = {
			name = _mouse_hierarchy_enter
			on_start = "[GetVariableSystem.Toggle( 'open_camp_contextual_buttons' )]"
			on_finish = "[GetVariableSystem.Toggle( 'open_camp_contextual_buttons' )]"
		}

		state = {
			name = _mouse_hierarchy_leave
			on_finish = "[GetVariableSystem.Clear( 'open_camp_contextual_buttons' )]"
		}

		state = {
			name = "map_zoom_close"
			# We animate the size, and not the scale, so the flowcontainer works nicely
			size = { 96 96 }
			duration = 0.25
			trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
		}

		state = {
			name = "map_zoom_far"
			# We animate the size, and not the scale, so the flowcontainer works nicely
			size = { 48 48 }
			duration = 0.25
			trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
		}

		### Glow animation when construction completed
		icon = {
			datacontext = "[GetPlayer.GetDomicile]"
			visible = "[Domicile.ShowBuildingNotification]"
			parentanchor = center
			size = { 100% 100% }

			texture = "gfx/interface/colors/white.dds"

			using = Color_Bright_Yellow

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Quick
			}

			### Glow shine animation
			state = {
				name = "a"
				next = "b"
				trigger_on_create = yes
				alpha = 0.5

				modify_texture = {
					name = "glow_1"
					rotate_uv = 0
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 0
				}
			}

			state = {
				name = "b"
				next = "a"
				duration = 15

				modify_texture = {
					name = "glow_1"
					rotate_uv = 360
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 360
				}
			}

			modify_texture = {
				name = "glow_1"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "glow_2"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		### Map pin graphics
		button = {
			size = { 100% 100% }

			onclick = "[ToggleGameViewData( 'domicile', GetPlayer.GetDomicile )]"

			### Domicile pin background
			highlight_icon = {
				parentanchor = center
				size = { 75% 75% }

				texture = "gfx/interface/window_domiciles/domicile_location_map_pin_background.dds"
			}

			### Arrow Pointer
			highlight_icon = {
				visible = "[Domicile.GetType.HasMapPinAnchor( 'up' )]"
				parentanchor = bottom|hcenter
				size = { 75% 22% }

				texture = "gfx/interface/window_domiciles/domicile_location_map_pin_arrow.dds"
			}

			### Domicile type icon
			highlight_icon = {
				datacontext = "[GetPlayer.GetDomicile]"
				parentanchor = center
				position = { 0 -2 }
				size = { 37% 37% }

				alwaystransparent = yes

				texture = "[Domicile.GetType.GetMapPinTexture]"
			}

			### Domicile building construction progress
			progresspie = {
				name = "construction_progress_close"
				datacontext = "[GetPlayer.GetDomicile]"
				visible = "[Domicile.IsConstructing]"
				parentanchor = center
				size = { 56% 56% }

				texture = "gfx/interface/progressbars/progressbar_domicile.dds"
				framesize = { 128 128 }
				frame = 2
				value = "[Domicile.GetConstructionProgress]"

				min = 0
				max = 1
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			position = { -60 -25 }
			spacing = 0
			visible = "[GetVariableSystem.Exists( 'open_camp_contextual_buttons' )]"
			allow_outside = yes
			visible_at_creation = no
			
			state = {
				name = "map_zoom_close_buttons"
				position = { -60 -25 }
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far_buttons"
				position = { -40 -50 }
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			button_round = {
				size = { 50 50 }
				name = "visit_local_settlement_decision"
				datacontext = "[GetDecisionWithKey('visit_local_settlement_decision')]"
				visible = "[Decision.IsShownForPlayer]"
				enabled = "[Decision.IsPossibleForPlayer]"

				onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
				using = tooltip_ws

				tooltipwidget = {
					decision_tooltip = {}
				}

				icon = {
					parentanchor = center
					size = { 50 50 }
					alwaystransparent = yes

					texture = "gfx/interface/icons/travel/icon_visit_settlement.dds"
				}

				background = {
					alpha = 0.9
					margin = { 1.5 1.5 }

					using = Background_Area_Solid

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_circle.dds"
						blend_mode = alphamultiply
					}
				}
			}

			button_round = {
				size = { 50 50 }
				name = "gather_provisions_decision"
				datacontext = "[GetDecisionWithKey('gather_provisions_decision')]"
				visible = "[Decision.IsShownForPlayer]"
				enabled = "[Decision.IsPossibleForPlayer]"

				onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
				using = tooltip_ws

				tooltipwidget = {
					decision_tooltip = {}
				}

				icon = {
					parentanchor = center
					size = { 40 40 }
					alwaystransparent = yes

					texture = "gfx/interface/icons/travel/icon_gather_provisions.dds"
				}

				background = {
					alpha = 0.9
					margin = { 1.5 1.5 }

					using = Background_Area_Solid

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_circle.dds"
						blend_mode = alphamultiply
					}
				}
			}

			button_round = {
				size = { 50 50 }
				name = "move_camp_quick_button"
				datacontext = "[GetPlayer.GetDomicile]"
				visible = "[GetPlayer.GetGovernment.IsType('landless_adventurer_government')]"

				enabled = "[Domicile.CanMove]"
				onclick = "[OpenGameView( 'move_domicile_planner' )]"

				tooltip = "[Domicile.GetType.GetMoveTooltip( Character.Self )]"
				tooltip_when_disabled = "[Domicile.GetMoveTooltip]"
				using = tooltip_ws

				icon = {
					parentanchor = center
					size = { 35 35 }
					alwaystransparent = yes

					texture = "gfx/interface/icons/travel/icon_travel_hud_placeholder.dds"
				}

				background = {
					alpha = 0.9
					margin = { 1.5 1.5 }

					using = Background_Area_Solid

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_circle.dds"
						blend_mode = alphamultiply
					}
				}
			}

			button_round = { #LotR
				size = { 50 50 }
				name = "settle_wilderness_adventurer_decision"
				datacontext = "[GetDecisionWithKey('settle_wilderness_county_or_duchy_decision')]"
				visible = "[Decision.IsShownForPlayer]"
				enabled = "[Decision.IsPossibleForPlayer]"

				onclick = "[OpenGameViewData( 'decision_detail', Decision.Self)]"
				using = tooltip_ws

				tooltipwidget = {
					decision_tooltip = {}
				}

				icon = {
					parentanchor = center
					size = { 42 42 }
					alwaystransparent = yes

					texture = "gfx/interface/icons/concept_icons/conceptwilderness.dds"
				}

				background = {
					alpha = 0.9
					margin = { 1.5 1.5 }

					using = Background_Area_Solid

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_circle.dds"
						blend_mode = alphamultiply
					}
				}
			}
		}
	}

	type task_contract_location_icon = widget
	{
		name = "task_contract_icon" # This name is used by reactive advise - do not change it
		allow_outside = yes
		datacontext = "[GetPlayer]"

		state = {
			name = "map_zoom_close"
			# We animate the size, and not the scale, so the flowcontainer works nicely
			size = { 84 85 }
			duration = 0.25
			trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
		}

		state = {
			name = "map_zoom_far"
			# We animate the size, and not the scale, so the flowcontainer works nicely
			size = { 42 43 }
			duration = 0.25
			trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
		}

		size = { 66 67 }
		alwaystransparent = no

		icon = {
			visible = "[Not( TaskContract.IsOpened)]"
			texture = "gfx/interface/colors/white.dds"
			using = Color_Bright_Yellow
			size = { 100% 100% }
			parentanchor = center

			### Glow shine animation
			state = {
				name = "a"
				next = "b"
				trigger_on_create = yes
				alpha = 1

				modify_texture = {
					name = "glow_1"
					rotate_uv = 0
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 0
				}
			}

			state = {
				name = "b"
				next = "a"
				duration = 15

				modify_texture = {
					name = "glow_1"
					rotate_uv = 360
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 360
				}
			}

			modify_texture = {
				name = "glow_1"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "glow_2"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		### Contract inside accept range
		button = {

			size = { 100% 100% }
			video_icon = {
				visible = "[Not( TaskContract.IsOpened)]"
				size = { 95% 95% }
				gfxtype = videogfx
				shaderfile = ""
				video = "gfx/interface/video/header_animation.bk2"
				loop = yes

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphamultiply
					alpha = 0.2
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
					blend_mode = alphamultiply
					alpha = 0.9
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
					blend_mode = alphamultiply
					alpha = 0.5
				}

			}

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/contract_arrow.dds"
			}

			icon = {
				visible = "[And( TaskContract.IsEasy, Not(TaskContract.IsCriminal) )]"
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/pin_contract_1.dds"
			}
			icon = {
				visible = "[And( TaskContract.IsEasy, TaskContract.IsCriminal )]"
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/pin_contract_1_crime.dds"
			}

			icon = {
				visible = "[And( TaskContract.IsMedium, Not(TaskContract.IsCriminal) )]"
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/pin_contract_2.dds"
			}
			icon = {
				visible = "[And( TaskContract.IsMedium, TaskContract.IsCriminal )]"
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/pin_contract_2_crime.dds"
			}

			icon = {
				visible = "[And( TaskContract.IsHard, Not(TaskContract.IsCriminal) )]"
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/pin_contract_3.dds"
			}
			icon = {
				visible = "[And( TaskContract.IsHard, TaskContract.IsCriminal )]"
				size = { 100% 100% }
				texture = "gfx/interface/window_contract/pin_contract_3_crime.dds"
			}

			highlight_icon = {
				parentanchor = center
				alwaystransparent = yes
				texture = "[TaskContract.GetType.GetIcon]"
				size = { 40% 40% }
				position = { 0 -2 }
			}

			icon = {
				visible = "[Not( TaskContract.IsOpened)]"
				texture = "gfx/interface/window_contract/contract_map_pin_highlight.dds"
				size = { 64% 64% }
				parentanchor = center
				position = { 0 -3 }
			}

			onclick = "[ToggleGameViewData('task_contract', TaskContract.Self )]"
			tooltip = "[TaskContract.GetName]"
			using = tooltip_ne
		}
	}

	type activity_location_icon = widget
	{
		name = "activity_icon"
		alwaystransparent = no

		state = {
			name = "map_zoom_close"
			# We animate the size, and not the scale, so the flowcontainer works nicely
			size = { 94 102 }
			duration = 0.25
			trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
		}

		state = {
			name = "map_zoom_far"
			# We animate the size, and not the scale, so the flowcontainer works nicely
			size = { 63 70 }
			duration = 0.25
			trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
		}

		visible = "[ProvinceIcon.HasActivity]"

		size = { 94 102 }

		datacontext = "[GetPlayer]"
		tooltip = "TT_ACTIVITY_WIDGET"

		button = {
			size = { 100% 100% }
			visible = "[Activity.IsParticipant( Character.Self )]"

			icon = {
				visible = "[Activity.GetType.IsGrandActivity]"
				texture = "gfx/interface/window_activities/pin_grand_activity_location.dds"
				size = { 100% 100% }
			}

			icon = {
				visible = "[Not( Activity.GetType.IsGrandActivity )]"
				texture = "gfx/interface/window_activities/pin_activity_location.dds"
				size = { 100% 100% }
			}

			onclick = "[Activity.OpenActivityView]"

			highlight_icon = {
				parentanchor = center
				alwaystransparent = yes
				texture = "[Activity.GetType.GetIcon]"
				size = { 40% 40% }
				position = { 0 -6 }
			}
		}

		button = {
			size = { 100% 100% }
			visible = "[Not(Activity.IsParticipant( Character.Self ))]"

			icon = {
				visible = "[Activity.GetType.IsGrandActivity]"
				texture = "gfx/interface/window_activities/pin_grand_activity_location.dds"
				size = { 100% 100% }
			}

			icon = {
				visible = "[Not( Activity.GetType.IsGrandActivity )]"
				texture = "gfx/interface/window_activities/pin_activity_location.dds"
				size = { 100% 100% }
			}

			onclick = "[ToggleGameView('activity_list_window')]"

			highlight_icon = {
				parentanchor = center
				alwaystransparent = yes
				texture = "[Activity.GetType.GetIcon]"
				size = { 40% 40% }
				position = { 0 -6 }
			}
		}
	}

	type flowcontainer_warfare_status = flowcontainer {
		allow_outside = yes
		ignoreinvisible = yes

		block "spacer_widget" {}

		button_rally_point = {
			datacontext = "[ProvinceIcon.GetRallyPoint]"
			visible = "[ProvinceIcon.HasRallyPoint]"
			parentanchor = vcenter

			blockoverride "rally_point_click" {
				onclick = "[ProvinceIcon.OnRallyPointClick]"
			}
		}

		flowcontainer = {
			parentanchor = vcenter
			direction = vertical
			ignoreinvisible = yes

			flowcontainer = {
				visible = "[ProvinceIcon.HasSiegeGroup]"
				ignoreinvisible = yes
				parentanchor = vcenter
				margin_bottom = 25
				allow_outside = yes

				button_group_siege = {
					datacontext = "[ProvinceIcon.GetSiege]"
					visible = "[ProvinceIcon.HasSiege]"
					parentanchor = vcenter
				}

				button_group_raid = {
					datacontext = "[ProvinceIcon.GetRaid]"
					visible = "[ProvinceIcon.HasRaid]"
					parentanchor = vcenter
				}

				icon = {
					datacontext = "[ProvinceIcon.GetProvince]"
					visible = "[ProvinceIcon.HasBeenRaided]"
					parentanchor = vcenter
					name = "recently_raided_icon"
					texture = "gfx/interface/icons/map_icons/recently_raided.dds"
					size = { 35 35 }
					tooltip = "RECENTLY_RAIDED_TOOLTIP"
				}
			}
		}
	}

	type widget_combat_icon = widget {
		name = "combat_widget"
		datacontext = "[ProvinceIcon.GetCombatIcon]"
		datacontext = "[CombatMapIcon.GetCombat]"

		button_group = {
			parentanchor = hcenter
			onclick = "[CombatMapIcon.OnClick]"
			tooltip = "COMBAT_ON_MAP_TOOLTIP"
			using = tooltip_below

			container = {
				position = { 0 6 }

				button_normal = {
					name = "left_side_bg"
					visible = "[CombatMapIcon.LeftIsPlayer]"
					texture = "gfx/interface/icons/map_icons/army_bg_me.dds"
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}

				button_normal = {
					name = "left_side_bg_ally"
					visible = "[CombatMapIcon.LeftIsAlly]"
					texture = "gfx/interface/icons/map_icons/army_bg_ally.dds"
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}

				button_normal = {
					name = "left_side_bg_neutral"
					visible = "[CombatMapIcon.LeftIsNeutral]"
					texture = "gfx/interface/icons/map_icons/army_bg_neutral.dds"
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}

				button_normal = {
					name = "left_side_bg_enemyl"
					visible = "[Or( CombatMapIcon.LeftIsEnemy, CombatMapIcon.LeftIsHostile )]"
					texture = "gfx/interface/icons/map_icons/army_bg_enemy.dds"
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}
			}

			container = {
				position = { 80 6 }

				button = {
					name = "right_side_bg_me"
					visible = "[CombatMapIcon.RightIsPlayer]"
					texture = "gfx/interface/icons/map_icons/army_bg_me.dds"
					mirror = horizontal
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}

				button = {
					name = "right_side_bg_ally"
					visible = "[CombatMapIcon.RightIsAlly]"
					texture = "gfx/interface/icons/map_icons/army_bg_ally.dds"
					mirror = horizontal
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}

				button = {
					name = "right_side_bg_neutral"
					visible = "[CombatMapIcon.RightIsNeutral]"
					texture = "gfx/interface/icons/map_icons/army_bg_neutral.dds"
					mirror = horizontal
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}

				button = {
					name = "right_side_bg"
					visible = "[Or( CombatMapIcon.RightIsEnemy, CombatMapIcon.RightIsHostile )]"
					texture = "gfx/interface/icons/map_icons/army_bg_enemy.dds"
					mirror = horizontal
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}
			}

			progressbar = {
				name = "power_progressbar"
				parentanchor = top|hcenter
				position = { 0 30 }
				size = { 150 12 }
				progresstexture = "gfx/interface/progressbars/onmap_progress_blue.dds"

				noprogresstexture = "gfx/interface/progressbars/onmap_progress_red.dds"
				value = "[Combat.GetPowerSlider]"
				direction = horizontal
				alwaystransparent = yes
			}

			button = {
				name = "combat_icon"
				parentanchor = center
				alwaystransparent = no
				texture = "gfx/interface/icons/map_icons/combat_map_icon.dds"
				size = { 40 40 }
			}
		}

		background = {
			name = "unit_highlight"
			visible = "[CombatMapIcon.IsSelected]"
			texture = "gfx/interface/icons/map_icons/army_selected.dds"
			spriteType = Corneredtiled
			spriteborder = { 20 5 }
			margin_left = -38
			margin_right = -26
			margin_top = -6
			margin_bottom = -2
		}

		coa_realm_small = {
			name = "left_realm_flag"
			parentanchor = hcenter
			position = { -92 1 }
			datacontext = "[Combat.GetLeftSideResult.GetMainParticipant]"
			using = tooltip_below
		}

		coa_realm_small = {
			name = "right_realm_flag"
			parentanchor = hcenter
			position = { 92 1 }
			datacontext = "[Combat.GetRightSideResult.GetMainParticipant]"
			using = tooltip_below
		}

		flowcontainer = {
			parentanchor = hcenter
			position = { -42 8 }

			text_single = {
				name = "soldiers_left"
				parentanchor = vcenter
				text = "[Combat.GetLeftSide.GetCurrentFightingMen|0]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				snap_to_pixels = no
				max_width = 40
				fontsize_min = 12
				align = nobaseline
			}

			icon = {
				name = "unit_quality_left"
				texture = "gfx/interface/icons/army_quality_icon.dds"
				framesize = { 32 32 }
				size = { 22 22 }
				frame = "[Combat.GetLeftSide.GetComposition.CalcQualityLevel]"
			}
		}

		flowcontainer = {
			parentanchor = hcenter
			position = { 45 8 }

			text_single = {
				name = "soldiers_right"
				text = "[Combat.GetRightSide.GetCurrentFightingMen|0]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				snap_to_pixels = no
				max_width = 40
				fontsize_min = 12
				align = nobaseline
			}

			icon = {
				name = "unit_quality_right"
				texture = "gfx/interface/icons/army_quality_icon.dds"
				framesize = { 32 32 }
				size = { 22 22 }
				frame = "[Combat.GetRightSide.GetComposition.CalcQualityLevel]"
			}
		}
	}

	type widget_combat_icon_small = widget {
		name = "combat_widget"
		datacontext = "[ProvinceIcon.GetCombatIcon]"
		datacontext = "[CombatMapIcon.GetCombat]"

		button_group = {
			parentanchor = hcenter
			onclick = "[CombatMapIcon.OnClick]"
			tooltip = "COMBAT_ON_MAP_TOOLTIP"
			using = tooltip_below

			background = {
				using = Background_Area_Light
				spriteType = Corneredtiled
				spriteborder = { 20 5 }
				margin = { 10 3 }
				margin_top = -10
			}

			container = {
				position = { 0 6 }

				button_normal = {
					name = "left_side_bg_neutral"
					texture = "gfx/interface/icons/map_icons/army_bg_neutral.dds"
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}
			}

			container = {
				position = { 80 6 }

				button = {
					name = "right_side_bg_neutral"
					texture = "gfx/interface/icons/map_icons/army_bg_neutral.dds"
					mirror = horizontal
					size = { 82 27 }
					framesize = { 164 54 }
					frame = 4
				}
			}

			progressbar = {
				name = "power_progressbar"
				parentanchor = top|hcenter
				position = { 0 30 }
				size = { 156 10 }
				progresstexture = "gfx/interface/progressbars/onmap_progress_blue.dds"

				noprogresstexture = "gfx/interface/progressbars/onmap_progress_red.dds"
				value = "[Combat.GetPowerSlider]"
				direction = horizontal
				alwaystransparent = yes
			}

			button = {
				name = "combat_icon"
				parentanchor = center
				alwaystransparent = no
				texture = "gfx/interface/icons/map_icons/combat_map_icon.dds"
				size = { 40 40 }
			}
		}

		background = {
			name = "unit_highlight"
			visible = "[CombatMapIcon.IsSelected]"
			texture = "gfx/interface/icons/map_icons/army_selected.dds"
			spriteType = Corneredtiled
			spriteborder = { 20 5 }
			margin_left = -34
			margin_right = -24
			margin_top = -7
			margin_bottom = -3
		}

		coa_realm_tiny = {
			name = "left_realm_flag"
			parentanchor = hcenter
			position = { -88 3 }
			datacontext = "[Combat.GetLeftSideResult.GetMainParticipant]"
			using = tooltip_below
		}

		coa_realm_tiny = {
			name = "right_realm_flag"
			parentanchor = hcenter
			position = { 88 3 }
			datacontext = "[Combat.GetRightSideResult.GetMainParticipant]"
			using = tooltip_below
		}

		flowcontainer = {
			parentanchor = hcenter
			position = { -42 5 }

			text_single = {
				name = "soldiers_left"
				parentanchor = vcenter
				text = "[Combat.GetLeftSide.GetCurrentFightingMen|0]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				snap_to_pixels = no
				max_width = 40
				fontsize_min = 12
			}

			icon = {
				name = "unit_quality_left"
				texture = "gfx/interface/icons/army_quality_icon.dds"
				framesize = { 32 32 }
				size = { 22 22 }
				frame = "[Combat.GetLeftSide.GetComposition.CalcQualityLevel]"
			}
		}

		flowcontainer = {
			parentanchor = hcenter
			position = { 45 5 }

			text_single = {
				name = "soldiers_right"
				text = "[Combat.GetRightSide.GetCurrentFightingMen|0]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				snap_to_pixels = no
				max_width = 40
				fontsize_min = 12
			}

			icon = {
				name = "unit_quality_right"
				texture = "gfx/interface/icons/army_quality_icon.dds"
				framesize = { 32 32 }
				size = { 22 22 }
				frame = "[Combat.GetRightSide.GetComposition.CalcQualityLevel]"
			}
		}
	}

	type flowcontainer_unit_items = flowcontainer {
		datacontext = "[ProvinceIcon.GetUnitIcon]"
		position = { 15 0 }
		direction = vertical
		ignoreinvisible = yes

		alpha = 1

		state = {
			name = map_zoom_in
			trigger_when = "[ProvinceIcon.HasUnits]"
			using = Animation_FadeIn_Standard
		}

		state = {
			name = map_zoom_out
			trigger_when = "[Not( ProvinceIcon.HasUnits )]"
			using = Animation_FadeOut_Standard
		}

		widget_unit_icon_item = {
			visible = "[ProvinceIcon.HasUnits]"
		}
	}

	type flowcontainer_realm_capital = flowcontainer {
		name = "realm_capital_widget"
		ignoreinvisible = yes

		block "capital_datacontext" {
			datacontext = "[ProvinceIcon.GetOwner]"
		}

		coa_realm_map_small = {
			block "coa_realm_map_small_visible" {
				visible = "[EqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)3')]" #Count Rank
			}
		}

		coa_realm_map_medium = {
			block "coa_realm_map_medium_visible" {
				visible = "[EqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)4')]" #Duke Rank
			}
		}

		coa_realm_map_big = {
			block "coa_realm_map_big_visible" {
				visible = "[GreaterThanOrEqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)5')]" #King or Empire Rank
			}
		}
	}

	type container_travel_danger = container
	{
		datacontext = "[TravelDangerMapIconData.GetDangerType]"

		# Glow (needs to be first to be under the other icon)
		# Danger - Safety is above TRAVEL_DANGER_ICON_DANGEROUS_VALUE
		icon = {
			visible = "[And( TravelDangerMapIconData.IsUnsafe, TravelDangerMapIconData.IsDangerous )]"
			texture = "gfx/interface/icons/travel_danger_types/dangerous_glow.dds"
			size = { 60 60 }

			# Glow pulse animation
			state = {
				name = a
				next = b
				trigger_on_create = yes
				duration = 1
				alpha = 0
			}

			state = {
				name = b
				next = a
				duration = 1
				alpha = 1
			}
		}

		# Danger - Safety is between TRAVEL_DANGER_ICON_UNSAFE_THRESHOLD and TRAVEL_DANGER_ICON_DANGEROUS_VALUE
		icon = {
			visible = "[TravelDangerMapIconData.IsUnsafe]"
			texture = "[TravelDangerType.GetIconActive]"
			parentanchor = bottom|hcenter
			size = { 60 60 }
		}

		# Danger - Safety is under TRAVEL_DANGER_ICON_UNSAFE_THRESHOLD
		icon = {
			visible = "[Not( TravelDangerMapIconData.IsUnsafe )]"
			texture = "[TravelDangerType.GetIconInactive]"
			parentanchor = bottom|hcenter
			size = { 45 45 }
		}
	}

	type widget_provisions_low = widget
	{
		name = "travel_provisions_low"
		allow_outside = yes

		tooltip = "MAP_ICON_PROVISIONS_LOW_TT"
		tooltip_offset = { 50 -46 }

		icon = {
			size = { 50 50 }
			parentanchor = center
			texture = "gfx/interface/icons/map_icons/provision_travel_warning_bg.dds"

			glow = {
				using = Color_Red
				glow_radius = 3
				using = Glow_Standard
				alpha = 0
			}

			state = {
				name = a
				next = b

				glow_alpha = 1
				duration = 1
				trigger_on_create = yes

				using = Animation_Curve_Default
			}

			state = {
				name = b
				next = a

				glow_alpha = 0
				duration = 1

				using = Animation_Curve_Default
			}
		}

		icon = {
			name = "provisions_low"
			parentanchor = center
			position = { 0 3 }
			size = { 30 30 }

			framesize = { 60 60 }
			frame = 2
			texture = "gfx/interface/icons/icon_camp_supply.dds"
		}
	}

	type widget_provisions_critical = widget
	{
		name = "travel_provisions_critical"
		allow_outside = yes

		tooltip = "MAP_ICON_PROVISIONS_CRITICAL_TT"
		tooltip_offset = { 50 -46 }

		icon = {
			size = { 50 50 }
			parentanchor = center
			texture = "gfx/interface/icons/map_icons/provision_travel_warning_bg.dds"

			glow = {
				using = Color_Red
				glow_radius = 3
				using = Glow_Standard
				alpha = 0
			}

			state = {
				name = a
				next = b

				glow_alpha = 1
				duration = 1
				trigger_on_create = yes

				using = Animation_Curve_Default
			}

			state = {
				name = b
				next = a

				glow_alpha = 0
				duration = 1

				using = Animation_Curve_Default
			}
		}

		icon = {
			name = "provisions_critical"
			parentanchor = center
			position = { 0 3 }
			size = { 30 30 }

			framesize = { 60 60 }
			frame = 3
			texture = "gfx/interface/icons/icon_camp_supply.dds"
		}

		icon = {
			parentanchor = center
			position = { 13 -6 }
			size = { 10 24 }
			texture = "gfx/interface/icons/map_icons/provision_travel_warning_exclamation_mark.dds"

			state = {
				name = a
				next = b
				delay = 2

				trigger_on_create = yes
				duration = 0.3
				position = { 14 -9 }
				scale = 1.4

				using = Animation_Curve_Default
			}

			state = {
				name = b
				next = c

				duration = 0.3
				position = { 13 -6 }
				scale = 1

				using = Animation_Curve_Default
			}

			state = {
				name = c
				next = d

				duration = 0.3
				position = { 14 -9 }
				scale = 1.4

				using = Animation_Curve_Default
			}

			state = {
				name = d
				next = a

				duration = 0.3
				position = { 13 -6 }
				scale = 1

				using = Animation_Curve_Default
			}
		}
	}

	type widget_travel_points_of_interest = widget
	{
		parentanchor = hcenter

		alwaystransparent = yes

		size = { 30 32 }

		state = {
			name = "map_zoom_close"
			size = { 40	43 }
			duration = 0.25
			trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
		}

		state = {
			name = "map_zoom_far"
			size = { 30	32 }
			duration = 0.25
			trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
		}

		tooltipwidget = {
			using = point_of_interest_tooltip
		}

		icon = {
			texture = "gfx/interface/icons/map_icons/point_of_interest_pin.dds"
			parentanchor = bottom|hcenter
			size = { 100% 100% }

			state = {
				name = InvisGlow
				next = VisibleGlow
				trigger_on_create = yes
				duration = 2
				glow_alpha = 0
			}

			state = {
				name = VisibleGlow
				next = InvisGlow
				duration = 2
				glow_alpha = 1
			}

			glow = {
				visible = "[TravelPointsOfInterestIconData.IsOnTravelRoute]"
				glow_radius = 4
				glow_generation_rules = {
					glow_alpha_mask = 0
					glow_blur_passes = 15
					glow_texture_downscale = 2f
					glow_ignore_inside_pixels = yes
				}
				using = Color_Green
			}
		}

		icon = {
			visible = "[TravelPointsOfInterestIconData.HasUnvisitedPointOfInterest]"
			texture = "[TravelPointsOfInterestIconData.GetIcon]"
			parentanchor = center
			size = { 22	22 }
			position = { 0 -2 }

			state = {
				name = InvisGlow
				next = VisibleGlow
				trigger_on_create = yes
				duration = 2
				glow_alpha = 0
			}

			state = {
				name = VisibleGlow
				next = InvisGlow
				duration = 2
				glow_alpha = 1
			}

			glow = {
				visible = "[TravelPointsOfInterestIconData.IsOnTravelRoute]"
				glow_radius = 2
				glow_generation_rules= {
					glow_alpha_mask = 0
					glow_blur_passes = 2
					glow_texture_downscale = 2.5f
					glow_ignore_inside_pixels = yes
				}
				using = Color_Green
			}

			state = {
				name = "map_zoom_close"
				size = { 28	28 }
				duration = 0.25
				position = { 0 -3 }
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far"
				size = { 22	22 }
				duration = 0.25
				position = { 0 -2 }
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}
		}

		icon = {
			visible = "[Not( TravelPointsOfInterestIconData.HasUnvisitedPointOfInterest )]"
			texture = "gfx/interface/icons/point_of_interest_types/_visited.dds"

			parentanchor = center
			size = { 22	22 }
			position = { 0 -1 }

			state = {
				name = "map_zoom_close"
				size = { 28	28 }
				duration = 0.25
				position = { 0 -2 }
				trigger_when = "[LessThan_int32( GetZoomLevel, '(int32)14' )]"
			}

			state = {
				name = "map_zoom_far"
				size = { 22	22 }
				duration = 0.25
				position = { 0 -1 }
				trigger_when = "[GreaterThan_int32( GetZoomLevel, '(int32)13' )]"
			}
		}

		icon = {
			visible = "[TravelPointsOfInterestIconData.HasMultiplePointsOfInterest]"
			size = { 100% 100% }
			texture = "gfx/interface/icons/map_icons/point_of_interest_multiple_bg.dds"
		}
	}

	type widget_theme_troops_tooltip = widget {
		container = {
			using = GeneralTooltipSetup
			alwaystransparent = no

			object_tooltip_pop_out = {
				blockoverride "header_additions" {
					margin_top = -4

					coa_title_small_crown = {
						size = { 40 50 }
						blockoverride "coa_tooltip" {}
						blockoverride "coa_hover_glow_visible"
						{
							visible = no
						}
					}
				}

				blockoverride "title_text" {
					text = "[Title.GetNameWithUnderlyingNoTooltip|U]"
				}

				blockoverride "subheading" {
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "TITLE_TROOPS_MAPMODE_TOOLTIP_STATUS"
					}
				}

				blockoverride "concept_link" {}

				blockoverride "main_description" {
					text_single = {
						layoutpolicy_horizontal = expanding
						text = "TITLE_TROOPS_MAPMODE_TOOLTIP_CURRENT_ARMY_SIZE"
					}

					text_single = {
						visible = "[Not(IsDataModelEmpty(TitleTroopsMapIcon.GetHiredTitles))]"
						layoutpolicy_horizontal = expanding
						text = "TITLE_TROOPS_MAPMODE_TOOLTIP_TROOPS_FROM"
						default_format = "#weak"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						hbox = {
							layoutpolicy_horizontal = shrinking
							datamodel = "[TitleTroopsMapIcon.GetHiredTitles]"

							item = {
								coa_title_tiny_crown = {
									blockoverride "coa_hover_glow_visible"
									{
										visible = no
									}
									blockoverride "coa_onclick" {
										onclick = "[OpenAdministrativeArmyDetailView( Title.Self )]"
									}

									icon = {
										parentanchor = top|right
										position = { 5 9 }
										size = { 16 16 }
										texture = "gfx/interface/icons/currencies/icon_influence_01.dds"
										visible = "[Title.HasDiscountedTitleMaa(GetPlayer.Self)]"

										glow = {
											color = { 0 0 0 0.8 }
											glow_radius = 3
											using = Glow_Standard
										}
									}
								}
							}
						}

						expand = {}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[Title.HasHolder]"
						text = "TITLE_TROOPS_MAPMODE_TOOLTIP_CLICK"
						margin = { 0 10 }
					}
				}
			}
		}
	}
}
