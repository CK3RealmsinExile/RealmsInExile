types ProgressBars
{
	type progressbar_royal_court = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 100% 100% }

		progresstexture = "gfx/interface/progressbars/progress_grandeur.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		# modify_texture = {
		#	 name = "pattern"
		#	 texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
		#	 spriteType = corneredtiled
		#	 blend_mode = alphamultiply
		#	 alpha = 0.15
		# }

		# block "grandeur_trend_arrows"
		# {
		#	 icon = {
		#		 name = "trend_decrease_arrows"
		#		 size = { 60 24 }
		#		 texture = "gfx/interface/progressbars/progress_grandeur_arrows.dds"
		#		 widgetanchor = right
		#	 }
		# }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progressbar_standard = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20 }

		progresstexture = "gfx/interface/progressbars/progress_standard.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_red.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progressbar_standard_transparent = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20}

		progresstexture = "gfx/interface/progressbars/progress_standard_transparent.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_red_transparent.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progressbar_red = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20}

		progresstexture = "gfx/interface/progressbars/progress_red.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progressbar_green = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20 }

		progresstexture = "gfx/interface/progressbars/progress_green.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progressbar_frozen = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20}

		progresstexture = "gfx/interface/progressbars/progress_frozen.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progressbar_frozen_transparent = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20}

		progresstexture = "gfx/interface/progressbars/progress_frozen.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}

	type progress_threshold = icon {
		alwaystransparent = yes
		texture = "gfx/interface/window_factions/faction_progress_threshold.dds"
	}

	# Set the datamodel to something using function as GetSegmentedProgressChanceBar( Max, NumFrames, CurrentProgress, ChangeTopProgress )
	# eg: "[GetSegmentedProgressChanceBar( GetDefine( 'NScheme', 'STEPS_TO_PROGRESS' ), GetDefine( 'NInspiration', 'PROGRESS_FRAMES' ), Scheme.GetProgress, Scheme.GetProgressChance )]"
	type progressbar_segmented_chance = flowcontainer
	{
		spacing = 2

		item = {
			icon = {
				texture = "gfx/interface/progressbars/progress_scheme.dds"
				size = { 25 25 }
				framesize = { 45 45 }
				frame = "[int32.GetInt]"
			}
		}
	}

	# Set the datamodel to something using function as GetSegmentedProgressTargetBar( Max, Current, Target )
	# eg: "[GetSegmentedProgressTargetBar( '(int32)5', Object.GetProgress, Object.GetTarget )]"
	type progressbar_segmented_target = flowcontainer
	{
		spacing = 2

		item = {
			icon = {
				texture = "gfx/interface/progressbars/progress_magnificence.dds"
				size = { 25 25 }
				framesize = { 45 45 }
				frame = "[int32.GetInt]"
			}
		}
	}

	type hbox_complex_bar_progress = hbox {
		allow_outside = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentLeftWidth]"
			allow_outside = yes

			block "empty" {
				background = {
					block "texture_empty" {
						texture = "gfx/interface/progressbars/progress_black.dds"
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentFilledWidth]"
			allow_outside = yes

			block "filled" {
				background = {
					block "texture_filled" {
						texture = "gfx/interface/progressbars/progress_standard.dds"
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentRightWidth]"
			allow_outside = yes

			block "empty" {
				background = {
					block "texture_empty" {
						texture = "gfx/interface/progressbars/progress_black.dds"
					}
				}
			}
		}
	}

	type hbox_complex_bar_progress_next = hbox {
		allow_outside = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetLeftEmptyWidth]"
			allow_outside = yes
			

			block "empty" {
				background = {
					block "texture_empty" {
						texture = "gfx/interface/progressbars/progress_black.dds"
							spriteType = Corneredstretched
							spriteborder = { 6 6 }
						
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
			visible = "[GreaterThanOrEqualTo_CFixedPoint( ComplexBar.GetNeutralValue, ComplexBar.GetNextValue )]"
			allow_outside = yes

			block "next" {
				background = {
					visible = "[ComplexBar.IsIncreasing]"
					

					block "texture_increase" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_green.dds"
							
						}
					}
				}

				background = {
					visible = "[ComplexBar.IsDecreasing]"
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					block "texture_decrease" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_red.dds"
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetFilledWidth]"
			allow_outside = yes

			block "filled" {
				background = {
					spriteType = Corneredstretched
					spriteborder = { 6 6 }

					block "texture_filled" {
						texture = "gfx/interface/progressbars/progress_standard.dds"
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
			visible = "[GreaterThan_CFixedPoint( ComplexBar.GetNextValue, ComplexBar.GetNeutralValue )]"
			allow_outside = yes

			block "next" {
				background = {
					spriteType = Corneredstretched
					spriteborder = { 6 6 }
					
					visible = "[ComplexBar.IsIncreasing]"

					block "texture_increase" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_green.dds"
						}
					}
				}

				background = {
					visible = "[ComplexBar.IsDecreasing]"

					block "texture_decrease" {
						block "texture_next" {
							texture = "gfx/interface/progressbars/progress_red.dds"
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetRightEmptyWidth]"
			allow_outside = yes

			block "empty" {
				background = {
					block "texture_empty" {
						texture = "gfx/interface/progressbars/progress_black.dds"
					}
				}
			}
		}
	}

	type hbox_complex_bar_neutral_marker = hbox {
		allow_outside = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNeutralMarkerLeftWidth]"
		}

		hbox = {
			allow_outside = yes

			widget = {
				allow_outside = yes

				block "marker" {
					debug_square = {
						size = { 20 20 }
						parentanchor = center
						widgetanchor = center
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNeutralMarkerRightWidth]"
		}
	}

	type hbox_complex_bar_current_marker = hbox {
		allow_outside = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentLeftWidth]"
		}

		hbox = {
			visible = "[GreaterThanOrEqualTo_CFixedPoint( ComplexBar.GetNeutralValue, ComplexBar.GetCurrentValue )]"
			allow_outside = yes

			widget = {
				allow_outside = yes

				block "marker" {
					debug_square = {
						size = { 20 20 }
						parentanchor = center
						widgetanchor = center
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentFilledWidth]"
		}

		hbox = {
			visible = "[GreaterThan_CFixedPoint( ComplexBar.GetCurrentValue, ComplexBar.GetNeutralValue )]"
			allow_outside = yes

			widget = {
				allow_outside = yes

				block "marker" {
					debug_square = {
						size = { 20 20 }
						parentanchor = center
						widgetanchor = center
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentRightWidth]"
		}
	}

	type hbox_complex_bar_next_marker = hbox {
		allow_outside = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextMarkerLeftWidth]"
		}

		hbox = {
			allow_outside = yes
			visible = "[ComplexBar.IsDecreasing]"

			widget = {
				allow_outside = yes

				block "decreasing_marker" {
					block "marker" {
						debug_square = {
							size = { 20 20 }
							parentanchor = center
							widgetanchor = center
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextWidth]"
		}

		hbox = {
			allow_outside = yes
			visible = "[ComplexBar.IsIncreasing]"

			widget = {
				allow_outside = yes

				block "increasing_marker" {
					block "marker" {
						debug_square = {
							size = { 20 20 }
							parentanchor = center
							widgetanchor = center
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			layoutstretchfactor_horizontal = "[ComplexBar.GetNextMarkerRightWidth]"
		}
	}

	type hbox_complex_bar_levels = hbox {
		allow_outside = yes
		datamodel = "[ComplexBar.GetItems]"

		item = {
			hbox = {
				allow_outside = yes
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				layoutstretchfactor_horizontal = "[ComplexBarItem.GetWidth]"

				block "widget" {
					widget = {
						allow_outside = yes
						visible = "[ComplexBarItem.IsVisible]"

						block "marker" {
							debug_square = {
								size = { 20 20 }
								parentanchor = center
								widgetanchor = center
							}
						}
					}

					expand = {}
				}
			}
		}
	}

	type vassal_progressbars = hbox {
		layoutpolicy_horizontal = expanding
		spacing = 10
		margin = { 5 5 }

		block "width"
		{
			min_width = 450
			max_width = 450
		}

		block "background" 
		{
			Background = {
				using = Background_Area
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 3

			icon = {
				size = { 25 25 }
				texture = "gfx/interface/icons/icon_gold.dds"
			}

			widget = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
					margin = { 3 2 }
				}

				progressbar_standard_transparent = {
					block "tax_progressbar_size"
					{
						size = "[MyRealmWindowVassalItem.GetRelativeSizeForTax]"
					}
					minimumsize = { 10 0 }
					block "tax_progressbar_value"
					{
						value = "[FixedPointToProgressbarValue(VassalContract.GetTaxRatioForLiege)]"
					}
				}

				flowcontainer = {
					parentanchor = center
					position = { 0 -2 }
					spacing = 4

					text_single = {
						block "tax_value"
						{
							text = "[MyRealmWindowVassalItem.GetCachedTax|=1]"
						}
					}
				}
			}

			tooltipwidget = {
				my_realm_window_contribution_tooltip = {
					block "tax_breakdown"
					{
						datacontext = "[MyRealmWindowVassalItem.GetTaxBreakdown]"

					}
					blockoverride "levy_info_visible" { visible = no }
					blockoverride "contribution_tooltip_header"
					{
						text = "MRW_TT_TAXES_TO_ME"
					}

					blockoverride "levy_info"
					{
						text_single = {
							multiline = yes
							maximumsize = { 250 -1 }
							text = "[MyRealmWindowVassalItem.GetLevyTooltip]"
						}
					}
				}
			}
			using = tooltip_ws
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 3

			icon = {
				size = { 25 25 }
				texture = "gfx/interface/icons/icon_soldier.dds"
			}

			widget = {
				layoutpolicy_horizontal = expanding
				#	size = { 150 22 }

				background = {
					using = Background_Area
					margin = { 3 2 }
				}

				progressbar_standard_transparent = {
					block "levy_progressbar_size"
					{
						size = "[MyRealmWindowVassalItem.GetRelativeSizeForLevies]"
					}
					minimumsize = { 10 0 }
					block "levy_progressbar_value"
					{
						value = "[FixedPointToProgressbarValue(VassalContract.GetLevyRatioForLiege)]"
					}
				}

				flowcontainer = {
					parentanchor = center
					position = { 0 -2 }
					spacing = 4

					text_single = {
						block "levy_value"
						{
							text =  "[MyRealmWindowVassalItem.GetCachedLeviesFormatted]"
						}
					}
				}
			}

			tooltipwidget = {
				my_realm_window_contribution_tooltip = {
					block "levy_breakdown"
					{
						datacontext = "[MyRealmWindowVassalItem.GetLeviesBreakdown]"
					}
					blockoverride "tax_info_visible" { visible = no }
					blockoverride "contribution_tooltip_header"
					{
						text = "MRW_TT_LEVIES_TO_ME"
					}
					blockoverride "tax_info"
					{
						text_single = {
							multiline = yes
							maximumsize = { 250 -1 }
							text = "[MyRealmWindowVassalItem.GetTaxTooltip]"
						}
					}
				}
			}
			using = tooltip_ws
		}
	}
	
	type widget_level_marker = widget {
		parentanchor = center
		size = { 0 40 }
		allow_outside = yes

		### Glow on current level animation
		icon = {
			name = "highlight_current_level"

			block "visible_active" {}

			parentanchor = center
			size = { 65 65 }

			texture = "gfx/interface/window_roco_grandeur/pin_highlight.dds"

			state = {
				name = _show
				using = Animation_Curve_Default
				alpha = 0.6
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				alpha = 0
			}

			state = {
				name = "a"
				next = "b"
				trigger_on_create = yes
				alpha = 0.6

				modify_texture = {
					name = "glow_1"
					rotate_uv = 0
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 0
				}
			}

			state = {
				name = "b"
				next = "a"
				duration = 7

				modify_texture = {
					name = "glow_1"
					rotate_uv = 360
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 360
				}
			}

			modify_texture = {
				name = "glow_1"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "glow_2"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		icon = {
			parentanchor = center
			size = { 45 45 }
			texture = "gfx/interface/window_regency/regency_level_bg.dds"

			block "visible_active" {}

			block "marker_tooltip" {}
		}

		icon = {
			parentanchor = center
			size = { 35 35 }
			texture = "gfx/interface/window_regency/regency_level_bg_inactive.dds"

			block "visible_inactive" {}

			block "marker_tooltip" {}
		}

		text_single = {
			parentanchor = center
			default_format = "#high"
			align = nobaseline

			block "visible_active" {}

			block "marker_text" {}
		}

		text_single = {
			parentanchor = center
			align = nobaseline

			block "visible_inactive" {}

			block "marker_text" {}
		}
	}

	type arrow_progressbar_icon = icon
	{
		texture = "gfx/interface/colors/white.dds"
		shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
		alpha = 0.7

		block "color" {}

		modify_texture = {
			name = "arrows"
			texture = "gfx/interface/window_combat/combat_advantage_progressbar.dds"
			blend_mode = alphamultiply
			spritetype = corneredtiled
			texture_density = 2
			spriteborder = { 0 5 }

			block "modify_texture" {}
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
			blend_mode = alphamultiply
			spritetype = corneredtiled
			spriteborder_right = 6
		}

		state = {
			name = a
			next = b
			trigger_on_create = yes

			duration = 0

			modify_texture = {
				name = "arrows"
				translate_uv = { 0 0 }
			}
		}

		state = {
			name = b
			next = a
			trigger_on_create = yes

			duration = 4

			modify_texture = {
				name = "arrows"
				block "animation_uv"
				{
					translate_uv = { -1 0 }
				}
			}
		}
	}

	type filled_line_progressbar_icon = icon
	{
		texture = "gfx/interface/colors/white.dds"
		alpha = 0.7
		block "color" {}
	}
	
	##############################
	###		LotR Progress Bars ###
	##############################
	
	type progressbar_green_red = progressbar {
		min = 0
		max = 100
		value = 35
		size = { 50 20 }

		progresstexture = "gfx/interface/progressbars/progress_red.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_standard.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }

		icon = {
			name = "overlay"
			texture = "gfx/interface/progressbars/progress_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 2 2 }
			size = { 100% 100% }
		}
	}
}

template Progressbar_Changed_Animation
{
	state = {
		name = progress_changed
		using = Animation_Curve_Default
		duration = 0.5
	}
}

template Progressbar_Changed_Animation_Curve
{
	progress_change_to_duration_curve = { 0.17 0.67 0.83 0.67 }
	
	state = {
		name = progress_changed
		using = Animation_Curve_Default
		duration = 0.5
	}
}
