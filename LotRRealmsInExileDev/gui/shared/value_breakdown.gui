types Breakdowns
{
	## List of values tooltip
	# Note: use "widget_value_breakdown_tooltip" to get a list with a tooltip background and header.
	# (this type widget should be used when you want only the list)
	type widget_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		block "background" {
		background = {
			using = Background_Area_Border_Solid
		}
		}

		vbox = {
			datamodel = "[ValueBreakdown.GetSubValues]"
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3

			block "list" {}

			block "header" {}

			item = {
				hbox = {
					name = "value_breakdown"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "[ValueBreakdown.GetName]"
						min_width = 180
						max_width = 275
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						margin_right = 10
					}

					text_single= {
						visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
						name = "value_with_tooltip"
						text = "[ValueBreakdown.GetValue|L]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"

						using = tooltip_below

						tooltipwidget = {
							recursive = yes

							widget_value_breakdown_tooltip = {}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding

						visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
						name = "value_with_no_tooltip"
						text = "[ValueBreakdown.GetValue]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}
		}
	}
	
	# Used in a 'top level' aka directly inside a `tooltipwidget = {}`
	type widget_value_breakdown_tooltip = widget_value_breakdown_list
	{
		blockoverride "header"
		{
			# We have the header be the name, if it exists
			block "header" {
			text_label_left = {
				layoutpolicy_horizontal = expanding
					block "header_text" {
				text = "[ValueBreakdown.GetName]"
					}
				default_format = "#T"
					visible = "[Not( StringIsEmpty( ValueBreakdown.GetName ) )]"
				}
			}
	}

		blockoverride "background"
		{
			using = DefaultTooltipBackground
		}

		blockoverride "list"
        {
            # We want more spacing in bottom for this background
            margin_bottom = 17
        }
	}

	## Gold Breakdown Tooltip
	type widget_gold_breakdown_tooltip = widget {
		alwaystransparent = no

		block "background" { #### needed to solve the hack for tooltip in Realm View
			using = DefaultTooltipBackground
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			set_parent_size_to_minimum = yes
			margin = { 14 8 }
			margin_bottom = 18
			spacing = 14

			block "my_gold" {}

			vbox_gold_breakdown = {
				name = "income"
				layoutpolicy_horizontal = expanding
				block "income" {}
				total_gold_income = { blockoverride "tributary_expenses" {} }
			}

			vbox_gold_breakdown = {
				name = "expenses"
				layoutpolicy_horizontal = expanding
				block "expenses" {}
				total_gold_income = { blockoverride "tributary_income" {} }
			}

			block "gold_income" {}
		}
	}

	type vbox_gold_breakdown = vbox {
		spacing = 6
		alwaystransparent = no

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = { # Titles
				layoutpolicy_horizontal = expanding
				text = "[ValueBreakdown.GetName]"
				default_format = "#T"

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 8
				}
			}

			vbox = { # All contributing expenses/incomes
				name = "values_grid"
				datamodel = "[ValueBreakdown.GetSubValues]"
				layoutpolicy_horizontal = expanding
				margin_top = 4

				item = {
					hbox = { 
						name = "value_breakdown"
						layoutpolicy_horizontal = expanding
						margin_top = 2
						spacing = 5

						text_single = {
							name = "name"
							layoutpolicy_horizontal = expanding
							text = "[ValueBreakdown.GetName]"
						}

						text_single = {
							name = "value_with_tooltip"
							visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
							text = "[ValueBreakdown.GetValue|L]"
							align = right
							default_format = "#high"

							using = tooltip_se

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}

						text_single = {
							name = "value_with_no_tooltip"
							visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
							text = "[ValueBreakdown.GetValue]"
							align = right
						}
					}
				}
			}
			

			text_single = {
				visible = "[Not(DataModelHasItems( ValueBreakdown.GetSubValues ))]"
				layoutpolicy_horizontal = expanding
				block "no_values" {
					text = "VALUE_BREAKDOWN_NO_VALUES"
				}
				default_format = "#weak"
			}
		}
	}

	## Resource Breakdown Tooltip
	type widget_resource_value_tooltip = widget {
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			set_parent_size_to_minimum = yes
			filter_mouse = all
			margin = { 14 8 }
			margin_bottom = 12

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 14
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "MY_VALUE_LABEL"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}
				}


				text_single = {
					name = "total_label_no_tooltip"
					layoutpolicy_horizontal = expanding
					text = "TOTAL_BREAKDOWN_LABEL"
					visible = "[EqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
				}

				text_single = {
					name = "total_label"
					layoutpolicy_horizontal = expanding
					text = "TOTAL_BREAKDOWN_LABEL"
					visible = "[NotEqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
					using = tooltip_ws

									datacontext = "[PlayerValueItem.GetBalanceGained]"
					tooltip_visible = "[ValueBreakdown.HasTooltip]"

					tooltipwidget = {
									widget_value_breakdown_tooltip = {
							blockoverride "header" {}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15

				hbox = {
					spacing = 5
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}

					text_single = {
						text = "PLAYER_VALUE_LEVEL_LABEL"
						layoutpolicy_horizontal = expanding

						default_format = "#T"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					text_single = {
						name = "current_level"
						layoutpolicy_horizontal = expanding

						text = "[PlayerValueItem.GetCurrentLevelName]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					expand = {}
				}

				vbox = {
					visible = "[PlayerValueItem.HasNextLevel]"
					layoutpolicy_horizontal = expanding
					spacing = 5

					text_single = {
						name = "progress_label"
						layoutpolicy_horizontal = expanding

						text = "[PlayerValueItem.GetProgressTowardNextLevelLabel]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = -3

						progressbar_standard = {
							layoutpolicy_horizontal = expanding
							size = { -1 15 }
							tintcolor = "[TooltipInfo.GetTintColor]"
							value = "[PlayerValueItem.GetProgressTowardNextLevel]"
							tooltip = "[PlayerValueItem.GetProgressTooltip]"
						}

						expand = {}
					}
				}
			}
		}
	}

	# Requires a ActiveCouncilTask datacontext
	type council_task_progress_breakdown_widget = widget {
		size = { 50 50 }
		alwaystransparent = no
		datacontext = "[ActiveCouncilTask.GetProgressBreakdown]"

		using = DefaultTooltipBackground

		vbox = {
			set_parent_size_to_minimum = yes
			minimumsize = { 280 0 }

			margin = { 10 10 }

			layoutpolicy_horizontal = expanding

			text_single = {
				name = "header"
				text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
			}

			text_single = {
				name = "frozen"
				text = COUNCIL_TASK_PROGRESSBAR_FROZEN
				visible = "[ActiveCouncilTask.IsFrozen]"
			}

			vbox = {
				name = "progress_breakdown"
				layoutpolicy_horizontal = expanding
				visible = "[And( ActiveCouncilTask.GetTaskType.IsProgressDefined, Not( ActiveCouncilTask.IsFrozen ) )]"

				margin = { 0 5 }

				text_single = {
					name = "progress_rate_header"
					visible = "[ActiveCouncilTask.GetTaskType.IsPercentageTask]"
					text = COUNCIL_TASK_PROGRESS_RATE
				}
				text_single = {
					name = "progress_rate_header_value"
					visible = "[Not( ActiveCouncilTask.GetTaskType.IsPercentageTask )]"
					text = COUNCIL_TASK_PROGRESS_RATE_VALUE
				}

				widget_value_breakdown_list = {
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					name = "task_eta"
					text = "[ActiveCouncilTask.GetETA]"
				}
			}
		}
	}

	type court_position_aptitude_breakdown_tooltip = widget {
		name = "AptitudeBreakdownTooltip"
		using = GeneralTooltipSetup
		alwaystransparent = no

		using = DefaultTooltipBackground
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 20 6 }
			minimumsize = { 300 80 }

			# Header
			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 100% 50 }

				background = {
					using = Background_Header
					margin = { 15 0 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					block "header_additions" {}

					vbox = {
						name = "FancyHeader"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no

						text_single = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							name = "title"
							margin_bottom = 18

							using = Font_Size_Medium
							fonttintcolor = "[TooltipInfo.GetTintColor]"

							block "header_text" {

							}
						}
					}
				}

				expand = {}
			}

			# Modifiers
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					default_format = "#S"
					text = COURT_POSITION_TOOLTIP_EFFECT_ON_LIEGE
				}

				vbox = {
					margin = { 16 4 }
					layoutpolicy_horizontal = expanding
					
					textbox = {
						name = "modifiers"
						using = DefaultTooltipText
						layoutpolicy_horizontal = expanding
						multiline = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						alwaystransparent = no

						block "modifier_list" { }
					}
				}
			}

			# Breakdown
			vbox = {
				name = "aptitude_breakdown"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 8 }


				# Header
				hbox = {
					layoutpolicy_horizontal = expanding
					text_single = {
						layoutpolicy_horizontal = expanding
						default_format = "#S"
						text = COURT_POSITION_aptitude_character_possessive
					}
					expand = {}
				}
				
				# The Breakdown
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datamodel = "[ValueBreakdown.GetSubValues]"
					alwaystransparent = no
					margin = { 16 4 }

					item = {
						hbox = {
							name = "value_breakdown"
							spacing = 5

							layoutpolicy_horizontal = expanding

							text_single = {
								name = "name"
								layoutpolicy_horizontal = expanding
								text = "[ValueBreakdown.GetName]"
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								margin_right = 10
							}

							text_single = {
								visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
								name = "value_with_tooltip"
								text = "[ValueBreakdown.GetValue|L]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"

								using = tooltip_below

								tooltipwidget = {
									recursive = yes

									widget_value_breakdown_tooltip = {}
								}
							}

							text_single = {
								visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
								name = "value_with_no_tooltip"
								text = "[ValueBreakdown.GetValue]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}
			}
		}
	}

	type diarch_score_breakdown_tooltip = widget {
		name = "diarch_score_breakdown_tooltip"
		using = GeneralTooltipSetup
		alwaystransparent = no

		using = DefaultTooltipBackground
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 16 8 }
			minimumsize = { 300 80 }

			block "breakdown_datacontext" {}

			# Header
			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 100% 50 }

				background = {
					using = Background_Header
					margin = { 15 0 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					block "header_additions" {}

					vbox = {
						name = "fancy_header"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no

						text_single = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							name = "title"

							fontsize_min = 14
							using = Font_Size_Medium
							fonttintcolor = "[TooltipInfo.GetTintColor]"

							block "header_text" {}
						}
					}
				}

				expand = {}
			}

			# Breakdown
			vbox = {
				name = "aptitude_breakdown"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 8 }

				# The Breakdown
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datamodel = "[ValueBreakdown.GetSubValues]"
					alwaystransparent = no
					margin = { 16 4 }

					item = {
						hbox = {
							name = "value_breakdown"
							spacing = 5

							layoutpolicy_horizontal = expanding

							text_single = {
								name = "name"
								layoutpolicy_horizontal = expanding
								text = "[ValueBreakdown.GetName]"
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								margin_right = 10
							}

							text_single = {
								visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
								name = "value_with_tooltip"
								text = "[ValueBreakdown.GetValue|L]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"

								using = tooltip_below

								tooltipwidget = {
									recursive = yes

									widget_value_breakdown_tooltip = {}
								}
							}

							text_single = {
								visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
								name = "value_with_no_tooltip"
								text = "[ValueBreakdown.GetValue]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}
			}
		}
	}

	type cost_breakdown_vbox = vbox {
		margin = { 10 0 }

		background = {
			visible = "[Not( CostBreakdown.CanAffordCosts( GetPlayer ) )]"
			using = Status_Bad
			margin_top = 5
		}

		hbox = {
			name = "costs"
			visible = "[CostBreakdown.HasAnyCost]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5

			block "heading"
			{
				text_single = {
					name = "cost_heading"
					align = nobaseline
					
					block "heading_text"
					{
						text = "COST_HEADING"
					}
				}
			}

			hbox = {
				name = "piety_cost"
				visible = "[CostBreakdown.HasCost( 'piety' )]"
				datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'piety' )]"
				tooltipwidget = { widget_value_breakdown_tooltip = {} }

				spacing = 2

				icon = {
					name = "icon_piety"
					size = { 30 30 }
					texture = "[GetPlayer.GetPietyLevelTexture]"
				}

				text_single = {
					name = "piety"
					text = "[CostBreakdown.GetCost( 'piety' )|0]"
					align = nobaseline
					default_format = "#high"
				}
			}

			text_single = {
				name = "prestige"

				datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'prestige' )]"
				visible = "[CostBreakdown.HasCost( 'prestige' )]"

				raw_text = "@prestige_icon![CostBreakdown.GetCost( 'prestige' )|0]"
				align = nobaseline
				default_format = "#high"

				tooltipwidget = { widget_value_breakdown_tooltip = {} }
			}

			text_single = {
				name = "renown"

				datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'renown' )]"
				visible = "[CostBreakdown.HasCost( 'renown' )]"

				raw_text = "@dynasty_prestige_icon![CostBreakdown.GetCost( 'renown' )|0]"
				align = nobaseline
				default_format = "#high"

				tooltipwidget = { widget_value_breakdown_tooltip = {} }
			}

			text_single = {
				name = "gold"
				datacontext = "[CostBreakdown.AccessBreakdownTooltip( 'gold' )]"
				visible = "[CostBreakdown.HasCost( 'gold' )]"

				raw_text = "@gold_icon![CostBreakdown.GetCost( 'gold' )|0]"
				align = nobaseline
				default_format = "#high"

				tooltipwidget = { widget_value_breakdown_tooltip = {} }
			}
		}

		text_single  = {
			visible = "[Not( CostBreakdown.HasAnyCost )]"
			text = "NO_COST_HEADING"
			using = Font_Size_Small
			align = nobaseline
		}
	}
	
	type scripted_score_breakdown_tooltip = widget {
		name = "scripted_score_breakdown_tooltip"
		using = GeneralTooltipSetup
		alwaystransparent = no

		using = DefaultTooltipBackground
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 16 8 }
			margin_bottom = 16
			minimumsize = { 300 80 }

			block "breakdown_datacontext" {}

			# Header
			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 100% 50 }

				background = {
					using = Background_Header
					margin = { 15 0 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					block "header_additions" {}

					vbox = {
						name = "fancy_header"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no

						text_single = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							name = "title"
							margin_bottom = 12

							fontsize_min = 14
							using = Font_Size_Medium
							fonttintcolor = "[TooltipInfo.GetTintColor]"

							block "header_text" {}
						}
					}
				}

				expand = {}
			}

			# Breakdown
			vbox = {
				name = "breakdown"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_bottom = 10

				# The Breakdown
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datamodel = "[ValueBreakdown.GetSubValues]"
					alwaystransparent = no
					margin = { 0 0 }

					item = {
						hbox = {
							name = "value_breakdown"
							spacing = 5

							layoutpolicy_horizontal = expanding

							text_single = {
								name = "name"
								layoutpolicy_horizontal = expanding
								text = "[ValueBreakdown.GetName]"
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								margin_right = 10
							}

							text_single = {
								visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
								name = "value_with_tooltip"
								text = "[ValueBreakdown.GetValue|L]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"

								using = tooltip_below

								tooltipwidget = {
									recursive = yes

									widget_value_breakdown_tooltip = {}
								}
							}

							text_single = {
								visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
								name = "value_with_no_tooltip"
								text = "[ValueBreakdown.GetValue]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				name = "total_value"
				spacing = 5
				layoutpolicy_horizontal = expanding
				margin_top = 5

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					block "total_text" {
						text = "VALUE_BREAKDOWN_TOTAL"
					}
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}

				text_single = {
					visible = "[ValueBreakdown.ShouldShowValue]"
					name = "value_with_no_tooltip"
					text = "[ValueBreakdown.GetValue]"
					align = right
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
		}
	}

	type total_gold_income = vbox {
		block "tributary_income" {
			hbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					visible = "[GetScriptedGui('recieving_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					layoutpolicy_horizontal = expanding
					text = "gold_dropdown_tributary"
				}
				text_single = {
					visible = "[GetScriptedGui('recieving_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					text = "gold_dropdown_suzerain_tooltip"
					tooltipwidget = {
						widget_tributary_breakdown_tooltip = {}
					}
				}
			}
			spacer = { size = { 0 15 } }
		}
		block "tributary_expenses" {
			hbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					visible = "[GetScriptedGui('paying_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					layoutpolicy_horizontal = expanding
					text = "gold_dropdown_suzerains"
				}
				text_single = {
					visible = "[GetScriptedGui('paying_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
					text = "gold_dropdown_tributary_tooltip"
					tooltipwidget = {
						widget_tributary_breakdown_tooltip = {}
					}
				}
			}
			spacer = { size = { 0 15 } }
		}

		layoutpolicy_horizontal = expanding

		divider_light = {
			layoutpolicy_horizontal = expanding
		}
		spacer = { size = { 0 3 } }

		hbox = {
			visible = "[And(DataModelHasItems( ValueBreakdown.GetSubValues ),Not(IsObserver))]"
			layoutpolicy_horizontal = expanding

			text_single = {
				visible = "[ValueBreakdown.ShouldShowValue]"
				layoutpolicy_horizontal = expanding
				text = "VALUE_BREAKDOWN_TOTAL"
			}

			text_single = { 
				visible = "[GetScriptedGui('paying_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
				text = "[AddTextIf(GreaterThan_CFixedPoint(Subtract_CFixedPoint( ValueBreakdown.GetFixedPointValue, GetPlayer.MakeScope.ScriptValue('tributary_gold_being_paid')), '(CFixedPoint)0'), '+')][Subtract_CFixedPoint( ValueBreakdown.GetFixedPointValue, GetPlayer.MakeScope.ScriptValue('tributary_gold_being_paid'))|1]"
				default_format = "#high"
			}

			text_single = { 
				visible = "[And(GreaterThan_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0'), GetScriptedGui('recieving_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
				text = "[AddTextIf(GreaterThan_CFixedPoint(Subtract_CFixedPoint( ValueBreakdown.GetFixedPointValue, GetPlayer.MakeScope.ScriptValue('tributary_gold_being_paid')), '(CFixedPoint)0'), '+')][Add_CFixedPoint(ValueBreakdown.GetFixedPointValue,GetPlayer.MakeScope.ScriptValue('tributary_gold_being_recieved'))|1]"
				default_format = "#high"
			}

			text_single = { 
				visible = "[Not(Or(GetScriptedGui('paying_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End),And(GreaterThan_CFixedPoint(ValueBreakdown.GetFixedPointValue, '(CFixedPoint)0'), GetScriptedGui('recieving_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))))]"
				text = "[ValueBreakdown.GetFixedPointValue|1]"
				default_format = "#high"
			}
		}

		hbox = {
			visible = "[And(DataModelHasItems( ValueBreakdown.GetSubValues ),IsObserver)]"
			layoutpolicy_horizontal = expanding

			text_single = {
				visible = "[ValueBreakdown.ShouldShowValue]"
				layoutpolicy_horizontal = expanding
				text = "VALUE_BREAKDOWN_TOTAL"
			}

			text_single = {
				text = "[ValueBreakdown.GetValue|+]"
				default_format = "#high"
			}
		}
	}

	type widget_tributary_breakdown_tooltip = widget {
		name = "tributary_breakdown_tt"
		size = { 50 50 }
		alwaystransparent = no
		
		background = {
			using = Background_Area_Border_Solid
		}
		
		vbox = {
			visible = "[GetScriptedGui('recieving_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
			datamodel = "[GetPlayer.MakeScope.GetList('all_tributaries')]"
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3

			block "header" {}

			item = {
				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "tributary_name"
						layoutpolicy_horizontal = expanding
						text = "[Scope.Char.GetName]"
						min_width = 180
						max_width = 250
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						margin_right = 10
					}

					text_single= {
						name = "tributary_tax"
						raw_text = "+[Scope.Char.MakeScope.Var('tribute_gold_amount').GetValue|1]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"

						using = tooltip_below
					}
				}
			}
		}
		
		vbox = {
			visible = "[GetScriptedGui('paying_tributary_gold').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3

			block "header" {}

			hbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "tributary_name"
					layoutpolicy_horizontal = expanding
					text = "[GetPlayer.MakeScope.Var('my_suzerain').Char.GetName]"
					min_width = 180
					max_width = 250
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}

				text_single= {
					name = "tributary_tax"
					raw_text = "-[GetPlayer.MakeScope.Var('tribute_gold_amount').GetValue|1]"
					align = right
					default_format = "#N"
					fonttintcolor = "[TooltipInfo.GetTintColor]"

					using = tooltip_below
				}
			}
		}
	}
}
