types MapModes
{
	type map_modes_debug = flowcontainer {
		ignoreinvisible = yes

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			name = "map_mode_simple_realms_button"
			onclick = "[SetMapMode('simple_realms')]"
			raw_text = "Srlm"
			tooltip = "MAPMODE_REALMS"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			name = "map_mode_terrain_button"
			onclick = "[SetMapMode('terrain')]"
			raw_text = "Ter"
			tooltip = "MAPMODE_TERRAIN"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			name = "map_mode_baronies_button"
			onclick = "[SetMapMode('baronies')]"
			raw_text = "Bar"
			tooltip = "MAPMODE_BARONIES"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			name = "map_mode_realm_areas_button"
			onclick = "[SetMapMode('realm_areas')]"
			raw_text = "Area"
			tooltip = "MAPMODE_AREAS"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			name = "map_mode_diplomacy_button"
			onclick = "[SetMapMode('diplomacy')]"
			raw_text = "Diplo"
			tooltip = "MAPMODE_DIPLOMACY"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			onclick = "[SetMapMode('debug_character_pools')]"
			raw_text = "Pools"
			raw_tooltip = "Character Pools"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			onclick = "[SetMapMode('debug_ai_war_coordinator_targets')]"
			raw_text = "AI"
			raw_tooltip = "AI War Coordinator targets"
		}

		button_round  = {
			visible = "[And( Not(IsGameViewOpen('barbershop')), CanChangeMapMode )]"
			onclick = "[SetMapMode('debug_visual_regions')]"
			raw_text = "Reg"
			raw_tooltip = "Visual Geographical Regions"
		}
	}

	type map_modes = widget {
		allow_outside = yes
		filter_mouse = all
		alwaystransparent = yes
		size = { 170 95 }

		background = {
			using = Background_Area_Dark
			margin_left = 10
			margin_bottom = 10
			margin_top = -12
			margin_right = 10
			color = { 0.15 0.15 0.15 0.75 }
			visible = "[And(CanChangeMapMode, Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_timeline').GetValue, '(CFixedPoint)0' ) ))]"
		}

		@zoom_level_offset = -40

		flowcontainer = {
			name = "paper_map"
			visible = "[And(And( And( Not( GetVariableSystem.Exists( 'mapmodes_expand' ) ), IsMapMode('realms') ), IsDefaultGUIMode ), Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_map_zoom').GetValue, '(CFixedPoint)0' ) ))]"
			parentanchor = top|right
			position = { 0 @zoom_level_offset }
			direction = vertical
			ignoreinvisible = yes
			min_width = 170
			tooltip = "ZOOM_LEVEL_PAPER_MAP_TOOLTIP"

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				visible = "[GreaterThanOrEqualTo_int32(GetZoomLevel, '(int32)20')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_PAPER_MAP"
				default_format = "#high;italic"
			}

			text_single = {
				visible = "[GreaterThanOrEqualTo_int32(GetZoomLevel, '(int32)20')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_SELECTING_REALMS"
			}
		}

		flowcontainer = {
			name = "political_map"
			visible = "[And(And( And( Not( GetVariableSystem.Exists( 'mapmodes_expand' ) ), IsMapMode('realms') ), IsDefaultGUIMode ), Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_map_zoom').GetValue, '(CFixedPoint)0' ) ))]"
			parentanchor = top|right
			position = { 0 @zoom_level_offset }
			direction = vertical
			ignoreinvisible = yes
			min_width = 170
			tooltip = ZOOM_LEVEL_POLITICAL_TOOLTIP

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				visible = "[And(LessThan_int32(GetZoomLevel, '(int32)20'), GreaterThan_int32(GetZoomLevel, '(int32)8'))]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_POLITICAL"
				default_format = "#color_yellow"
			}

			text_single = {
				visible = "[And(LessThan_int32(GetZoomLevel, '(int32)20'), GreaterThan_int32(GetZoomLevel, '(int32)8'))]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_SELECTING_REALMS"
			}
		}

		flowcontainer = {
			name = "details_map"
			visible = "[And(And( And(Not(GetVariableSystem.Exists( 'mapmodes_expand' )), IsMapMode('realms')), IsDefaultGUIMode ), Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_map_zoom').GetValue, '(CFixedPoint)0' ) ))]"
			parentanchor = top|right
			position = { 0 @zoom_level_offset }
			direction = vertical
			ignoreinvisible = yes
			min_width = 170
			tooltip = ZOOM_LEVEL_DETAILS_TOOLTIP

			state = {
				name = _show
				using = Animation_FadeIn_Standard
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}

			background = {
				using = Background_Area_Dark
				margin = { 10 10 }
				margin_top = 5
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				visible = "[LessThan_int32(GetZoomLevel, '(int32)9')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_DETAILS"
				default_format = "#color_green"
			}

			text_single = {
				visible = "[LessThan_int32(GetZoomLevel, '(int32)9')]"
				parentanchor = hcenter
				text = "ZOOM_LEVEL_SELECTING_BARONIES"
			}
		}

		## Realm
		icon_button_mapmode = {
			name = "map_mode_realms_button"
			position = { 0 25 }
			size = { 50 50 }
			visible = "[And(CanChangeMapMode, Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_timeline').GetValue, '(CFixedPoint)0' ) ))]"

			blockoverride 'mm_datacontext'
			{
				datacontext = "[GetMapMode('realms')]"
			}

			blockoverride "mm_button"
			{
				onclick = "[ClearExploringRealms]"
				shortcut = "map_mode_1"
			}
			blockoverride "mm_icon"
			{
				size = { 50 50 }
			}

			blockoverride "mm_glow"
			{
				visible = no
			}

			blockoverride "mm_bg_color"
			{
				color = { 0.18 0.18 0 1 }
			}
		}

		flowcontainer = {
			parentanchor = right|bottom
			margin_right = 15
			direction = vertical
			visible = "[And(CanChangeMapMode, Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_timeline').GetValue, '(CFixedPoint)0' ) ))]"

			## De Jure
			flowcontainer = {
				visible = "[CanChangeMapMode]"
				parentanchor = hcenter
				direction = horizontal
				ignoreinvisible = yes
				spacing = -3

				icon_button_mapmode = {
					name = "map_mode_duchies_button"
					size = { 38 38 }

					blockoverride 'mm_datacontext'
					{
						datacontext = "[GetMapMode('dejure_duchies')]"
					}

					blockoverride "mm_button"
					{
						shortcut = "map_mode_9"
					}

					blockoverride "button_bg_color"
					{
						color = { 0.1 0.14 0.1 1 }
					}
				}

				icon_button_mapmode = {
					name = "map_mode_kingdoms_button"
					size = { 38 38 }

					blockoverride 'mm_datacontext'
					{
						datacontext = "[GetMapMode('dejure_kingdoms')]"
					}

					blockoverride "mm_button"
					{
						shortcut = "map_mode_10"
					}

					blockoverride "button_bg_color"
					{
						color = { 0.18 0.1 0.1 1 }
					}
				}

				icon_button_mapmode = {
					name = "map_mode_empires_button"
					size = { 38 38 }

					blockoverride 'mm_datacontext'
					{
						datacontext = "[GetMapMode('dejure_empires')]"
					}

					blockoverride "mm_button"
					{
						shortcut = "map_mode_11"
					}

					blockoverride "button_bg_color"
					{
						color = { 0.12 0.12 0.18 1 }
					}
				}
			}

			## Other
			flowcontainer = {
				parentanchor = hcenter
				direction = horizontal
				ignoreinvisible = no
				spacing = -2

				visible = "[And(CanChangeMapMode, Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_timeline').GetValue, '(CFixedPoint)0' ) ))]"

				icon_button_mapmode = {
					name = "map_mode_religion_button"
					size = { 32 32 }
					parentanchor = vcenter

					blockoverride 'mm_datacontext'
					{
						datacontext = "[GetMapMode('religions')]"
					}

					blockoverride "mm_button"
					{
						shortcut = "map_mode_3"
					}
				}

				icon_button_mapmode = {
					name = "map_mode_cultures_button"
					size = { 32 32 }
					parentanchor = vcenter

					blockoverride 'mm_datacontext'
					{
						datacontext = "[GetMapMode('cultures')]"
					}

					blockoverride "mm_button"
					{
						shortcut = "map_mode_2"
					}
				}

				icon_button_mapmode = {
					name = "map_mode_houses_button"
					size = { 32 32 }
					parentanchor = vcenter

					blockoverride 'mm_datacontext'
					{
						datacontext = "[GetMapMode('houses')]"
					}

					blockoverride "mm_button"
					{
						shortcut = "map_mode_4"
					}
				}

				widget = {
					parentanchor = vcenter
					size = {32 32}

					button_round = {
						parentanchor = center
						size = { 30 30 }
						onclick = "[GetVariableSystem.Toggle( 'mapmodes_expand' )]"

						button_plus_small = {
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}
		}

		flowcontainer_additional_mapmodes = {
			parentanchor = top|right
			widgetanchor = bottom|right
			position = { 20 21 } 
		}

		
	} # type map_modes = widget {...}

	type mm_text_button = button_tertiary {
		name = "players"
		block 'datacontext'
		{
			datacontext = "[GetMapMode( 'realms' )]"
		}
		block 'visible'
		{
			visible = "[CanChangeMapMode]"
		}

		parentanchor = hcenter
		size = { 159 25 }

		onclick = "[SetMapMode( MapMode.GetKey )]"
		alwaystransparent = "[IsMapMode( MapMode.GetKey )]"
		
		text = "[MapMode.GetName]"
		tooltip = "[MapMode.GetDesc]"

		using = tooltip_ws

		button_expand = {
			visible = "[IsMapMode( MapMode.GetKey )]"

			size = { 15	15 }
			parentanchor = left|vcenter

			alwaystransparent = yes
		}

		button_expand = {
			visible = "[IsMapMode( MapMode.GetKey )]"
			mirror = horizontal

			size = { 15	15 }
			parentanchor = right|vcenter

			alwaystransparent = yes
		}
	}

	type flowcontainer_additional_mapmodes = flowcontainer {

		visible = "[GetVariableSystem.Exists( 'mapmodes_expand' )]"
		visible_at_creation = no

		margin = { 22 10 }
		alwaystransparent = no
		filter_mouse = all

		state = {
			name = _mouse_hierarchy_leave
			on_finish = "[GetVariableSystem.Toggle( 'mapmodes_expand' )]"
		}

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Standard
		}

		flowcontainer = {
			direction = vertical
			margin = { 10 10 }
			margin_top = 5
			ignoreinvisible = yes

			background = {
				using = Background_Area_Dark
				color = { 0.15 0.15 0.15 0.75 }
			}

			text_single = {
				parentanchor = hcenter
				text = "ADDITIONAL_MAPMODES"
				default_format = "#medium"
				margin_bottom = 5
				max_width = 130
			}

			block "mapmodes_insert_before"
			{
					
			}

			mm_text_button = {
				name = "map_mode_government_button"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'government' )]"
				}
				shortcut = "map_mode_5"
			}

			mm_text_button = {
				name = "map_mode_court_languages_button"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode('court_languages')]"
				}
				blockoverride 'visible'
				{
					visible = "[And( HasDlcFeature( 'royal_court' ), CanChangeMapMode )]"
				}
				shortcut = "map_mode_7"
			}

			mm_text_button = {
				name = "map_mode_epidemics_button"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'epidemics' )]"
				}
				shortcut = "map_mode_16"
			}

			mm_text_button = {
				name = "map_mode_legends_button"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'legends' )]"
				}
				blockoverride 'visible'
				{
					visible = "[And( HasDlcFeature( 'legends' ), CanChangeMapMode )]"
				}
				shortcut = "map_mode_17"
			}

			mm_text_button = {
				name = "players"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'players' )]"
				}
				blockoverride 'visible'
				{
					visible = "[And( Or(GameHasMultiplePlayers, InDebugMode), CanChangeMapMode)]"
				}
				shortcut = "map_mode_8"
			}

			widget ={
				size = {0 4}
			}

			divider_light = {
				min_width = 100
				parentanchor = hcenter
			}
			widget ={
				size = {0 4}
			}

			mm_text_button = {
				name = "map_mode_counties_button"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'dejure_counties' )]"
				}
				shortcut = "map_mode_6"
			}

			mm_text_button = {
				name = "economy_buildings"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'economy_buildings' )]"
				}
				shortcut = "map_mode_14"
			}

			mm_text_button = {
				name = "county_development"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'county_development' )]"
				}
				shortcut = "map_mode_13"
			}

			mm_text_button = {
				name = "county_control"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'county_control' )]"
				}
				shortcut = "map_mode_15"
			}

			mm_text_button = {
				name = "simple_terrain"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'simple_terrain' )]"
				}
				shortcut = "map_mode_12"
			}
			
			text_single = {
                parentanchor = hcenter
                text = "ADDITIONAL_MAP_SETTINGS"
                default_format = "#medium"
                margin_bottom = 5
                max_width = 130
            }

            flowcontainer = {
                direction = vertical
                margin = { 5 5 }
                ignoreinvisible = yes
                background = {
            		using = Background_Area_Dark
            	}

            	min_width = 159

				button_checkbox_label = {
					onclick = "[ToggleShowEpidemicMapGraphics]"
					tooltip = "SETTING_SHOW_EPIDEMIC_MAP_GRAPHICS_TOOLTIP"

					state = {
						name = _show
						using = Animation_FadeIn_Standard
					}

					state = {
						name = _hide
						using = Animation_FadeOut_Standard
					}

					blockoverride "checkbox"
					{
						checked = "[ShowEpidemicMapGraphics]"
						size = { 20 20 }
					}

					blockoverride "text"
					{
						text = "SETTING_SHOW_EPIDEMIC_MAP_GRAPHICS"
						min_width = 120
						max_width = 125
						fontsize = 14
						max_height = 18
					}
				}

				button_checkbox_label = {
	                onclick = "[ToggleShowLegendMapGraphics]"
	                tooltip = "SETTING_SHOW_LEGEND_MAP_GRAPHICS_TOOLTIP"
	                visible = "[HasDlcFeature( 'legends' )]"

	                state = {
	                    name = _show
	                    using = Animation_FadeIn_Standard
	                }

	                state = {
	                    name = _hide
	                    using = Animation_FadeOut_Standard
	                }

	                blockoverride "checkbox"
	                {
	                    checked = "[ShowLegendMapGraphics]"
	                    size = { 20 20 }
	                }

	                blockoverride "text"
	                {
	                    text = "SETTING_SHOW_LEGEND_MAP_GRAPHICS"
	                    min_width = 120
	                    max_width = 125
	                    fontsize = 14
                        max_height = 18
	                }
	            }
            }

			text_single = {
				parentanchor = hcenter
				text = "REALMS_MAPMODES"
				default_format = "#medium"
				margin_bottom = 5
				margin_top = 5
				max_width = 110
			}

			mm_text_button = { #LotR - Tributaries
				name = "map_mode_tributaries_button"
				onclick = "[SetMapMode('tributaries')]"
				onclick = "[GetScriptedGui('tributaries_map').Execute(GuiScope.End)]"
				down = "[And( GetScriptedGui('tributaries_map').IsShown(GuiScope.End), IsMapMode('baronies') )]"
				enabled = "[And(Not(IsObserver), GetScriptedGui('tributaries_map').IsValid(GuiScope.End))]"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'tributaries' )]"
				}
				raw_text = "TRIBUTARIES_MAP"

				tooltip = "TRIBUTARIES_MAP_TOOLTIP"
				using = tooltip_ws
			}

			mm_text_button = { #LotR - Alignment
				name = "map_mode_alignment_button"
				onclick = "[SetMapMode('alignment')]"
				onclick = "[GetScriptedGui('alignment_map').Execute(GuiScope.End)]"
				down = "[And( GetScriptedGui('alignment_map').IsShown(GuiScope.End), IsMapMode('baronies') )]"
				enabled = "[And(Not(IsObserver), GetScriptedGui('alignment_map').IsValid(GuiScope.End))]"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'alignment' )]"
				}
				raw_text = "ALIGNMENT_MAP"

				tooltip = "ALIGNMENT_MAP_TOOLTIP"
				using = tooltip_ws
			}

			mm_text_button = { #LotR - Racial Homelands
				name = "map_mode_racial_homelands_button"
				onclick = "[SetMapMode('racial_homelands')]"
				onclick = "[GetScriptedGui('racial_homelands_map').Execute(GuiScope.End)]"
				down = "[And( GetScriptedGui('racial_homelands_map').IsShown(GuiScope.End), IsMapMode('baronies') )]"
				enabled = "[And(Not(IsObserver), GetScriptedGui('racial_homelands_map').IsValid(GuiScope.End))]"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'racial_homelands' )]"
				}
				raw_text = "RACIAL_HOMELANDS_MAP"

				tooltip = "RACIAL_HOMELANDS_MAP_TOOLTIP"
				using = tooltip_ws
			}

			mm_text_button = { #LotR - Trade Routes
				name = "map_mode_trade_routes_button"
				onclick = "[SetMapMode('trade_routes')]"
				onclick = "[GetScriptedGui('trade_routes_map').Execute(GuiScope.End)]"
				down = "[And( GetScriptedGui('trade_routes_map').IsShown(GuiScope.End), IsMapMode('baronies') )]"
				enabled = "[And(Not(IsObserver), GetScriptedGui('trade_routes_map').IsValid(GuiScope.End))]"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'trade_routes' )]"
				}
				raw_text = "TRADE_ROUTES_MAP"

				tooltip = "TRADE_ROUTES_MAP_TOOLTIP"
				using = tooltip_ws
			}

			mm_text_button = { #LotR - Resources
				name = "map_mode_resources_button"
				onclick = "[SetMapMode('resources')]"
				onclick = "[GetScriptedGui('resources_map').Execute(GuiScope.End)]"
				down = "[And( GetScriptedGui('resources_map').IsShown(GuiScope.End), IsMapMode('baronies') )]"
				enabled = "[And(Not(IsObserver), GetScriptedGui('resources_map').IsValid(GuiScope.End))]"
				blockoverride 'datacontext'
				{
					datacontext = "[GetMapMode( 'resources' )]"
				}
				raw_text = "RESOURCES_MAP"

				tooltip = "RESOURCES_MAP_TOOLTIP"
				using = tooltip_ws
			}
			
		}
	}

	type mini_map_mode = widget {
		allow_outside = yes
		filter_mouse = all
		alwaystransparent = yes

		size = { 320 60 }

		background = {
			using = Background_Area_Dark
			margin = { 10 0 }
			color = { 0.15 0.15 0.15 0.75 }
		}

		hbox = {
			vbox = {
				layoutpolicy_horizontal = expanding
				text_single = {
					text = MAP_MODE
				}
				text_single = {
					text = "[GetCurrentMapMode.GetName]"
					default_format = "#high"
				}
			}

			expand = {}

			icon_button_mapmode = {
				blockoverride 'mm_datacontext'
				{
					datacontext = "[GetMapMode( 'struggle' )]"
				}
			}

			icon_button_mapmode = {
				blockoverride 'mm_datacontext'
				{
					datacontext = "[GetMapMode( 'realms' )]"
				}
			}

			icon_button_mapmode = {
				blockoverride 'mm_datacontext'
				{
					datacontext = "[GetMapMode( 'religions' )]"
				}
			}

			icon_button_mapmode = {
				blockoverride 'mm_datacontext'
				{
					datacontext = "[GetMapMode( 'cultures' )]"
				}
			}

			widget = {
				size = {32 32}

				button_round = {
					size = { 30 30 }
					parentanchor = top|hcenter
					widgetanchor = center
					position = { 0 10 }

					onclick = "[GetVariableSystem.Toggle( 'mapmodes_expand' )]"

					button_plus_small = {
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}
		}

		flowcontainer_additional_mapmodes = {
			parentanchor = top|right
			widgetanchor = bottom|right
			position = { 31 10 } 

			blockoverride "mapmodes_insert_before"
			{
				mm_text_button = {
					name = "map_mode_dejure_duchies_button"
					blockoverride 'datacontext'
					{
						datacontext = "[GetMapMode( 'dejure_duchies' )]"
					}
					shortcut = "map_mode_9"
				}

				mm_text_button = {
					name = "map_mode_dejure_kingdoms_button"
					blockoverride 'datacontext'
					{
						datacontext = "[GetMapMode( 'dejure_kingdoms' )]"
					}
					shortcut = "map_mode_10"
				}

				mm_text_button = {
					name = "map_mode_dejure_empires_button"
					blockoverride 'datacontext'
					{
						datacontext = "[GetMapMode( 'dejure_empires' )]"
					}
					shortcut = "map_mode_11"
				}

				widget ={
					size = {0 4}
				}

				divider_light = {
					min_width = 100
					parentanchor = hcenter
				}
				widget ={
					size = {0 4}
				}
			}
		}
	} # type mini_map_mode = widget {...}
}

#### OLD LOTR MAP MODES TO REVIEW AND RESTORE

# button_tertiary = { #LotR
# name = "map_mode_relics_button"
# visible = "[CanChangeMapMode]"
# parentanchor = hcenter

# size = { 110 25 }
# onclick = "[SetMapMode('relics')]"
# onclick = "[GetScriptedGui('relics_map').Execute(GuiScope.End)]"
# down = "[And( GetScriptedGui('relics_map').IsShown(GuiScope.End), IsMapMode('baronies') )]"
# enabled = "[And(Not(IsObserver), GetScriptedGui('relics_map').IsValid(GuiScope.End))]"

# raw_text = "RELICS_MAP"

# tooltip = "RELICS_MAP_TOOLTIP"
# using = tooltip_ws
# }

# button_tertiary = { #LotR
# name = "map_mode_eyecandy"
# visible = "[CanChangeMapMode]"
# parentanchor = hcenter

# size = { 110 25 }
# onclick = "[SetMapMode('map_editor_clean')]"

# raw_text = "EYECANDY_MAP"

# tooltip = "EYECANDY_MAP_TOOLTIP"
# using = tooltip_ws
# }