window = {
	name = "JominiMusicPlayerView"
	visible = no
	layer = top
	parentanchor = center
	movable = yes
	allow_outside = yes

	using = Window_Background
	using = Window_Decoration

	size = { 800 -1 }

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Small
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowShow_Small
	}

	vbox = {
		name = "contents"
		resizeparent = yes

		using = Window_Margins

		header_pattern = {
			name = "header"
			layoutpolicy_horizontal = expanding

			blockoverride "header_text" {
				text = "MUSIC_PLAYER"
			}

			blockoverride "button_close"
			{
				onclick = "[ToggleMusicPlayer]"
				tooltip = "CLOSE_TOOLTIP"
			}
		}

		hbox = {
			name = "playback_controller"
			layoutpolicy_horizontal = expanding

			margin = { 20 5 }

			background = {
				using = Background_Area_ExtraDark
			}

			widget = {
				name = "controller_buttons"
				size = { 680 60  }

				widget_track_name = {
					parentanchor = left|vcenter
				}

				widget = {
					parentanchor = hcenter|vcenter
					size = { 90 60 }

					hbox = {
						layoutpolicy_horizontal = expanding

						button_music_player_pause = {}

						button_music_player_play = {}

						button_music_player_skip = {}
					}
				}

				widget = {
					name = "controller_settings"
					parentanchor = right|vcenter
					position = { 0 -3 }
					size = { 200 40 }

					vbox_music_player_volume_setting = {
						name = "music_player_volume_slider"
					}

					vbox_music_player_density_setting = {
						name = "music_player_density"
						visible = no # this setting is unused in CK3
					}
				}
			}


		}

		hbox = {
			name = "music_player_contents"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox_categories = {}

			vbox_tracks_from_category = {}
		}
	}
}


types MusicPlayerTypes
{
	type button_music_player_play = button_round {
		visible = "[MusicPlayer.IsPlaying]"
		onclick = "[MusicPlayer.OnTogglePlayPause]"
		size = { 40 40 }

		tooltip = MUSIC_PLAYER_PAUSE_TT

		button_pause = {
			alwaystransparent = yes
			parentanchor = center
			size = { 40 40 }
		}
	}

	type button_music_player_pause = button_round {
		visible = "[Not(MusicPlayer.IsPlaying)]"
		onclick = "[MusicPlayer.OnTogglePlayPause]"
		size = { 40 40 }

		tooltip = MUSIC_PLAYER_PLAY_TT

		button_play = {
			alwaystransparent = yes
			parentanchor = center
			size = { 36 36 }
		}
	}

	type button_music_player_skip = button_round {
		onclick = "[MusicPlayer.OnNextTrack]"
		size = { 40 40 }

		tooltip = "MUSIC_PLAYER_NEXT_TRACK"

		button_next_track = {
			alwaystransparent = yes
			parentanchor = center
			size = { 30 30 }
		}
	}

	type vbox_music_player_volume_setting = vbox {

		hbox = {
			spacing = 5

			textbox = {
				name = "music_player_volume_textbox"
				align = left|nobaseline
				text = "MUSIC_PLAYER_VOLUME_LABEL"
				autoresize = yes
			}

			textbox = {
				name = "music_player_volume_value"
				align = left|nobaseline
				text = MUSIC_PLAYER_VOLUME_VALUE
				default_format = "#bold"
				autoresize = yes
			}
		}

		hbox = {
			name = "music_player_volume_slider"

			scrollbar = {
				name = "music_player_volume_slider_scrollbar"
				direction = horizontal
				size = { 200 20 }
				value = "[MusicPlayer.GetVolume]"

				min = 0.0
				max = 1.0
				step = 0.1
				wheelstep = 0.1

				onvaluechanged = "[MusicPlayer.SetVolume]"

				track = {
					using = SettingsValueTrack
				}

				slider = {
					using = SettingsValueSlider
				}

				dec_button = {
					using = SettingsValueDecButton
				}

				inc_button = {
					using = SettingsValueIncButton
				}
			}
		}
	}

	type vbox_music_player_density_setting = vbox {

		hbox = {
			spacing = 5
			tooltip = "MUSIC_PLAYER_DENSITY_TT"

			textbox = {
				name = "music_player_density_textbox"
				align = left|nobaseline
				text = MUSIC_PLAYER_DENSITY_LABEL
				autoresize = yes
			}

			textbox = {
				name = "music_player_density_value"
				align = left|nobaseline
				text = MUSIC_PLAYER_SETTING_MUSIC_DENSITY_VALUE
				default_format = "#bold"
				autoresize = yes
			}
		}

		hbox = {
			name = "music_player_density_slider"

			scrollbar = {
				name = "music_player_density_slider_scrollbar"
				direction = horizontal
				size = { 225 20 }
				value = "[MusicPlayer.GetMusicDensity]"

				min = 0.0
				max = 1.0
				step = 0.5
				wheelstep = 0.5

				onvaluechanged = "[MusicPlayer.SetMusicDensity]"

				track = {
					using = SettingsValueTrack
				}

				slider = {
					using = SettingsValueSlider
				}

				dec_button = {
					using = SettingsValueDecButton
				}

				inc_button = {
					using = SettingsValueIncButton
				}
			}
		}
	}

	type widget_track_name = widget {
		visible = "[MusicPlayer.IsPlayingTrackSelectable]"
		size = { 300 44 }

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				name = "track_name"
				layoutpolicy_horizontal = expanding
				raw_text = "#v [MusicPlayer.GetPlayingTrackName]#!"
				align = left|nobaseline
				max_width = 300
			}

			text_single = {
				name = "elapsed_time"
				layoutpolicy_horizontal = expanding
				text = "[MusicPlayer.GetPlayingTrackElapsedTime]"
				align = left|nobaseline
			}
		}
	}

	type button_music_category = button {
		size = { 100% 100% }

		onclick = "[MusicPlayer.OnSelectCategory( MusicPlayerCategory.AccessSelf )]"

		tooltip = "MUSIC_PLAYER_SELECT_CATEGORY_TT"
		using = tooltip_above

		block "button_texture" {
			text = "[MusicPlayerCategory.GetName]"
		}
	}

	type widget_music_player_category = widget {
		widget = {
			size = { 100% 80% }
			parentanchor = hcenter

			button_standard_clean = {
				size = { 100% 100% }

				button_music_category = {
					visible = "[Not(MusicPlayerCategory.HasTexture)]"

					blockoverride "button_texture" {
						texture = "gfx/interface/window_event/tile_letter_flat.dds"
						spriteType = Corneredtiled
						spriteborder = { 200 200 }

						modify_texture = {
							name = "paper_texture_overlay"
							texture = "gfx/interface/window_event/overlay_letter_texture.dds"
							spriteType = Corneredstretched
							blend_mode = overlay
						}

						text = "[MusicPlayerCategory.GetName]"
						default_format = "#light_background"
					}
				}

				button_music_category = {
					visible = "[MusicPlayerCategory.HasTexture]"

					blockoverride "button_texture" {
						texture = "[MusicPlayerCategory.GetTexture]"
						size = { 324 188 }
						parentanchor = center

						modify_texture = {
							name = "paper_texture_overlay"
							texture = "gfx/interface/window_event/overlay_letter_texture.dds"
							spriteType = Corneredstretched
							blend_mode = overlay
						}
					}

					# widget = {
					# 	parentanchor = top|hcenter
					# 	position = { 0 -2 }
					# 	size = { 328 40 }

					# 	background = {
					# 		using = Background_Area_ExtraDark
					# 	}

					# 	text_single = {
					# 		layoutpolicy_horizontal = expanding
					# 		parentanchor = hcenter|vcenter
					# 		position = { 0 -4}

					# 		text = "[MusicPlayerCategory.GetName]"
					# 		max_width = 290

					# 		using = Font_Type_Flavor
					# 		using = Font_Size_Big
					# 	}
					# }
				}
			}

			icon = {
				parentanchor = center
				size = { 324 188 }

				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
			}

			icon = {
				visible = "[MusicPlayer.IsSelectedCategory( MusicPlayerCategory.Self )]"
			}
		}

		widget = {
			size = { 100% 20% }
			parentanchor = right|bottom
			position = { 0 5 }

			tooltip = "MUSIC_PLAYER_ENABLE_CATEGORY_TT"
			using = tooltip_below

			text_label_left = {
				visible = "[MusicPlayerCategory.IsEnabled]"
				parentanchor = vcenter
				position = { 35 -5 }
				max_width = 330
				autoresize = yes
				elide = right
				fontsize_min = 14
				text = "MUSIC_PLAYER_CATEGORY_ENABLED_DISABLED_TEXT"
			}

			text_label_left = {
				visible = "[Not(MusicPlayerCategory.IsEnabled)]"
				parentanchor = vcenter
				position = { 35 -5 }
				max_width = 330
				autoresize = yes
				elide = right
				default_format = "#low"
				fontsize_min = 14
				text = "MUSIC_PLAYER_CATEGORY_ENABLED_DISABLED_TEXT"
			}

			button_checkbox = {
				name = "category_checkbox"
				size = { 30 30 }
				position = { -2 -5 }
				parentanchor = vcenter
				checked = "[MusicPlayerCategory.IsEnabled]"
				onclick = "[MusicPlayer.OnToggleCategoryEnabled( MusicPlayerCategory.AccessSelf )]"

				using = tooltip_above
			}
		}
	}

	type widget_music_player_track = widget {

		background = {
			visible = "[MusicTrack.IsPlaying]"
			using = Background_Area_Border
			using = Background_Frame_Gold
		}

		background = {
			visible = "[And( Not( MusicTrack.IsPlaying ), MusicTrack.IsEnabled )]"
			using = Background_Area_Border
		}

		background = {
			visible = "[And( Not( MusicTrack.IsPlaying ), Not( MusicTrack.IsEnabled ) )]"
			using = Background_Full_Dim
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			margin = { 10 0 }
			spacing = 5

			button_checkbox = {
				name = "track_checkbox"
				size = { 30 30 }
				checked = "[MusicTrack.IsEnabled]"
				onclick = "[MusicPlayer.OnToggleTrackEnabled( MusicTrack.AccessSelf )]"

				tooltip = "MUSIC_PLAYER_TRACK_ENABLE_DISABLE_TT"

				using = tooltip_above
			}

			button_standard = {
				name = "track_toggle_play_pause_button"
				layoutpolicy_horizontal = expanding
				size = { 0 35 }
				tooltip = "MUSIC_PLAYER_PLAY_TRACK_TT"
				onclick = "[MusicPlayer.OnSelectAndPlayTrack( MusicTrack.Self )]"
				down = "[MusicTrack.IsPlaying]"

				text_single = {
					size = { 100% 100% }
					visible = "[MusicTrack.IsPlaying]"

					parentanchor = vcenter
					align = left|nobaseline
					margin = { 10 0 }

					text = "[MusicTrack.GetName]"
					default_format = "#high"
					max_width = 250
				}

				textbox = {
					size = { 100% 100% }
					visible = "[Not(MusicTrack.IsPlaying)]"

					parentanchor = vcenter
					align = left|nobaseline
					margin = { 10 0 }

					text = "[MusicTrack.GetName]"
					autoresize = yes
					fontcolor = "[MusicPlayer.GetTrackTextColor( MusicTrack.Self )]"
					max_width = 200
				}
			}
		}
	}

	type vbox_categories = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			size = { 328 500 }

			blockoverride "scrollbox_empty"
			{
				visible = "[IsDataModelEmpty( MusicPlayer.AccessCategories )]"
				text = MUSIC_PLAYER_NO_CATEGORIES_FOUND
			}

			blockoverride "scrollbox_content"
			{
				dynamicgridbox = {
					datamodel = "[MusicPlayer.AccessCategories]"

					item = {
						widget_music_player_category = {
							size = { 328 242 }
						}
					}
				}
			}
		}
	}

	type vbox_tracks_from_category = vbox {
		scrollbox = {
			size = { 354 500 }

			blockoverride "scrollbox_empty"
			{
				visible = "[IsDataModelEmpty( MusicPlayer.AccessTracksFromSelectedCategory )]"
				text = MUSIC_PLAYER_NO_TRACKS_FOUND
			}

			blockoverride "scrollbox_content"
			{
				dynamicgridbox = {
					datamodel = "[MusicPlayer.AccessTracksFromSelectedCategory]"

					item = {
						widget_music_player_track = {
							size = { 322 55 }
						}
					}
				}
			}
		}
	}
}
