window = {
	name = "activity_window"
	size = { 1390 750 }
	layer = middle
	parentanchor = center
	allow_outside = yes

	datacontext = "[GetPlayer]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[ActivityWindow.GetActivity]"
	datacontext = "[Activity.GetType]"

	using = Window_Background
	using = Window_Movable
	using = Window_Decoration_Frontend_Flat_Bottom

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Sound_Panel_Popup_Snapshot
		on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		on_start = "[PdxGuiWidget.FindChild( 'pulse_action_popup' ).Hide]"
	}

	# Background illustration
	margin_widget = {
		name = "background"
		size = { 100% 100% }

		background = {
			visible = "[Not( ActivityWindow.HasActiveEvent )]"
			texture = "[ActivityWindow.GetBackground.GetTexture]"
			fittype = centercrop
			using = Mask_Rough_Edges

			margin = { -40 -20 }
		}
	}

	# Characters idle
	vbox = {
		name = "idle_character"

		visible = "[Not( ActivityWindow.HasActiveEvent )]"
		datacontext = "[ActivityWindow.GetBackground]"

		expand = {}

		widget = {
			size = { 1310 750 }
			scissor = yes

			hbox = {
				name = "idle_characters_ongoing"
				datamodel = "[ActivityWindow.GetCharacters]"
				visible = "[Not( Activity.IsComplete )]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				margin_top = 170

				item = {
					widget = {
						size = { 250 550 }

						allow_outside = no

						portrait_body = {
							datacontext = "[ActivityWindowCharacter.GetCharacter]"
							parentanchor = center

							allow_outside = yes

							blockoverride "portrait_texture"
							{
								size = { 700 530 }
								portrait_texture = "[Character.GetAnimatedPortrait( ActivityWindowBackgroundData.GetEnvironment, ActivityWindowCharacter.GetCamera, ActivityWindowCharacter.GetAnimation, PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"

								using = tooltip_below
								tooltip_widgetanchor = center
							}

							blockoverride "mask"
							{
								mask = "gfx/portraits/portrait_mask_event.dds"
							}

							blockoverride "status_icons" {}
							blockoverride "coa" {}
							blockoverride "opinion_box" {}

							widget = {
								parentanchor = bottom|hcenter
								position = { 0 -40 }
								size = { 200 85 }

								vbox = {
									layoutpolicy_vertical = expanding
									parentanchor = bottom|hcenter

									expand = {}

									hbox = {
										background = {
											using = Background_Area_ExtraDark

											alpha = 0.8
											margin = { 50 8 }

											modify_texture = {
												name = "mask"
												texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
												spriteType = Corneredstretched
												blend_mode = alphamultiply
											}
										}

										vbox = {
											layoutpolicy_vertical = expanding

											portrait_status_icons = {
												margin_top = 2
												scale = 0.85
											}

											expand = {}
										}

										text_single = {
											name = "label"

											text = "[ActivityWindowCharacter.GetLabel]"
											align = center|nobaseline
											max_width = 200

										}
									}
								}
							}
						}
					}
				}
			}

			hbox = {
				name = "idle_characters_complete"
				datamodel = "[DataModelFirst( ActivityWindow.GetCharacters, '(int32)3' )]"
				visible = "[Activity.IsComplete]"
				layoutpolicy_vertical = expanding

				margin_top = 170
				margin_left = 400

				item = {
					widget = {
						size = { 280 580 }

						allow_outside = no

						portrait_body = {
							datacontext = "[ActivityWindowCharacter.GetCharacter]"
							parentanchor = center

							allow_outside = yes

							blockoverride "portrait_texture"
							{
								size = { 700 530 }
								portrait_texture = "[Character.GetAnimatedPortrait( ActivityWindowBackgroundData.GetEnvironment, ActivityWindowCharacter.GetCamera, ActivityWindowCharacter.GetAnimation, PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"

								tooltip_offset = { -450 0 }
							}

							blockoverride "status_icons" {}
							blockoverride "coa" {}
							blockoverride "opinion_box" {}

							vbox = {

								expand = {}

								hbox = {
									background = {
										using = Background_Area_Dark
										margin = { 50 4 }

										modify_texture = {
											name = "mask"
											texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
											spriteType = Corneredstretched
											blend_mode = alphamultiply
										}
									}

									vbox = {
										layoutpolicy_vertical = expanding

										portrait_status_icons = {
											margin_top = 5
											scale = 0.85
										}

										expand = {}
									}

									text_single = {
										name = "label"
										text = "[ActivityWindowCharacter.GetLabel]"
										align = center
										margin_bottom = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}

	# Activity Events
	widget = {
		name = "activity_event_widgets"
		visible = "[ActivityWindow.HasActiveEvent]"
		size = { 100% 100% }

		# Used for pivotal moments in Chariot Races which are not fullscreen
		widget = {
			name = "widget_activity_pivotal_moment_event_window"
			parentanchor = center
			size = { 100% 95% }
			alwaystransparent = yes
		}

		activity_event_widget = {
			name = "activity_event"
			parentanchor = center
			size = { 100% 95% }
		}
	}

	# Tour arrival event
	widget = {
		name = "activity_top_layer_event_widgets"
		visible = "[ActivityWindow.HasActiveEvent]"
		size = { 100% 100% }

		activity_event_widget = {
			name = "tour_arrival_event"
			parentanchor = center
			size = { 100% 95% }

			blockoverride "characters_appear_delay"
			{
				delay = 1.8
			}

			blockoverride "text_appear_delay"
			{
				delay = 2.3
			}
		}
	}

	# Conclusion
	widget = {
		name = "conclusion"
		visible = "[Not( ActivityWindow.HasActiveEvent )]"
		parentanchor = vcenter
		position = { 22 -10 }
		size = { 300 600 }

		vbox_activity_conclusion = {
			name = "activity_conclusion"
			visible = "[Activity.IsComplete]"
			layoutpolicy_vertical = expanding

			margin_bottom = 5

			background = {
				using = Background_Area_ExtraDark
				margin_top = 5
				margin_bottom = 20
				margin_left = -15

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
					alpha = 0.3
				}
			}

			blockoverride "close_activity_onclick"
			{
				onclick = "[ActivityWindow.Close]"
			}
		}
	}

	# Main Content
	vbox = {
		name = "main_content"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		margin_bottom = 20

		expand = {
			visible = "[Not(ActivityWindow.HasActiveEvent)]"
		}

		expand = {}

		# Bottom Bar
		widget = {
			size = { 1328 140 }

			vbox = {
				name = "activity_content"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				expand = {}

				vbox = {
					name = "bottom_bar"
					datacontext = "[GetPlayer]"
					layoutpolicy_horizontal = expanding
					spacing = 5

					hbox = {
						name = "ongoing_info"
						visible = "[And(Not( Activity.IsComplete ),Not(ActivityWindow.HasActiveEvent))]"
						layoutpolicy_horizontal = expanding

						background = {
							texture = "gfx/interface/window_activities/activity_window_bg.dds"
							margin = { 5 0 }
							margin_top = 62
							margin_bottom = 38

							using = Mask_Rough_Edges
						}

						hbox_activity_progress = {
							name = "activity_progress"
							margin_left = 25
							margin_bottom = 5
						}

						expand = {}

						hbox = {
							name = "few_phases"
							visible = "[LessThan_int32(Activity.GetPlannedPhasesCount, '(int32)9')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_right = 20
							spacing = 5

							expand = {}

							activity_phase_progress_timline_widget = {
								name = "phase_progres_timeline_short"
								size = { 750 55 }
							}
						}

						hbox = {
							name = "many_phases"
							visible = "[GreaterThan_int32(Activity.GetPlannedPhasesCount, '(int32)8')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_right = 20
							spacing = 5

							expand = {}

							activity_phase_progress_timline_widget = {
								name = "phase_progres_timeline_long"
								size = { 770 55 }
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 10 }

						background = {
							using = Background_Area_Light
							margin_top = 5

							modify_texture = {
								name = "mask"
								texture = "gfx/interface/component_masks/mask_seamless_torn_edge_horizontal.dds"
								spriteType = corneredtiled
								spriteborder_top = 20
								blend_mode = alphamultiply
								texture_density = 4
							}
						}

						vbox = {
							visible = "[Activity.IsParticipant( Character.Self )]"

							hbox = {
								name = "current_intent"
								datacontext = "[Character.GetInvolvedActivityIntent]"
								visible = "[Not( Activity.IsComplete )]"
								margin_left = 15

								text_single = {
									text = "ACTIVITY_WINDOW_YOUR_INTENT"
									default_format = "#medium"
									align = nobaseline
									max_width = 110
									margin_right = 10
								}

								button_standard = {
									size = { 300 44 }
									onclick = "[ToggleGameViewData( 'activity_intent_selection', GetPlayer )]"
									enabled = "[Not( ActivityWindow.HasActiveEvent )]"
									tooltip = "[ActivityWindow.GetIntentTooltip]"

									animation_attention_text_single = {
										blockoverride "start_state"
										{
											name = "activity_intent_completed"
										}
									}

									flowcontainer = {
										parentanchor = vcenter
										spacing = 10
										margin = { 10 0 }

										icon = {
											size = { 30 30 }
											texture = "[ActivityIntent.GetIcon]"

											modify_texture = {
												texture = "gfx/interface/colors/colors_textured.dds"
												blend_mode = add
												framesize = { 96 96 }

												block "master_color_frame" {
													frame = 1
												}
											}
										}

										text_single = {
											text = "[ActivityIntent.GetName]"
											align = left|nobaseline
											parentanchor = vcenter
											max_width = 230
										}
									}

									button_replace = {
										parentanchor = right|vcenter
										position = { -10 0 }
									}
								}

								expand = {}
							}

							hbox = {
								name = "succeeded_multiple_intents"
								visible = "[And( Activity.IsComplete, GreaterThan_int32( GetDataModelSize( Character.GetCompletedIntents ), '(int32)1' ) )]"
								layoutpolicy_horizontal = expanding

								margin_left = 15
								spacing = 10

								text_single = {
									text = "ACTIVITY_CONCLUSION_COMPLETED_INTENT_MULTI"
								}

								hbox = {
									datamodel = "[Character.GetCompletedIntents]"

									item = {
										icon_flat_standard = {
											name = "current_intent_icon"
											size = { 30 30 }

											datacontext = "[ActivityIntentData.GetType]"
											texture = "[ActivityIntent.GetIcon]"
											raw_tooltip = "#T [ActivityIntent.GetName]#!"
										}
									}
								}

								expand = {}
							}

							hbox = {
								name = "succeeded_single_intent"
								visible = "[And( Activity.IsComplete, EqualTo_int32( GetDataModelSize( Character.GetCompletedIntents ), '(int32)1' ) )]"
								layoutpolicy_horizontal = expanding

								margin_left = 15
								spacing = 5

								text_single = {
									text = "ACTIVITY_CONCLUSION_COMPLETED_INTENT"
								}

								hbox = {
									datacontext_from_model = {
										datamodel = "[Character.GetCompletedIntents]"
										index = 0
									}
									datacontext = "[ActivityIntentData.GetType]"

									spacing = 4

									icon_flat_standard = {
										name = "intent_icon"
										size = { 30 30 }
										texture = "[ActivityIntent.GetIcon]"
									}

									text_single = {
										name = "intent_name_completed"
										text = "[ActivityIntent.GetName]"
									}
								}

								#expand = {}
							}

							hbox = {
								name = "failed_intent"
								visible = "[And( Activity.IsComplete, IsDataModelEmpty( Character.GetCompletedIntents ) )]"
								datacontext = "[Character.GetInvolvedActivityIntent]"
								layoutpolicy_horizontal = expanding
								margin_left = 15

								text_single = {
									text = "ACTIVITY_CONCLUSION_FAILED_INTENT"
								}

								icon_flat_standard = {
									name = "intent_icon"
									size = { 30 30 }
									texture = "[ActivityIntent.GetIcon]"
								}

								text_single = {
									name = "intent_name_failed"
									text = "[ActivityIntent.GetName]"
								}

								expand = {}
							}
						}

						vbox = {
							name = "activity_plugin_widgets_summary"
							layoutpolicy_horizontal = expanding

							state = {
								trigger_on_create = yes
								name = appear_test
								delay = 0.8
								using = Animation_Curve_Default
								alpha = 1
								duration = 0.6
							}
						}
						
						hbox = {
							visible = "[EqualTo_string( ActivityType.GetKey(), 'activity_journey')]" 
							name = "activity_plugin_widgets_skill_text"
							layoutpolicy_horizontal = expanding
							margin_right = 50
							background = {
								margin_right = -40
								margin_left = 10
								margin_bottom = 8
								margin_top = 5
								using = Background_Bottom_Fade
								using = Background_Area
								using = Mask_Rough_Edges
							}
							highlight_icon_building = {
								alwaystransparent = yes
								texture = "[Activity.GetCurrentPhase.GetLocation.GetHolding.GetSpecialBuildingType.GetTypeIcon]"
								size = { 44 38 }
								datacontext = "[Activity.GetCurrentPhase.GetLocation.GetHolding.GetSpecialBuildingType]"
								tooltip = "journey_building_tt"
								using = tooltip_ne
							}
							spacer = { size = { 15 15 } }
							vbox = {
								layoutpolicy_horizontal = expanding
								text_single = {
									text = "journey_skill_type_desc"
								}
								text_single = {
									text = "journey_skill_desc"
									max_width = 320
								}
							}
						}

						expand = {}

						hbox = {
							margin_right = 15
							spacing = 10

							button_standard = {
								name = "guest_list"
								text = "ACTIVITY_WINDOW_GUEST_LIST"
								down = "[IsGameViewDataShown( 'activity_guest_list', Activity.Self )]"
								onclick = "[ToggleGameViewData( 'activity_guest_list', Activity.Self )]"
							}

							button_standard = {
								name = "activity_log"
								text = "ACTIVITY_WINDOW_LOG"
								down = "[IsGameViewDataShown( 'activity_log', Activity.Self )]"
								onclick = "[ToggleGameViewData( 'activity_log', Activity.Self )]"
							}

							button_standard = {
								name = "charioteers"
								text = "CHARIOTEERS_WINDOW_LABEL"
								visible = "[DataModelHasItems( ActivityWindow.GetCurrentPhaseGuestSubset( 'charioteers' ) )]"
								down = "[Not( GetVariableSystem.Exists( 'activity_charioteers_view' ) )]"
								onclick = "[GetVariableSystem.Toggle( 'activity_charioteers_view' )]"
							}
						}
					}
				}
			}
		}
	}



	widget = {
		name = "activity_top_layer_idle_widgets"
		visible = "[Not( ActivityWindow.HasActiveEvent )]"

		size = { 100% 100% }
	}

	# Header
	widget = {
		name = "header"
		parentanchor = top|hcenter
		layoutpolicy_horizontal = expanding
		size = { 1346 116 }

		icon = {
			name = "activity_header_glass"
			position = { 0 -46 }
			size = { 100% 100% }
			texture = "gfx/interface/window_activities/header_activity_glass.dds"

			modify_texture = {
				name = overlay
				texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
				blend_mode = colordodge
				translate_uv = { 0.6 0 }
			}

			state = {
				name = right
				next = left

				duration = 8
				bezier = { 0.8 0.18 0.96 .05 }

				modify_texture = {
					name = overlay
					translate_uv = { -0.6 0 }
				}
			}

			state = {
				name = left
				next = right

				duration = 0.0
				delay = 5

				modify_texture = {
					name = overlay
					translate_uv = { 0.6 0 }
				}
			}

			state = {
				trigger_on_create = yes
				name = start
				next = right

				duration = 0.0

				modify_texture = {
					name = overlay
					translate_uv = { 0.6 0 }
				}
			}
		}

		icon = {
			name = "activity_header_frame"
			position = { 0 -46 }
			size = { 100% 100% }
			texture = "gfx/interface/window_activities/header_activity_frame.dds"
		}

		icon = {
			texture = "[ActivityType.GetHeaderIcon]"
			size = { 60 60 }
			position = { 0 -27 }
			parentanchor = top|hcenter
		}

		container = {
			name = "non_event_titles"
			visible = "[Not( ActivityWindow.HasActiveEvent )]"

			parentanchor = hcenter
			position = { 0 17 }

			activity_header = {
				name = "ongoing_title"
				visible = "[Not( Activity.IsComplete )]"
				text = "ACTIVITY_WINDOW_HEADER"
			}

			activity_header = {
				name = "conclusion_title"
				visible = "[Activity.IsComplete]"
				text = "ACTIVITY_CONCLUSION_HEADER"
			}

			background = {
				using = Background_Area_ExtraDark
				alpha = 0.4

				margin = { 80 0 }
				margin_bottom = 10


				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphamultiply
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
					alpha = 0.4
					mirror = vertical
				}
			}
		}

		container = {
			name = "activity_event_titles"
			visible = "[ActivityWindow.HasActiveEvent]"

			parentanchor = hcenter
			position = { 0 17 }

			activity_event_header = {
				name = "activity_event"
			}

			activity_event_header = {
				name = "tour_arrival_event"
			}

			activity_event_header = {
				name = "chariot_race_pivotal_moment_widget"
			}

			background = {
				using = Background_Area_ExtraDark
				alpha = 0.4

				margin = { 80 0 }
				margin_bottom = 10


				modify_texture = {
					texture = "gfx/interface/component_masks/mask_glow.dds"
					blend_mode = alphamultiply
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
					alpha = 0.4
					mirror = vertical
				}
			}
		}

		watch_window_button = {
			size = { 60 40 }
			parentanchor = right
			position = { -110 18 }
			onclick = "[AddWatchWindow( Activity.MakeScope )]"
		}

		buttons_window_control = {
			parentanchor = right
			position = { -10 18 }
			allow_outside = yes

			blockoverride "button_close"
			{
				onclick = "[ActivityWindow.Close]"
			}
			blockoverride "button_go_to"
			{
				tooltip = "ACTIVITY_WINDOW_CURRENT_LOCATION"
				onclick = "[Activity.GetCurrentPhase.GetLocation.PanCameraTo]"
			}
		}
	}

	activity_pulse_action_popup_right = {
		datacontext = "[ActivityWindow.GetLastWeeklyPulseEffectData]"
		visible = "[And( ActivityPulseEffect.IsValid, Not( ActivityWindow.HasActiveEvent ) )]"
		position = { -35 80 }
	}

	widget = {
		parentanchor = right
		allow_outside = yes
		position = { -5 30 }

		vbox = {
			layoutpolicy_vertical = expanding

			window_activity_contestants_right_bar = {}
		}
	}
}

types ActivityWindowTypes
{
	type activity_header = text_single
	{
		fontsize = 29
		fontsize_min = 16
		default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"

		using = Font_Type_Flavor
		max_width = 950

		alpha = 0

		state = {
			name = start
			trigger_on_create = yes
			delay = 0.2
			using = Animation_Curve_Default
			alpha = 1
			duration = 0.5
		}
	}

	type activity_event_header = activity_header
	{
		datacontext = "[ActivityWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
		datacontext = "[EventWindowViewInsert.GetOpenEvent]"
		visible = "[EventWindowViewInsert.HasOpenEvent]"

		text = "ACTIVITY_WINDOW_EVENT_HEADER"
		max_width = 1000
	}

	type activity_phase_timeline_icon = icon
	{
		size = { 50 50 }
		texture = "gfx/interface/icons/activity_phases/button_activity_base.dds"

		using = tooltip_se

		icon = {
			name = "progress_frame"
			texture = "gfx/interface/progressbars/action_progress_frame.dds"
			size = { 50 50 }
			parentanchor = center
			alpha = 0.5
		}

		icon_flat_standard = {
			parentanchor = center
			size = { 40 40 }

			block "texture"
			{
			}
		}
	}

	type activity_phase_progress_timline_widget = widget {
		hbox = {
			background = {
				texture = "gfx/interface/window_scheme/scheme_success_progressbar_bg.dds"
				margin_top = -16
				margin_bottom = -15
			}

			hbox = {
				name = "starting_phase"
				layoutpolicy_horizontal = expanding
				layoutstretchfactor_horizontal = 1

				hbox = {
					layoutpolicy_horizontal = expanding

					activity_phase_timeline_icon = {
						name = "starting_phase_icon"

						tooltip = "ACTIVITY_TIMELINE_START"

						blockoverride "texture"
						{
							texture = "gfx/interface/icons/activity_phases/phase_planning.dds"
							size = { 36 36 }
						}
					}

					filled_line_progressbar_icon = {
						layoutpolicy_horizontal = expanding

						blockoverride "color"
						{
							using = Color_Blue
						}
					}
				}
			}

			hbox = {
				name = "planned_phases"
				layoutpolicy_horizontal = expanding
				datamodel = "[Activity.GetPlannedPhases]"
				layoutstretchfactor_horizontal = "[GetDataModelSize( Activity.GetPlannedPhases )]"
				datacontext = "[Activity.GetLastWeeklyPulseAction]"

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						datacontext = "[PlannedActivityPhase.GetPhase]"

						hbox = {
							name = "current_phase"
							layoutpolicy_horizontal = expanding

							visible = "[EqualTo_int32( Activity.GetPhaseIndexOf( PlannedActivityPhase.Self ), Activity.GetCurrentPhaseIndex )]"

							activity_phase_timeline_icon = {
								name = "current_phase_icon"

								blockoverride "texture"
								{
									texture = "[ActivityPhase.GetIcon]"
									size = { 36 36 }
								}

								block "current_phase_progress"
								{
									tooltip = "ACTIVITY_WINDOW_PHASE_IN_PROGRESS_TOOLTIP"

									widget = {
										name = "weekly_tick_progress"
										parentanchor = center
										size = { 50 50 }
										visible = "[EqualTo_int32( Activity.GetPhaseIndexOf( PlannedActivityPhase.Self ), Activity.GetCurrentPhaseIndex )]"

										progresspie = {
											name = "progress"
											size = { 44 44 }
											texture = "gfx/interface/progressbars/action_progress_thin.dds"
											framesize = { 128 128 }
											parentanchor = center
											frame = 2
											value = "[GetTicksSinceLastProgress( Activity.GetID, DaysPerWeek )]"
											min = 0
											max = "[DaysPerWeek]"
										}
									}
								}
							}

							arrow_progressbar_icon = {
								layoutpolicy_horizontal = expanding

								blockoverride "color"
								{
									using = Color_Blue
								}
							}
						}

						activity_phase_timeline_icon = {
							name = "not_current_phase"

							visible = "[NotEqualTo_int32( Activity.GetPhaseIndexOf( PlannedActivityPhase.Self ), Activity.GetCurrentPhaseIndex )]"
							tooltip = "ACTIVITY_PHASE_TOOLTIP"

							blockoverride "texture"
							{
								texture = "[ActivityPhase.GetIcon]"
								size = { 36 36 }
							}
						}

						filled_line_progressbar_icon = {
							visible = "[LessThan_int32( Activity.GetPhaseIndexOf( PlannedActivityPhase.Self ), Activity.GetCurrentPhaseIndex )]"
							layoutpolicy_horizontal = expanding

							blockoverride "color"
							{
								using = Color_Blue
							}
						}

						filled_line_progressbar_icon = {
							visible = "[GreaterThan_int32( Activity.GetPhaseIndexOf( PlannedActivityPhase.Self ), Activity.GetCurrentPhaseIndex )]"
							layoutpolicy_horizontal = expanding

							blockoverride "color"
							{
								using = Color_Blue_Transparent
							}
						}
					}
				}
			}

			activity_phase_timeline_icon = {
				name = "conclusion_phase_icon"

				tooltip = "ACTIVITY_TIMELINE_CONCLUSION"

				blockoverride "texture"
				{
					texture = "gfx/interface/icons/activity_phases/phase_conclusion.dds"
					size = { 36 36 }
				}
			}
		}
	}

	type window_activity_contestants_right_bar = vbox
	{
		allow_outside = yes
		name = "window_activity_contestants_right_bar_container"
	}

	type activity_event_widget = margin_widget
	{
		datacontext = "[ActivityWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
		datacontext = "[EventWindowViewInsert.GetOpenEvent]"
		visible = "[EventWindowViewInsert.HasOpenEvent]"

		using = Event_Window_Debug_OptionTooltips

		state = {
			name = activity_new_event_shown
			on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
		}

		event_window_background_widget = {
			margin = { 40 0 }

			blockoverride "event_mask" {}

			blockoverride "event_mask_properties"
			{
				loop = no
				restart_on_show = yes
			}

			blockoverride "event_video_properties"
			{
				restart_on_show = yes
			}

			blockoverride "event_picture_properties"
			{
				modify_texture = {
					texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					spriteType = corneredstretched
					spriteborder = { 20 20 }
					blend_mode = alphamultiply
					texture_density = 2
				}
			}
		}

		widget = {
			name = "main_characters"
			size = { 100% 100% }
			position = { 0 -55}

			alpha = 0

			state = {
				name = activity_event_appear
				alpha = 0
				next = activity_event_fade_in
			}

			state = {
				name = activity_event_fade_in
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.5

				block "characters_appear_delay"
				{
					delay = 0.3
				}
			}

			### CENTER CHARACTER ###
			widget = {
				parentanchor = bottom|hcenter
				size = { 300 558 }

				allow_outside = no

				portrait_event = {
					name = "portrait_center"
					datacontext = "[EventWindowData.GetPortraitCharacter('center_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('center_portrait')]"
					parentanchor = center
					size = { 500 558 }

					allow_outside = yes

					blockoverride "portrait_button"
					{
						size = { 140% 140% }
						portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('center_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('center_portrait'))]"

						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('center_portrait')]"
						using = tooltip_below
						tooltip_widgetanchor = center
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('center_portrait') ))]"
						position = { -40 0 }
					}

					highlight_icon = {
						name = "prison_bars"
						visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('center_portrait')))]"
						visible_at_creation = no
						size = { 280 500 }
						parentanchor = bottom|hcenter
						effectname = "NoHighlight"
						spriteType = corneredTiled
						texture_density = 1.5
						texture = "gfx/portraits/portrait_prison_body.dds"

						modify_texture = {
							name = "mask"
							texture =  "gfx/portraits/portrait_mask_event.dds"
							spriteType = Corneredstretched
							blend_mode = alphamultiply
						}
					}
				}
			}

			### RIGHT CHARACTER ###
			widget = {
				parentanchor = bottom|hcenter
				position = { 350 0 }
				size = { 300 558 }

				allow_outside = no

				portrait_event = {
					name = "portrait_right"
					datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
					parentanchor = hcenter
					position = { -100 0 }
					size = { 500 558 }

					allow_outside = yes

					blockoverride "portrait_button"
					{
						size = { 140% 140% }
						portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"

						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
						using = tooltip_below
						tooltip_widgetanchor = center
						tooltip_offset = { 180 0 }
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
						position = { 80 0 }
					}

					highlight_icon = {
						name = "prison_bars"
						visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
						visible_at_creation = no
						size = { 285 500 }
						parentanchor = bottom|right
						effectname = "NoHighlight"
						spriteType = corneredTiled
						texture_density = 1.5
						texture = "gfx/portraits/portrait_prison_body.dds"

						modify_texture = {
							name = "mask"
							texture =  "gfx/portraits/portrait_mask_event.dds"
							spriteType = Corneredstretched
							blend_mode = alphamultiply
						}
					}
				}
			}

			### LEFT CHARACTER ###
			widget = {
				parentanchor = bottom|hcenter
				position = { -345 0 }
				size = { 300 558 }

				allow_outside = no

				portrait_event = {
					name = "portrait_left"
					datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('left_portrait')]"
					parentanchor = hcenter
					position = { 30 0 }
					size = { 500 558 }


					allow_outside = yes

					blockoverride "portrait_button"
					{
						size = { 140% 140% }
						portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"

						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
						using = tooltip_below
						tooltip_widgetanchor = center
						tooltip_offset = { -70 0 }
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
						position = { -40 0 }
					}

					highlight_icon = {
						name = "prison_bars"
						visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
						visible_at_creation = no
						size = { 280 500 }
						parentanchor = bottom|left
						effectname = "NoHighlight"
						spriteType = corneredTiled
						texture_density = 1.5
						texture = "gfx/portraits/portrait_prison_body.dds"

						modify_texture = {
							name = "mask"
							texture =  "gfx/portraits/portrait_mask_event.dds"
							spriteType = Corneredstretched
							blend_mode = alphamultiply
						}
					}
				}
			}
		}

		flowcontainer = {
			name = "side_characters"
			parentanchor = right
			position = { -40 40 }
			margin = { 15 15 }
			spacing = 5

			direction = vertical
			ignoreinvisible = yes

			alpha = 0

			state = {
				name = activity_event_appear
				alpha = 0
				next = activity_event_fade_in
			}

			state = {
				name = activity_event_fade_in
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.5

				block "characters_appear_delay"
				{
					delay = 0.4
				}
			}

			background = {
				using = Background_Area_ExtraDark
				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}

			flowcontainer = {
				datacontext = "[EventWindowData.GetArtifact('lower_left_portrait')]"
				visible = "[EventWindowData.HasArtifact('lower_left_portrait')]"
				parentanchor = hcenter

				direction = vertical
				spacing = -8

				using = artifact_event_flowcontainer
			}

			flowcontainer = {
				visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
				direction = vertical
				parentanchor = hcenter

				portrait_head_small = {
					name = "portrait_left_small_1"
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
					parentanchor = hcenter

					blockoverride "portrait_button"
					{
						portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_head', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"
						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
					}

					blockoverride "status_icons" {}
					blockoverride "opinion_box" {}
					blockoverride "grayscale" {}
				}

				text_label_center = {
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
					parentanchor = hcenter
					alwaystransparent = yes

					text = "[Character.GetShortUINameNoTooltip]"
					max_width = 115
					align = center
					fontsize_min = 12
				}
			}

			flowcontainer = {
				datacontext = "[EventWindowData.GetArtifact('lower_center_portrait')]"
				visible = "[EventWindowData.HasArtifact('lower_center_portrait')]"
				parentanchor = hcenter

				direction = vertical
				spacing = -8

				using = artifact_event_flowcontainer
			}

			flowcontainer = {
				visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
				direction = vertical
				parentanchor = hcenter

				portrait_head_small = {
					name = "portrait_left_small_2"
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
					parentanchor = hcenter

					blockoverride "portrait_button"
					{
						portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_center_portrait', 'camera_head', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_center_portrait'))]"
						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_center_portrait') ))]"
					}

					blockoverride "status_icons" {}
					blockoverride "opinion_box"{}
					blockoverride "grayscale" {}
				}

				text_label_center = {
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
					parentanchor = hcenter
					alwaystransparent = yes

					text = "[Character.GetShortUINameNoTooltip]"
					max_width = 115
					align = center
					fontsize_min = 12
				}
			}

			flowcontainer = {
				datacontext = "[EventWindowData.GetArtifact('lower_right_portrait')]"
				visible = "[EventWindowData.HasArtifact('lower_right_portrait')]"
				parentanchor = hcenter

				direction = vertical
				spacing = -8

				using = artifact_event_flowcontainer
			}

			flowcontainer = {
				visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
				direction = vertical
				parentanchor = hcenter

				portrait_head_small = {
					name = "portrait_right_small_1"
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
					parentanchor = hcenter

					blockoverride "portrait_button"
					{
						portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_right_portrait', 'camera_head', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_right_portrait'))]"
						tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
					}

					blockoverride "highlight_visible"
					{
						visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_right_portrait') ))]"
					}

					blockoverride "status_icons"{}
					blockoverride "opinion_box"{}
					blockoverride "grayscale" {}
				}

				text_label_center = {
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
					parentanchor = hcenter
					alwaystransparent = yes

					text = "[Character.GetShortUINameNoTooltip]"
					max_width = 115
					align = center
					fontsize_min = 12
				}
			}
		}

		# CfV
		vbox = {
			name = "lotr_shader_event_background"
			margin = { 30 20 }
			layoutpolicy_horizontal = expanding
		}
		# CfV end

		# Event Effect Video
		event_window_effect_2d_widget = {
			margin = { 33 20 }
		}

		#Foreground Shader VFX
		margin_widget = {
			size = { 100% 100% }
			margin = { 30 20 }
			position = { 30 20 }
			name = "foreground_shader_vfx_container"
		}
		
		vbox = {
			layoutpolicy_horizontal = expanding
			margin_bottom = 55
			alpha = 0

			state = {
				name = activity_event_appear
				alpha = 0
				next = activity_event_fade_in
			}

			state = {
				name = activity_event_fade_in
				using = Animation_Curve_Default
				alpha = 1
				duration = 1.5

				block "characters_appear_delay"
				{
					delay = 0.4
				}
			}

			expand = {}

			hbox =  {
				name = "text_and_options"
				layoutpolicy_horizontal = expanding

				margin = { 35 0 }
				spacing = 5

				background = {
					using = Background_Area_ExtraDark
					margin = {-35 0 }
					margin_top = 10

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_corners_bottom.dds"
						blend_mode = alphamultiply
						alpha = 0.5
					}
				}

				background = {
					margin = {-35 0 }
					margin_top = 10
					using = Background_Area_ExtraDark

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}
				}

				@text_width = 750

				scrollarea = {
					name = "description_scrollarea"
					size = { @text_width 270 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = Scrollbar_Vertical

						blockoverride "alpha"{
							alpha = 0.6
						}
					}

					scrollwidget = {
						text_multi = {
							name = "description"
							parentanchor = bottom
							autoresize = yes
							max_width = @text_width
							text = "[EventWindowData.GetDescription]"
							fontsize = 16

							margin = { 25 0 }
							margin_bottom = 25

							background = {
								using = Background_Area_ExtraDark
								margin_top = 60
								margin_bottom = 5

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
									blend_mode = alphamultiply
									alpha = 0.9
								}

								modify_texture = {
									name = "mask"
									texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
									spriteType = corneredtiled
									spriteborder_top = 150
									blend_mode = alphamultiply
									texture_density = 4
								}
							}
						}
					}
				}

				vbox = {
					name = "option_area"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					margin_bottom = 23
					margin_left = 20
					spacing = 5

					expand = {}

					# Hack to be able to center text without having to change in base type which is also used in regular event window
					hbox = {
						layoutpolicy_horizontal = expanding

						background = {
							using = Background_Area_ExtraDark

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
								blend_mode = alphamultiply
								mirror = horizontal
							}
						}

						expand = {}

						hbox = {
							name = "custom_widgets_container"
							margin_right = 55
						}

						expand = {}
					}

					fixedgridbox = {
						name = "option_grid"
						size = { 420 500 }
						addcolumn = 420
						addrow = 42
						datamodel = "[EventWindowData.GetOptions]"
						alwaystransparent = no
						layoutpolicy_horizontal = expanding

						item = {
							button_eventoption = {
								blockoverride "option_tooltip_position" {}

								blockoverride "onmousehierarchy_callbacks"
								{
									onmousehierarchyenter = "[EventWindowViewInsert.OnMouseEnterOption( EventOption.Self )]"
									onmousehierarchyleave = "[EventWindowViewInsert.OnMouseLeaveOption]"
								}
							}
						}
					}
				}
			}
		}
		
		# CfV
		vbox = {
			name = "lotr_shader_event_foreground"
			margin = { 30 20 }
			layoutpolicy_horizontal = expanding
		}
		# CfV end
		
		event_window_transition_widget = {
			margin = { 30 0 }

			using = Event_Window_Default_Transition_States

			blockoverride "event_transition_mask_properties"
			{
				loop = no
				restart_on_show = yes
			}
			blockoverride "event_transition_picture_properties"
			{
				restart_on_show = yes
			}
			blockoverride "event_transition_picture_properties"
			{
				using = Mask_Rough_Edges
			}
		}

		#icon = {
			#visible = "[And( EventWindowData.ShouldShowContentSource, EventWindowData.GetContentSourceDlc.HasEventDecoration )]"
			#name = "source_icon"
			#position = { 22 50 }
			#size = { 263 64 }
			#parentanchor = top|left
			#texture = "[EventWindowData.GetContentSourceDlc.GetEventDecoration]"
			#mirror = horizontal
			#tooltip = "EVENT_CONTENT_SOURCE_TT"
			#alpha = 1
		#}

		flowcontainer = {
			name = "event_debug_info"
			visible = "[InDebugMode]"
			parentanchor = top|left
			position = { 50 55 }
			ignoreinvisible = yes

			using = Event_Window_Debug_Info

			blockoverride "event_reset_onclick"
			{
				onclick = "[EventWindowViewInsert.Reload]"
			}
		}
	}

	type activity_event_widget_base = widget
	{
		visible = "[EventWindowViewInsert.HasOpenEvent]"

		using = Event_Window_Debug_OptionTooltips

		using = Window_Background
		using = Window_Decoration_Frontend_Flat

		event_window_background_widget = {
			margin = { 40 0 }

			blockoverride "event_picture_properties"
			{
				modify_texture = {
					name = "event_picture_fade"
					texture = "gfx/interface/window_event/mask_event_image.dds"
					blend_mode = alphamultiply
				}
			}
		}

		# This is currently copied from the regular event window and then adding the mouse enter/leave callbacks
		vbox = {
			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 70 }

				icon = {
					name = "theme_header"
					position = { 20 5 }
					size = { 1057 70 }
					texture = "gfx/interface/window_event/header_neutral.dds"

					modify_texture = {
						name = overlay
						texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
						blend_mode = colordodge
						translate_uv = { 0.6 0 }
					}

					state = {
						name = right
						next = left

						duration = 8
						bezier = { 0.8 0.18 0.96 .05 }

						modify_texture = {
							name = overlay
							translate_uv = { -0.6 0 }
						}
					}

					state = {
						name = left
						next = right

						duration = 0.0
						delay = 5

						modify_texture = {
							name = overlay
							translate_uv = { 0.6 0 }
						}
					}

					state = {
						trigger_on_create = yes
						name = start
						next = right

						duration = 0.0

						modify_texture = {
							name = overlay
							translate_uv = { 0.6 0 }
						}
					}
				}

				text_single = {
					name = "title"
					parentanchor = vcenter
					position = { 100 0 }
					fontsize = 29
					fontsize_min = 16
					text = "[EventWindowData.GetTitle]"
					default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
					using = Font_Type_Flavor
					max_width = 950

					alpha = 0

					state = {
						name = start
						trigger_on_create = yes
						delay = 0.2
						using = Animation_Curve_Default
						alpha = 1
						duration = 0.5
					}
				}

				icon = {
					name = "theme_icon"
					parentanchor = vcenter
					position = { 20 0 }
					size = { 74 74 }
					texture = "[EventWindowData.GetThemeIcon]"

					modify_texture = {
						name = overlay
						texture = "gfx/interface/component_effects/effect_blue_shine.dds"
						blend_mode = colordodge
						translate_uv = {0.6 0}
					}

					state = {
						name = right
						next = left

						duration = 2
						bezier = { .8 .18 .96 .05}

						modify_texture = {
							name = overlay
							translate_uv = {-0.6 0}
						}
					}

					state = {
						name = left
						next = right

						duration = 0.0
						delay = 5


						modify_texture = {
							name = overlay
							translate_uv = {0.6 0}
						}
					}

					state = {
						trigger_on_create = yes
						name = start
						next = right

						duration = 0.0

						modify_texture = {
							name = overlay
							translate_uv = {0.6 0}
						}
					}
				}
			}

			expand = {}
		}

		state = {
			name = activity_new_event_shown
			on_start = "[PdxGuiWidget.FindChild( 'event_video' ).GfxVideoControl.Restart]"
		}

		vbox = {
			name = "event_window"

			widget = {
				name = "event_window_content"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					margin_left = 35
					margin_right = 35
					margin_bottom = 15

					widget = {
						name = "text_spacer"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 45
					}

					###CHARACTERS
					widget = {
						name = "characters"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 55
						alpha = 0

						state = {
							name = appear
							trigger_on_create = yes
							delay = 0.5
							using = Animation_Curve_Default
							alpha = 1
							duration = 0.5
						}

						### LEFT CHARACTER ###
						hbox = {
							widget = {
								name = "portrait_left"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								portrait_event = {
									name = "portrait_left"
									datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
									visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
									parentanchor = bottom|left
									position = { -70 0 }
									size = { 500 558 }

									blockoverride "portrait_button"
									{
										portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"
										tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
									}

									blockoverride "highlight_visible"
									{
										visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
										position = { -40 0 }
									}

									blockoverride "grayscale" {}

									highlight_icon = {
										name = "prison_bars"
										visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
										visible_at_creation = no
										size = { 280 500 }
										parentanchor = bottom|left
										effectname = "NoHighlight"
										spriteType = corneredTiled
										texture_density = 1.5
										texture = "gfx/portraits/portrait_prison_body.dds"

										modify_texture = {
											name = "mask"
											texture =  "gfx/portraits/portrait_mask_event.dds"
											spriteType = Corneredstretched
											blend_mode = alphamultiply
										}
									}
								}
							}

							### RIGHT CHARACTER ###
							widget = {
								name = "portrait_right"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								### RIGHT CHARACTER ###
								portrait_event = {
									name = "portrait_right"
									datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
									visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
									parentanchor = bottom|right
									position = { 8 0 }
									size = { 500 558 }

									blockoverride "portrait_button"
									{
										portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"
										tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
									}

									blockoverride "highlight_visible"
									{
										visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
										position = { 70 0 }
									}

									blockoverride "grayscale" {}

									highlight_icon = {
										name = "prison_bars"
										visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
										visible_at_creation = no
										size = { 285 500 }
										parentanchor = bottom|right
										effectname = "NoHighlight"
										spriteType = corneredTiled
										texture_density = 1.5
										texture = "gfx/portraits/portrait_prison_body.dds"

										modify_texture = {
											name = "mask"
											texture =  "gfx/portraits/portrait_mask_event.dds"
											spriteType = Corneredstretched
											blend_mode = alphamultiply
										}
									}
								}
							}
						}

						### Use this for single character
						portrait_event = {
							name = "portrait_center"
							visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), Not(EventWindowData.HasPortraitCharacter('right_portrait')))]"
							datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
							size = { 100% 112% }
							position = { -60 0 }
							parentanchor = bottom|left

							blockoverride "portrait_button"
							{
								portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_center', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
								alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"
								tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
								using = tooltip_below
								tooltip_offset = { 550 -580 }
							}

							blockoverride "highlight_visible"
							{
								visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
							}

							blockoverride "grayscale" {}

							highlight_icon = {
								name = "prison_bars"
								visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
								visible_at_creation = no
								size = { 300 500 }
								parentanchor = bottom|hcenter
								effectname = "NoHighlight"
								spriteType = corneredTiled
								texture_density = 1.5
								texture = "gfx/portraits/portrait_prison_body.dds"

								modify_texture = {
									name = "mask"
									texture =  "gfx/portraits/portrait_mask_event.dds"
									spriteType = Corneredstretched
									blend_mode = alphamultiply
								}
							}
						}

						margin_widget = {
							name = "bottom_characters"
							size = { 100% 170 }
							parentanchor = bottom|hcenter
							margin_bottom = 10
							allow_outside = yes

							icon = {
								name = "bottom_characters_bg"
								visible = "[Or(EventWindowData.HasPortraitOrArtifact('lower_left_portrait'), Or(EventWindowData.HasPortraitOrArtifact('lower_center_portrait'), EventWindowData.HasPortraitOrArtifact('lower_right_portrait')))]"
								position = { -55 7 }
								size = { 624 100% }
								texture = "gfx/interface/window_event/event_bottom_char_bg.dds"
							}

							flowcontainer = {
								spacing = 20
								parentanchor = bottom|hcenter

								flowcontainer = {
									parentanchor = bottom
									direction = vertical
									ignoreinvisible = yes

									event_portrait_status_icons_left = {
										datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
										visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"

										background = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
											spriteType = Corneredtiled
											spriteborder = { 20 20 }
											shaderfile = "gfx/FX/pdxgui_default.shader"
											alpha = 0.5
											margin = { 5 5 }

											modify_texture = {
												texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
												spriteType = Corneredstretched
												spriteborder = { 0 0 }
												blend_mode = overlay
												alpha = 0.5
											}
										}
									}

									spacer = {
										size = { 140 0 }
									}

									flowcontainer = {
										datacontext = "[EventWindowData.GetArtifact('lower_left_portrait')]"
										visible = "[EventWindowData.HasArtifact('lower_left_portrait')]"
										direction = vertical
										spacing =-5

										using = artifact_event_flowcontainer
									}

									widget = {
										datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
										visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
										size = { 140 150 }

										portrait_event_small = {
											name = "portrait_left_small_1"
											parentanchor = center
											position = { 0 -4 }

											blockoverride "portrait_button"
											{
												portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
												alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"
												tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
											}

											blockoverride "highlight_visible"
											{
												visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
											}

											blockoverride "status_icons" {}
											blockoverride "opinion_box" {}
											blockoverride "grayscale" {}

											blockoverride "coa"
											{
												event_portrait_status_icons_left = {
													visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
													parentanchor = bottom|left
													position = { -15 -5 }
													scale = 0.8

													background = {
														using = Background_Bottom_Fade
														margin = { 5 15 }
														using = Color_Black
														using = Mask_Rough_Edges
														alpha =  0.5

														modify_texture = {
															texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
															spriteType = Corneredstretched
															spriteborder = { 0 0 }
															blend_mode = overlay
														}
													}
												}
											}

											text_label_center = {
												parentanchor = bottom|hcenter
												position = { 20 -5 }
												alwaystransparent = yes
												text = "[Character.GetShortUINameNoTooltip]"
												max_width = 115
												align = center
												fontsize_min = 12
											}
										}
									}
								}

								flowcontainer = {
									parentanchor = bottom
									direction = vertical
									ignoreinvisible = yes

									spacer = {
										size = { 140 0 }
									}

									flowcontainer = {
										datacontext = "[EventWindowData.GetArtifact('lower_center_portrait')]"
										visible = "[EventWindowData.HasArtifact('lower_center_portrait')]"
										direction = vertical
										spacing =-5

										using = artifact_event_flowcontainer

										background = {
											using = Background_Area_Dark
											alpha = 0.4
											margin_bottom = -30
											margin_top = 10

											modify_texture = {
												name = "mask"
												texture = "gfx/interface/component_masks/mask_glow.dds"
												blend_mode = alphamultiply
											}
										}
									}

									widget = {
										datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
										visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
										size = { 140 150 }

										portrait_event_small = {
											name = "portrait_left_small_2"
											parentanchor = center
											position = { 0 -4 }

											blockoverride "portrait_button"
											{
												portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_center_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
												alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_center_portrait'))]"
												tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
											}

											blockoverride "highlight_visible"
											{
												visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_center_portrait') ))]"
											}

											blockoverride "status_icons" {}
											blockoverride "opinion_box"{}
											blockoverride "grayscale" {}

											blockoverride "coa" {
												event_portrait_status_icons_left = {
													visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
													parentanchor = bottom|left
													position = { -15 -5 }
													scale = 0.8

													background = {
														using = Background_Bottom_Fade
														margin = { 5 15 }
														color = { 0.1 0.1 0.1 0.8 }

														modify_texture = {
															texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
															spriteType = Corneredstretched
															spriteborder = { 0 0 }
															blend_mode = overlay
														}
													}
												}
											}

											text_label_center = {
												parentanchor = bottom|hcenter
												position = { 20 -5 }
												alwaystransparent = yes
												text = "[Character.GetShortUINameNoTooltip]"
												max_width = 115
												align = center
												fontsize_min = 12
											}
										}
									}
								}

								flowcontainer = {
									parentanchor = bottom
									direction = vertical
									ignoreinvisible = yes

									event_portrait_status_icons_right = {
										datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
										visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
										parentanchor = right

										background = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
											spriteType = Corneredtiled
											spriteborder = { 20 20 }
											shaderfile = "gfx/FX/pdxgui_default.shader"
											alpha = 0.5
											margin = { 5 5 }

											modify_texture = {
												texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
												spriteType = Corneredstretched
												spriteborder = { 0 0 }
												blend_mode = overlay
												alpha = 0.5
											}
										}
									}

									spacer = {
										size = { 140 0 }
									}

									flowcontainer = {
										datacontext = "[EventWindowData.GetArtifact('lower_right_portrait')]"
										visible = "[EventWindowData.HasArtifact('lower_right_portrait')]"
										direction = vertical
										spacing =-5

										using = artifact_event_flowcontainer
									}

									widget = {
										datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
										visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
										size = { 140 150 }

										portrait_event_small = {
											name = "portrait_right_small_1"
											parentanchor = center
											position = { 0 -4 }

											blockoverride "portrait_button"
											{
												portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_right_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
												alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_right_portrait'))]"
												tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
											}

											blockoverride "portrait_transformation"
											{
												portrait_scale = { -1 1 }
												portrait_offset = { 1 0 }
											}

											blockoverride "highlight_visible"
											{
												visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_right_portrait') ))]"
											}

											blockoverride "status_icons"{}
											blockoverride "opinion_box"{}
											blockoverride "grayscale" {}

											blockoverride "coa"
											{
												event_portrait_status_icons_left = {
													visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
													parentanchor = bottom|left
													position = { -15 -5 }
													scale = 0.8

													background = {
														using = Background_Bottom_Fade
														margin = { 5 15 }
														using = Color_Black
														using = Mask_Rough_Edges
														alpha =  0.5

														modify_texture = {
															texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
															spriteType = Corneredstretched
															spriteborder = { 0 0 }
															blend_mode = overlay
														}
													}
												}
											}

											text_label_center = {
												parentanchor = bottom|hcenter
												position = { 20 -5 }
												alwaystransparent = yes
												text = "[Character.GetShortUINameNoTooltip]"
												max_width = 115
												align = center
												fontsize_min = 12
											}
										}
									}
								}
							}
						}
					}
				}

				hbox = {
					margin_left = 35
					margin_right = 35
					margin_bottom = 15

					widget = {
						name = "text"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 45

						vbox = {
							name = "description_and_options"
							alpha = 0

							state = {
								name = appear
								trigger_on_create = yes
								delay = 0.2
								using = Animation_Curve_Default
								alpha = 1
								duration = 1.5
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_bottom = 10
								margin_top = 80

								scrollarea = {
									name = "description_scrollarea"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									minimumsize = { 490 -1 }
									maximumsize = { 490 -1 }

									scrollbarpolicy_horizontal = always_off

									scrollbar_vertical = {
										using = Scrollbar_Vertical

										blockoverride "alpha"{
											alpha = 0.6
										}
									}

									scrollwidget = {
										text_multi = {
											name = "description"
											minimumsize = { 480 -1 }
											maximumsize = { 480 -1 }
											autoresize = yes
											margin = { 20 4 }
											text = "[EventWindowData.GetDescription]"
											fontsize = 16
										}
									}
								}

								expand = {}
							}

							vbox = {
								allow_outside = yes
								layoutpolicy_horizontal = expanding
								ignoreinvisible = yes
								spacing = 5
								margin_bottom = 5

								hbox = {
									spacing = 5

									hbox = {
										name = "dynamic_birth_name"
										margin = { 5 0 }
									}
								}

								vbox = {
									name = "custom_widgets_container"
									layoutpolicy_horizontal = expanding

									state = {
										trigger_on_create = yes
										name = appear_test
										delay = 0.8
										using = Animation_Curve_Default
										alpha = 1
										duration = 0.6
									}
								}

								fixedgridbox = {
									name = "option_grid"
									addcolumn = 500
									addrow = 42
									datamodel = "[EventWindowData.GetOptions]"

									item = {
										button_eventoption = {
											blockoverride "onmousehierarchy_callbacks"
											{
												onmousehierarchyenter = "[EventWindowViewInsert.OnMouseEnterOption( EventOption.Self )]"
												onmousehierarchyleave = "[EventWindowViewInsert.OnMouseLeaveOption]"
											}
										}
									}
								}
							}
						}
					}

					widget = {
						name = "characters_spacer"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 55
					}
				}
			}
		}

		event_window_transition_widget = {
			using = Event_Window_Default_Transition_States

			blockoverride "event_transition_mask_properties"
			{
				loop = no
				restart_on_show = yes
			}
			blockoverride "event_transition_picture_properties"
			{
				restart_on_show = yes
			}
			blockoverride "event_transition_picture_properties"
			{
				using = Mask_Rough_Edges
			}
		}

		flowcontainer = {
			name = "event_debug_info"
			visible = "[InDebugMode]"
			parentanchor = top|right
			position = { -40 20 }
			ignoreinvisible = yes

			using = Event_Window_Debug_Info

			blockoverride "event_reset_onclick"
			{
				onclick = "[EventWindowViewInsert.Reload]"
			}
		}
	}

	type vbox_activity_conclusion = vbox {
		spacing = 16

		scrollbox = {
			name = "completion_info"
			size = { 450 0 }

			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					datacontext = "[AccessLocalPlayerCachedData.AccessActivityData]"

					spacing = 8
					margin = { 8 0 }

					text_multi = {
						text = "[Activity.GetConclusionDescription( GetPlayer )]"
						autoresize = yes
						max_width = 380
					}

					text_single = {
						name = "effects_header"
						text = "ACTIVITY_CONCLUSION_EFFECTS_HEADER"
						default_format = "#S"
						visible = "[Not( StringIsEmpty( LocalPlayerActivityData.GetCompletionEffectsString ) )]"
					}

					text_multi = {
						autoresize = yes
						text = "[LocalPlayerActivityData.GetCompletionEffectsString]"
						max_width = 380
					}

					hbox = {
						name = "activity_plugin_widgets_conclusion"
						visible = "[Activity.IsComplete]"

						state = {
							trigger_on_create = yes
							name = appear_test
							delay = 0.8
							using = Animation_Curve_Default
							alpha = 1
							duration = 0.6
						}
					}
				}
			}

			blockoverride "scrollbox_background" {}

			blockoverride "scrollbox_background_fade" {}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			divider_light = {
				layoutpolicy_horizontal = expanding

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}
		}

		button_primary = {
			text = "ACTIVITY_CONCLUSION_CLOSE"
			size = { 250 40 }

			block "close_activity_onclick"
			{
			}
		}
	}

	type hbox_activity_progress = hbox {
		datacontext = "[GetPlayer]"
		layoutpolicy_horizontal = expanding

		spacing = 4

		hbox = {
			name = "travel_state"
			visible = "[Character.HasActivityState( 'travel' )]"

			text_single = {
				text = "activity_travel_state_full"
				align = nobaseline
				max_width = 270
			}
		}

		hbox = {
			name = "passive_state"
			visible = "[Character.HasActivityState( 'passive' )]"

			text_single = {
				text = "activity_passive_state_full"
				align = nobaseline
				max_width = 270
			}
		}

		hbox = {
			name = "active_state"
			visible = "[Character.HasActivityState( 'active' )]"

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "activity_active_state_full"
				align = nobaseline
				max_width = 270
			}
		}

		hbox = {
			name = "time_until_progress"

			text_single = {
				visible = "[IsValidDate( Activity.GetProgressPhaseDate )]"
				layoutpolicy_horizontal = expanding
				text = ACTIVITY_TIME_UNTIL_PROGRESS
				align = nobaseline
				max_width = 210
			}
		}

		expand = {}
	}
}
