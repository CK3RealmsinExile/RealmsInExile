######################################################
################## CULTURE HYBRIDIZATION #############
######################################################

window = {
	name = "hybridize_culture_window"
	datacontext = "[HybridizationWindow.GetOtherCulture]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[HybridizationWindow.GetVassalConversionWindow]"
	parentanchor = center
	size = { 1300 950 }
	layer = middle

	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		on_start = "[GetVariableSystem.Set( 'culture_creation_tab', 'pillars' )]"
		on_start = "[GetVariableSystem.Clear( 'culture_creation_right_view' )]"
		on_start = "[GetVariableSystem.Clear('conversion_view_vassals')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "HYBRIDIZE_CULTURE_WINDOW_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[HybridizationWindow.Close]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			# Vassal conversion list
			vassal_conversion_preview = {
				visible = "[VariableSystem.Exists( 'conversion_view_vassals')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			}

			vbox = {
				name = "left_side"
				visible = "[Not(VariableSystem.Exists( 'conversion_view_vassals' ))]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 15
				margin_left = 2

				hbox = {
					spacing = 10

					button_standard = {
						name = "culture_name"
						size = { 530 60 }
						onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'name_selection' )]"
						tooltip = CULTURE_CREATION_NAME_TOOLTIP

						text_multi = {
							name = "culture_name_label"
							size = { 100% 100% }
							margin = { 10 0 }
							fontsize_min = 16
							text = "HYBRIDIZE_CULTURE_NAME"
							default_format = "#high"
							using = Font_Size_Big
							align = center|nobaseline
						}

						button_replace = {
							name = "reset"
							alwaystransparent = yes
							parentanchor = right|vcenter
							position = { -6 0 }
							size = { 40 40 }
						}
					}

					map_color_button = {
						blockoverride "mcb_click"
						{
							onclick = "[GetVariableSystem.Set( 'culture_creation_right_view', 'color_selection' )]"
						}
						blockoverride "mcb_color"
						{
							tintcolor = "[HybridizationWindow.GetColor]"
						}
					}
				}

				hbox = {
					name = "tab_buttons"
					layoutpolicy_horizontal = expanding
					margin_top = 10
					margin_bottom = 10

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'pillars' )]"
						down = "[GetVariableSystem.HasValue( 'culture_creation_tab', 'pillars' )]"

						text_single = {
							text = "CULTURE_VIEW_PILLARS"
							parentanchor = center
							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'traditions' )]"
						down = "[GetVariableSystem.HasValue( 'culture_creation_tab', 'traditions' )]"

						text_single = {
							text = "CULTURE_VIEW_TRADITIONS"
							parentanchor = center
							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set( 'culture_creation_tab', 'aesthetics' )]"
						down = "[GetVariableSystem.HasValue( 'culture_creation_tab', 'aesthetics' )]"

						text_single = {
							text = "CULTURE_VIEW_AESTHETICS"
							parentanchor = center
							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}
				}

				background = {
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'pillars' )]"
					texture = "[HybridizationWindow.GetLeftHoldingTexture]"
					alpha = 0.3
					fittype = centercrop
					margin_top = -400
					margin_right = 5

					using = Animation_Tab_Switch

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}

					using = Mask_Rough_Edges
				}

				vbox = {
					name = "pillars_tab_content"
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'pillars' )]"
					spacing = 10

					using = Animation_Tab_Switch

					text_label_center = {
						name = "header"
						layoutpolicy_horizontal = expanding
						text = "CULTURE_CREATION_ETHOS"
						default_format = "#low"
					}

					hbox = {
						spacing = 20

						widget_ethos_selection_button = {
							datacontext = "[GetPlayer.GetCulture.GetEthos]"
							using = tooltip_ws
						}

						widget_ethos_selection_button = {
							visible = "[Not( ObjectsEqual( Culture.GetEthos, GetPlayer.GetCulture.GetEthos ) )]"
							datacontext = "[Culture.GetEthos]"
						}
					}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "CULTURE_CREATION_HERITAGE"
						default_format = "#low"
					}

					hbox = {
						spacing = 10
						margin_bottom = 10

						button_pillar_selection = {
							datacontext = "[GetPlayer.GetCulture.GetHeritage]"
							using = tooltip_ws

							blockoverride "editbox_label"
							{
								button_icon = {
									parentanchor = vcenter
									position = { 4 0 }
									size = { 26 26 }
									alwaystransparent = yes
									texture = "gfx/interface/icons/culture_pillars/heritage.dds"
									framesize = { 220 220 }
								}
							}
						}

						button_pillar_selection = {
							datacontext = "[Culture.GetHeritage]"
							visible = "[Not( ObjectsEqual( Culture.GetHeritage, GetPlayer.GetCulture.GetHeritage ) )]"

							blockoverride "editbox_label"
							{
								button_icon = {
									parentanchor = vcenter
									position = { 4 0 }
									size = { 26 26 }
									alwaystransparent = yes
									texture = "gfx/interface/icons/culture_pillars/heritage_diverge.dds"
									framesize = { 220 220 }
								}
							}
						}
					}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "CULTURE_CREATION_LANGUAGE"
						default_format = "#low"
					}

					hbox = {
						spacing = 10
						margin_bottom = 10

						button_pillar_selection = {
							datacontext = "[GetPlayer.GetCulture.GetLanguage]"
							using = tooltip_ws

							blockoverride "editbox_label"
							{
								button_icon = {
									parentanchor = vcenter
									position = { 4 0 }
									size = { 26 26 }
									alwaystransparent = yes
									texture = "gfx/interface/icons/flat_icons/map_modes/court_languages.dds"
									framesize = { 220 220 }
								}
							}
						}

						button_pillar_selection = {
							datacontext = "[Culture.GetLanguage]"
							visible = "[Not( ObjectsEqual( Culture.GetLanguage, GetPlayer.GetCulture.GetLanguage ) )]"

							blockoverride "editbox_label"
							{
								button_icon = {
									parentanchor = vcenter
									position = { 4 0 }
									size = { 26 26 }
									alwaystransparent = yes
									texture = "gfx/interface/icons/culture_pillars/language_diverge.dds"
									framesize = { 220 220 }
								}
							}
						}
					}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "CULTURE_CREATION_MARTIAL_CUSTOM"
						default_format = "#low"
					}

					hbox = {
						spacing = 5
						margin_bottom = 10

						button_pillar_selection = {
							datacontext = "[GetPlayer.GetCulture.GetMartial]"
							using = tooltip_ws
						}

						button_pillar_selection = {
							visible = "[Not( ObjectsEqual( Culture.GetMartial, GetPlayer.GetCulture.GetMartial ) )]"
							datacontext = "[Culture.GetMartial]"
						}
					}

					expand = {}
				}

				vbox = {
					name = "tradtions_tab_content"
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'traditions' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					text_single = {
						name = "header_label"
						text = "CULTURE_CREATION_TRADITIONS_COUNT"
						default_format = "#I"
						margin_bottom = 15
					}

					scrollbox = {
						name = "tradtions_scrollbox"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {

							vbox = {
								margin_top = 10

								fixedgridbox = {
									datamodel = "[HybridizationWindow.GetTraditions]"
									flipdirection = yes
									addcolumn = 250
									addrow = 170
									datamodel_wrap = 2

									item = {
										container_tradition_selection_item = {
										}
									}
								}
							}
						}
					}
				}

				scrollbox = {
					name = "aesthetic_tab_content"
					visible = "[VariableSystem.HasValue( 'culture_creation_tab', 'aesthetics' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = Animation_Tab_Switch

					blockoverride "scrollbox_content"
					{
						vbox = {
							spacing = 14

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_UNITS"
								default_format = "#low"
							}

							hbox = {
								margin = { 20 10 }
								spacing = 50

								background = {
									texture = "gfx/interface/illustrations/terrain_types/plains.dds"
									fittype = centercrop
									margin = { 60 14 }
									alpha = 0.4

									modify_texture = {
										texture = "gfx/interface/window_county/mask_holding_illustration.dds"
										blend_mode = alphamultiply
										alpha = 1
									}
								}

								vbox = {
									cameracontrolwidget = {
										name = "left_unit_preview"
										size = { 200 200 }

										gfxtype = game_entity_view
										effectname = "PdxGuiDefault"
										shaderfile = "gfx/FX/pdxgui_default.shader"

										camera_position = { 0 5 -12 }
										camera_look_at = { 0 5 0 }
										gfx_environment_file = "gfx/map/environment/environment_unit_preview.txt"
										camera_rotation_pitch_limits = { 0 0 }
										camera_zoom_limits = { 1.0 1.0 }
										camera_translation_limits = { 0 0 0 }
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasLeftUnits]"
										onclick = "[HybridizationWindow.SetLeftUnits]"

										blockoverride "text" {
											text = "[GetPlayer.GetCulture.GetUnitGfxName]"
										}
									}
								}

								vbox = {
									visible = "[Not( And( HybridizationWindow.HasLeftUnits, HybridizationWindow.HasRightUnits ) )]"

									cameracontrolwidget = {
										name = "right_unit_preview"
										size = { 200 200 }

										gfxtype = game_entity_view
										effectname = "PdxGuiDefault"
										shaderfile = "gfx/FX/pdxgui_default.shader"

										camera_position = { 0 5 -12 }
										camera_look_at = { 0 5 0 }
										gfx_environment_file = "gfx/map/environment/environment_unit_preview.txt"
										camera_rotation_pitch_limits = { 0 0 }
										camera_zoom_limits = { 1.0 1.0 }
										camera_translation_limits = { 0 0 0 }
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasRightUnits]"
										onclick = "[HybridizationWindow.SetRightUnits]"

										blockoverride "text" {
											text = "[Culture.GetUnitGfxName]"
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_NAMING_LIST"
								default_format = "#low"
							}

							widget = {
								size = { 640 190 }

								widget = {
									name = "hybrid_culture_pattern_naming_left"
									visible = "[HybridizationWindow.CanDoHybridNamingList]"
									size = { 100% 100% }

									icon = {
										size = { 128 80 }
										position = { 120 32 }
										texture = "gfx/interface/window_culture/hybrid_culture_background_small.dds"
									}
								}

								widget = {
									name = "hybrid_culture_pattern_naming_right"
									visible = "[HybridizationWindow.CanDoHybridNamingList]"
									size = { 100% 100% }

									icon = {
										size = { 128 80 }
										position = { 390 32 }
										mirror = horizontal
										texture = "gfx/interface/window_culture/hybrid_culture_background_small.dds"
									}
								}

								widget = {
									size = { 200 190 }
									parentanchor = left

									text_multi = {
										autoresize = yes
										min_width = 200
										max_width = 200
										parentanchor = vcenter
										position = { 0 -20 }
										align = center
										text = "[HybridizationWindow.GetLeftNamingExamples]"

										margin_bottom = 12
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasLeftNamingList]"
										onclick = "[HybridizationWindow.SetLeftNamingList]"
										parentanchor = bottom|hcenter

										blockoverride "text" {
											text = "[GetPlayer.GetCulture.GetNamingListName]"
										}
									}
								}

								widget = {
									visible = "[HybridizationWindow.CanDoHybridNamingList]"
									size = { 200 190 }
									parentanchor = center

									text_single = {
										parentanchor = hcenter|center
										position = { 0 -23 }
										text = "HYBRID_NAMES"
										multiline = yes
										maximumsize = { 150 180 }
										align = center
										default_format = "#weak"

										margin_bottom = 4

										background = {
											margin = { 10 8 }
											using = Background_Area
										}
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasHybridNamingList]"
										onclick = "[HybridizationWindow.SetHybridNamingList]"
										parentanchor = bottom|hcenter

										blockoverride "text"
										{
											text = "HYBRID_PILLAR"
										}
									}
								}

								widget = {
									visible = "[Not( And( HybridizationWindow.HasLeftNamingList, HybridizationWindow.HasRightNamingList ) )]"
									size = { 200 190 }
									parentanchor = right

									text_multi = {
										parentanchor = vcenter
										position = { 0 -20 }
										autoresize = yes
										min_width = 200
										max_width = 200
										align = center

										margin_bottom = 12

										text = "[HybridizationWindow.GetRightNamingExamples]"
									}


									button_generic_selection = {
										down = "[HybridizationWindow.HasRightNamingList]"
										onclick = "[HybridizationWindow.SetRightNamingList]"
										parentanchor = bottom|hcenter

										blockoverride "text"
										{
											text = "[Culture.GetNamingListName]"
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_BUILDINGS"
								default_format = "#low"
							}

							hbox = {
								spacing = 5

								vbox = {
									spacing = 10

									highlight_icon = {
										name = "icon"
										size = { 300 135 }
										texture = "[HybridizationWindow.GetLeftHoldingTexture]"

										using = Mask_Rough_Edges
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasLeftBuildings]"
										onclick = "[HybridizationWindow.SetLeftBuildings]"

										blockoverride "text" {
											text = "[GetPlayer.GetCulture.GetBuildingGfxName]"
										}
									}
								}

								vbox = {
									visible = "[Not( And( HybridizationWindow.HasLeftBuildings, HybridizationWindow.HasRightBuildings ) )]"
									spacing = 10

									highlight_icon = {
										name = "icon"
										texture = "[HybridizationWindow.GetRightHoldingTexture]"
										size = { 300 135 }

										using = Mask_Rough_Edges
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasRightBuildings]"
										onclick = "[HybridizationWindow.SetRightBuildings]"

										blockoverride "text" {
											text = "[Culture.GetBuildingGfxName]"
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_CLOTHING"
								default_format = "#low"
							}

							widget = {
								datacontext = "[GetPlayer]"
								size = { 580 270 }

								widget = {
									name = "hybrid_culture_pattern_fashion_left"
									visible = "[Not( And( HybridizationWindow.HasLeftClothing, HybridizationWindow.HasRightClothing ) )]"
									size = { 100% 100% }

									icon = {
										position = { 94 33 }
										texture = "gfx/interface/window_culture/hybrid_culture_background_big.dds"
									}
								}

								widget = {
									name = "hybrid_culture_pattern_fashion_right"
									visible = "[Not( And( HybridizationWindow.HasLeftClothing, HybridizationWindow.HasRightClothing ) )]"
									size = { 100% 100% }

									icon = {
										position = { 366 33 }
										mirror = horizontal
										texture = "gfx/interface/window_culture/hybrid_culture_background_big.dds"
									}
								}

								widget = {
									parentanchor = left
									size = { 180 270 }

									portrait_body = {
										parentanchor = hcenter
										size = { 180 235 }

										blockoverride "portrait_button"
										{
											alwaystransparent = yes
											tooltip_visible = no
											size = { 182 275 }
											portrait_texture = "[HybridizationWindow.GetLeftPortraitTexture('environment_body', 'camera_body', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										}

										blockoverride "status_icons" {}
										blockoverride "coa" {}
										blockoverride "portrait_glow" {}
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasLeftClothing]"
										onclick = "[HybridizationWindow.SetLeftClothing]"
										parentanchor = bottom|hcenter

										blockoverride "text" {
											text = "[GetPlayer.GetCulture.GetClothingGfxName]"
										}
									}
								}

								vbox = {
									visible = "[HybridizationWindow.CanHaveHybridClothing]"
									layoutpolicy_vertical = expanding

									expand = {
										layoutpolicy_vertical = expanding
									}

									hbox = {
										text_single = {
											maximumsize = { 160 180 }
											text = "HYBRID_FASHION_DESC"
											multiline = yes
											align = center
											margin_bottom = 4
											default_format = "#weak"

											background = {
												margin = { 10 8 }
												using = Background_Area
											}
										}
									}

									expand = {
										layoutpolicy_vertical = expanding
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasHybridClothing]"
										onclick = "[HybridizationWindow.SetHybridClothing]"

										blockoverride "text" {
											text = "HYBRID_PILLAR"
										}
									}
								}

								widget = {
									visible = "[Not( And( HybridizationWindow.HasLeftClothing, HybridizationWindow.HasRightClothing ) )]"
									parentanchor = right
									size = { 180 270 }

									portrait_body = {
										parentanchor = right
										size = { 180 235 }

										blockoverride "portrait_button"
										{
											alwaystransparent = yes
											tooltip_visible = no
											size = { 182 275 }
											portrait_texture = "[HybridizationWindow.GetRightPortraitTexture('environment_body', 'camera_body', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										}

										blockoverride "status_icons" {}
										blockoverride "coa" {}
										blockoverride "portrait_glow" {}
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasRightClothing]"
										onclick = "[HybridizationWindow.SetRightClothing]"
										parentanchor = bottom|hcenter

										blockoverride "text" {
											text = "[Culture.GetClothingGfxName]"
										}
									}
								}
							}

							text_label_center = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_COAS"
								default_format = "#low"
							}

							widget = {
								size = { 540 170 }

								widget = {
									name = "hybrid_culture_pattern_coa_left"
									visible = "[HybridizationWindow.CanHaveHybridCoAs]"
									size = { 100% 100% }

									icon = {
										position = { 68 14 }
										size = { 128 95 }
										texture = "gfx/interface/window_culture/hybrid_culture_background_small.dds"
									}
								}

								widget = {
									name = "hybrid_culture_pattern_coa_right"
									visible = "[HybridizationWindow.CanHaveHybridCoAs]"
									size = { 100% 100% }

									icon = {
										position = { 345 14 }
										size = { 128 95 }
										mirror = horizontal
										texture = "gfx/interface/window_culture/hybrid_culture_background_small.dds"
									}
								}

								widget = {
									parentanchor = left
									size = { 170 170 }

									coa_hybridize_window = {
										datacontext = "[HybridizationWindow.GetLeftCoA]"
										parentanchor = hcenter

										blockoverride "frame_override"
										{
											frame = 2
										}

										blockoverride "coa_button" {
											alwaystransparent = yes
										}
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasLeftCoAs]"
										onclick = "[HybridizationWindow.SetLeftCoAs]"
										parentanchor = bottom|left

										blockoverride "text" {
											text = "[GetPlayer.GetCulture.GetCoAGfxName]"
										}
									}
								}

								widget = {
									visible = "[HybridizationWindow.CanHaveHybridCoAs]"
									parentanchor = hcenter
									size = { 170 170 }

									text_single = {
										parentanchor = hcenter|center
										position = { 0 -24 }
										text = "HYBRID_COA_DESC"
										multiline = yes
										maximumsize = { 160 180 }
										align = center
										margin_bottom = 4
										default_format = "#weak"

										background = {
											margin = { 10 8 }
											using = Background_Area
										}
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasHybridCoAs]"
										onclick = "[HybridizationWindow.SetHybridCoAs]"
										parentanchor = bottom|hcenter

										blockoverride "text" {
											text = "HYBRID_PILLAR"
										}
									}
								}

								widget = {
									visible = "[Not( And( HybridizationWindow.HasLeftCoAs, HybridizationWindow.HasRightCoAs ) )]"
									parentanchor = right
									size = { 170 170 }

									coa_hybridize_window = {
										datacontext = "[HybridizationWindow.GetRightCoA]"
										parentanchor = hcenter

										blockoverride "frame_override"
										{
											frame = 2
										}

										blockoverride "coa_button" {
											alwaystransparent = yes
										}
									}

									button_generic_selection = {
										down = "[HybridizationWindow.HasRightCoAs]"
										onclick = "[HybridizationWindow.SetRightCoAs]"
										parentanchor = bottom|right

										blockoverride "text" {
											text = "[Culture.GetCoAGfxName]"
										}
									}
								}
							}

							expand = {}
						}
					}
				}

				expand = {}
			}

			divider = {
				layoutpolicy_vertical = expanding
			}

			### RIGHT PANEL
			widget = {
				name = "right_side"
				layoutpolicy_vertical = expanding
				minimumsize = { 500 0 }

				## Main right side view
				vbox = {
					visible = "[Not( VariableSystem.Exists('culture_creation_right_view') )]"
					spacing = 10
					margin_bottom = 20

					vbox = {
						name = "info"
						layoutpolicy_horizontal = expanding
						spacing = 10
						margin = { 30 14 }

						vbox = {
							name = "blockers"
							visible = "[Not( HybridizationWindow.CanHybridize )]"
							layoutpolicy_horizontal = expanding
							spacing = 10

							text_label_left = {
								layoutpolicy_horizontal = expanding
								text = "CULTURE_CREATION_BLOCKERS_HEADER"
								default_format = "#low"
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 4

								text_multi = {
									autoresize = yes
									max_width = 440
									text = "[HybridizationWindow.GetHybridizeBlockers]"
								}
								expand = {}
							}
						}

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "CULTURE_CREATION_NEW_CULTURE_HEADER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = 4

							text_multi = {
								autoresize = yes
								max_width = 440
								text = "CULTURE_CREATION_NEW_CULTURE_TEXT"
							}

							expand = {}
						}

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "CULTURE_CREATION_ACCEPTANCE_HEADER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_bottom = 4

							text_multi = {
								autoresize = yes
								max_width = 440
								text = "CULTURE_CREATION_ACCEPTANCE_TEXT"
							}

							expand = {}
						}

						vbox = {
							visible = "[GreaterThan_int32(GetDataModelSize(HybridizationWindow.GetInnovationsGained), '(int32)0')]"
							layoutpolicy_horizontal = expanding
							spacing = 4
							margin_bottom = 4

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 4

								text_label_left = {
									layoutpolicy_horizontal = expanding
									text = "CULTURE_CREATION_INNOVATIONS_HEADER"
									default_format = "#low"
								}

								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 4

								text_multi = {
									visible = "[EqualTo_int32(GetDataModelSize(HybridizationWindow.GetInnovationsGained), '(int32)1')]"
									autoresize = yes
									max_width = 440
									text = "CULTURE_CREATION_INNOVATIONS_TEXT"
								}

								text_multi = {
									visible = "[And( GreaterThan_int32(GetDataModelSize(HybridizationWindow.GetInnovationsGained), '(int32)1'), LessThan_int32(GetDataModelSize(HybridizationWindow.GetInnovationsGained), '(int32)5') )]"
									autoresize = yes
									max_width = 440
									text = "CULTURE_CREATION_INNOVATIONS_PLURAL_TEXT"
								}

								text_multi = {
									visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(HybridizationWindow.GetInnovationsGained), '(int32)5')]"
									autoresize = yes
									max_width = 440
									text = "CULTURE_CREATION_INNOVATIONS_PLURAL_INCLUDING_TEXT"
								}
								expand = {}
							}

							scrollarea = {
								maximumsize = { 500 130 }
								minimumsize = { 420 100 }
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								autoresizescrollarea = yes
								scrollbarpolicy_horizontal = always_off

								scrollbar_vertical = {
									using = Scrollbar_Vertical
								}

								scrollwidget = {
									vbox = {

										fixedgridbox = {
											datamodel = "[HybridizationWindow.GetInnovationsGained]"
											flipdirection = yes
											datamodel_wrap = 4
											addrow = 100
											addcolumn = 114
											maxverticalslots = 1

											item = {
												flowcontainer = {
													tooltipwidget = { using = culture_innovation_tooltip_no_context }
													direction = vertical
													icon_innovation_no_context = {widgetanchor = center}
													margin_left = 46

													text_multi = {
														max_width = 100
														min_width = 95
														text = "[CultureInnovationType.GetName]"
														autoresize = yes
														widgetanchor = center
														align = center|hcenter
													}
												}
											}
										}
									}
								}
							}
						}

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "CULTURE_CREATION_REALM_ADOPTION_HEADER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								autoresize = yes
								max_width = 440
								text = "CULTURE_CREATION_REALM_ADOPTION_TEXT"
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							button_standard = {
								name = "see_vassals"
								onclick = "[VariableSystem.Toggle( 'conversion_view_vassals' )]"
								text = "FAITH_CREATION_OPEN_VASSAL_LIST"
								down = "[VariableSystem.HasValue( 'conversion_view_vassals', 'true' )]"
							}

							expand = {}
						}
					}

					expand = {}


					vbox = {
						name = "cost"
						tooltip = "HYBRIDIZATION_COST_TOOLTIP"

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HYBRIDIZATION_TOTAL_COST"
							default_format = "#high"
							using = Font_Size_Medium
							align = right

							background = {
								visible = "[Not( HybridizationWindow.CanPayCost )]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}

					text_multi = {
						name = "cooldown"
						layoutpolicy_horizontal = expanding
						align = center
						text = "CULTURE_HYBRIDIZATION_COOLDOWN"
						default_format = "#low"
						using = Font_Size_Small
						autoresize = yes
						max_width = 400
					}

					#mod

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10
						visible = "[GetScriptedGui('lotr_is_dwarf_hybridise_trigger').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"

						hbox = {
							spacing = 5
							visible = "[Not(EqualTo_int32(PdxGuiWidget.AccessParent.AccessParent.FindChild('biomes').CountVisibleChildren, '(int32)1'))]"
							raw_tooltip = "Must select 1 biome tradition!"
							using = tooltip_se

							warning_icon = {
								
							}

							text_label_center = {
								raw_text = "#Xlight [PdxGuiWidget.AccessParent.AccessParent.FindChild('create_culture').FindChild('biomes').CountVisibleChildren] biome traditions selected"
							}
						}

						button_primary = {
							name = "create_culture"
							size = { 400 60 }

							onclick = "[HybridizationWindow.HybridizeCulture]"
							onclick = "[HybridizationWindow.Close]"
							enabled = "[And(HybridizationWindow.CanHybridize, EqualTo_int32(PdxGuiWidget.FindChild('biomes').CountVisibleChildren, '(int32)1'))]"

							text = "HYBRIDIZE_CULTURE_EXECUTE_LABEL"
							using = Font_Size_Medium
							tooltip = "HYBRIDIZE_CULTURE_EXECUTE_TOOLTIP"

							hbox = {
								name = "biomes"
								datamodel = "[HybridizationWindow.GetTraditions]"
								item = {
									hbox = {
										visible = "[And(GetScriptedGui('lotr_dwarven_biome_tradition').IsShown( GuiScope.SetRoot( CultureTradition.MakeScope ).End ), HybridizationWindow.HasTradition( CultureTradition.Self ))]"
									}
								}
							}
						}
					}
				
					button_primary = {
						name = "create_culture"
						size = { 400 60 }
						visible = "[Not(GetScriptedGui('lotr_is_dwarf_hybridise_trigger').IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End ))]"

						onclick = "[HybridizationWindow.HybridizeCulture]"
						onclick = "[HybridizationWindow.Close]"
						enabled = "[HybridizationWindow.CanHybridize]"

						text = "HYBRIDIZE_CULTURE_EXECUTE_LABEL"
						using = Font_Size_Medium
						tooltip = "HYBRIDIZE_CULTURE_EXECUTE_TOOLTIP"
					}
				}

				## Name selection
				vbox = {
					name = "name_selection"
					visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'name_selection' )]"
					margin = { 0 20 }
					margin_top = 30
					spacing = 10

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					text_single = {
						name = "header_label"
						text = "CULTURE_CREATION_NAMING_HEADER"
						default_format = "#I"
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 50 0}
						# The names of these are referenced in code. If you change them, they'll no longer get properly reset
						name_entry_big = {
							blockoverride "label"
							{
								text = "CULTURE_CREATION_NAMING_NAME"
							}

							blockoverride "editbox_properties"
							{
								name = "culture_name_edit"
								ontextedited = "[HybridizationWindow.OnEditName]"
								maxcharacters = 30
							}
						}

						widget = {
							size = { 10 10 }
						}

						name_entry_big = {
							blockoverride "label"
							{
								text = "CULTURE_CREATION_NAMING_COLLECTIVE_NOUN"
							}

							blockoverride "editbox_properties"
							{
								name = "culture_collective_noun_edit"
								ontextedited = "[HybridizationWindow.OnEditCollectiveNoun]"
								maxcharacters = 30
							}
						}

						widget = {
							size = { 10 10 }
						}

						name_entry_big = {
							blockoverride "label"
							{
								text = "CULTURE_CREATION_NAMING_PREFIX"
							}

							blockoverride "editbox_properties"
							{
								name = "culture_prefix_edit"
								ontextedited = "[HybridizationWindow.OnEditPrefix]"
								maxcharacters = 30
							}
						}
					}

					expand = {}

					button_standard = {
						name = "done"
						onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
						text = "DONE"
						default_format = "#high"
					}
				}

				vbox = {
					name = "color_selection"
					visible = "[VariableSystem.HasValue( 'culture_creation_right_view', 'color_selection' )]"
					margin = { 0 20 }
					margin_top = 15
					margin_left = 2
					spacing = 10

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "MAP_COLOR_SELECTION_LABEL"
						default_format = "#low"
					}

					colorpicker_simple = {
						visible = yes
						color = "[HybridizationWindow.GetColor]"
						oncoloredited = "[HybridizationWindow.SetColor]"
					}

					expand = {}

					button_standard = {
						name = "done"
						onclick = "[VariableSystem.Clear( 'culture_creation_right_view' )]"
						text = "DONE"
						default_format = "#high"
					}
				}
			}
		}
	}
}


types HybridizationTypes
{
	type button_pillar_selection = button_standard {
		down = "[HybridizationWindow.HasPillar( CulturePillar.Self )]"
		onclick = "[HybridizationWindow.SetPillar( CulturePillar.Self )]"

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "datacontext" {
				datacontext = "[GetPlayer.GetCulture]"
			}
		}

		block "editbox_label"
		{
			button_icon = {
				parentanchor = vcenter
				position = { 4 0 }
				size = { 26 26 }
				alwaystransparent = yes
				texture = "[CulturePillar.GetIcon]"
				framesize = { 220 220 }
			}
		}

		text_multi = {
			size = { 100% 100% }
			margin = { 10 0 }
			text = "[CulturePillar.GetNameNoTooltip]"
			align = center|nobaseline
			default_format = "#clickable"
		}
	}

	type widget_ethos_selection_button = widget {
		size = { 274 96 }

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "datacontext" {
				datacontext = "[GetPlayer.GetCulture]"
			}
		}

		button_standard = {
			size = { 274 60 }
			down = "[HybridizationWindow.HasPillar( CulturePillar.Self )]"
			onclick = "[HybridizationWindow.SetPillar( CulturePillar.Self )]"


			icon = { #illustration
				name = "icon"
				parentanchor = center
				texture = "[CulturePillar.GetIcon]"
				size = { 100% 100% }

				using = Mask_Rough_Edges
			}

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}

			text_label_center = {
				parentanchor = bottom|hcenter
				widgetanchor = center
				position = { 0 20 }
				text = "[CulturePillar.GetNameNoTooltip]"
				fontsize_min = 16
				align = center
				using = Font_Size_Medium
			}

			using = Background_Vignette_Button

			icon = {
				name = "selection_glow"
				visible = "[HybridizationWindow.HasPillar( CulturePillar.Self )]"
				parentanchor = center
				size = { 100% 100% }

				state = {
					trigger_on_create = yes

					name = max_glow
					next = min_glow
					duration = 1
					using = Animation_Curve_Default
					alpha = 0.5
				}

				state = {
					name = min_glow
					next = max_glow
					duration = 1.6
					using = Animation_Curve_Default
					alpha = 0.3
				}

				background = {
					texture = "gfx/interface/component_effects/innovation_glow.dds"
					margin = { 14 12 }
					spriteType = Corneredstretched
					spriteborder = { 30 30 }
					tintcolor = { 1 0.8 0.6 1 }
				}
			}
		}
	}


	type container_tradition_selection_item = widget {
		size = { 220  120  }

		tooltipwidget = {
			using = culture_tradition_tooltip_clickable
		}

		vbox = {
			spacing = -4

			button_standard = {
				size = {  220 120  }
				onclick = "[HybridizationWindow.ToggleTradition( CultureTradition.Self )]"

				widget_tradition_icon = {
					block "icon_size" {
						size = { 220 120 }
					}
				}

				widget = {
					name = "selection_glow"
					visible = "[HybridizationWindow.HasTradition( CultureTradition.Self )]"
					parentanchor = center
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}

			hbox = {
				margin_top = 6

				text_label_center = {
					name = "name"
					maximumsize = { 200 44 }
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right
					text = "[CultureTradition.GetNameNoTooltip]"
					using = Font_Size_Medium
				}
			}
		}
	}

	type button_generic_selection = button_standard {

		text_multi = {
			size = { 100% 100% }
			margin = { 10 0 }
			block "text" {}
			align = center|nobaseline
			default_format = "#clickable"
		}
	}
}
