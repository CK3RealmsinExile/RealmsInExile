types Sorcery { # Types are essentially templates. They are typically done in the gui/shared folder but can be done in any file.
    type window_sorcery = window { # This tells it that the type window_sorcery is a window. It can't be type window_sorcery = window = { so it looks a little offf
        size = { 1000 850 } # I shouldn't have to explain this
        position = { 400 75 } # This is in the main hud window so this is the top left corner of the window from the top left corner of the whole game
        layer = middle # I include this out of habit but it doesn't matter here
        visible = "[GetVariableSystem.Exists('window_sorcery')]" # This is shown if that variable system exists, regardless of the variable.
        
        using = Window_Background # Using is useful for preset backgrounds and the like. All windows should at least have this and the decoration block
        using = Window_Decoration
        using = Animation_ShowHide_Standard
        
        vbox = { # Vertical box. Everything in it is arranged vertically. hbox is the horizontal version
            using = Window_Margins
            restrictparent_min = yes # Unsure what it is but you need it in a vbox that is directly in a window.
    
            header_pattern = { # Also a type. Just copy paste this typically and change the text and onclick.
                layoutpolicy_horizontal = expanding # Expands size horizontally
    
                blockoverride "header_text" # Blockovverides are occasionally necessary with types.
                {
                    text = "SORCERY_TITLE"
                }
    
                blockoverride "button_close"
                {
                    onclick = "[GetVariableSystem.Clear( 'window_sorcery' )]"                    
                    onclick = "[GetScriptedGui('unselect_spell').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                    onclick = "[GetScriptedGui('unselect_location').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                }
            }

            hbox = {
                vbox = {
                    size = { 500 750 }
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    scrollbox = { # A literal area where you can scroll.
                        name = "sorcery_abilities_scrollarea" # Completely unecessary but useful if you need to run a search for this area.
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        #size = {100% 100%} This does not work
                        size = { 500 750 }
                        blockoverride "scrollbox_content" # It's a type, and it needs this
                        {
                            hbox = {
                                datacontext = "[GetPlayer]" # This box is calling a text_icon, which needs a datacontext
                                text_single = {
                                    visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                                    #text = "[GetPlayer.MakeScope.Var('selected_spell').GetFlagName]"
                                    text = "[Localize(Concatenate(Concatenate('@icon_',GetPlayer.MakeScope.Var('selected_spell').GetFlagName), '!'))]" # Text icons are complex, but need to start with the @icon_ and end with the !. They should be named icon_name
                                    size = { 201 201 }
                                }
                                icon = { # A default picture
                                    texture = "gfx/sorcery/spell_icons/icon_template_generic_sorcery.dds" # Gets an image. Can also be in background or button blocks
                                    visible = "[Not(GetPlayer.MakeScope.Var('selected_spell').IsSet)]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/abnormal_winter.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'abnormal_winter'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/ambassador_of_darkness.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'ambassador_of_darkness'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/assemble_the_warchiefs.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'assemble_the_warchiefs'))]"
                                    size = { 100 100 }
                                }

                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/black_breath.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'black_breath'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/call_the_horde.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'call_the_horde'))]"
                                    size = { 100 100 }
                                }

                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/cast_the_darkness.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'cast_the_darkness'))]"
                                    size = { 100 100 }
                                }

                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/cracks_of_the_earth.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'cracks_of_the_earth'))]"
                                    size = { 100 100 }
                                }

                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/dark_vitality.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'dark_vitality'))]"
                                    size = { 100 100 }
                                }

                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/forge_morgul_weapons.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'forge_morgul_weapons'))]"
                                    size = { 100 100 }
                                }

                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/invoke_watchers.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'invoke_watchers'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/mark_of_war.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'mark_of_war'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/nazgul_restoration.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'nazgul_restoration'))]"
                                    size = { 100 100 }
                                }

                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/purse_them_relentlessly.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'purse_them_relentlessly'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/reveal_the_secrets.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'reveal_the_secrets'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/rise_the_dead.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'rise_the_dead'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/shapeshifting.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'shapeshifting'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/summon_being_of_darkness.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'summon_being_of_darkness'))]"
                                    size = { 100 100 }
                                }

                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/the_plague.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'the_plague'))]"
                                    size = { 100 100 }
                                }
                                
                                icon = { # Spell picture
                                    texture = "gfx/sorcery/spell_icons/words_of_power.dds" # Gets an image based on the spell name
                                    visible = "[And(GetPlayer.MakeScope.Var('selected_spell').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('selected_spell').GetFlagName, 'words_of_power'))]"
                                    size = { 100 100 }
                                }
                            }
                            spacer = { # Empty space
                                size = { 0 20 }
                            }
                            text_single = { # One line of text
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                                text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('selected_spell').GetFlagName,'_name'))]" # This one is a little advanced, but it merges the flag value of the variable on you, which let's say is flag:lorem_ipsum and the word _name, and then gets the loc key for the merged lorem_ipsum_name
                                fontsize = 36 # I assume you know this
                                align = center # Read the above
                                minimumsize = { 275 -1 } # No matter how large it is it takes up at least 275 in space horizontally. -1 for the vertical means that the minimumsize doesn't come into affect there.
                                default_format = "#high" # Gets textformatting. You can only have one thing in here, so "#high #bold" won't work.
                            }
                            text_single = {
                                visible = "[Not(GetPlayer.MakeScope.Var('selected_spell').IsSet)]" # Not(), And(), Or(), Nor(), and Nand() can all be used in GUI. Seperate items are seperated by commas
                                text = "SORCERY_INSTRUCTIONS"
                                align = center
                                multiline = yes
                                maximumsize = { 400 100 }
                                autoresize = yes 
                                default_format = "#high"
                            }
                            text_multi = { # A paragraph of text
                                minimumsize = { 500 -1 }
                                maximumsize = { 200 -1 } # It automatically adds more lines to keep it from exceeding this.
                                autoresize = yes # Read above, they work together
                                margin = { 20 4 } # A margin of twenty on the right and left and 4 on the top and bottom.
                                fontsize = 18
                                default_format = "#italic"
                                text = "BASIC_DESC"
                                align = center
                                visible = "[Not(GetPlayer.MakeScope.Var('selected_spell').IsSet)]"
                            }
                            text_multi = { # A paragraph of text
                                minimumsize = { 500 -1 }
                                maximumsize = { 500 -1 } # It automatically adds more lines to keep it from exceeding this.
                                autoresize = yes # Read above, they work together
                                margin = { 20 4 } # A margin of twenty on the right and left and 4 on the top and bottom.
                                fontsize = 18
                                default_format = "#italic"
                                text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('selected_spell').GetFlagName,'_desc'))]"
                                align = center
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                            }
                            spacer = {
                                size = { 0 10 }
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                            }
                            text_single = {
                                text = "EFFECTS"
                                fontsize = 20
                                default_format = "#bold"
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                            }
                            spacer = { 
                                size = { 0 10 } 
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                            }
                            scrollbox = { # A literal area where you can scroll.
                                #size = {100% 100%} This does not work
                                size = { 450 250 }
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                                blockoverride "scrollbox_content" # It's a type, and it needs this
                                {
                                    text_single = {
                                        fontsize = 14
                                        maximumsize = { 400 -1 }
                                        multiline = yes
                                        text = "[GetScriptedGui(Concatenate('cast_',GetPlayer.MakeScope.Var('selected_spell').GetFlagName)).ExecuteTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                    }
                                }
                            }
                            spacer = {
                                size = { 0 20 }
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                            }
                            spacer = {
                                size = { 0 5 }
                                visible = "[GetPlayer.MakeScope.Var('selected_spell').IsSet]"
                            }
                            # Shows location (Where to perform it)
                            button_standard = {
                                text = "SELECT_RITUAL_LOCATION"
                                onclick = "[GetScriptedGui('select_location').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                                onclick = "[GetScriptedGui('unselect_spell').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"                    
                                visible = "[Not(GetPlayer.MakeScope.Var('ritual_location').IsSet)]"
                                size = { 200 33 }
                            }
                            button_standard = {
                                text = "[Concatenate(Localize('CHANGE_RITUAL_LOCATION'), Localize(Concatenate('ritual_location_', GetPlayer.MakeScope.Var('ritual_location').GetFlagName))))]"
                                onclick = "[GetScriptedGui('select_location').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                                visible = "[GetPlayer.MakeScope.Var('ritual_location').IsSet]"
                                size = { 250 33 }
                            }        
                            spacer = {
                                size = { 0 40 }
                            }
                            button_tertiary = {
                                text = "PERFORM_RITUAL"
                                fontsize = 24
                                size = { 200 40 }
                                enabled = "[GetScriptedGui(Concatenate('cast_',GetPlayer.MakeScope.Var('selected_spell').GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                onclick = "[GetScriptedGui(Concatenate('cast_',GetPlayer.MakeScope.Var('selected_spell').GetFlagName)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                onclick = "[GetScriptedGui('ritual_costs_sgui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                onclick = "[GetVariableSystem.Clear( 'window_sorcery' )]"                    
                                onclick = "[GetScriptedGui('unselect_spell').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                                onclick = "[GetScriptedGui('unselect_location').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                                visible = "[And(GetPlayer.MakeScope.Var('ritual_location').IsSet, GetPlayer.MakeScope.Var('selected_spell').IsSet)]"
                            }
                        }
                    }
                    expand = {} # This block takes up empty space so that the other stuff isn't stretched to fit it. Generally I recommend adding it to large vboxes and hboxes
                }
                vbox = {
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    scrollbox = { # A literal area where you can scroll.
                        name = "sorcery_abilities_scrollarea" # Completely unecessary but useful if you need to run a search for this area.
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        #size = {100% 100%} This does not work
                        size = { 400 750 }
                        visible = "[GetPlayer.MakeScope.Var('ritual_location').IsSet]"
                        background = {
                            texture = "gfx/interface/illustrations/lifestyles_background/learning_lifestyle.dds"
                            alpha = 0.2
                            modify_texture = {
                                name = "mask"
                                texture = "gfx/interface/component_masks/mask_rough_edges.dds"
                                spriteType = Corneredstretched
                                spriteborder = { 0 0 }
                                #margin = { -10 -10 } #Not valid in this context
                                blend_mode = alphamultiply
                            }
                        }
                        blockoverride "scrollbox_content" # It's a type, and it needs this
                        {
                            dynamicgridbox = { # Oh boy, how to explain this.
                                layoutpolicy_vertical = expanding
                                allow_outside = yes
                                ignoreinvisible = yes
                                maxhorizontalslots = 1
                                maxverticalslots = 100
                                block "datamodel" {
                                    datamodel = "[GetGlobalList('global_spells_list')]" # The dynamicgridbox gets every item on the list and generates an entry for it
                                }
                                item = { # This is the template for the entries
                                    widget = { # You need a widget, you can't just have multiple vboxes and hboxes in it without a crash. Just one vbox in the item instead of a widget will work though
                                        block "size" {
                                            size = { 380 100 }
                                        }
                                        vbox = {
                                            hbox = {
                                                text_single = {
                                                    text = "[Localize(Concatenate(Concatenate('@icon_small_',Scope.GetFlagName), '!'))]"
                                                    size = { 81 81 }
                                                }
                                                vbox = {
                                                    text_single = {
                                                        text = "[Localize(Concatenate(Scope.GetFlagName,'_name'))]"
                                                        fontsize = 20
                                                        align = center
                                                        minimumsize = { 275 -1 }
                                                        default_format = "#high"
                                                    }
                                                    spacer = {
                                                        size = { 0 10 }
                                                    }
                                                    button_primary = {
                                                        text = "SELECT_SPELL"
                                                        onclick = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                                        enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                                        tooltip = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # You can get text versions of sgui, even in normal text.
                                                    }
                                                }
                                                expand = {}
                                            }
                                            expand = {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                    expand = {}
                }
                expand = {}
            }
            expand = {}
        }
    }
}