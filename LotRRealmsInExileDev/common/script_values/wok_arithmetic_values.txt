parity = {	value = this	modulo = 2		}
mod2 = {	value = parity					}
mod4 = {	value = this	modulo = 4		}
mod8 = {	value = this	modulo = 8		}
mod16 = {	value = this	modulo = 16		}
mod32 = {	value = this	modulo = 32		}
mod64 = {	value = this	modulo = 64		}
mod10 = {	value = this 	modulo = 10		}
mod100 = {	value = this 	modulo = 100	}
mod1000 = {	value = this 	modulo = 1000	}
mod1920 = {	value = this 	modulo = 1920	}
mod1080 = {	value = this	modulo = 1080	}
div2 = {	value = this	multiply = 0.5	}
mult2 = {	value = this	multiply = 2	}
mult4 = {	value = this	multiply = 4	}
mult8 = {	value = this	multiply = 8	}
mult16 = {	value = this	multiply = 16	}
mult32 = {	value = this	multiply = 32	}
mult64 = {	value = this	multiply = 64	}

### STUFF ADDED BY RiE (All credit goes Tobbzn for prodividing the layout) ###
mult128 = {	value = this	multiply = 128	}
mult164 = {	value = this	multiply = 164	}
div3 = {	value = this	multiply = 0.25	}
div20 = { value = this 		multiply = 0.025 round = yes }
div25 = { value = this 		multiply = 0.05 }
mult6 = {	value = this	multiply = 6	}
### STUFF ADDED BY RiE (All credit goes Tobbzn for prodividing the layout) ###
submod2 = {	value = this	subtract = parity.abs}
bitshift = { value = submod2.div2 			}
bitshift2 = { value = bitshift.bitshift		}
bitshift4 = { value = bitshift2.bitshift2	}
bitshift8 = { value = bitshift4.bitshift4	}
bitshift16 = { value = bitshift8.bitshift8	}
bit1 = {	value = parity					}
bit2 = {	value = bitshift.bit1			}
bit4 = {	value = bitshift.bitshift.bit1	}
bit8 = {	value = bitshift.bitshift.bitshift.bit1}
bit16 = {	value = bitshift.bitshift.bitshift.bitshift.bit1}
bit32 = {	value = bitshift.bitshift.bitshift.bitshift.bitshift.bit1}
bit64 = {	value = bitshift.bitshift.bitshift.bitshift.bitshift.bitshift.bit1}
sbit1 = {	value = parity				 	}
sbit2 = {	value = bit2	multiply = 2	}
sbit4 = {	value = bit4 	multiply = 4	}
sbit8 = {	value = bit8	multiply = 8	}
sbit16 = {	value = bit16	multiply = 16	}
sbit32 = {	value = bit32	multiply = 32	}
sbit64 = {	value = bit64	multiply = 64	}
neg = {	value = this 	multiply = -1	}

add1 = {	value = this 	add = 1 }
sub1 = {	value = this 	subtract = 1}
add10 = {	value = this 	add = 10}
sub10 = {	value = this 	subtract = 10}

digit1 = {		value = mod10}
digit10 = {		value = mod100 		subtract = mod10 	divide = 10}
digit100 = {	value = mod1000 	subtract = mod100 	divide = 100}
digit1000 = {	value = this 		subtract = mod1000 	divide = 1000}
decimalshift = { value = this 		subtract = mod10 	divide = 10}
mult10 = {		value = this 		multiply = 10}
div10 = {		value = this 		divide = 10}

mult5 = {		value = this 		multiply = 5}
div5 = {		value = this 		divide = 5}


abs = {
	value = this
	if = {
		limit = {
			this < 0
		}
		multiply = -1
	}
}
sign = {
	value = 1
	if = {
		limit = {
			this < 0
		}
		multiply = -1
	}
}

should_be_graphed = {
	#For a 64 x 64 list:
	# value = 0
	# if = {
	# 	limit = {
	# 		index.bitshift4.bitshift2 = index.mod64.functionvalue
	# 	}
	# 	add = 1
	# }
}

functionvalue = {
	value = 0
	if = {		limit = {global_var:function = flag:square		} add = this.square}
	else_if = {	limit = {global_var:function = flag:line		} add = this}
	else = { add = this}
	#switch = {
	#	trigger = global_var:function
	#	flag:square = {add = index.square}
	#	flag:line = {add = index}
	#	fallback = {add = index}
	#}
}

square = {
	value = this
	multiply = this
}
cube = {
	value = this
	multiply = this
	multiply = this
}

square1080 = {
	value = mod1080
	multiply = mod1080
}
square1920 = {
	value = mod1920.sub960
	multiply = mod1920.sub960
}

diff = {
	value = testval.add1.square
	subtract = testval.square
}
add001 = {
	value = this
	add = 0.01
}
add0001 = {
	value = this
	add = 0.001
}
sub960 = {
	value = this
	subtract = 960
}
prevar = {
	value = prev
}

testval = {
	value = global_var:test
}

bitreassembly = {
	value = sbit64
	add = sbit32
	add = sbit16
	add = sbit8
	add = sbit4
	add = sbit2
	add = bit1
}

bool_value = {
	if = {limit = {this = yes} add = 1}
}