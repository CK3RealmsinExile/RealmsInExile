# LotR: removed references to real world.
#	edited the Scandinavians for adventuring code.

#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	effect = {
		scope:landed_title ?= {
			every_claimant = { remove_claim = prev } # remove existing claims
		}
		#LotR - Tracking Imperial Khand Time Held
		if = {
			limit = {
				scope:landed_title ?= {
					this = title:e_khand
					has_variable = year_khand_founded
				}
			}
			title:e_khand = {
				remove_variable = year_khand_founded
				remove_variable = ruling_dynasty
				remove_variable = successive_rulers
			}
		}

		if = {
			limit = {
				scope:landed_title ?= {
					OR = {
						this = title:e_isengard_unleashed
						this = title:k_isengard
					}
				}
			}
			title:c_isengard = {
				remove_county_modifier ?= industrialised_isengard_3_county_modifier
			}
			title:c_isengard = {
				remove_county_modifier ?= industrialised_isengard_2_county_modifier
			}
			title:c_isengard = {
				remove_county_modifier ?= industrialised_isengard_1_county_modifier
			}
		}
		
		correct_wastelands_tracker = yes

		# if = {
		# 	limit = {
		# 		scope:landed_title ?= {
		# 			this = title:e_mordor
		# 		}
		# 	}
		# 	trigger_event = {
		# 		id = gondor.2900
		# 		years = { 3 5 }
		# 	}
		# }
		remove_upkeep_modifier = yes
		trigger_event = {
			id = wastelands.0007
			days = 1
		}
	}
	events = {
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		scope:title ?= { update_dynamic_coa = yes }

		if = {
			limit = {
				OR = {
					scope:title ?= title:d_amon_lanc
					scope:title ?= title:k_amon_lanc
				}
				root = character:linefinwe11
				NOT = {
					is_target_in_global_variable_list = {
						name = unavailable_unique_decisions
						target = flag:decision_annihilate_dol_guldur
					}
				}
			}
			add_to_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:decision_annihilate_dol_guldur
			}
			trigger_event = elven.1830
		}

		if = {
			limit = { 
				scope:title = title:d_balins_expedition
				trigger_if = {
					limit = { title:k_khazad_dum = { any_county_struggle = { this = struggle:balrog_struggle } } }
					NOT = { any_held_county = { title_province = { geographical_region = middleearth_misty_mountains_balrog_struggle_region } } }
				}
			}
			destroy_title = title:d_balins_expedition
		}
		
		### Give title back to Tom if Tom tried to give a wastelands title away
		if = {
			limit = { 
				scope:previous_holder ?= { is_alive = yes }
				scope:previous_holder ?= character:k_wastelands_holder
				scope:transfer_type ?= flag:granted
				is_vassal_or_below_of = character:k_wastelands_holder
			} 
			make_settlement_county_wilderness = { COUNTY = scope:title }
		}
		if = {
			limit = {
				has_character_modifier = lotr_vanquished_modifier
				scope:previous_holder ?= character:k_wastelands_holder
			}
			make_settlement_county_wilderness = { COUNTY = scope:title }
		}

		### Underground | Both AI & Player ###
		# If surface dwellers **somehow** manage to get underground terrain, make it wilderness ( and give them a bit of gold in return )
		if = {
			limit = {
				scope:title ?= { title_province ?= { terrain = halls } }
				NOR = {
					is_dwarf = yes
					is_orc = yes
					is_istari = yes
					is_nazgul = yes
					is_sauron = yes
				}
			}
			make_settlement_county_wilderness = { COUNTY = scope:title }
			add_gold = 125
		}

		### WILDERNESS | Player Side ###
		if = { ## New Holder --> Gained settlement county
			limit = { 
				scope:title ?= { title_province ?= { has_holding_type = settlement_holding } } 
				is_ai = no
			}
			increase_variable = {
				NAME = num_settled_wilderness
				AMOUNT = 1
			}
			trigger_event = wastelands.0007

			if = { ## PREVIOUS HOLDER
				limit = { scope:previous_holder ?= { is_alive = yes } }
				scope:previous_holder ?= {
					decrease_variable = {
						NAME = num_settled_wilderness
						AMOUNT = 1
					}
					trigger_event = wastelands.0007
				}
			}
		}

		### WILDERNESS | AI Side ###
		if = {
			limit = { 
				scope:title ?= { title_province ?= { has_holding_type = settlement_holding } } 
				is_ai = yes
			}
			### Make county wilderness if it exceeds the AIs limit (since they're too stupid to deal with it themselves)
			if = {
				limit = {
					highest_held_title_tier = tier_county
					any_held_county = {
						title_province = { has_holding_type = settlement_holding }
						count > 1
					}
				}
				scope:title ?= { make_settlement_county_wilderness = { COUNTY = this } }
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_duchy
					any_held_county = {
						title_province = { has_holding_type = settlement_holding }
						count > 2
					}
				}
				scope:title ?= { make_settlement_county_wilderness = { COUNTY = this } }
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_kingdom
					any_held_county = {
						title_province = { has_holding_type = settlement_holding }
						count > 3
					}
				}
				scope:title ?= { make_settlement_county_wilderness = { COUNTY = this } }
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_empire
					any_held_county = {
						title_province = { has_holding_type = settlement_holding }
						count > 4
					}
				}
				scope:title ?= { make_settlement_county_wilderness = { COUNTY = this } }
			}
			else = {
				increase_variable = {
					NAME = num_settled_wilderness
					AMOUNT = 1
				}
				trigger_event = wastelands.0007
			}	
			if = { ## PREVIOUS HOLDER
				limit = { scope:previous_holder ?= { is_alive = yes } }
				scope:previous_holder ?= {
					decrease_variable = {
						NAME = num_settled_wilderness
						AMOUNT = 1
					}
					remove_wastelands_tracker_variable = yes
					trigger_event = wastelands.0007
				}
			}
		}

		if = { 
			limit = { scope:title ?= title:d_eryn_vorn }
			trigger_event = druedain.0100
		}
		if = {
			limit = {
				AND = {
					scope:title ?= title:e_isengard_unleashed
					NOT = { root = character:lineofsaruman }
				}	
			}
			destroy_title = title:e_isengard_unleashed
		}
		
		#LotR - Convert Elven barons to the correct government
		if = {
			limit = {
				scope:title ?= {
					tier = tier_barony
					title_province = { has_holding_type = elven_holding }
				}
				root = {
					is_elf = yes
				}
				scope:title.county.holder = { is_elf = yes }
				NOT = { government_has_flag = government_is_elven }
			}
			root = { change_government = elven_government }
		}

		# LotR - If orc gains county with non-orc buildings, destroy invalid buildings
		if = {
			limit = {
				scope:title ?= {
					tier = tier_county
				}
				root = {
					is_orc = yes
					is_ai = yes
				}
			}

			scope:title ?= {
				every_county_province = {
					remove_building_any_level = { BUILDING = caravanserai }
					remove_building_any_level = { BUILDING = watermills }
					remove_building_any_level = { BUILDING = windmills }
					remove_building_any_level = { BUILDING = common_tradeport }
					remove_building_any_level = { BUILDING = pastures }
					remove_building_any_level = { BUILDING = hunting_grounds }
					remove_building_any_level = { BUILDING = orchards }
					remove_building_any_level = { BUILDING = farm_estates }
					remove_building_any_level = { BUILDING = cereal_fields }
					remove_building_any_level = { BUILDING = logging_camps }
					remove_building_any_level = { BUILDING = peat_quarries }
					remove_building_any_level = { BUILDING = hill_farms }
					remove_building_any_level = { BUILDING = elephant_pens }
					remove_building_any_level = { BUILDING = plantations }
					remove_building_any_level = { BUILDING = quarries }
					remove_building_any_level = { BUILDING = guild_halls }
					remove_building_any_level = { BUILDING = ramparts }
					remove_building_any_level = { BUILDING = curtain_walls }
					remove_building_any_level = { BUILDING = watchtowers }
					remove_building_any_level = { BUILDING = hill_forts }
					remove_building_any_level = { BUILDING = wind_furnace }
					remove_building_any_level = { BUILDING = workshops }
					remove_building_any_level = { BUILDING = horse_pastures }
					remove_building_any_level = { BUILDING = hillside_grazing }
					remove_building_any_level = { BUILDING = warrior_lodges }
					remove_building_any_level = { BUILDING = military_camps }
					remove_building_any_level = { BUILDING = regimental_grounds }
					remove_building_any_level = { BUILDING = outposts }
					remove_building_any_level = { BUILDING = barracks }
					remove_building_any_level = { BUILDING = camel_farms }
					remove_building_any_level = { BUILDING = stables }
					remove_building_any_level = { BUILDING = smiths }
					remove_building_any_level = { BUILDING = hillside_grazing }
				}
			}
		}

		# LotR - If non-orc gains county with orc buildings, destroy invalid buildings
		if = {
			limit = {
				scope:title ?= {
					tier = tier_county
				}
				root = {
					lotr_orc_or_nurniag_buildings = no
					is_ai = yes
				}
			}

			scope:title ?= {
				every_county_province = {
					remove_building_any_level = { BUILDING = slave_farms }
					remove_building_any_level = { BUILDING = logging_outposts }
					remove_building_any_level = { BUILDING = raiding_camps }
					remove_building_any_level = { BUILDING = slave_mines }
					remove_building_any_level = { BUILDING = hunting_outposts }
					remove_building_any_level = { BUILDING = uruk_pits }
					remove_building_any_level = { BUILDING = furnaces }
					remove_building_any_level = { BUILDING = warg_pits }
					remove_building_any_level = { BUILDING = scouting_posts }
					remove_building_any_level = { BUILDING = orc_siege_works }
					remove_duchy_building_any_level = { BUILDING = liquor_stills }
					remove_duchy_building_any_level = { BUILDING = orc_barracks }
					remove_duchy_building_any_level = { BUILDING = loot_houses }
					remove_duchy_building_any_level = { BUILDING = proving_ground }
					remove_duchy_building_any_level = { BUILDING = tunnel_network }
					remove_duchy_building_any_level = { BUILDING = slaughterhouses }
					remove_duchy_building_any_level = { BUILDING = experimental_workshop }
					remove_duchy_building_any_level = { BUILDING = heavy_armoury }
					remove_duchy_building_any_level = { BUILDING = snaga_warrens }
				}
			}
		}

		#LotR Abrakhan - Retain decision reward modifiers
		if = {
			limit = {
				scope:title ?= {
					this = title:k_abrakhan
				}
				# Check if character is considered "Saurons Abrakhan Guy"
				character_is_valid_for_abrakhan_subjugation_mission_trigger = yes
			}
			abrakhan_transfer_rewards_effect = yes
		}
		
		#Event to give Stewards Ithilien
		if = {
			limit = {
				game_start_date >= 6083 # After line of Kings fails in Gondor
				OR = {
					has_title = title:e_gondor
					has_title = title:e_castamir
					has_title = title:e_reunitedkingdom
					has_title = title:e_numenor_in_exile
				}
				dynasty = dynasty:dynasty_elros
				dynasty:dynasty_ostomir = {
					any_dynasty_member = {
						is_alive = yes
					}
					NOT = {
						has_dynasty_modifier = princely_house_of_ithilien
					}
				}
				exists = title:k_gondor_steward.holder
				title:k_gondor_steward.holder = { dynasty = dynasty:dynasty_ostomir }
				completely_controls = title:d_minas_ithil
				completely_controls = title:d_emyn_arnen
				completely_controls = title:d_harithilien
				completely_controls = title:d_forithilien
				NOT = {
					is_target_in_global_variable_list = {
						name = unavailable_unique_decisions
						target = flag:princedom_of_ithilien_event
					}
				}
			}
			add_to_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:princedom_of_ithilien_event
			}
			trigger_event = {
				id = gondor.0305
				days = 3
			}
		}

		if = { # Message to Gondor | Bellakar ruler died
			limit = {
				title:e_bellakar.holder ?= { faith_is_good = yes }
				title:e_gondor.holder ?= { faith_is_good = yes }
				title:e_bellakar.holder.dynasty = dynasty:dynasty_tumakveh
				title:e_gondor.holder.dynasty = dynasty:dynasty_elros

				scope:title ?= title:e_bellakar

				scope:title ?= {
					tier = tier_empire
					# # scope:previous_holder = { is_alive = no }
				}

				NOT = { title:e_bellakar.holder ?= { is_allied_to = title:e_gondor.holder } }
				
				OR = { # Either Gondor or Bellakar had to take a decision to form the alliance
					is_target_in_global_variable_list = {
						name = unavailable_unique_decisions
						target = flag:gondor_x_bellakar
					}
					is_target_in_global_variable_list = {
						name = unavailable_unique_decisions
						target = flag:bellakar_x_gondor
					}
				}
				is_target_in_global_variable_list = {
					name = unavailable_unique_decisions
					target = flag:recurring_bellakar_gondor_alliance
				}
				
			}
			title:e_gondor.holder = {
				trigger_event = {
					id = gondor.2953
					days = { 15 30 }
				}
			}
		}

		if = { # Message to Bellakar | Gondor ruler died
			limit = {
				title:e_bellakar.holder ?= { faith_is_good = yes }
				title:e_gondor.holder ?= { faith_is_good = yes }
				title:e_bellakar.holder.dynasty = dynasty:dynasty_tumakveh
				title:e_gondor.holder.dynasty = dynasty:dynasty_elros
				NOT = { title:e_gondor.holder ?= { is_allied_to = title:e_gondor.holder } }

				scope:title ?= title:e_gondor
				scope:title ?= {
					tier = tier_empire
					# # scope:previous_holder = { is_alive = no } # Throwing an error
				}
				
				OR = { # Either Gondor or Bellakar had to take a decision to form the alliance
					is_target_in_global_variable_list = { # Did Gondor initiate the alliance
						name = unavailable_unique_decisions
						target = flag:gondor_x_bellakar
					}
					is_target_in_global_variable_list = { # Did Bellakar initiate the alliance
						name = unavailable_unique_decisions
						target = flag:bellakar_x_gondor
					}
				}
				is_target_in_global_variable_list = {
					name = unavailable_unique_decisions
					target = flag:recurring_bellakar_gondor_alliance
				}
			}
			title:e_bellakar.holder = {
				trigger_event = {
					id = bellakar.0253
					days = { 15 30 }
				}
			}
		}

		if = {
			limit = {
				scope:title ?= {
					tier = tier_county
					title_province = { has_holding_type = settlement_holding }
					root = { restricted_culture = no }
				}
			}
			send_interface_toast = {
				left_icon = root
				title = settlement_gain_culture_faith_change.toast
				scope:title ?= {
					set_county_culture = root.culture
					set_county_faith = root.faith
				}
			}
		}

		# Elves are removed when conquered by Orcs or evil-aligned humans
		if = {
			limit = {
				OR = {
					is_orc = yes
					is_undead = yes
					is_maiar_fallen = yes
					is_evil_istari = yes
					faith_is_evil = yes
				}

				scope:title ?= {
					tier = tier_county
					is_elf = yes
				}
			}
			send_interface_toast = {
				left_icon = root
				title = settlement_conquered_by_orcs.toast

				if = {
					limit = {
						scope:title ?= {
							has_county_modifier = marauding_orc_drags_modifier
						}
					}
					scope:title ?= {
						remove_county_modifier = marauding_orc_drags_modifier
					}
				}

				if = {
					limit = { 
						OR = {
							is_undead = yes
							is_maiar_fallen = yes
						}
					}
					scope:title ?= {
						set_county_culture = culture:kazgumhoth
						set_county_faith = root.faith
						if = {
							limit = { county.development_level >= medium_development_level }
							halve_development = yes
						}
						add_county_modifier = {
							modifier = hidden_elven_refugees_modifier
							years = 50
						}
						every_county_province = {
							limit = { 
								NOT = {
									OR = { # If the barony has a settlement or no holding... don't change them
										has_holding_type = settlement_holding 
										province_has_no_holding_trigger = yes
									}
								}
							}
							if = {
								limit = {
									root = { government_has_flag = government_is_tribal }
								}
								set_holding_type = tribal_holding
							}
							else_if = { 
								limit = {
									barony = { is_capital_barony = yes }
								}
								set_holding_type = castle_holding
							}
							else_if = { 
								limit = {
									county = { NOT = { any_county_province = { has_holding_type = city_holding } } }
								}
								set_holding_type = city_holding
							}
							else_if = { 
								limit = {
									county = { NOT = { any_county_province = { has_holding_type = church_holding } } }
								}
								set_holding_type = church_holding
							}
							else = { set_holding_type = castle_holding }
						}
					}
				}
				else_if = {
					limit = { 
						is_evil_istari = yes
					}
					scope:title ?= {
						set_county_culture = culture:isengard_urukhai
						set_county_faith = root.faith
						if = {
							limit = { county.development_level >= medium_development_level }
							halve_development = yes
						}
						add_county_modifier = {
							modifier = hidden_elven_refugees_modifier
							years = 50
						}
						every_county_province = {
							limit = { 
								NOT = {
									OR = { # If the barony has a settlement or no holding... don't change them
										has_holding_type = settlement_holding 
										province_has_no_holding_trigger = yes
									}
								}
							}
							if = {
								limit = {
									root = { government_has_flag = government_is_tribal }
								}
								set_holding_type = tribal_holding
							}
							else_if = { 
								limit = {
									barony = { is_capital_barony = yes }
								}
								set_holding_type = castle_holding
							}
							else_if = { 
								limit = {
									county = { NOT = { any_county_province = { has_holding_type = city_holding } } }
								}
								set_holding_type = city_holding
							}
							else_if = { 
								limit = {
									county = { NOT = { any_county_province = { has_holding_type = church_holding } } }
								}
								set_holding_type = church_holding
							}
							else = { set_holding_type = castle_holding }
						}
					}
				}
				else = {
					scope:title ?= {
						set_county_culture = root.culture
						set_county_faith = root.faith
						if = {
							limit = { county.development_level >= medium_development_level }
							halve_development = yes
						}
						add_county_modifier = {
							modifier = hidden_elven_refugees_modifier
							years = 50
						} 
						every_county_province = {
							limit = { 
								NOT = {
									OR = { # If the barony has a settlement or no holding... don't change them
										has_holding_type = settlement_holding 
										province_has_no_holding_trigger = yes
									}
								}
							}
							if = {
								limit = {
									root = { government_has_flag = government_is_tribal }
								}
								set_holding_type = tribal_holding
							}
							else_if = { 
								limit = {
									barony = { is_capital_barony = yes }
								}
								set_holding_type = castle_holding
							}
							else_if = { 
								limit = {
									county = { NOT = { any_county_province = { has_holding_type = city_holding } } }
								}
								set_holding_type = city_holding
							}
							else_if = { 
								limit = {
									county = { NOT = { any_county_province = { has_holding_type = church_holding } } }
								}
								set_holding_type = church_holding
							}
							else = { set_holding_type = castle_holding }
						}
					}
				}
			}
		}

		# Orcs are removed when conquered by Elves or when reconquering county with hidden elven refugees
		if = {
			limit = {
				is_elf = yes
				
				scope:title ?= {
					tier = tier_county
					OR = {
						is_orc = yes
						is_undead = yes
						has_county_modifier = hidden_elven_refugees_modifier
					}
				}
			}
			send_interface_toast = {
				left_icon = root
				title = settlement_conquered_by_elves.toast

				if = {
					limit = {
						scope:title ?= {
							has_county_modifier = hidden_elven_refugees_modifier
						}
					}
					scope:title ?= {
						remove_county_modifier = hidden_elven_refugees_modifier
					}
				}

				scope:title ?= {
					set_county_culture = root.culture
					set_county_faith = root.faith
					add_county_modifier = { 
						modifier = marauding_orc_drags_modifier
						years = 25
					}
					every_county_province = {
						limit = { has_holding = yes }
						set_holding_type = elven_holding
					}
				}
			}
		}

		# Orcs culture and faith converted when conquered by good aligned-characters
		if = {
			limit = {
				faith_is_good = yes
				
				scope:title ?= {
					tier = tier_county
					OR = {
						is_orc = yes
						is_undead = yes
						is_maiar_fallen = yes
					}
				}
			}
			send_interface_toast = {
				left_icon = root
				title = settlement_conquered_by_elves.toast

				if = {
					limit = { 
						OR = {
							is_maiar = yes
							is_istari = yes
						}
					}
					scope:title ?= {
						set_county_culture = culture:gondorian
						set_county_faith = root.faith
						add_county_modifier = { 
							modifier = marauding_orc_drags_modifier
							years = 25
						}
					}
				}
				else = {
					scope:title ?= {
						set_county_culture = root.culture
						set_county_faith = root.faith
						add_county_modifier = { 
							modifier = marauding_orc_drags_modifier
							years = 25
						}
					}
				}
			}
		}

		if = {
			limit = {
				is_ai = yes
				is_elf = yes
				highest_held_title_tier > tier_county
				scope:title ?= {
					tier <= tier_county
					title_province = { 
						NOR = { 
							has_holding_type = elven_holding
							has_holding_type = settlement_holding
							has_holding_type = wastelands_holding
						}
					}
				}
			}
			create_character = {
				gender = male
				culture = scope:title.culture
				faith = scope:title.faith
				save_scope_as = new_holder
				location = root.location
			}
			create_title_and_vassal_change = { # Define type of title change as a granting of the title
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = scope:new_holder
					change = scope:title_change
				}
			}
			resolve_title_and_vassal_change = scope:title_change
		}
		else_if = {
			limit = {
				is_ai = yes
				is_elf = no
				highest_held_title_tier > tier_county
				scope:title ?= {
					tier <= tier_county
					title_province = { has_holding_type = elven_holding }
				}
			}
			create_character = {
				gender = male
				culture = scope:title.culture
				faith = scope:title.faith
				save_scope_as = new_holder
				location = root.location
			}
			create_title_and_vassal_change = { # Define type of title change as a granting of the title
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = scope:new_holder
					change = scope:title_change
				}
			}
			resolve_title_and_vassal_change = scope:title_change
		}

		#LotR - Tracking Imperial Khand Time Held
		if = {
			limit = {
				scope:title ?= {
					this = title:e_khand
					NOT = { has_variable = year_khand_founded }
				}
			}
			title:e_khand = {
				set_variable = {
					name = year_khand_founded
					value = current_year
				}
				change_variable = {
					name = year_khand_founded
					add = 100
				}
				set_variable = {
					name = ruling_dynasty
					value = root.dynasty
				}
				set_variable = {
					name = successive_rulers
					value = 1
				}
			}
		}
		if = {
			limit = {
				scope:title ?= {
					this = title:e_khand
				}
    			OR = {
					culture = culture:variag
					culture = { any_parent_culture_or_above = { this = culture:variag } }
    			}
			}
			trigger_event = {
				id = khand.0001
				days = 7
			}
		}
		if = {
			limit = {
				scope:title ?= { is_holy_order = yes }
				NOT = { has_trait = order_member }
				government_has_flag = government_is_holy_order
			}
			add_trait = order_member
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder ?= {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		# Grandeur in elective realms
		if = {
			limit = {
				exists = var:previous_holder_grandeur_value
				has_royal_court = yes
			}
			hidden_effect = {
				change_current_court_grandeur = -100 # Reset to 0
				change_current_court_grandeur = var:previous_holder_grandeur_value
				remove_variable = previous_holder_grandeur_value
			}
		}

		# Petition allowed again
		if = {
			limit = { has_variable = petition_title_cooldown }
			remove_variable = petition_title_cooldown
		}

		# If a player is on their way to pay homage, invalidate.
		if = {
			limit = {
				exists = scope:previous_holder
				any_player = { var:homage_liege_scope ?= scope:previous_holder }
			}
			every_player = {
				limit = {
					var:homage_liege_scope ?= scope:previous_holder
					NOT = { has_character_flag = currently_invalidating_petition_liege_travel }
				}
				current_travel_plan = { cancel_travel_plan = yes }
				trigger_event = pay_homage.0601
				add_character_flag = {
					flag = currently_invalidating_petition_liege_travel
					days = 1
				}
			}
		}

		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder ?= {
					any_character_artifact = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
				}
			}
			scope:previous_holder ?= {
				every_character_artifact = {
					limit = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
					if = {
						limit = {
							OR = {
								scope:transfer_type = flag:conquest
								scope:transfer_type = flag:conquest_holy_war
								scope:transfer_type = flag:conquest_claim
								scope:transfer_type = flag:conquest_populist
								scope:transfer_type = flag:abdication
								scope:transfer_type = flag:usurped
								scope:transfer_type = flag:revoked
								scope:transfer_type = flag:faction_demand
							}
						}
						set_owner = {
							target = root
							history = {
								type = conquest
								actor = scope:previous_holder
								recipient = root
								location = scope:previous_holder.location
							}
						}
					}
					else = {
						set_owner = {
							target = root
							history = {
								type = inherited
								recipient = root
							}
						}
					}
				}
			}
		}

		# FP3 Title Transfer Notification
		# if = { # LotR
		# 	limit = { 
		# 		exists = struggle:persian_struggle
		# 		OR = {
		# 			scope:title = title:d_sunni
		# 			scope:title = title:e_arabia
		# 		}
		# 	}
		# 	struggle:persian_struggle = { # Wet script
		# 		every_involved_ruler = {
		# 			send_interface_toast = {
		# 				type = event_toast_effect_bad
		# 				title = persian_struggle_central_title_transfer.t
		# 				left_icon = scope:previous_holder
		# 				right_icon = scope:title.holder

		# 				custom_tooltip = persian_struggle_central_title_transfer.desc
		# 			}
		# 		}
		# 		every_interloper_ruler = {
		# 			send_interface_toast = {
		# 				type = event_toast_effect_bad
		# 				title = persian_struggle_central_title_transfer.t
		# 				left_icon = scope:previous_holder
		# 				right_icon = scope:title.holder

		# 				custom_tooltip = persian_struggle_central_title_transfer.desc
		# 			}
		# 		}
		# 	}
		# }


		#Struggle Catalyst
		# if = {
		# 	limit = {
		# 		scope:title.tier >= tier_county
		# 		title:e_persia = {
		# 			any_in_de_jure_hierarchy = {
		# 				this = 	scope:title
		# 			}
		# 		}
		# 		NOR = {
		# 			scope:transfer_type = flag:created
		# 			scope:transfer_type = flag:inheritance
		# 		}
		# 		fp3_character_uninvolved_in_struggle_trigger = yes
		# 		scope:previous_holder ?= {
		# 			fp3_character_involved_in_struggle_trigger = yes
		# 			any_character_struggle = {
		# 				phase_has_catalyst = catalyst_interloper_uninvolved_gain_struggle_titles
		# 			}
		# 		}
		# 	}
		# 	scope:previous_holder ?= {
		# 		every_character_struggle = {
		# 			limit = { phase_has_catalyst = catalyst_interloper_uninvolved_gain_struggle_titles }
		# 			activate_struggle_catalyst = {
		# 				catalyst = catalyst_interloper_uninvolved_gain_struggle_titles
		# 				character = root
		# 			}
		# 			log_debug_variable_for_persian_struggle_effect = { VAR = concession_catalyst_interloper_uninvolved_gain_struggle_titles }
		# 		}
		# 	}
		# }
		# if = {
		# 	limit = {
		# 		scope:title.tier >= tier_county
		# 		title:e_persia = {
		# 			any_in_de_jure_hierarchy = {
		# 				this = scope:title
		# 			}
		# 		}
		# 		NOR = {
		# 			scope:transfer_type = flag:created
		# 			scope:transfer_type = flag:inheritance
		# 		}
		# 		fp3_character_involved_in_struggle_trigger = yes
		# 		any_character_struggle = {
		# 			phase_has_catalyst = catalyst_gain_struggle_titles_from_interlopers_uninvolved
		# 			# Stop catalyst from affecting those who are only just now uninvolved due to losing this title
		# 			NOR = {
		# 				is_culture_involved_in_struggle = scope:previous_holder.culture
		# 				is_faith_involved_in_struggle = scope:previous_holder.faith
		# 			}
		# 		}
		# 		scope:previous_holder ?= {
		# 			OR = {
		# 				fp3_character_uninvolved_in_struggle_trigger = yes
		# 				fp3_character_interloper_in_struggle_trigger = yes
		# 			}
		# 		}
		# 	}
		# 	every_character_struggle = {
		# 		limit = { phase_has_catalyst = catalyst_gain_struggle_titles_from_interlopers_uninvolved }
		# 		activate_struggle_catalyst = {
		# 			catalyst = catalyst_gain_struggle_titles_from_interlopers_uninvolved
		# 			character = root
		# 		}
		# 		log_debug_variable_for_persian_struggle_effect = { VAR = stabil_catalyst_gain_struggle_titles_from_interlopers_uninvolved }
		# 	}
		# }

		# Achievements
		# if = { # FP2 El Cid #LotR
		# 	limit = {
		# 		scope:title = title:k_valencia
		# 		has_character_flag = fp2_el_cid_blood_relation_legacy
		# 	}
		# 	set_global_variable = { # DO. NOT. USE. add_achievement_global_variable_effect. IT BREAKS THE ACHIEVEMENT.
		# 		name = fp2_el_cid_achievement_unlocked
		# 		value = yes
		# 	}
		# }
		
		# Am I The Chad?
		# if = { 
		# 	limit = { root = character:easteregg_chad_uhl }
		# 	set_house = house:house_chad_uhl
		# }
		
		# Memories
		# Ascended to the throne
		if = {
			limit = {
				OR = {
					is_ruler = no
					highest_held_title_tier <= scope:title.tier
				}
			}
			
			root = {
				create_character_memory = {
					type = ascended_throne_memory
				}
				
				scope:new_memory = {
					save_scope_as = ascended_throne_memory
					set_variable = childhood_memory
					set_variable = {
						name = landed_title
						value = scope:title
					}
				}
			}
		}
		
		if = {
			limit = {
				scope:transfer_type = flag:created
				is_alive = yes
			}
			every_vassal = {
				limit = {
					has_vassal_stance = courtly
				}
				if = {
					limit = {
						scope:title.tier = tier_duchy
					}
					add_opinion = {
						target = root
						modifier = courtly_title_creation_opinion
						opinion = 10
					}
				}
				else = {
					add_opinion = {
						target = root
						modifier = courtly_title_creation_opinion
						opinion = 30
					}
				}
			}
		}
		
		# Special Legitimacy gain for being elected
		if = {
			limit = {
				scope:title = {
					has_order_of_succession = election
				}
			}
			save_scope_value_as = {
				name = title_tier_minus_2
				value = {
					value = scope:title.tier
					subtract = 2
				}
			}
			send_interface_toast = {
				type = event_toast_effect_good
				title = legitimacy_gain_toast
				left_icon = root
				right_icon = scope:title
				add_legitimacy = {
					value = {
						value = major_legitimacy_gain
						multiply = scope:title_tier_minus_2
					}
				}
			}
		}
		
		### CE1 LEGITIMACY SETUP ###
		if = {
			limit = { # Catch new landed rulers
				exists = dynasty
				# Exclude unplayable for now
				NOR = {
					government_has_flag = government_is_republic
					government_has_flag = government_is_theocracy
				}
				legitimacy = 0
				days_as_ruler < 1
				OR = {
					scope:title.tier = tier_county
					any_held_title = { tier = tier_county }
				}
			}
			add_legitimacy = succession_legitimacy_value
		}

		# Did I conquer a place with holy order leases not of my faith?
		if = {
			limit = {
				scope:title = {
					any_in_de_jure_hierarchy = {
						tier = tier_barony
						is_under_holy_order_lease = yes
						county.holder = {
							any_liege_or_above = { this = root }
						}
						lessee = {
							NAND = { # Only for leases of people who are not of your faith or the holder's faith
								faith = root.faith
								faith = prev.county.holder.faith
							}
						}
					}
				}
			}
			scope:title = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_barony
						is_under_holy_order_lease = yes
						county.holder = {
							any_liege_or_above = { this = root }
						}
						lessee = {
							NAND = { # Only for leases of people who are not of your faith or the holder's faith
								faith = root.faith
								faith = prev.county.holder.faith
							}
						}
					}
					revoke_lease = yes
				}
			}
		}
		
		correct_wastelands_tracker = yes
		scope:previous_holder ?= { correct_wastelands_tracker = yes }
	}
	events = {
		orcs.0010
		dwarven.6001
		nordinbad.0200
		nordinbad.0300
		nordinbad.0301
		nordinbad.0400
		enedwaith.0302
		# roman_restoration.0005		#New Roman Emperor gets Augustus trait. (old holder, if still alive, loses it)
		# roman_restoration.0199		#Restoring the Pentarchy.
		religious_decision.0312		# Base game: new holder of a county with a runestone
		fp1_other_decisions.0113	# FP1: new holder of a county with a runestone
		delay = { days = 1 }
		realm_maintenance.2001		#Big notification about inheriting emperor tier title
		wraith.001 # Corruption of Minas Ithil
		gondor.2300 # Reclamation of Minas Ithil
		lotr_artifact.0005 # Arnor regalia
		# british_isles.1032			# Danelaw-England partition calc.
		# fp1_major_decisions.1011	# Harald Tanglehair becomes Harald Fairhair.
		# fp1_major_decisions.1012	# If Norway has just been created for the first time, flag that.
		# title_event.0001			# Rename West Francia to France
		# title_event.0002			# Rename East Francia to Germany
		# title_event.0011			# Asturias becomes Leon upon emergence of Castille
	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
		delay = { days = 1 }
		# Try to end inherited entrenched regencies automatically — we need to launder this by a day to make sure the AI realises they've inherited a diarchy.
		diarchy.0113
		lotr_interaction_events.0002
	}
	effect = {
		### WILDERNESS ###
		if = {
			limit = {
				scope:title ?= { title_province ?= { has_holding_type = settlement_holding } }
				any_held_county = {
					title_province = { has_holding_type = settlement_holding }
					count > var:num_settled_wilderness # If the amount of wilderness counties you have exceeds the variable tracker, correct the tracker
				}
			}
			increase_variable = {
				NAME = num_settled_wilderness
				AMOUNT = 1
			}
			trigger_event = wastelands.0007
		}
		
		# LotR - If orc gains county with non-orc buildings, destroy invalid buildings
		if = {
			limit = {
				scope:title ?= {
					tier = tier_county
				}
				root = {
					is_orc = yes
					is_ai = yes
				}
			}

			scope:title ?= {
				every_county_province = {
					remove_building_any_level = { BUILDING = caravanserai }
					remove_building_any_level = { BUILDING = watermills }
					remove_building_any_level = { BUILDING = windmills }
					remove_building_any_level = { BUILDING = common_tradeport }
					remove_building_any_level = { BUILDING = pastures }
					remove_building_any_level = { BUILDING = hunting_grounds }
					remove_building_any_level = { BUILDING = orchards }
					remove_building_any_level = { BUILDING = farm_estates }
					remove_building_any_level = { BUILDING = cereal_fields }
					remove_building_any_level = { BUILDING = logging_camps }
					remove_building_any_level = { BUILDING = peat_quarries }
					remove_building_any_level = { BUILDING = hill_farms }
					remove_building_any_level = { BUILDING = elephant_pens }
					remove_building_any_level = { BUILDING = plantations }
					remove_building_any_level = { BUILDING = quarries }
					remove_building_any_level = { BUILDING = guild_halls }
					remove_building_any_level = { BUILDING = ramparts }
					remove_building_any_level = { BUILDING = curtain_walls }
					remove_building_any_level = { BUILDING = watchtowers }
					remove_building_any_level = { BUILDING = hill_forts }
					remove_building_any_level = { BUILDING = wind_furnace }
					remove_building_any_level = { BUILDING = workshops }
					remove_building_any_level = { BUILDING = horse_pastures }
					remove_building_any_level = { BUILDING = hillside_grazing }
					remove_building_any_level = { BUILDING = warrior_lodges }
					remove_building_any_level = { BUILDING = military_camps }
					remove_building_any_level = { BUILDING = regimental_grounds }
					remove_building_any_level = { BUILDING = outposts }
					remove_building_any_level = { BUILDING = barracks }
					remove_building_any_level = { BUILDING = camel_farms }
					remove_building_any_level = { BUILDING = stables }
					remove_building_any_level = { BUILDING = smiths }
					remove_building_any_level = { BUILDING = hillside_grazing }
				}
			}
		}

		#LotR - make sure elves remain with the elven government type
		if = {
			limit = {
				is_elf = yes
			}
			trigger_event = {
				id = elven_racial.0011
				days = 1
			}
		}

		#LotR - make sure hobbits remain with the hobbit government type
		if = {
			limit = {
				is_hobbit = yes
			}
			trigger_event = {
				id = hobbit.0001
				days = 1
			}
		}

		#If settlement inherited, give back to top liege, unless human.
		if = {
			limit = {
				scope:title ?= {
					tier = tier_county
					title_province = { has_holding_type = settlement_holding }
				}
				is_independent_ruler = no
				is_ai = yes
			}
			#top_liege = { add_gold = 10000 }
			create_title_and_vassal_change = {
				type = usurped
				save_scope_as = change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = root.top_liege
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		if = {
			limit = {
				is_ai = yes
				is_elf = yes
				highest_held_title_tier > tier_county
				scope:title ?= {
					tier <= tier_county
					title_province = { 
						NOR = { 
							has_holding_type = elven_holding
							has_holding_type = settlement_holding
							has_holding_type = wastelands_holding
						}
					}
				}
			}
			create_character = {
				gender = male
				culture = scope:title.culture
				faith = scope:title.faith
				save_scope_as = new_holder
				location = root.location
			}
			create_title_and_vassal_change = { # Define type of title change as a granting of the title
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = scope:new_holder
					change = scope:title_change
				}
			}
			resolve_title_and_vassal_change = scope:title_change
		}
		else_if = {
			limit = {
				is_ai = yes
				is_elf = no
				highest_held_title_tier > tier_county
				scope:title ?= {
					tier <= tier_county
					title_province = { has_holding_type = elven_holding }
				}
			}
			create_character = {
				gender = male
				culture = scope:title.culture
				faith = scope:title.faith
				save_scope_as = new_holder
				location = root.location
			}
			create_title_and_vassal_change = { # Define type of title change as a granting of the title
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = scope:new_holder
					change = scope:title_change
				}
			}
			resolve_title_and_vassal_change = scope:title_change
		}
		
		# FP3 Struggle special cases
		## Convert detractors to supporters if they inherit either of the titles they're detracting against.
		# if = { # LotR
		# 	limit = {
		# 		exists = struggle:persian_struggle
		# 		NOT = { has_trait = fp3_struggle_supporter }
		# 		OR = {
		# 			scope:title = title:d_sunni
		# 			scope:title = title:e_arabia
		# 		}
		# 	}
		# 	if = {
		# 		limit = { has_trait = fp3_struggle_detractor }
		# 		remove_trait = fp3_struggle_detractor
		# 	}
		# 	add_trait = fp3_struggle_supporter
		# }
		
		#LotR - Tracking Imperial Khand Time Held
		if = {
			limit = {
				scope:title ?= {
					this = title:e_khand
					has_variable = year_khand_founded
					root.dynasty = var:ruling_dynasty
				}
			}
			title:e_khand = {
				change_variable = {
					name = successive_rulers
					add = 1
				}
			}
		}
		else_if = {
			limit = {
				scope:title ?= {
					this = title:e_khand
					has_variable = year_khand_founded
					NOT = { root.dynasty = var:ruling_dynasty }
				}
			}
			title:e_khand = {
				set_variable = {
					name = ruling_dynasty
					value = root.dynasty
				}
				set_variable = {
					name = successive_rulers
					value = 1
				}
			}
		}
		if = {
			limit = {
				culture = { has_cultural_parameter = realms_shatter_on_succession }
				scope:title ?= { tier > tier_duchy }
				is_independent_ruler = yes
			}
			every_vassal = {
				limit = {
					opinion = {
						target = root
						value < 0
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = yes
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
		}
		scope:title ?= {
			if = {
				limit = { 
					root.culture = { has_cultural_parameter = realms_destroyed_on_succession }
					tier >= tier_kingdom
					root = { is_independent_ruler = yes }
					any_de_jure_top_liege = {
						percent < 0.5
						this = root
					}
				}
				root = { destroy_title = scope:title }
			}
		}
		
		correct_wastelands_tracker = yes
		scope:previous_holder ?= { correct_wastelands_tracker = yes }
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}
	effect = {		
		# LotR - If orc gains county with non-orc buildings, destroy invalid buildings
		if = {
			limit = {
				scope:title ?= {
					tier = tier_county
				}
				root = {
					is_orc = yes
					is_ai = yes
				}
			}

			scope:title ?= {
				every_county_province = {
					remove_building_any_level = { BUILDING = caravanserai }
					remove_building_any_level = { BUILDING = watermills }
					remove_building_any_level = { BUILDING = windmills }
					remove_building_any_level = { BUILDING = common_tradeport }
					remove_building_any_level = { BUILDING = pastures }
					remove_building_any_level = { BUILDING = hunting_grounds }
					remove_building_any_level = { BUILDING = orchards }
					remove_building_any_level = { BUILDING = farm_estates }
					remove_building_any_level = { BUILDING = cereal_fields }
					remove_building_any_level = { BUILDING = logging_camps }
					remove_building_any_level = { BUILDING = peat_quarries }
					remove_building_any_level = { BUILDING = hill_farms }
					remove_building_any_level = { BUILDING = elephant_pens }
					remove_building_any_level = { BUILDING = plantations }
					remove_building_any_level = { BUILDING = quarries }
					remove_building_any_level = { BUILDING = guild_halls }
					remove_building_any_level = { BUILDING = ramparts }
					remove_building_any_level = { BUILDING = curtain_walls }
					remove_building_any_level = { BUILDING = watchtowers }
					remove_building_any_level = { BUILDING = hill_forts }
					remove_building_any_level = { BUILDING = wind_furnace }
					remove_building_any_level = { BUILDING = workshops }
					remove_building_any_level = { BUILDING = horse_pastures }
					remove_building_any_level = { BUILDING = hillside_grazing }
					remove_building_any_level = { BUILDING = warrior_lodges }
					remove_building_any_level = { BUILDING = military_camps }
					remove_building_any_level = { BUILDING = regimental_grounds }
					remove_building_any_level = { BUILDING = outposts }
					remove_building_any_level = { BUILDING = barracks }
					remove_building_any_level = { BUILDING = camel_farms }
					remove_building_any_level = { BUILDING = stables }
					remove_building_any_level = { BUILDING = smiths }
					remove_building_any_level = { BUILDING = hillside_grazing }
				}
			}
		}

		if = {
			limit = {
				is_ai = yes
				is_elf = yes
				highest_held_title_tier > tier_county
				scope:title ?= {
					tier <= tier_county
					title_province = { 
						NOR = { 
							has_holding_type = elven_holding
							has_holding_type = settlement_holding
							has_holding_type = wastelands_holding
						}
					}
				}
			}
			create_character = {
				gender = male
				culture = scope:title.culture
				faith = scope:title.faith
				save_scope_as = new_holder
				location = root.location
			}
			create_title_and_vassal_change = { # Define type of title change as a granting of the title
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = scope:new_holder
					change = scope:title_change
				}
			}
			resolve_title_and_vassal_change = scope:title_change
		}
		else_if = {
			limit = {
				is_ai = yes
				is_elf = no
				highest_held_title_tier > tier_county
				scope:title ?= {
					tier <= tier_county
					title_province = { has_holding_type = elven_holding }
				}
			}
			create_character = {
				gender = male
				culture = scope:title.culture
				faith = scope:title.faith
				save_scope_as = new_holder
				location = root.location
			}
			create_title_and_vassal_change = { # Define type of title change as a granting of the title
				type = granted
				save_scope_as = title_change
				add_claim_on_loss = no
			}
			scope:title ?= {
				change_title_holder = {
					holder = scope:new_holder
					change = scope:title_change
				}
			}
			resolve_title_and_vassal_change = scope:title_change
		}
		
		correct_wastelands_tracker = yes
		scope:previous_holder ?= { correct_wastelands_tracker = yes }
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
	}

	effect = {
		#Make sure nobody ever has only the Kingdom of Fashion
		if = {
			limit = {
				scope:title ?= { tier = tier_kingdom }
				has_title = title:k_fashion
				NOT = {
					any_held_title = { # Only trigger if you don't have any kingdom titles other than Fashion and the kingdom you just lost. Double negative is confusing but it's the only way I could think to script it
						tier = tier_kingdom
						NOT = { this = title:k_fashion }
						NOT = { this = scope:title }
					}
				}
			}
			destroy_title = title:k_fashion
		}
		#Earmark landless Scandinavians for adventuring.
		if = {
			limit = {
				#We only want to grab tribal cultures.
				culture = {
					NOT = { has_cultural_era_or_later = culture_era_late_medieval }
					# NOT = { has_cultural_era_or_later = culture_era_early_medieval }
				}
				#Must have lost their last piece of land.
				is_landed = no
				#If they've ventured far outside Europe, they're unlikely to come back, so we don't #want them.
				scope:title ?= {
					tier = tier_county
					title_province = {
						OR = {
							geographical_region = middleearth
							# geographical_region = world_europe
							# geographical_region = world_asia_minor
						}
					}
				}
			}
			#Norse, Norwegians, & Danes go into the western adventurer list.
			if = {
				limit = {
					OR = {
						culture = { has_cultural_pillar = heritage_daen_coentis }
						culture = { has_cultural_pillar = heritage_daen_lintis }
						#has_culture = culture:eotheod
						has_culture = culture:leofring
						# has_culture = culture:norse
						# has_culture = culture:norwegian
						# has_culture = culture:danish
					}
				}
				add_to_global_variable_list = {
					name = western_scandinavian_adventurer_list
					target = this
				}
			}
			#Norse & Swedes go into the eastern adventurer list.
			if = {
				limit = {
					has_culture = culture:umbarean
					# OR = {
					# 	has_culture = culture:norse
					# 	has_culture = culture:swedish
					# }
				}
				add_to_global_variable_list = {
					name = eastern_scandinavian_adventurer_list
					target = this
				}
			}
		}

		#To remove concubines if a character becomes unlanded
		if = {
			limit = {
				is_landed = no
				any_concubine = { count >= 1 }
			}
			every_concubine = { root = { remove_concubine = prev } }
		}

		#Apply loss of stress to the Rivals
		if = {
			limit = {
				scope:title.tier >= tier_county
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:usurped
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:faction_demand
				}
			}
			root = {
				save_scope_as = actor
			}
			every_relation ={
				type = rival

				send_interface_message = {
					type = event_generic_neutral
					title = msg_rival_dethroned
					left_icon = scope:actor
					right_icon = scope:title

					custom_tooltip = msg_rival_dethroned_desc

					stress_impact = { 
						base = medium_stress_loss
						vengeful = medium_stress_loss
					}
				}
			}
		}
		
		# Struggle catalyst
		if = {
			limit = {
				any_character_struggle = {
					involvement = involved
					phase_has_catalyst = catalyst_revoke_title
				}
				OR = {
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:lease_revoked
				}
			}
			every_character_struggle = {
				activate_struggle_catalyst = {
					catalyst = catalyst_revoke_title
					character = scope:new_holder
				}
			}
		}
		
		# Memories
		# Lost a significant title
		if = {
			limit = {
				scope:title.tier >= highest_held_title_tier
				exists = scope:new_holder
			}
			
			root = {
				create_character_memory = {
					type = lost_title_memory
					
					participants = {
						new_holder = scope:new_holder
					}
				}
				
				scope:new_memory = {
					save_scope_as = lost_title_memory
					set_variable = {
						name = landed_title
						value = scope:title
					}
				}
			}
		}
		
		# LEGITIMACY LOSS FROM USURPATION
		if = {
			limit = { scope:transfer_type ?= flag:usurped }
			# Minus 2, since we want Duchy to be 1, and it's normally 3
			save_scope_value_as = {
				name = title_tier_minus_2
				value = {
					value = scope:title.tier
					subtract = 2
				}
			}
			send_interface_toast = {
				type = event_toast_effect_bad
				title = legitimacy_loss_toast
				left_icon = root
				right_icon = scope:title
				custom_tooltip = legitimacy_loss_usurpation_tt
				add_legitimacy = {
					value = {
						value = miniscule_legitimacy_loss
						multiply = scope:title_tier_minus_2
					}
				}
			}
		}

		# LotR - If only have settlement counties remaining, game over and revert to Wilderness
		if = {
			limit = {
				any_held_title = {
					tier = tier_county
					NOT = { title_province = { has_holding_type = settlement_holding } }
					count = 0
				}
			}

			every_held_title = {
				limit = {
					tier > tier_county
				}
				root = { destroy_title = prev }
			}

			every_held_title = {
				limit = { tier = tier_county }
				make_settlement_county_wilderness = { COUNTY = this }
			}
		}

		# Khamul bug fix, maybe? This modifier removes any title he gains and adds it to its previous owner
		if = {
			limit = {
				any_held_title = {
					tier = tier_county
					count = 0
				}
				root = character:nazgul2
			}
			add_character_modifier = {
				modifier = lotr_vanquished_modifier
				years = 10
			}
		}
		
		correct_wastelands_tracker = yes
		scope:new_holder = { correct_wastelands_tracker = yes }
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
# scope:transfer_type = flag:inheritance or none
on_explicit_claim_gain = {
	effect = {                
        if = { 
            limit = {
				OR = {
					root = {
						has_culture = culture:wastelands
					}
					AND = {
						scope:title ?= { tier = tier_county }
						scope:title.culture = culture:wastelands
					}
				}                
            }
            debug_log = "Preventing claims from/to Wastelands..."
			every_claim = {
				root = { remove_claim = prev }
			}
		}
	}
	events = {
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	events = {
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = { 
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
		# Remove any rank-inappropriate modifiers (e.g., baron buffs).
		remove_character_modifier = mandate_baronial_troops_trained_modifier
		remove_character_modifier = mandate_baronial_troops_half_trained_modifier
		
		# LotR - if protectorate and same title tier as protector, break protectorate
		if = {
			limit = {
				has_variable = overlord_protector
				tier_difference = {
					target = var:my_suzerain
					value >= 0
				}
			}
			send_interface_toast = {
					left_icon = root
					right_icon = var:my_suzerain
					title = rank_up_protectorate.toast
					custom_tooltip = rank_up_protectorate.tt
			}
			var:my_suzerain = {
				send_interface_toast = {
						left_icon = prev
						right_icon = root
						title = rank_up_protector.toast
						custom_tooltip = rank_up_protector.tt
				}
			}
			free_tributary = yes
		}
		
		### Wastelands Management ###
		if = {
			limit = {
				any_held_title = {
					title_province ?= { 
						has_holding_type = settlement_holding
					}
				}	
			}
			remove_upkeep_modifier = yes
			trigger_event = wastelands.0007
		}
		
		correct_wastelands_tracker = yes
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		if = {
			limit = {
				NOR = {
					has_trait = humble
					has_trait = content
					has_trait = generous
				}
			}
			add_character_flag = {
				flag = make_suicide_available
				years = 5
			}
			set_variable = {
				name = rank_demoted
				value = yes
			}
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Inform hostage havers
		if = {
			limit = {
				any_home_court_hostage = { count >= 1 }
			}
			save_scope_as = home_court
			every_home_court_hostage = {
				save_scope_as = hostage
				warden = {
					save_scope_as = warden
					trigger_event = { id = bp2_hostage_system.0410 days = 5 }
				}
			}
		}
		# LotR - if protectorate and same title tier as protector, break protectorate
		every_relation = {
			type = tributary_protectorate
			limit = {
				tier_difference = {
					target = root
					value >= 0
				}
			}
			send_interface_toast = {
				left_icon = root
				right_icon = prev
				title = rank_down_protectorate.toast
				custom_tooltip = rank_down_protectorate.tt
			}
			prev = {
				send_interface_toast = {
						left_icon = root
						title = rank_down_protector.toast
						custom_tooltip = rank_down_protector.tt
				}
			}
			free_tributary_rank_down = yes
		}

		### Wastelands Management ###
		if = {
			limit = {
				any_held_title = {
					title_province ?= {
						has_holding_type = settlement_holding
					}
				}	
			}
			remove_upkeep_modifier = yes
			trigger_event = wastelands.0007
		}
		
		correct_wastelands_tracker = yes
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
	effect = {
		scope:vassal ?= {
			# LotR - if vassalised character is a protector, break protectorates
			every_relation = {
				type = tributary_protectorate
				send_interface_toast = {
					left_icon = scope:vassal
					title = protector_vassalised_protectorate.toast
					custom_tooltip = protector_vassalised_protectorate.tt
				}
				scope:vassal ?= {
					send_interface_toast = {
							left_icon = scope:vassal
							title = protector_vassalised_protector.toast
							custom_tooltip = protector_vassalised_protector.tt
					}
				}
				free_tributary = yes
			}
			every_in_list = {
				variable = all_tributaries
				free_tributary = yes
				if = {
					limit = {
						has_variable = overlord_protector
					}
					send_interface_toast = {
						left_icon = scope:vassal
						title = protector_vassalised_protectorate.toast
						custom_tooltip = protector_vassalised_protectorate.tt
					}
					scope:vassal ?= {
						send_interface_toast = {
							left_icon = scope:vassal
							title = protector_vassalised_protector.toast
							custom_tooltip = protector_vassalised_protector.tt
						}
					}
				}
				else_if = {
					limit = {
						has_variable = overlord_suzerain
					}
					send_interface_toast = {
						left_icon = scope:vassal
						title = suzerain_vassalised_tributary.toast
						custom_tooltip = suzerain_vassalised_tributary.tt
					}
					scope:vassal ?= {
						send_interface_toast = {
							left_icon = scope:vassal
							title = suzerain_vassalised_suzerain.toast
							custom_tooltip = suzerain_vassalised_suzerain.tt
						}
					}
				}
			}
			# LotR - if vassalised character is a protectorate, break protectorate
			if = {
				limit = {
					has_variable = overlord_protector
				}
				send_interface_toast = {
					left_icon = root
					right_icon = var:my_suzerain
					title = protectorate_vassalised_protectorate.toast
					custom_tooltip = protectorate_vassalised_protectorate.tt
				}
				var:my_suzerain = {
					send_interface_toast = {
						left_icon = prev
						right_icon = root
						title = protectorate_vassalised_protector.toast
						custom_tooltip = protectorate_vassalised_protector.tt
					}
				}
				free_tributary = yes
			}
			else_if = {
				limit = {
					has_variable = overlord_suzerain
				}
				send_interface_toast = {
					left_icon = root
					right_icon = var:my_suzerain
					title = tributary_vassalised_tributary.toast
					custom_tooltip = tributary_vassalised_tributary.tt
				}
				var:my_suzerain = {
					send_interface_toast = {
						left_icon = prev
						right_icon = root
						title = tributary_vassalised_suzerain.toast
						custom_tooltip = tributary_vassalised_suzerain.tt
					}
				}
				free_tributary = yes
			}
		}
		# Struggle Catalyst
		if = {
			limit = {
				# Verify if vassal used to be independent
				NOT = { exists = scope:old_liege }
				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_vassalize_independent_ruler
							CHAR = scope:vassal
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_vassalize_independent_ruler
							CHAR = scope:vassal
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_vassalize_independent_ruler
						character = root
					}
				}
			}
		}
	}
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
	
	events = {
		race.0001 #set up races
	}
}

# Called when realm capital changes. It can be manual move, loss in conquest, move after inheritance,
# move when granted a better title, becoming landed for the first time
# root: New realm capital barony
# scope:old_capital - previous capital barony. Can be empty, can be owned by someone else
on_realm_capital_change = {
	effect = {
		holder = {
			# Do we need to refresh their vizier's modifiers?
			if = {
				limit = { has_diarchy_parameter = diarchy_is_vizierate }
				diarch = {
					# What we're doing here is regenerating loc on the diarchs that might refer to a specific place which they no longer have access to.
					## This is gonna get real gross, folks, so my apologies.
					if = {
						limit = { has_character_modifier = vizier_extravagance_t1_treasure_modifier }
						remove_character_modifier = vizier_extravagance_t1_treasure_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t1_treasure_modifier
							desc = vizier_extravagance_t1_treasure_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t1_activities_modifier }
						remove_character_modifier = vizier_extravagance_t1_activities_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t1_activities_modifier
							desc = vizier_extravagance_t1_activities_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t1_property_modifier }
						remove_character_modifier = vizier_extravagance_t1_property_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t1_property_modifier
							desc = vizier_extravagance_t1_property_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t1_charity_modifier }
						remove_character_modifier = vizier_extravagance_t1_charity_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t1_charity_modifier
							desc = vizier_extravagance_t1_charity_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t2_treasure_modifier }
						remove_character_modifier = vizier_extravagance_t2_treasure_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t2_treasure_modifier
							desc = vizier_extravagance_t2_treasure_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t2_activities_modifier }
						remove_character_modifier = vizier_extravagance_t2_activities_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t2_activities_modifier
							desc = vizier_extravagance_t2_activities_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t2_property_modifier }
						remove_character_modifier = vizier_extravagance_t2_property_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t2_property_modifier
							desc = vizier_extravagance_t2_property_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t2_charity_modifier }
						remove_character_modifier = vizier_extravagance_t2_charity_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t2_charity_modifier
							desc = vizier_extravagance_t2_charity_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t3_treasure_modifier }
						remove_character_modifier = vizier_extravagance_t3_treasure_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t3_treasure_modifier
							desc = vizier_extravagance_t3_treasure_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t3_activities_modifier }
						remove_character_modifier = vizier_extravagance_t3_activities_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t3_activities_modifier
							desc = vizier_extravagance_t3_activities_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t3_property_modifier }
						remove_character_modifier = vizier_extravagance_t3_property_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t3_property_modifier
							desc = vizier_extravagance_t3_property_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t3_charity_modifier }
						remove_character_modifier = vizier_extravagance_t3_charity_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t3_charity_modifier
							desc = vizier_extravagance_t3_charity_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t4_treasure_modifier }
						remove_character_modifier = vizier_extravagance_t4_treasure_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t4_treasure_modifier
							desc = vizier_extravagance_t4_treasure_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t4_activities_modifier }
						remove_character_modifier = vizier_extravagance_t4_activities_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t4_activities_modifier
							desc = vizier_extravagance_t4_activities_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t4_property_modifier }
						remove_character_modifier = vizier_extravagance_t4_property_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t4_property_modifier
							desc = vizier_extravagance_t4_property_modifier_custom_desc.on_action
						}
					}
					if = {
						limit = { has_character_modifier = vizier_extravagance_t4_charity_modifier }
						remove_character_modifier = vizier_extravagance_t4_charity_modifier
						add_character_modifier = {
							modifier = vizier_extravagance_t4_charity_modifier
							desc = vizier_extravagance_t4_charity_modifier_custom_desc.on_action
						}
					}
				}
			}
		}
	}
}

