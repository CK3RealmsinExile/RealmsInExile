##################################################
# INFO
# For laamp contracts that are broadly applicable: that is, they should be able to trigger virtually anywhere and with a minimum of triggers.
# The idea is that any given laamp led by a character skilled in any one thing should always be viable — maybe through crime, maybe by demeaning themselves, but they should always have some contracts around to work with.
##################################################



##################################################
# GROUPS (for populate_task_contracts_for_area)
# 
# laamp_contracts_criminal_group
# laamp_contracts_diplomacy_group
# laamp_contracts_hireling_group
# laamp_contracts_hunting_group
# laamp_contracts_intrigue_group
# laamp_contracts_learning_group
# laamp_contracts_martial_group
# laamp_contracts_stewardship_group
# laamp_contracts_justicar_group
# 

##################################################
# #Diplo Contracts lotr_laamp_0xxx
#
# #Martial Contracts lotr_laamp_1xxx
# lotr_laamp_1001 	Hunt down stragglers
#
# #Stewardship Contracts lotr_laamp_2xxx
#
# #Intrigue Contracts lotr_laamp_3xxx
#
# #Learning Contracts lotr_laamp_4xxx
# lotr_laamp_4001		Heal courtier or ruler
#
# #Prowess Contracts lotr_laamp_5xxx
#
# #Justicar Contracts lotr_laamp_6xxx
#
##################################################










##################################################
# DIPLO CONTRACTS


##################################################
# MARTIAL & PROWESS CONTRACTS

lotr_laamp_1001 = {
	group = laamp_contracts_ranger_group
	icon = "/gfx/interface/icons/council_task_types/task_increase_control.dds"
	travel = no
	use_diplomatic_range = yes

	valid_to_create = {
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { same_alignment = { TARGET = root } }
		OR = {
			scope:employer = {
				NOT = { var:issued_lotr_1001_contract_recently ?= root }
				is_independent_ruler = yes		
				any_sub_realm_county = {
					OR = {
						has_county_modifier = marauding_orc_drags_modifier
						has_county_modifier = hidden_elven_refugees_modifier
					}
				}
			}
			scope:employer = {
				NOT = { var:issued_lotr_1001_contract_recently ?= root }
				has_council_position = councillor_marshal
				is_councillor_of = top_liege				
				top_liege = {
					NOT = {
						has_any_bad_relationship_with_character_trigger = { CHARACTER = scope:employer }
					}
					any_sub_realm_county = {
						OR = {
							has_county_modifier = marauding_orc_drags_modifier
							has_county_modifier = hidden_elven_refugees_modifier
						}
					}
				}
			}
		}
	}

	valid_to_keep = {
		var:task_contract_councillor_liege ?= {
			any_sub_realm_county = {
				OR = {
					has_county_modifier = marauding_orc_drags_modifier
					has_county_modifier = hidden_elven_refugees_modifier
				}
			}
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
	}

	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
	}

	valid_to_accept = {
	}

	weight = {
		# Standard weights.
		value = task_contract_weight_interesting_almost_rare_value
		add = laamp_contracts_weight_up_martial_value
		add = task_contract_weight_employer_contact_list_value
		scope:employer = { multiply = task_contract_weight_by_tier_value }
	}

	on_create = {
		scope:contract = {
			save_scope_as = task_contract
			task_contract_employer = {
				set_variable = {
					name = issued_lotr_1001_contract_recently
					value = scope:task_contract.task_contract_taker
					years = 10
				}
				save_scope_as = task_contract_employer
				if = {
					limit = {
						is_independent_ruler = yes
					}
					scope:task_contract_employer = {
						save_scope_as = task_contract_councillor_liege
						cp:councillor_marshal ?= {
							save_scope_as = task_contract_councillor
						}
					}
				}
				else = {
					scope:task_contract_employer = {
						save_scope_as = task_contract_councillor
						top_liege = {
							save_scope_as = task_contract_councillor_liege
						}
					}
				}
			}
			set_variable = {
				name = task_contract_councillor_liege
				value = scope:task_contract_councillor_liege
			}
			set_variable = {
				name = task_contract_councillor
				value = scope:task_contract_councillor
			}
			set_variable = {
				name = task_contract_employer
				value = scope:task_contract.task_contract_employer
			}
			set_variable = {
				name = failure
				value = 0
			}
			set_variable = {
				name = control
				value = 0
			}
			set_variable = {
				name = num_of_corrupt_counties
				value = 0
			}
			#save the liege as the target
			set_task_contract_target = scope:task_contract_councillor_liege
			#save all counties with low control or corruption modifier in liege's realm
			scope:task_contract_councillor_liege = {
				ordered_sub_realm_county = {
					order_by = {
						value = county_opinion
						multiply = -1
					}
					max = 6
					check_range_bounds = no
					limit = {
						OR = {
							has_county_modifier = marauding_orc_drags_modifier
							has_county_modifier = hidden_elven_refugees_modifier
						}
					}
					scope:task_contract = {
						add_to_variable_list = {
							name = corrupt_counties
							target = prev
						}
					}
				}
			}
			# We do this a bit later on because otherwise it was having some slight issues if only one county was valid.
			set_variable = {
				name = num_of_corrupt_counties
				value = {
					every_in_list = {
						variable = corrupt_counties
						add = 1
					}
				}
			}
			random_in_list = {
				variable = corrupt_counties
				title_province = {
					save_scope_as = destination
				}
			}
			set_variable = {
				name = task_contract_destination
				value = scope:destination
			}
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_critical
				value = {
					value = task_contract_taker.task_contract_success_gold_gain_full_value
					multiply = scope:task_contract.var:num_of_corrupt_counties
				}
			}
			set_variable = {
				name = gold_success_standard
				value = {
					value = task_contract_taker.task_contract_success_gold_gain_full_value
					multiply = scope:task_contract.var:num_of_corrupt_counties
					multiply = 0.5
				}
			}
		}
	}

	# On_Actions
	on_accepted = {
		save_scope_as = task_contract
		task_contract_taker = {
			trigger_event = lotr_laamp_contract_schemes.1001
		}
	}

	on_invalidated = {
		if = {
			limit = {
				root.task_contract_taker = {
					any_character_active_contract = {
						this = root
					}
				}
			}
			task_contract_employer = {
				save_scope_as = task_contract_employer
			}
			save_scope_value_as = {
				name = task_contract_tier
				value = root.task_contract_tier
			}
			var:task_contract_destination = {
				save_scope_as = task_contract_destination
			}
			var:task_contract_target = {
				save_scope_as = task_contract_target
			}
			task_contract_taker = {
				set_variable = {
					name = invalidated_task_contract_type
					value = flag:laamp_help_increase_control_contract
				}
			}
			if = {
				limit = {
					task_contract_employer = {
						is_alive = no
					}
				}
				task_contract_employer.primary_title.holder ?= {
					save_scope_as = employer_heir
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_invalidation_reason
						value = flag:employer_dead
					}
					trigger_event = ep3_contract_event.0012
				
				}
			}
			else_if = {
				limit = {
					scope:task_contract_target = {
						is_alive = no
					}
				}
				task_contract_taker = {
					save_scope_value_as = {
						name = task_contract_invalidation_reason
						value = flag:target_dead
					}
					trigger_event = ep3_contract_event.0012
				}
			}
		}
	}

	# Rewards
	task_contract_reward = {
		success_critical = {
			effect = {
				save_scope_value_as = { name = extra_reward value = flag:no }
				save_scope_as = task_contract
				set_variable = {
					name = gold_success_critical
					value = {
						value = task_contract_taker.task_contract_success_gold_gain_full_value
						multiply = var:control
					}
				}
				set_variable = {
					name = gold_success_standard
					value = {
						value = task_contract_taker.task_contract_success_gold_gain_full_value
						multiply = var:control
						multiply = 0.5
					}
				}
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
				gain_patron_and_hook_from_council_task_contract_effect = yes
				hidden_effect = {
					scope:task_contract.task_contract_taker = {
						current_travel_plan = { reroute_to_home = yes }
					}
				}
			} 
		}
		success_standard = {
			effect = {
				save_scope_value_as = { name = extra_reward value = flag:no }
				save_scope_as = task_contract
				set_variable = {
					name = gold_success_critical
					value = {
						value = task_contract_taker.task_contract_success_gold_gain_full_value
						multiply = var:control
					}
				}
				set_variable = {
					name = gold_success_standard
					value = {
						value = task_contract_taker.task_contract_success_gold_gain_full_value
						multiply = var:control
						multiply = 0.5
					}
				}
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				gain_patron_and_hook_from_council_task_contract_effect = yes
				hidden_effect = {
					scope:task_contract.task_contract_taker = {
						current_travel_plan = { reroute_to_home = yes }
					}
				}
			}
		}		
		failure_standard = {
			positive = no
			effect = {
				save_scope_value_as = { name = extra_reward value = flag:no }
				save_scope_as = task_contract
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
				hidden_effect = {
					scope:task_contract.task_contract_taker = {
						current_travel_plan = { reroute_to_home = yes }
					}
				}
			}
		}
	}
}


##################################################
# STEWARDSHIP CONTRACTS


##################################################
# INTRIGUE CONTRACTS

# Murder an enemy knight/commander
lotr_laamp_3011 = {
	group = laamp_contracts_ranger_group
	icon = "gfx/interface/icons/scheme_types/intrigue.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		# Standard weights.
		value = 1000
		add = laamp_contracts_weight_up_intrigue_value
		add = laamp_contracts_weight_up_criminal_value
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that want someone killed and don't much care how.
				if = {
					limit = { has_trait = wrathful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = callous }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = sadistic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = arbitrary }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that won't hire thugs to solve their problems just on principle.
				if = {
					limit = { has_trait = calm }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = just }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		# Specific flavour triggers.
		laamp_task_contract_employer_would_resort_to_violence_trigger = yes
		scope:employer = {
			same_alignment = { TARGET = root }
			OR = {
				AND = {
					highest_held_title_tier >= tier_county
					any_neighboring_realm_same_rank_owner = {
						opposite_alignment = { TARGET = prev }
						OR = {
							any_vassal = {
								is_ai = yes
								cannot_be_killed = no
								martial > 10
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							any_knight = {
								cannot_be_killed = no
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
						}
					}
				}
				any_neighboring_top_liege_realm_owner = {
					opposite_alignment = { TARGET = prev }
					OR = {
						any_vassal = {
							is_ai = yes
							cannot_be_killed = no
							martial > 10
							lotr_valid_laamp_contract_foe_trigger = yes
						}
						any_knight = {
							cannot_be_killed = no
							is_ai = yes
							lotr_valid_laamp_contract_foe_trigger = yes
						}
					}
				}
			}
		}
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Now, nab us a suitable target.
		task_contract_employer = {
			if = {
				limit = {
					any_neighboring_top_liege_realm_owner = {
						opposite_alignment = { TARGET = prev }
						OR = {
							any_vassal = {
								is_ai = yes
								cannot_be_killed = no
								martial > 10
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							any_knight = {
								cannot_be_killed = no
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
						}
					}
				}
				random_neighboring_top_liege_realm_owner = {
					limit = { 
						opposite_alignment = { TARGET = prev } 
						OR = {
							any_vassal = {
								is_ai = yes
								cannot_be_killed = no
								martial > 10
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							any_knight = {
								cannot_be_killed = no
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
						}
					}
					if = {
						limit = {
							any_vassal = { 
								is_ai = yes
								cannot_be_killed = no
								is_lotr_adult = yes
								martial > 10
								lotr_valid_laamp_contract_foe_trigger = yes
							}
						}
						every_vassal = {
							limit = {
								cannot_be_killed = no 
								is_lotr_adult = yes
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							add_to_list = vassal_list
						}
						ordered_in_list = {
							list = vassal_list
							order_by = martial
							save_scope_as = task_contract_target
						}
					}
					else = {
						every_knight = {
							limit = { 
								cannot_be_killed = no 
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							add_to_list = knight_list
						}
						ordered_in_list = {
							list = knight_list
							order_by = prowess
							save_scope_as = task_contract_target
						}
					}
				}
			}
			else = {
				random_neighboring_realm_same_rank_owner = {
					limit = { 
						opposite_alignment = { TARGET = prev } 
						OR = {
							any_vassal = {
								is_ai = yes
								cannot_be_killed = no
								martial > 10
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							any_knight = {
								cannot_be_killed = no
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
						}
					}
					if = {
						limit = {
							any_vassal = { 
								is_ai = yes
								cannot_be_killed = no
								is_lotr_adult = yes
								martial > 10
								lotr_valid_laamp_contract_foe_trigger = yes
							}
						}
						every_vassal = {
							limit = {
								cannot_be_killed = no 
								is_lotr_adult = yes
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							add_to_list = vassal_list
						}
						ordered_in_list = {
							list = vassal_list
							order_by = martial
							save_scope_as = task_contract_target
						}
					}
					else = {
						every_knight = {
							limit = { 
								cannot_be_killed = no 
								is_ai = yes
								lotr_valid_laamp_contract_foe_trigger = yes
							}
							add_to_list = knight_list
						}
						ordered_in_list = {
							list = knight_list
							order_by = prowess
							save_scope_as = task_contract_target
						}
					}
				}
			}
		}
		set_variable = {
			name = task_contract_employer
			value = scope:task_contract.task_contract_employer
		}
		if = {
			limit = {
				exists = scope:task_contract.task_contract_target
			}
			set_variable = {
				name = task_contract_target
				value = scope:task_contract.task_contract_target
			}
		}
		else = {
			set_variable = {
				name = task_contract_target
				value = scope:task_contract_target
			}
			set_task_contract_target = scope:task_contract_target
		}
		# Then we start the scheme.
		task_contract_taker ?= {
			start_scheme = {
				type = lotr_laamp_3011_contract_scheme
				contract = root
				target_character = root.var:task_contract_target
			}
			# Make a note of what the scheme even is; we'll need this for the event too.
			scope:task_contract.scheme = { save_scope_as = scheme }
			trigger_event = lotr_laamp_contract_schemes.3011
		}
	}
	on_create = {
		scope:contract = {
			set_variable = {
				name = animation
				value = 1
			}
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			save_scope_as = task_contract
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_crime_value
			}
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_crime_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
	}
}

#################################################
# LEARNING CONTRACTS

# Heal courtier or ruler
lotr_laamp_4001 = {
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/scheme_types/learning.dds"

	travel = yes
	use_diplomatic_range = no

	weight = {
		# Standard weights.
		value = 1000
		add = laamp_contracts_weight_up_learning_value
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that appreciate works of learning.
				if = {
					limit = { has_trait = scholar }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = theologian }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = eccentric }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = patient }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = shy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				## Traits that don't support these gorramned NERDS.
				if = {
					limit = { has_trait = gregarious }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = athletic }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		rule_out_dramatic_laamp_employers_trigger = yes
		scope:employer = {
			OR = {
				has_serious_disease_trigger = yes
				any_courtier = {
					has_serious_disease_trigger = yes
					OR = {
						is_of_major_interest_trigger = { CHARACTER = scope:employer }
						is_of_minor_interest_trigger = { CHARACTER = scope:employer }
					}
				}
			}
		}
		root = {
			faith_is_good = yes
			OR = {
				is_elf = yes
				is_maiar = yes
				has_trait = lifestyle_physician
				any_character_artifact = {
					has_variable = elessar
				}
			}
		}
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed = yes }
		task_contract_target ?= { 
			has_serious_disease_trigger = yes
			is_alive = yes
		}
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		root.task_contract_employer = { is_landed = yes }
	}
	
	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Find a suitable patient
		task_contract_employer = { 
			if = {
				limit = { has_serious_disease_trigger = yes }
				save_scope_as = task_contract_target
			}
			else = {
				random_courtier = {
					limit = { 
						is_of_major_interest_trigger = { CHARACTER = scope:employer }
						has_serious_disease_trigger = yes
					}
					alternative_limit = { 
						is_of_minor_interest_trigger = { CHARACTER = scope:employer }
						has_serious_disease_trigger = yes
					}
					save_scope_as = task_contract_target
				}
			}
		}
		set_variable = {
			name = task_contract_employer
			value = scope:task_contract.task_contract_employer
		}
		if = {
			limit = {
				exists = scope:task_contract.task_contract_target
			}
			set_variable = {
				name = task_contract_target
				value = scope:task_contract.task_contract_target
			}
		}
		else = {
			set_variable = {
				name = task_contract_target
				value = scope:task_contract_target
			}
			set_task_contract_target = scope:task_contract_target
		}
		# Then we start the scheme.
		task_contract_taker ?= {
			start_scheme = {
				type = lotr_laamp_4001_contract_scheme
				contract = root
				target_character = root.var:task_contract_target
			}
			# Make a note of what the scheme even is; we'll need this for the event too.
			scope:task_contract.scheme = { save_scope_as = scheme }
			trigger_event = lotr_laamp_contract_schemes.4001
		}
	}
	on_create = {
		scope:contract = {
			save_scope_as = task_contract
			# Make our gold rewards static.
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_critical_value
			}
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = task_contract_success_piety_gain_half_value
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = task_contract_success_piety_gain_full_value
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = task_contract_failure_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
	}
}


##################################################
# JUSTICAR CONTRACTS

##################################################
# DEPRECATED CONTRACTS

