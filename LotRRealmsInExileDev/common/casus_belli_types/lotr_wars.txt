abrakhan_cb = {
	# Based on invasion_war CB and has no cost.
	# Used for events.
	group = invasion
	
	allowed_for_character = {
		scope:attacker = {
			character_is_valid_for_abrakhan_subjugation_mission_trigger = yes
			is_ai = yes
		}	
		scope:attacker = {		
			NOT = {
				has_culture = culture:wastelands
			}
		}
		always = no #Disabled by request of various testers and devs
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
		
		scope:attacker = {		
			NOT = {
				has_culture = culture:wastelands
			}
		}
	}
	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	
	valid_to_start = {
		scope:target = {
			any_in_de_jure_hierarchy = {
				tier = tier_county
				neighboring_county_or_viking_conquest_trigger = { CHARACTER = root }
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = invasion_war_victory_desc_attacker
			}
			desc = invasion_war_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = invasion_war_warning_desc
		}
	}
	
	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 5
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_invalidated_desc = msg_invasion_war_invalidated_message
	on_invalidated = {
	}

	ai_score_mult = { #LotR
		value = 1

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "INVASION_WAR_NAME"
	war_name_base = "INVASION_WAR_NAME_BASE"
	cb_name = "INVASION_CB_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	
	attacker_wargoal_percentage = 0.8
}

abrakhan_claim_cb = {
	group = de_jure
	war_name = "SUBJUGATION_WAR_NAME"
	war_name_base = "SUBJUGATION_WAR_NAME_BASE"
	cb_name = "abrakhan_claim_cb"
	
	interface_priority = 100
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }
	
	allowed_for_character = {
		always = no
		# scope:attacker = {
		# 	character_is_valid_for_abrakhan_subjugation_mission_trigger = yes
		# }
		
		scope:attacker = {		
			NOT = {
				has_culture = culture:wastelands
			}
		}
	}
	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
		#NOT = { scope:defender = }
		
		scope:attacker = {		
			NOT = {
				has_culture = culture:wastelands
			}
		}
	}
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	valid_to_start = {
		scope:target = {
			tier < tier_empire
			trigger_if = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_nafarat_decision_unlock } }
				OR = {
					kingdom = title:k_abrakhan
					kingdom = title:k_nafarati
					duchy = title:d_sadhradamrun
					duchy = title:d_sadhradromen
					duchy = title:d_safakor
					duchy = title:d_firamir
					kingdom = title:k_darsalan
					duchy = title:d_darsalan_abrakhan
					duchy = title:d_asur
					duchy = title:d_samikha
					duchy = title:d_khija
					kingdom = title:k_arysis
				}
			}
			trigger_else_if = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_dune_sea_decision_unlock } }
				OR = {
					empire = title:e_dune_sea
					kingdom = title:k_koanoz
					kingdom = title:k_tedja
					kingdom = title:k_qarsa
					kingdom = title:k_aukar
					kingdom = title:k_narak
				}
			}
			trigger_else_if = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_ray_decision_unlock } }
				# OR = {
					empire = title:e_bozisha_miraz
				# }
			}
			trigger_else_if = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_bellakar_decision_unlock } }
				# OR = {
					empire = title:e_bellakar
				# }
			}
			trigger_else_if = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_mardruak_decision } }
				# OR = {
					kingdom = title:k_mardruak
				# }
			}
			trigger_else_if = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_near_harad_decision_unlock } }
				OR = {
					empire = title:e_dune_sea
					empire = title:e_haradwaith
				}
			}
			trigger_else = {
				limit = { scope:attacker = { has_character_flag = abrakhan_subjugation_umbar_decision_unlock } }
				# OR = {
					empire = title:e_umbar
				# }
			}
		}
	}
	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}
	on_invalidated_desc = msg_invasion_war_invalidated_message
	on_invalidated = {
	}
	
	target_titles = all
	target_title_tier = all
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	
	# cost = tribal_subjugation_cb_prestige_cost
	cost = {
		prestige = {
			value = tribal_subjugation_cb_prestige_cost
			if = {
				limit = {
					scope:defender.faith.religion = { is_in_family = rf_eruhini }
				}
				multiply = {
					value = 0
					desc = CB_FIGHTING_FREE_PEOPLES
				}
			}
		}
		piety = {
			value = 0
			# Is "legit Sauronic" faith or Golden King's faith
			if = {
				limit = {
					OR = {
						scope:defender.faith = faith:lidless_eye
						scope:defender.faith = scope:attacker.faith
					}
				}
				add = {
					value = 1000
					desc = CB_FIGHTING_FORCES_OF_EVIL
				}
			}
			# Attacking your HoF is impious
			if = {
				limit = {
					scope:attacker.faith.religious_head = scope:attacker
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = 1000
					desc = CB_BASE_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}
			
			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}
	
	on_declaration = {
		on_declared_war = yes
	}
	
	on_invalidated_desc = msg_subjugation_war_invalidated_message
	
	on_invalidated = {
	}
	
	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = invasion_war_victory_desc_attacker
			}
			desc = invasion_war_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = invasion_war_warning_desc
		}
	}
	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = no
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 5
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	ai_score_mult = { #LotR
		value = 1

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
	
	on_primary_attacker_death = invalidate
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	use_de_jure_wargoal_only = yes
	
	attacker_ticking_warscore = 0.01
	defender_ticking_warscore = 0.05
	attacker_wargoal_percentage = 0.8
	defender_ticking_warscore_delay = { months = 24 }
}

raid_for_captives_cb = {
	group = religious_disorganised
	ai_only_against_neighbors = yes

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character = {
		scope:attacker = {
			faith = { 
				has_doctrine_parameter = flower_war_cb_active 
				NOT = { has_doctrine_parameter = human_sacrifice_active }
			}
		}

		scope:defender = {
			is_independent_ruler = yes
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } } # Already pre-filtered by the AI due to ai_only_against_neighbors = yes. any_neighboring_top_liege_realm_owner is expensive
				scope:attacker = {
					any_neighboring_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}

	cost = {
		piety = {
			add = {
				value = 100
				desc = CB_BASE_COST
			}
			# Faith Doctrine Piety Discounts
			if = {
				limit = {
					scope:attacker.faith = {
						has_doctrine_parameter = divine_destiny_holy_war_cost_reduction
					}
				}
				multiply = {
					value = 0.5
					desc = CB_DIVINE_DESTINY_COST
				}
			}

			if = {
				limit = {
					scope:attacker.faith = {
						has_doctrine_parameter = cheaper_holy_wars_active
					}
				}
				multiply = {
					value = 0.8
					desc = CB_REDUCED_HOLY_WAR_COST
				}
			}

			## Innovation Piety Discounts
			#if = {
			#	limit = {
			#		scope:attacker = {
			#			culture = {
			#				has_innovation = innovation_reconquista
			#			}
			#		}
			#	}
			#	multiply = {
			#		value = 0.9
			#		desc = CB_RECONQUISTA_COST
			#	}
			#}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	should_invalidate = {
		OR = {
			AND = {	#A formal flowery war only invalidates if neither side is an interested participant.
				scope:attacker.faith = {
					NOT = { 
						has_doctrine_parameter = flower_war_cb_active 
						NOT = { has_doctrine_parameter = human_sacrifice_active }
					}
				}
				scope:defender.faith = {
					NOT = { 
						has_doctrine_parameter = flower_war_cb_active 
						NOT = { has_doctrine_parameter = human_sacrifice_active }
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = {
		desc = msg_invasion_war_invalidated_message
	}
	
	on_invalidated = {
		
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = raid_for_captives_cb_victory_desc
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}
		scope:defender = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}
		scope:attacker = {	#If the attacker has the appropriate tenet, grab some suitable courtiers from the defender.
			custom_tooltip = raid_for_captives_cb_prisoners.tt_attacker
			hidden_effect = {
				scope:defender = {
					every_courtier_or_guest = {
						limit = { cannot_be_killed = no }
						add_to_list = potential_captives_list 
					}
					random_in_list = {	#Nab someone related to the defender, preferring tangentials.
						list = potential_captives_list
						limit = {
							OR = {
								AND = {
									has_dynasty = yes
									dynasty = scope:defender.dynasty
								}
								is_consort_of = scope:defender
							}
						}
						alternative_limit = { always = yes }
						weight = {
							base = 1
							modifier = {
								add = 25
								NOT = { is_close_family_of = scope:defender }
							}
							modifier = {
								add = 15
								NOT = { is_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
						scope:attacker = {
							imprison = {
								target = scope:future_captive
								type = dungeon
							}
						}
					}
					random_in_list = {	#Always try to grab a second person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
						scope:attacker = {
							imprison = {
								target = scope:future_captive
								type = dungeon
							}
						}
					}
					random_in_list = {	#Always try to grab a third person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
						scope:attacker = {
							imprison = {
								target = scope:future_captive
								type = dungeon
							}
						}
					}
					if = {	#If at least duchy-tier, try to grab a fourth person.
						limit = { primary_title.tier >= tier_duchy }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
					if = {	#If at least kingdom-tier, try to grab a fifth person.
						limit = { primary_title.tier >= tier_kingdom }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
				}
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		desc = raid_for_captives_cb_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { 
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}
		scope:attacker = {	
			add_prestige = {
				value = medium_prestige_loss
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_defeat_desc = {
		desc = raid_for_captives_cb_defeat_desc
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = { scope:attacker.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}
		scope:defender = {
			if = {
				limit = { scope:attacker.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}
		scope:defender = {	#If the defender has the appropriate tenet, and doesn't already have sacrificial victims, grab some suitable courtiers from the attacker.
			if = {
				limit = {
					faith = { 
						has_doctrine_parameter = flower_war_cb_active 
						NOT = { has_doctrine_parameter = human_sacrifice_active } 
					}
				}
				custom_tooltip = raid_for_captives_cb_prisoners.tt_defender
				hidden_effect = {
					scope:attacker = {
						every_courtier_or_guest = { add_to_list = potential_captives_list }
						random_in_list = {	#Nab someone related to the attacker, preferring tangentials.
							list = potential_captives_list
							limit = {
								OR = {
									AND = {
										has_dynasty = yes
										dynasty = scope:attacker.dynasty
									}
									is_consort_of = scope:attacker
								}
							}
							alternative_limit = { always = yes }
							weight = {
								base = 1
								modifier = {
									add = 25
									NOT = { is_close_family_of = scope:attacker }
								}
								modifier = {
									add = 15
									NOT = { is_extended_family_of = scope:attacker }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:defender = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
						random_in_list = {	#Always try to grab a second person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:attacker }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:defender = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
						random_in_list = {	#Always try to grab a third person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:attacker }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:defender = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
						if = {	#If at least duchy-tier, try to grab a fourth person.
							limit = { primary_title.tier >= tier_duchy }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:attacker }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
						if = {	#If at least kingdom-tier, try to grab a fifth person.
							limit = { primary_title.tier >= tier_kingdom }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:attacker }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
					}
				}
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "RAID_FOR_CAPTIVES_CB_NAME"
	war_name_base = "RAID_FOR_CAPTIVES_NAME_BASE"
	cb_name = "RAID_FOR_CAPTIVES_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500

	ai_score_mult = {
		value = 1
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}
		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
}

slave_expedition_cb = {
	group = religious_disorganised
	ai_only_against_neighbors = yes

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character = {
		scope:attacker = {
			culture = { has_cultural_parameter = can_launch_slave_expeditions }
		}
		scope:defender = {
			is_independent_ruler = yes
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } }
				scope:attacker = {
					any_neighboring_and_across_water_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	#allowed_for_character_display_regardless = {
	#	can_conduct_slave_expedition = yes
	#}

	cost = {
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = medium_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Prestige Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_chronicle_writing
							has_innovation = innovation_land_grants
							has_innovation = innovation_rightful_ownership
						}
					}
				}
				multiply = {
					value = 0.7
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
							}
							OR = {
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.8
					desc = CB_ATTACKER_INNOVATIONS
				}
			}
			else_if = {
				limit = {
					scope:attacker = {
						culture = {
							OR = {
								has_innovation = innovation_chronicle_writing
								has_innovation = innovation_land_grants
								has_innovation = innovation_rightful_ownership
							}
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_ATTACKER_INNOVATIONS
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Culture
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_cultural_parameter = cheaper_cbs
						}
					}
				}
				multiply = {
					value = 0.8
					desc = "CB_ATTACKER_CULTURE"
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	should_invalidate = {
		OR = {
			AND = {	# If the culture no longer supports slaver expeditions, invalidate
				NOT = {
					scope:attacker.culture = { has_cultural_parameter = can_launch_slave_expeditions }
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = {
		desc = slave_expedition_cb_ended_invalid_desc
	}

	on_invalidated = {
		
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		desc = raid_for_captives_cb_victory_desc
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		custom_tooltip = slave_expedition_cb_cooldown
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = { 
			add_character_flag = {
				flag = successful_slaver_expedition 
				years = 5
			}
		}
		scope:attacker = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}
		scope:attacker = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				capital_county = {
					add_county_modifier = {
						modifier = slave_influx_modifier_county
						years = 5
					}
				}
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				capital_county = {
					add_county_modifier = {
						modifier = slave_influx_modifier_duchy
						years = 5
					}
				}
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				capital_county = {
					add_county_modifier = {
						modifier = slave_influx_modifier_kingdom
						years = 5
					}
				}
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				capital_county = {
					add_county_modifier = {
						modifier = slave_influx_modifier_empire
						years = 5
					}
				}
			}
		}
		scope:defender = {
			pay_short_term_gold = {
				gold = 5
				target = scope:attacker
				yearly_income = yes
			}
			capital_county = {
				change_development_progress_with_overflow = -2
			}
		}
		scope:defender = {
			if = {
				limit = { scope:defender.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:defender.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}
		scope:attacker = {	#If the attacker has the appropriate tenet, grab some suitable courtiers from the defender.
			custom_tooltip =  slave_expedition_cb_prisoners.tt_attacker
			hidden_effect = {
				scope:defender = {
					every_courtier_or_guest = { add_to_list = potential_captives_list }
					random_in_list = {	#Nab someone related to the defender, preferring tangentials.
						list = potential_captives_list
						limit = {
							OR = {
								AND = {
									has_dynasty = yes
									dynasty = scope:defender.dynasty
								}
								is_consort_of = scope:defender
							}
						}
						alternative_limit = { always = yes }
						weight = {
							base = 1
							modifier = {
								add = 25
								NOT = { is_close_family_of = scope:defender }
							}
							modifier = {
								add = 15
								NOT = { is_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
						scope:attacker = {
							imprison = {
								target = scope:future_captive
								type = dungeon
							}
						}
					}
					random_in_list = {	#Always try to grab a second person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
						scope:attacker = {
							imprison = {
								target = scope:future_captive
								type = dungeon
							}
						}
					}
					random_in_list = {	#Always try to grab a third person.
						list = potential_captives_list
						limit = {
							NOT = { is_in_list = definite_captives_list }
						}
						weight = {
							base = 1
							modifier = {
								add = 40
								NOT = {
									any_claim = {
										useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
									}
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
									diplomacy >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_marshal_trigger = { COURT_OWNER = scope:defender }
									martial >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_steward_trigger = { COURT_OWNER = scope:defender }
									stewardship >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NAND = {
									can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
									intrigue >= high_skill_rating
								}
							}
							modifier = {
								add = 10
								NOT = { learning >= high_skill_rating }
							}
							modifier = {
								add = 10
								NOT = {	prowess >= high_skill_rating }
							}
							modifier = {
								add = 50
								NOT = { is_close_or_extended_family_of = scope:defender }
							}
						}
						add_to_list = definite_captives_list
						save_temporary_scope_as = future_captive
						scope:attacker = {
							imprison = {
								target = scope:future_captive
								type = dungeon
							}
						}
					}
					if = {	#If at least duchy-tier, try to grab a fourth person.
						limit = { primary_title.tier >= tier_duchy }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
					if = {	#If at least kingdom-tier, try to grab a fifth person.
						limit = { primary_title.tier >= tier_kingdom }
						random_in_list = {
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = { prowess >= high_skill_rating }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
							scope:attacker = {
								imprison = {
									target = scope:future_captive
									type = dungeon
								}
							}
						}
					}
				}
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		desc = slave_expedition_cb_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = { 
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}
		scope:attacker = {	
			add_prestige = {
				value = medium_prestige_loss
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_defeat_desc = {
		desc = slave_expedition_cb_defeat_desc
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = { scope:attacker.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_loss }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_loss }
			}
		}
		scope:defender = {
			if = {
				limit = { scope:attacker.primary_title.tier = tier_county }
				add_prestige = { value = minor_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_duchy }
				add_prestige = { value = medium_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_kingdom }
				add_prestige = { value = major_prestige_gain }
			}
			if = {
				limit = { scope:attacker.primary_title.tier = tier_empire }
				add_prestige = { value = massive_prestige_gain }
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "SLAVE_EXPEDITION_WAR_NAME"
	war_name_base = "SLAVE_EXPEDITION_WAR_NAME_BASE"
	cb_name = "SLAVE_EXPEDITION_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500

	ai_score_mult = {
		value = 1
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}
		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
}

rohan_civil_war_cb = {
	group = civil_war
	ai_only_against_liege = yes
	target_titles = none
	target_de_jure_regions_above = yes
	white_peace_possible = no

	allowed_for_character = {
		always = no
	}

	on_declaration = {
		scope:defender = {
			add_character_flag = isengard_agent
		}
	}

	on_victory_desc = {
		desc = rohan_civil_war_victory_desc
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		title:k_rohan.holder = {
			trigger_event = isengard.0288
		}
	}

	on_white_peace_desc = {
		desc = WHITE_PEACE_DISABLED
	}

	on_white_peace = {
	}

	on_defeat_desc = {
		desc = rohan_civil_war_defeat_desc
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:defender = {
			add_prestige = 500
		}
		war = {
			every_war_attacker = {
				scope:defender = { 
					imprison = {
						target = prev
						type = dungeon
					}
				}
			}
		}
		character:lineofsaruman = {
			add_character_flag = grima_won_civil_war
			trigger_event = isengard.0005
		}
	}
	
	on_invalidated_desc = msg_invalidate_war_title

	check_attacker_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "ROHAN_CIVIL_WAR_NAME"

	interface_priority = 80

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 100

	max_ai_diplo_distance_to_title = 500
}

elven_homelands_county_conquest_cb = {
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_elf = yes
		scope:attacker = {
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			is_elf = no
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = all
	target_title_tier = county
	ignore_effect = change_title_holder

	ai_score_mult = {
		value = viking_conquest_ai_score_value

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
			if = {
				limit = {
					scope:attacker = {
						faith_is_evil = no
						culture = culture:lasgalendrim 
						
					}
					scope:defender = {
						OR = {
							culture = { has_cultural_pillar = heritage_northron }
							culture = { has_cultural_pillar = heritage_hadorim }
						}
						faith_is_evil = no
					}
					#NOT = {
                    #    is_target_in_global_variable_list = { # Triggered by 'Consolidate Lagalen' Decision
                    #    name = unavailable_war_restrictions
                    #    target = flag:consolidate_lasgalen
                    #    }
                    #}
					current_year < 7058 #25 year grace period for woodmen so thranduil expands his kingdom west first
				}
				add = -1000
			}
			if = {
				limit = {
					current_year < 7038	#5 year grace period for any rulers foolish enough to border elves
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}

	valid_to_start = {
		scope:target = {
			neighboring_county_or_viking_conquest_trigger = { CHARACTER = root }
			has_county_modifier = elven_homeland_county_modifier
		}
	}

	allowed_for_character_display_regardless = {
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	on_invalidated = {}

	cost = {
		piety = {
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = medium_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = { # Exceptional so it stays outside of the scripted value
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}
			multiply = common_cb_piety_cost_multiplier
			multiply = 2
		}
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = medium_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			multiply = common_cb_prestige_cost_multiplier
			multiply = 2
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		#As this is just a county conquest, simply grab the designated county.
		every_in_list = {
			list = target_titles
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 2
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "ELVEN_HOMELANDS_COUNTY_CONQUEST_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "ELVEN_HOMELANDS_COUNTY_CONQUEST_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

elven_homelands_duchy_conquest_cb = {
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_elf = yes
		scope:attacker = {
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_prestige_level_requirement
				}
			}
			prestige_level >= 2
		}
		trigger_else = {
			prestige_level >= 3
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			is_elf = no
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_can_target_all_titles = {
		can_use_viking_invasion_cbs_trigger = yes
	}

	ai_score_mult = {
		value = viking_conquest_ai_score_value

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
			if = {
				limit = {
					scope:attacker = {
						faith_is_evil = no
						culture = culture:lasgalendrim 
						
					}
					scope:defender = {
						OR = {
							culture = { has_cultural_pillar = heritage_northron }
							culture = { has_cultural_pillar = heritage_hadorim }
						}
						faith_is_evil = no
					}
					#NOT = {
                    #    is_target_in_global_variable_list = { # Triggered by 'Consolidate Lagalen' Decision
                    #    name = unavailable_war_restrictions
                    #    target = flag:consolidate_lasgalen
                    #    }
                    #}
					current_year < 7058 #25 year grace period for woodmen so thranduil expands his kingdom west first
				}
				add = -1000
			}
			if = {
				limit = {
					current_year < 7038	#5 year grace period for any rulers foolish enough to border elves
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}

	valid_to_start = {
		scope:target = {
			any_in_de_jure_hierarchy = {
				tier = tier_county
				neighboring_county_or_viking_conquest_trigger = { CHARACTER = root }
				has_county_modifier = elven_homeland_county_modifier
			}
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
	}

	cost = {
		piety = {
			add = common_cb_impious_piety_cost
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = massive_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}
			multiply = common_cb_piety_cost_multiplier
			multiply = 2
		}
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = massive_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			multiply = common_cb_prestige_cost_multiplier
			multiply = 2
			if = {
				limit = {
					scope:attacker.house = {
						OR = {
							has_house_modifier = fp2_struggle_hostility_house_culture_modifier 
							has_house_modifier = fp2_struggle_hostility_house_combined_modifier
						}
					}
					any_in_global_list = {
						variable = fp2_struggle_ending_culture_list
						this = scope:attacker.culture
					}
					any_in_global_list = {
						variable = fp2_struggle_ending_culture_list
						this = scope:defender.culture
					}
				}
				divide = {
					value = 2
					desc = CB_COST_FP2_STRUGGLE_HOSTILITY_CULTURE_DISCOUNT
				}
			}
			if = {
				limit = {
					has_global_variable = fp2_struggle_compromise_ending
					any_in_global_list = {
						variable = fp2_struggle_ending_culture_list
						this = scope:attacker.culture
					}
					any_in_global_list = {
						variable = fp2_struggle_ending_culture_list
						this = scope:defender.culture
					}
				}
				multiply = {
					value = 2
					desc = CB_COST_FP2_STRUGGLE_COMPROMISE_MULTIPLIER
				}
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		if = {
			limit = { scope:attacker = { has_variable = war_for_eregion } }
			scope:attacker = { 
				remove_variable = war_for_eregion
				remove_variable = no_return_event
			}
			scope:attacker = { trigger_event = elven.1605 }
		}
		else = {
			# go through the dejure hierarchy under target titles, transfer eligible vassals and sieze counties from ineligible ones
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
	
				save_scope_as = target_title # For the vassalization trigger.
	
				# Compile a list of all counties in the kingdom we will take from the defender.
				every_in_de_jure_hierarchy = {
					continue = {
						tier > tier_county
					}
					limit = {
						tier = tier_county
						has_county_modifier = elven_homeland_county_modifier
						# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
						title_province ?= { 
							NOR = { 
								has_holding_type = elven_holding
								has_holding_type = settlement_holding
								has_holding_type = wastelands_holding
								has_holding_type = ruined_holding
							}
						}
					}
					add_to_list = titles_taken
				}
			}
	
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
	
			resolve_title_and_vassal_change = scope:change
	
			scope:attacker = {
				if = {	#juke note: this is bad code, make better in the future
					limit = {
						is_ai = yes
						is_elf = yes
						highest_held_title_tier > tier_county
					}
					every_in_list = {
						list = target_titles
						limit = {
							title_province ?= { 
								NOR = { 
									has_holding_type = elven_holding
									has_holding_type = settlement_holding
									has_holding_type = wastelands_holding
								}
							}
						}
						save_scope_as = reclaimed_title
						create_character = {
							employer = scope:attacker
							#gender = male
							gender_female_chance = {	#gender now depends on faith
								if = {
									limit = { scope:attacker.faith = { has_doctrine = doctrine_gender_male_dominated } }
									add = 0
								}
								else_if = {
									limit = { scope:attacker.faith = { has_doctrine = doctrine_gender_male_orientated } }
									add = 25
								}
								else_if = {
									limit = { scope:attacker.faith = { has_doctrine = doctrine_gender_female_orientated } }
									add = 75
								}
								
								else_if = {
									limit = { scope:attacker.faith = { has_doctrine = doctrine_gender_female_dominated } }
									add = 100
								}
								else = {
									add = 50
								}
							}
							culture = scope:reclaimed_title.culture
							faith = scope:attacker.faith
							save_scope_as = new_holder
						}
						create_title_and_vassal_change = { # Define type of title change as a granting of the title
							type = granted
							save_scope_as = title_change
							add_claim_on_loss = no
						}
						scope:reclaimed_title = {
							change_title_holder = {
								holder = scope:new_holder
								change = scope:title_change
							}
						}
						resolve_title_and_vassal_change = scope:title_change
					}
				}
			}
		}


		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		if = { # Warning that only counties are changing hands
			limit = {
				any_in_list = {
					list = target_titles
					tier = tier_duchy
				}
			}
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = de_jure_target
			}
			if = { # LotR - reordered to clean up errorlog
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = scope:defender
					}
				}
				if = {
					limit = {
						scope:defender = {
							any_held_title = {
								tier = tier_county
								NOT = { target_is_de_jure_liege_or_above = scope:de_jure_target }
							}
						}
					}
					custom_tooltip = conquest_title_not_transferred_tt
				}
				else = { custom_tooltip = conquest_title_destroyed_tt }
			}
			else = {
				if = {
					limit = {
						any_in_list = {
							list = target_titles
							tier = tier_duchy
							is_title_created = yes
						}
					}
					custom_tooltip = conquest_title_usurp_tt
				}
				else = { custom_tooltip = conquest_title_create_tt }
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # not impactful as the scale are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}


		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "ELVEN_HOMELANDS_DUCHY_CONQUEST_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "ELVEN_HOMELANDS_DUCHY_CONQUEST_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

vanquish_darkness_county_cb = {
	group = conquest

	defender_faith_can_join = yes

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_elf = yes
		NOR = {
			has_culture = culture:wastelands
			AND = {
			    exists = primary_title.empire
			    primary_title.empire = title:e_valinor
		    }
			faith_is_evil = yes
		}
	}

	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_piety_level_requirement
				}
			}
			piety_level >= 0
		}
		trigger_else = {
			piety_level >= 1
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			faith_is_evil = yes
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = neighbor_land_or_water
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_score_mult = {
		value = 1
		# Increase odds if the character is a vassal with Ghazi Contract
		add = {
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_cheaper_religious_war
					}
				}
				add = 1
			}
		}
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}

		# AI in struggles act insularly for wars that don't have a familial or legal basis.
		multiply = struggle_wars_prioritise_struggle_targets_value

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}

	valid_to_start = {
		dwarf_and_goblin_underground_county_cb_trigger = yes
		scope:target = {
			tier = tier_county
		}
		# Filter for struggles
		trigger_if = {
			limit = {
				scope:defender = {
					any_character_struggle = {
						involvement = involved
					}
				}
			}
			are_holy_wars_disabled_in_struggle_phase_trigger = yes
		}
		are_holy_wars_disabled_by_struggle_conciliation_trigger = no # Disabled against other involved faiths in FP2 Conciliation ending
	}

	should_invalidate = {
		OR = {
			scope:defender = { faith_is_evil = no }
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = vanquish_darkness_war_invalidated_message
	on_invalidated = {}

	cost = {
		piety = {
			add = {
				value = 200
				desc = CB_BASE_COST
			}
			multiply = common_cb_piety_cost_multiplier
			multiply = holy_war_cb_piety_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
		scope:defender = { # Event offering defender to convert
			trigger_event = { id = elven_racial.0200 days = 1 }
		}
	}

	on_victory_desc = { ##### CUSTOMISE THIS
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = vanquish_darkness_county_cb_victory_desc_attacker
			}
			desc = vanquish_darkness_county_cb_victory_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		#As this is just a county conquest, simply grab the designated county.	
		every_in_list = {
			list = target_titles
			vanquish_darkness_generate_new_holder_culture_and_faith = yes

			scope:defender = { #If this is their last county, destroy all higher tier titles
				if = {
					limit = {
						any_held_title = {
							tier = tier_county
							count = 1
						}
					}
					every_held_title = {
						limit = {
							tier > tier_county
						}
						scope:defender = { destroy_title = prev }
					}
				}
			}

			create_character = { # Create a new character to hold the title
				employer = scope:attacker
				#location = scope:attacker.capital_province
				culture = scope:holder_culture
				faith = scope:holder_faith
				gender_female_chance = 0
				save_scope_as = new_holder
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			change_title_holder = {
				holder = scope:new_holder
				change = scope:change
			}
			change_title_holder = { #Does nothing but highlight provinces in war dec window
				holder = scope:attacker
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change

			#Give them some gold and control to help them out
			hidden_effect = {
				change_county_control = 60
				scope:new_holder = {
					add_gold = 200
				}
			}

			#Add a truce between the new holder and the defender
			hidden_effect = {
				scope:new_holder = {
					add_truce_both_ways = {
						character = scope:defender
						days = standard_truce_duration_days
						war = root.war
						result = victory
					}
				}
			}

			if = {
				limit = {
					exists = scope:new_holder
					scope:new_holder = { is_independent_ruler = no }
				}
				scope:new_holder = {
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					becomes_independent = { change = scope:change }
					resolve_title_and_vassal_change = scope:change
				}
			}
			set_county_faith = scope:holder_faith
			if = {
				limit = { culture = { is_orc_culture = yes } }
				set_county_culture = scope:holder_culture
			}
			generate_coa = yes
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = religious_cb_ally_prestige_county
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Piety Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_piety_experience = {
					add = religious_cb_piety_gain_county
					if = {
						limit = {
							scope:attacker.faith = {
								has_doctrine_parameter = bonus_holy_war_piety_active
							}
						}
						multiply = 1.5
					}
				}
			}
		}

		scope:attacker.faith = {
			change_fervor = {
				value = -1
				desc = fervor_loss_religious_war
			}
		}
		scope:defender.faith = {
			change_fervor = {
				value = 3
				desc = fervor_gain_religious_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender # Not important as the scales are identical
			FAME_BASE = religious_cb_ally_prestige_county
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_piety = religious_cb_piety_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		scope:attacker = {
			every_vassal = {
				limit = { faith = scope:attacker.faith }
				custom = all_attackers_vassals_same_faith
				add_opinion = {
					modifier = liege_lost_declared_religious_war
					target = scope:attacker
				}
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = religious_cb_ally_prestige_county
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# piety change
		every_in_list = {
			list = target_titles

			scope:defender = {
				add_piety = {
					add = religious_cb_piety_gain_county
					if = {
						limit = {
							scope:defender.faith = {
								has_doctrine_parameter = bonus_holy_war_piety_active
							}
						}
						multiply = 1.5
					}
				}
			}

			scope:attacker = {
				if = {
					limit = {
						monthly_character_income > 0
					}
					pay_short_term_income = {
						years = 2
						target = scope:defender
					}
				}
				else = {
					pay_short_term_gold = {
						target = scope:defender
						gold = medium_gold_value
					}
				}
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "VANQUISH_DARKNESS_COUNTY_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "VANQUISH_DARKNESS_COUNTY_CB_NAME"

	interface_priority = 79

	is_holy_war = yes

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}

vanquish_darkness_duchy_cb = {
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }
	#ticking_war_score_targets_entire_realm = yes

	allowed_for_character = {
		is_elf = yes
		NOR = {
			has_culture = culture:wastelands
			AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			faith_is_evil = yes
		}
	}

	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_piety_level_requirement
				}
			}
			piety_level >= 1
		}
		trigger_else = {
			piety_level >= 2
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			faith_is_evil = yes
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = neighbor_land_or_water
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_score_mult = {
		value = 1
		# Increase odds if the character is a vassal with Ghazi Contract
		add = {
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_cheaper_religious_war
					}
				}
				add = 1
			}
		}
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}

		# AI in struggles act insularly for wars that don't have a familial or legal basis.
		multiply = struggle_wars_prioritise_struggle_targets_value

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}

	valid_to_start = {
		dwarf_and_goblin_underground_duchy_cb_trigger = yes
		scope:target = {
			tier = tier_duchy
		}
		# Filter for struggles
		trigger_if = {
			limit = {
				scope:defender = {
					any_character_struggle = {
						involvement = involved
					}
				}
			}
			are_holy_wars_disabled_in_struggle_phase_trigger = yes
			are_holy_wars_disabled_by_struggle_conciliation_trigger = no # Disabled against other involved faiths in FP2 Conciliation ending
		}
	}

	should_invalidate = {
		OR = {
			scope:defender = { faith_is_evil = no }
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = vanquish_darkness_war_invalidated_message
	on_invalidated = {}

	cost = {
		piety = {
			add = {
				value = 400
				desc = CB_BASE_COST
			}
			multiply = common_cb_piety_cost_multiplier
			multiply = holy_war_cb_piety_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
		scope:defender = { # Event offering defender to convert
			trigger_event = { id = elven_racial.0200 days = 1 }
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = vanquish_darkness_county_cb_victory_desc_attacker
			}
			desc = vanquish_darkness_county_cb_victory_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		
		every_in_list = {
			list = target_titles
			vanquish_darkness_generate_new_holder_culture_and_faith = yes
			save_scope_as = target_duchy
			
			scope:defender = { #If they do not hold any counties outside this duchy, destroy all higher tier titles
				if = {
					limit = {
						any_held_title = {
							tier = tier_county
							NOT = { duchy = { is_in_list = target_titles } }
							count = 0
						}
					}
					every_held_title = {
						limit = {
							tier > tier_duchy
						}
						scope:defender = { destroy_title = prev }
					}
				}
			}

			create_character = { # Create a new character to hold the title
				employer = scope:attacker
				#location = scope:attacker.capital_province
				culture = scope:holder_culture
				faith = scope:holder_faith
				gender_female_chance = 0
				save_scope_as = new_holder
			}

			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}

			change_title_holder = {
				holder = scope:new_holder
				change = scope:change
			}

			every_county = {
				limit = {
					duchy = scope:target_duchy
					holder = { 
						OR = {
							any_liege_or_above = { this = scope:defender }
							this = scope:defender
						}
					}
				}
				set_county_faith = scope:holder_faith
				if = {
					limit = { culture = { is_orc_culture = yes } }
					set_county_culture = scope:holder_culture
				}
				change_title_holder = {
					holder = scope:new_holder
					change = scope:change
				}
				change_title_holder = { #Does nothing but highlight provinces in war dec window
					holder = scope:attacker
					change = scope:change
				}
				hidden_effect = { change_county_control = 60 } #Give them some control to help them out
			}

			resolve_title_and_vassal_change = scope:change
			
			#Give them some gold to help them out
			scope:new_holder = {
				hidden_effect = { add_gold = 200 }
			}

			#Add a truce between the new holder and the defender
			hidden_effect = {
				scope:new_holder = {
					add_truce_both_ways = {
						character = scope:defender
						days = standard_truce_duration_days
						war = root.war
						result = victory
					}
				}
			}

			if = {
				limit = { 
					
					scope:new_holder = { is_independent_ruler = no }
				}
				scope:new_holder = {
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					becomes_independent = { change = scope:change }
					resolve_title_and_vassal_change = scope:change
				}
			}
			every_county = {
				limit = {
					duchy = { is_in_list = target_titles }
					holder = scope:new_holder
				}
				generate_coa = yes
			}
			generate_coa = yes
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = religious_cb_ally_prestige_duchy
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Piety Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_piety_experience = {
					add = religious_cb_piety_gain_duchy
					if = {
						limit = {
							scope:attacker.faith = {
								has_doctrine_parameter = bonus_holy_war_piety_active
							}
						}
						multiply = 1.5
					}
				}
			}
		}

		scope:attacker.faith = {
			change_fervor = {
				value = -2
				desc = fervor_loss_religious_war
			}
		}
		scope:defender.faith = {
			change_fervor = {
				value = 4
				desc = fervor_gain_religious_war
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender # Not important as the scales are identical
			FAME_BASE = religious_cb_ally_prestige_duchy
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_piety = religious_cb_piety_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		scope:attacker = {
			every_vassal = {
				limit = { faith = scope:attacker.faith }
				custom = all_attackers_vassals_same_faith
				add_opinion = {
					modifier = liege_lost_declared_religious_war
					target = scope:attacker
				}
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = religious_cb_ally_prestige_duchy
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# piety change
		every_in_list = {
			list = target_titles

			scope:defender = {
				add_piety = {
					add = religious_cb_piety_gain_duchy
					if = {
						limit = {
							scope:defender.faith = {
								has_doctrine_parameter = bonus_holy_war_piety_active
							}
						}
						multiply = 1.5
					}
				}
			}

			scope:attacker = {
				if = {
					limit = {
						monthly_character_income > 0
					}
					pay_short_term_income = {
						years = 3
						target = scope:defender
					}
				}
				else = {
					pay_short_term_gold = {
						target = scope:defender
						gold = medium_gold_value
					}
				}
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "VANQUISH_DARKNESS_DUCHY_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "VANQUISH_DARKNESS_DUCHY_CB_NAME"

	interface_priority = 79

	is_holy_war = yes
	defender_faith_can_join = yes

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 500
}

maglor_shatter_realm_cb = {
	icon = vassalization
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	# mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		this = character:linefinwe11
		is_target_in_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:decision_bring_harad_down
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			faith_is_good = no
			trigger_if = {
				limit = { scope:attacker = { has_variable = CB_region_locked } }
				any_held_title = {
					title_province ?= {
						OR = {
							geographical_region = middleearth_haradwaith_harondor
							geographical_region = middleearth_haradwaith_near
						}
					}
				}
			}
		}
	}
	
	allowed_against_character_display_regardless = { }
	
	target_titles = all
	target_title_tier = all
	ignore_effect = change_title_holder

	ai_can_target_all_titles = {
		always = no
	}

	ai_score_mult = {
		value = viking_conquest_ai_score_value

		# As a feudal gov, do not attack owner of tribal holdings  if you have a tribal holding to convert already
		add = {
			every_in_list = {
				list = target_titles
				if = {
					limit = { feudal_clan_tribal_conquest_constraints = yes }
					add = -1000
				}
			}
		}
		
		# As Mordor, do not attack neighbouring evil-aligned nations
		add = {
			every_in_list = {
				list = target_titles
				if = {
					limit = { 
						scope:attacker = { 
							OR = {
								this = character:lineofsauron
								top_liege = character:lineofsauron
							}
						}
						scope:defender = { 
							faith_is_evil = yes
						}
					}
					add = -1000
				}
			}
		}

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		# AI in struggles act insularly for wars that don't have a familial or legal basis.
		multiply = struggle_wars_prioritise_struggle_targets_value

		#LotR
		multiply = elf_target_ai_score_value
	}

	valid_to_start = {
		trigger_if = {
			limit = {
				scope:defender = {
					highest_held_title_tier = tier_kingdom
				}
			}
			scope:target.tier = tier_kingdom
		}
		trigger_else_if = {
			limit = {
				scope:defender = {
					highest_held_title_tier = tier_duchy
				}
			}
			scope:target.tier = tier_duchy
		}
		trigger_else = { scope:target.tier = tier_duchy }
	}

	allowed_for_character_display_regardless = { }

	should_invalidate = { }

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	on_invalidated = {}

	cost = { prestige = 350 }

	on_declaration = { on_declared_war = yes }

	on_victory_desc = {
		desc = maglor_shatter_realm_cb_effect_tt.1
		desc = maglor_shatter_realm_cb_effect_tt.2
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		random_in_list = {
			list = target_titles
			save_scope_as = targeted_title
		}
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# Vassals of duke/count tier are added to list
		every_in_list = {
			list = target_titles
			
			every_de_jure_county = {
				limit = {
					holder = {
						is_vassal_or_below_of = scope:defender
						NOT = {
							any_in_list = {
								list = affected_rulers
								this = prev
							}
						}
						highest_held_title_tier = tier_county
					}
				}
				holder = { add_to_list = affected_rulers } # Count tier vassals
			}
		}
		every_in_list = {
			list = target_titles
			every_de_jure_county = {
				limit = { duchy.holder.liege = scope:defender }
				duchy.holder = { add_to_list = affected_rulers }
			}
		}
		### Makes rulers independent
		if = {
			limit = {
				any_in_list = {
					list = target_titles
					tier > tier_duchy
				}
			}
			every_in_list = {
				list = affected_rulers
				limit = { highest_held_title_tier = tier_duchy }
				becomes_independent = { change = scope:change }
			}
		}
		else = {
			every_in_list = {
				list = affected_rulers
				becomes_independent = { change = scope:change }
			}
		}
		
		resolve_title_and_vassal_change = scope:change

		hidden_effect = {
			### Converts holder to different faith
			every_in_list = {
				list = affected_rulers
				limit = { 
					any_held_title = { title_province = { geographical_region = middleearth_haradwaith_near } } 
					NOT = { this = scope:defender }
				}

				random = {
					chance = 33 
					set_character_faith_with_conversion = faith:faith_chelkar
				}
			}

			### Converts county to different faith
			every_in_list = {
				list = target_titles
				limit = { title_province = { geographical_region = middleearth_haradwaith_near } }
				
				every_de_jure_county = {
					random = {
						chance = 33 
						set_county_faith = faith:faith_chelkar
					}
				}
			}
		}

		random_in_list = {
			list = target_titles
			save_scope_as = targeted_top_title
		}
		custom_tooltip = {
			text = "maglor_shatter_realm_cb_victory_tt"
			scope:defender = {
				every_held_title = {
					limit = {
						tier = scope:targeted_top_title.tier
					}
					holder = { # Destroy that title
						destroy_title = prev
					}
				}
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = { desc = maglor_shatter_realm_cb_defeat_desc }

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 2
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		scope:defender = {
			faith = {
				change_fervor = {
					value = 15
					desc = maglor_shatter_realm_cb_fervor
				}
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "maglor_shatter_realm_cb_name"
	war_name_base = "maglor_shatter_realm_cb_name"
	cb_name = "maglor_shatter_realm_cb_name"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
}

maglor_underground_cb = {
	icon = vassalization
	group = conquest

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		this = character:linefinwe11
		has_variable = unlock_underground_cb
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			faith_is_good = no
			is_orc = yes
			any_held_title = {
				title_province ?= {
					OR = {
						geographical_region = middleearth_misty_mountains_khazad_dum
						geographical_region = middleearth_misty_mountains_high_pass
					}
				}
			}
		}
	}
	
	allowed_against_character_display_regardless = { }
	
	target_titles = all
	target_title_tier = all
	ignore_effect = change_title_holder

	ai_can_target_all_titles = { always = no }

	ai_score_mult = {
		value = viking_conquest_ai_score_value

		# As a feudal gov, do not attack owner of tribal holdings  if you have a tribal holding to convert already
		add = {
			every_in_list = {
				list = target_titles
				if = {
					limit = { feudal_clan_tribal_conquest_constraints = yes }
					add = -1000
				}
			}
		}
		
		# As Mordor, do not attack neighbouring evil-aligned nations
		add = {
			every_in_list = {
				list = target_titles
				if = {
					limit = { 
						scope:attacker = { 
							OR = {
								this = character:lineofsauron
								top_liege = character:lineofsauron
							}
						}
						scope:defender = { 
							faith_is_evil = yes
						}
					}
					add = -1000
				}
			}
		}

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		# AI in struggles act insularly for wars that don't have a familial or legal basis.
		multiply = struggle_wars_prioritise_struggle_targets_value

		#LotR
		multiply = elf_target_ai_score_value
	}

	valid_to_start = { always = yes }

	allowed_for_character_display_regardless = { }

	should_invalidate = { }

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	on_invalidated = {}

	cost = { prestige = 125 }

	on_declaration = { on_declared_war = yes }

	on_victory_desc = { desc = maglor_underground_cb_effect_tt }

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		create_title_and_vassal_change = {
			type = revoked
			save_scope_as = change
		}
		if = {
			limit = {
				any_in_list = {
					list = target_titles
					tier > tier_county
				}
			}
			every_in_list = {
				list = target_titles

				scope:defender = {
					every_held_title = {
						limit = {
							tier = tier_county
							title_province = { terrain = halls }
						}
						set_county_faith = faith:faith_wastelands_pagan
						set_county_culture = culture:wastelands
						generate_coa = yes
						title_province = { set_holding_type = wastelands_holding }
						change_title_holder = {
							holder = character:k_wastelands_holder
							change = scope:change
							take_baronies = yes
						}
					}
					every_vassal_or_below = {
						every_held_title = {
							limit = {
								tier = tier_county
								title_province = { terrain = halls }
							}
							set_county_faith = faith:faith_wastelands_pagan
							set_county_culture = culture:wastelands
							generate_coa = yes
							title_province = { set_holding_type = wastelands_holding }
							change_title_holder = {
								holder = character:k_wastelands_holder
								change = scope:change
								take_baronies = yes
							}
						}
					}
				}
			}
		}
		else = {
			every_in_list = {
				list = target_titles
				change_title_holder = {
					holder = character:k_wastelands_holder
					change = scope:change
					take_baronies = yes
				}
				set_county_faith = faith:faith_wastelands_pagan
				set_county_culture = culture:wastelands
				generate_coa = yes
				title_province = { set_holding_type = wastelands_holding }
			}
		}
		every_in_list = {
			list = target_titles
			limit = { tier > tier_county }
			holder = { destroy_title = prev }
		}

		resolve_title_and_vassal_change = scope:change
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = { desc = maglor_underground_cb_defeat_desc }

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 2
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		scope:defender = {
			faith = {
				change_fervor = {
					value = 15
					desc = maglor_shatter_realm_cb_fervor
				}
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "maglor_underground_cb_name"
	war_name_base = "maglor_underground_cb_name"
	cb_name = "maglor_underground_cb_name"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
}

reduce_subterranean_county_development_cb = {
	group = decrease_dev

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		scope:attacker = {
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			NOT = { has_culture = culture:wastelands }
			OR =  {
				any_held_title ?= {
					trigger_if = {
						limit = { exists = title_province }
						title_province ?= { terrain = halls }
					}
				}
				any_vassal_or_below = {
					any_held_title ?= {
						trigger_if = {
							limit = { exists = title_province }
							title_province ?= { terrain = halls }
						}
					}
				}
			}
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = all
	target_title_tier = county
	ignore_effect = change_title_holder

	ai_score_mult = {
		value = 1

		# LotR - Sauron and Nazgul should not target eachother | In-case Nazgul have underground vassal
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = underground_target_ai_score_value
	}

	valid_to_start = { # neighboring_county_or_viking_conquest_trigger = { CHARACTER = root }
		scope:target = { title_province ?= { terrain = halls } }
		underground_cb_trigger = yes
	}

	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_prestige_level_requirement
				}
			}
			prestige_level >= 1
		}
		trigger_else = {
			prestige_level >= 2
		}
	}

	should_invalidate = {
		OR = {
			# NOT = { scope:target.title_province = { terrain = halls } }
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	on_invalidated = {}

	cost = {
		piety = {
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = medium_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = { # Exceptional so it stays outside of the scripted value
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}
			multiply = common_cb_piety_cost_multiplier
			multiply = 2
		}
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = medium_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			multiply = common_cb_prestige_cost_multiplier
			multiply = 2
		}
	}

	on_declaration = { on_declared_war = yes }

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			custom_tooltip = "subterranean_cb_effect"

			hidden_effect = { decrease_building_or_development = { LIST = target_titles } }
			
			every_in_list = {
				list = target_titles
				decrease_county_development = { COUNTY = county }
			}
			pay_short_term_gold_raze_effect = {
				GOLD_VALUE = 2
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = { add_prestige_experience = minor_prestige_value }
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		# first_valid = {
		# 	triggered_desc = {
		# 		trigger = { scope:defender = { is_local_player = yes } }
		# 		desc = county_conquest_cb_white_peace_desc_defender
		# 	}
		# 	desc = county_conquest_cb_white_peace_desc
		# }
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = reduce_subterranean_county_development_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = reduce_subterranean_county_development_desc_attacker
			}
			desc = reduce_subterranean_county_development_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes
		
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 2
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "1"
	war_name_base = "2"
	cb_name = "reduce_subterranean_county_development_name"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

reduce_subterranean_duchy_development_cb = {
	group = decrease_dev

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		scope:attacker = {
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	
	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_prestige_level_requirement
				}
			}
			prestige_level >= 3
		}
		trigger_else = {
			prestige_level >= 4
		}
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
				has_culture = culture:wastelands
			}
		}
		scope:defender = {
			OR = {
				any_held_title = { title_province ?= { terrain = halls } }
				any_vassal_or_below = { any_held_title = { title_province ?= { terrain = halls } } }
			}
			NOT = { has_culture = culture:wastelands }
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = all
	target_title_tier = duchy
	ignore_effect = change_title_holder

	ai_score_mult = {
		value = 1

		# LotR - Sauron and Nazgul should not target eachother | In-case Nazgul have underground vassal
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = underground_target_ai_score_value
	}

	valid_to_start = {
		underground_cb_trigger = yes

	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	on_invalidated = {}

	cost = {
		piety = {
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = medium_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = { # Exceptional so it stays outside of the scripted value
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}
			multiply = common_cb_piety_cost_multiplier
			multiply = 2
		}
		prestige = {
			value = 0
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = medium_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			multiply = common_cb_prestige_cost_multiplier
			multiply = 2
		}
	}

	on_declaration = { on_declared_war = yes }

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		scope:defender = {
			custom_tooltip = "subterranean_cb_effect"

			every_in_list = {
				list = target_titles 
				every_de_jure_county = {
					limit = { NOT = { title_province ?= { has_building_or_higher = wilderness_01 } } }
					add_to_list = county_titles
				}
			}
			hidden_effect = { decrease_building_or_development = { LIST = county_titles } }
			every_in_list = {
				list = county_titles
				decrease_county_development = { COUNTY = county }
			}
			pay_short_term_gold_raze_effect = {
				GOLD_VALUE = 2
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 2
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "reduce_subterranean_duchy_development_name"
	war_name_base = "reduce_subterranean_duchy_development_name"
	cb_name = "reduce_subterranean_duchy_development_name"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}