#LotR removing vanilla HRE CBs etc and adding protectorate blockers to war declarations

de_jure_cb = {
	icon = de_jure_cb
	group = de_jure
	should_check_for_interface_availability = no # Covered by the county dejure cb

	allowed_for_character = {
		scope:attacker = {
			culture = {
				has_innovation = innovation_divine_right
			}
		}
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}
	
	allowed_against_character = {
		scope:attacker = {
			has_de_jure_claim_on = scope:defender
		}
		NOT = {
			OR = {
				scope:defender = { target_is_liege_or_above = scope:attacker }
				scope:attacker = { target_is_liege_or_above = scope:defender }
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}
		
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = de_jure
	ai_only_against_neighbors = yes
	#target_title_tier = all
	ignore_effect = change_title_holder
	#target_de_jure_regions_above = yes
	combine_into_one = yes

	valid_to_start = {
		scope:target = {
			any_this_title_or_de_jure_above = {
				exists = holder
				holder = {
					OR = {
						this = scope:attacker
						target_is_liege_or_above = scope:attacker
					}
				}
			}
		}
		trigger_if = {
			limit = {
				OR = {
					dwarf_and_goblin_underground_county_cb_trigger = yes
					dwarf_and_goblin_underground_duchy_cb_trigger = yes
				}
			}
			always = no
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			# scale base value based on number of counties x 100
			add = {	
				every_in_list = { 
					list = target_titles 
					limit = {
						tier = tier_county
						holder.top_liege = scope:defender
					}
					add = 100
				}
				desc = CB_CLAIM_COST_TARGET_TITLES
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		OR = {
			NOT = {
				scope:attacker = {
					has_de_jure_claim_on = scope:defender
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = msg_de_jure_all_war_invalidated_message
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_victory_desc_attacker
			}
			desc = de_jure_cb_victory_desc
		}
		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		every_in_list = {
			list = target_titles
			de_jure_liege.holder = { save_scope_as = temp_de_jure_liege }
			add_hook_from_temp_de_jure_liege_to_attacker = yes
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		# Setup and execute the changes to titles and vassals.
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_white_peace_desc_defender
			}
			desc = de_jure_cb_white_peace_desc
		}
		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
				multiply = -5.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_attacker
			}
			desc = de_jure_cb_defeat_desc
		}

		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Attacker must pay the defender war reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
		}
		# Attacker loses Prestige, all other participants gain Prestige based on their war contribution (Defender gets full Prestige).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}


	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	ai_score_mult = { #LotR
		value = 1

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}
		
		# LotR - AI Elves won't pursue this CB often when the targets are of righteous or astray faiths
		add = {
			if = {
				limit = {
					scope:attacker = { is_elf = yes }
					scope:defender.faith = {		
						faith_hostility_level = {
							target = scope:attacker.faith
							value = faith_astray_level
						}
					}
				}
				add = -100
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DEJURE_CB_WAR_NAME"
	war_name_base = "DEJURE_CB_WAR_NAME_BASE"
	cb_name = DEJURE_CB_NAME
	interface_priority = 100
	
	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	
	max_ai_diplo_distance_to_title = 500
}

individual_county_de_jure_cb = {
	icon = individual_county_de_jure_cb
	group = de_jure
	
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		scope:attacker = {
			culture = {
				has_innovation = innovation_casus_belli
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	allowed_against_character = {
		scope:attacker = {
			has_de_jure_claim_on = scope:defender
		}
		NOT = {
			OR = {
				scope:defender = { target_is_liege_or_above = scope:attacker }
				scope:attacker = { target_is_liege_or_above = scope:defender }
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}
	
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	
	valid_to_start = {
		scope:target = {
			tier = tier_county
			any_this_title_or_de_jure_above = {
				exists = holder
				holder = {
					OR = {
						this = scope:attacker
						target_is_liege_or_above = scope:attacker
					}
				}
			}
		}
		dwarf_and_goblin_underground_county_cb_trigger = yes
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker.liege = {
						any_character_war = {
							primary_defender = {
								save_temporary_scope_as = defender_check
							}
						}
					}
					scope:defender = scope:defender_check
				}
				desc = msg_de_jure_duchy_war_invalidated_liege_war_message
			}
			desc = msg_de_jure_county_war_invalidated_message
		}

		
	}

	on_invalidated = {
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			# scale base value based on number of counties x 100, in this case 1
			add = {
				value = 100
				desc = CB_CLAIM_COST_TARGET_TITLES
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = individual_county_de_jure_cb_victory_desc_attacker
			}
			desc = individual_county_de_jure_cb_victory_desc
		}

		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winnning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }

		every_in_list = {
			list = target_titles
			if = {
				limit = {
					exists = de_jure_liege.holder
				}
				de_jure_liege.holder = { save_scope_as = temp_de_jure_liege }
			}
			add_hook_from_temp_de_jure_liege_to_attacker = yes
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			title = scope:target
		}
		resolve_title_and_vassal_change = scope:change
		
		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = individual_county_de_jure_cb_white_peace_desc_defender
			}
			desc = individual_county_de_jure_cb_white_peace_desc
		}

		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		# Defender neither gains nor loses any prestige.
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = individual_county_de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = individual_county_de_jure_cb_defeat_desc_attacker
			}
			desc = individual_county_de_jure_cb_defeat_desc
		}

		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Attacker must pay the defender war reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		# Attacker loses Prestige, all other participants gain Prestige based on their war contribution (Defender gets full Prestige).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	ai_score_mult = { #LotR
		value = 1

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DEJURE_CB_WAR_SPECIFIC_NAME"
	war_name_base = "DEJURE_CB_WAR_SPECIFIC_NAME_BASE"
	cb_name = DEJURE_CB_COUNTY_NAME
	cb_name_no_target = DEJURE_CB_COUNTY_NAME_GENERIC
	interface_priority = 99 # Below the "take all" one
	
	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	
	max_ai_diplo_distance_to_title = 500
}

individual_duchy_de_jure_cb = {
	icon = individual_duchy_de_jure_cb
	group = de_jure
	should_check_for_interface_availability = no # Covered by the county dejure cb
	
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }
	
	allowed_for_character = {
		scope:attacker = {
			culture = {
				has_innovation = innovation_casus_belli
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}

	allowed_against_character = {
		scope:attacker = {
			has_de_jure_claim_on = scope:defender
		}
		NOT = {
			OR = {
				scope:defender = { target_is_liege_or_above = scope:attacker }
				scope:attacker = { target_is_liege_or_above = scope:defender }
			}
		}
		
		scope:attacker = {		
			NOR = {
				has_culture = culture:wastelands
				AND = {
			        exists = primary_title.empire
			        primary_title.empire = title:e_valinor
		        }
			}
		}
	}
		
	allowed_against_character_display_regardless = { #LotR Tributaries
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ME_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
			}
		}
		custom_tooltip = {
			text = IS_GUARANTEED_BY_ATTACKERS_TOP_LIEGE_TRIGGER_CB
			NAND = {
				exists = var:my_suzerain
				scope:attacker.top_liege = {
					OR = {
						is_target_in_variable_list = { name = non_permanent_tributaries target = prev }
						is_target_in_variable_list = { name = permanent_tributaries target = prev }
					}		
				}
				scope:attacker = {
					is_independent_ruler = no
				}
			}
		}
		custom_tooltip = {
			text = IS_MY_SUZERAIN_TRIGGER_CB
			NAND = {
				scope:attacker = { 
					exists = var:my_suzerain
					scope:defender = var:my_suzerain
				}
			}
		}
	}
	
	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	
	valid_to_start = {
		scope:target = {
			tier = tier_duchy
			any_this_title_or_de_jure_above = {
				exists = holder
				holder = {
					OR = {
						this = scope:attacker
						target_is_liege_or_above = scope:attacker
					}
				}
			}
		}
		dwarf_and_goblin_underground_duchy_cb_trigger = yes
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			# scale base value based on number of counties x 100
			add = {
				every_in_list = {
					list = target_titles
					every_in_de_jure_hierarchy = { # goes down, not up
						limit = {
							tier = tier_county
							holder.top_liege = scope:defender
						}
						add = 100
					}
				}
				desc = CB_CLAIM_COST_TARGET_TITLES
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			scope:attacker = {
				has_culture = culture:wastelands
			}
			scope:defender = {
				has_culture = culture:wastelands
			}
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker.liege = {
						any_character_war = {
							primary_defender = {
								save_temporary_scope_as = defender_check
							}
						}
					}
					scope:defender = scope:defender_check
				}
				desc = msg_de_jure_duchy_war_invalidated_liege_war_message
			}
			desc = msg_de_jure_duchy_war_invalidated_message
		}
	}

	on_invalidated = {
	}

	on_declaration = {
		on_declared_war = yes

	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_victory_desc_attacker
			}
			desc = de_jure_cb_victory_desc
		}

		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		every_in_list = {
			list = target_titles
			limit = { exists = holder }
			
			holder = { save_scope_as = temp_de_jure_liege }
			add_hook_from_temp_de_jure_liege_to_attacker = yes
		}
	
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			title = scope:target
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_white_peace_desc_defender
			}
			desc = de_jure_cb_white_peace_desc
		}

		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		# Defender neither gains nor loses any prestige.
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_attacker
			}
			desc = de_jure_cb_defeat_desc
		}

		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Attacker must pay the defender war reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		# Attacker loses Prestige, all other participants gain Prestige based on their war contribution (Defender gets full Prestige).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	ai_score_mult = { #LotR
		value = 1

		# LotR - Sauron and Nazgul should not target eachother
		add = {
			if = {
				limit = {
					OR = {
						AND = {
							scope:attacker = { is_sauron = yes }
							scope:defender = { has_trait = nazgul }
						}
						AND = {
							scope:defender = { is_sauron = yes }
							scope:attacker = { has_trait = nazgul }
						}
					}
				}
				add = -1000
			}
		}

		# LotR - Non-Evil faith characters leave poor Radagast alone! 
		add = {
			if = {
				limit = {
					scope:attacker = { faith_is_evil = no }
					scope:defender.culture = culture:istari
				}
				add = -1000
			}
		}

		# LotR - Protectorates are much less aggressive
		add = {
			if = {
				limit = {
					scope:attacker = { has_variable = overlord_protector }
				}
				add = -1000
			}
		}

		#LotR
		multiply = elf_target_ai_score_value
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DEJURE_CB_WAR_SPECIFIC_NAME"
	war_name_base = "DEJURE_CB_WAR_SPECIFIC_NAME_BASE"
	cb_name = DEJURE_CB_DUCHY_NAME
	cb_name_no_target = DEJURE_CB_DUCHY_NAME_GENERIC
	interface_priority = 99 # Below the "take all" one
	
	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	
	max_ai_diplo_distance_to_title = 500
}

#imperial_reconquest_cb = {
#	group = de_jure
#
#	combine_into_one = yes
#	should_show_war_goal_subview = yes
#	mutually_exclusive_titles = { always = yes }
#
#	allowed_for_character = {
#		scope:attacker = {
#			has_title = title:e_roman_empire
#			OR = {
#				faith.religion = faith:catholic.religion #Either Christian
#				faith.religion = faith:hellenic_pagan.religion #Or Hellenic
#			}
#		}
#	}
#	
#	allowed_against_character = {
#		#scope:attacker = { #Not a regular de jure cb.
#			#has_de_jure_claim_on = scope:defender
#		#}
#		NOR = {
#			scope:defender = { target_is_liege_or_above = scope:attacker }
#			scope:attacker = { target_is_liege_or_above = scope:defender }
#		}
#	}
#	target_titles = all
#	target_title_tier = all
#	target_de_jure_regions_above = yes
#	ignore_effect = change_title_holder
#	ai_only_against_neighbors = yes
#	
#	valid_to_start = {
#		scope:target = {
#			tier = tier_duchy
#			any_in_de_jure_hierarchy = {
#				tier = tier_county
#				title_province = { geographical_region = custom_roman_full_borders }
#			}
#		}
#	}
#
#	on_declaration = {
#		on_declared_war = yes
#	}
#
#	should_invalidate = {
#		NOT = {
#			any_in_list = {
#				list = target_titles
#				any_in_de_jure_hierarchy = {
#					tier = tier_county
#					holder = {
#						OR = {
#							this = scope:defender
#							target_is_liege_or_above = scope:defender
#						}
#					}
#				}
#			}
#		}
#	}
#
#	on_victory_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = de_jure_cb_victory_desc_attacker
#			}
#			desc = de_jure_cb_victory_desc
#		}
#		
#	}
#	
#	on_victory = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		create_title_and_vassal_change = {
#			type = conquest
#			save_scope_as = change
#			add_claim_on_loss = yes
#		}
#		
#		every_in_list = {
#			list = target_titles
#			save_temporary_scope_as = target
#		}
#		
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			change = scope:change
#			title = scope:target
#		}
#		resolve_title_and_vassal_change = scope:change
#		
#		
#		# truce
#		add_truce_attacker_victory_effect = yes
#
#		# FP1: note the victory for future memorialisation via stele (if applicable).
#		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
#	}
#
#	on_white_peace_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = de_jure_cb_white_peace_desc_defender
#			}
#			desc = de_jure_cb_white_peace_desc
#		}
#		
#	}
#	
#	on_white_peace = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		every_in_list = {
#			list = target_titles
#			save_temporary_scope_as = target
#		}
#		
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			victory = no
#			title = scope:target
#		}
#		
#		# Truce
#		add_truce_white_peace_effect = yes
#	}
#
#	on_defeat_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = de_jure_cb_defeat_desc_defender
#			}
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = de_jure_cb_defeat_desc_attacker
#			}
#			desc = de_jure_cb_defeat_desc
#		}
#		
#	}
#	
#	on_defeat = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#	
#		scope:attacker = {
#			pay_short_term_gold_reparations_effect = {
#				GOLD_VALUE = 10
#			}
#		}
#		
#		every_in_list = {
#			list = target_titles
#			save_temporary_scope_as = target
#		}
#		
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			victory = no
#			title = scope:target
#		}
#	
#		# Truce
#		add_truce_attacker_defeat_effect = yes
#		
#		scope:attacker = {
#			save_temporary_scope_as = loser
#		}
#		on_lost_aggression_war_discontent_loss = yes
#	}
#	
#	on_primary_attacker_death = inherit
#	on_primary_defender_death = inherit
#	
#	transfer_behavior = transfer
#	
#	attacker_allies_inherit = yes
#	defender_allies_inherit = yes
#	
#	war_name = "IMPERIAL_RECONQUEST_WAR_SPECIFIC_NAME"
#	war_name_base = "IMPERIAL_RECONQUEST_WAR_SPECIFIC_NAME_BASE"
#	cb_name = IMPERIAL_RECONQUEST_SPECIFIC_NAME
#	interface_priority = 98 #Below take all and regular dejure.
#
#	attacker_wargoal_percentage = 0.8
#	
#	max_ai_diplo_distance_to_title = 500
#	
#	on_invalidated_desc = msg_invalidate_war_title
#
#}
#
#dismantle_holy_pretender_cb = {
#	group = de_jure
#	
#	allowed_for_character = {
#		scope:attacker = {
#			has_character_flag = flag_emperor_challenging_hre
#		}
#	}
#
#	allowed_against_character = {
#		NOR = {
#			scope:defender = { target_is_liege_or_above = scope:attacker }
#			scope:attacker = { target_is_liege_or_above = scope:defender }
#			scope:attacker = { has_character_flag = flag_emperor_challenged_hre } #Only once per Emperor.
#		}
#	}
#	target_titles = all
#	target_title_tier = all
#	ignore_effect = change_title_holder
#
#	white_peace_possible = no
#	on_white_peace_desc = {
#		desc = WHITE_PEACE_DISABLED
#	}
#	
#	valid_to_start = {
#		scope:target = { this = title:e_hre }
#	}
#
#	on_declaration = {
#		on_declared_war = yes
#	}	
#
#	on_victory_desc = {
#		desc = dismantle_holy_pretender_cb_victory_desc
#	}
#	
#	on_victory = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		scope:defender = { save_scope_as = hre_emperor }
#		scope:attacker = {
#			save_scope_as = byz_emperor
#			destroy_title = title:e_hre
#			add_character_flag = { #No repeats.
#				flag = flag_emperor_challenged_hre
#			}
#		}		
#		hidden_effect = {
#			title:e_hre = {
#				every_in_de_jure_hierarchy = {
#					limit = {
#						tier = tier_kingdom
#					}
#					set_de_jure_liege_title = scope:attacker.primary_title #Drift all the HRE vassal titles to de jure Roman Empire.
#				}
#			}
#		}
#		# truce
#		add_truce_attacker_victory_effect = yes
#
#		hidden_effect = {
#			scope:attacker = {
#				trigger_event = roman_restoration.0162
#			}
#			scope:defender = {
#				trigger_event = roman_restoration.0163
#			}
#		}
#	}
#
#	on_defeat_desc = {
#		desc = dismantle_holy_pretender_cb_defeat_desc
#	}
#	
#	on_defeat = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		scope:defender = { save_scope_as = hre_emperor }
#		scope:attacker = {
#			save_scope_as = byz_emperor
#			add_character_flag = { #No repeats.
#				flag = flag_emperor_challenged_hre
#			}
#			pay_short_term_gold_reparations_effect = {
#				GOLD_VALUE = 10
#			}
#		}
#		
#		every_in_list = {
#			list = target_titles
#			save_temporary_scope_as = target
#		}
#		
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			#attacker_prestige = -10
#			victory = no
#			title = scope:target
#		}
#	
#		# Truce
#		add_truce_attacker_defeat_effect = yes
#
#		hidden_effect = {
#			scope:attacker = {
#				trigger_event = roman_restoration.0164
#			}
#			scope:defender = {
#				trigger_event = roman_restoration.0165
#			}
#		}
#		
#		scope:attacker = {
#			save_temporary_scope_as = loser
#		}
#		on_lost_aggression_war_discontent_loss = yes
#	}
#	
#	on_primary_attacker_death = inherit
#	on_primary_defender_death = inherit
#	
#	transfer_behavior = transfer
#	
#	attacker_allies_inherit = yes
#	defender_allies_inherit = yes
#	
#	war_name = "DISMANTLE_EMPIRE_WAR_SPECIFIC_NAME"
#	war_name_base = "DISMANTLE_EMPIRE_WAR_SPECIFIC_NAME_BASE"
#	cb_name = DISMANTLE_EMPIRE_SPECIFIC_NAME
#	interface_priority = 98 #Below take all and regular dejure.
#	
#	attacker_ticking_warscore = 0.01
#	defender_ticking_warscore = 0.05
#	attacker_wargoal_percentage = 0.9
#	defender_ticking_warscore_delay = { months = 24 }
#	
#	max_ai_diplo_distance_to_title = 2000
#	
#	on_invalidated_desc = msg_invalidate_war_title
#
#}
#
#dismantle_byz_pretender_cb = {
#	group = de_jure
#	
#	allowed_for_character = {
#		scope:attacker = {
#			has_character_flag = flag_emperor_challenging_byz
#		}
#	}
#
#	allowed_against_character = {
#		NOR = {
#			scope:defender = { target_is_liege_or_above = scope:attacker }
#			scope:attacker = { target_is_liege_or_above = scope:defender }
#			scope:attacker = { has_character_flag = flag_emperor_challenged_byz } #Only once per Emperor.
#		}
#	}
#	target_titles = all
#	target_title_tier = all
#	ignore_effect = change_title_holder
#
#	white_peace_possible = no
#	on_white_peace_desc = {
#		desc = WHITE_PEACE_DISABLED
#	}
#	
#	valid_to_start = {
#		scope:target = { this = title:e_byzantium }
#	}
#
#	on_declaration = {
#		on_declared_war = yes
#	}	
#
#	on_victory_desc = {
#		desc = dismantle_byz_pretender_cb_victory_desc
#	}
#	
#	on_victory = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		scope:defender = { save_scope_as = byz_emperor }
#		scope:attacker = {
#			save_scope_as = hre_emperor
#			destroy_title = title:e_byzantium
#			add_character_flag = { #No repeats.
#				flag = flag_emperor_challenged_hre
#			}
#		}		
#		hidden_effect = {
#			title:e_byzantium = {
#				every_in_de_jure_hierarchy = {
#					limit = {
#						tier = tier_kingdom
#					}
#					set_de_jure_liege_title = scope:attacker.primary_title #Drift all the HRE vassal titles to de jure Roman Empire.
#				}
#			}
#		}
#		
#		# truce
#		add_truce_attacker_victory_effect = yes
#
#		hidden_effect = {
#			scope:attacker = {
#				trigger_event = roman_restoration.0172
#			}
#			scope:defender = {
#				trigger_event = roman_restoration.0173
#			}
#		}
#	}
#
#	on_defeat_desc = {
#		desc = dismantle_byz_pretender_cb_defeat_desc
#	}
#	
#	on_defeat = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		scope:defender = { save_scope_as = byz_emperor }
#		scope:attacker = {
#			save_scope_as = hre_emperor
#			add_character_flag = { #No repeats.
#				flag = flag_emperor_challenged_byz
#			}
#			pay_short_term_gold_reparations_effect = {
#				GOLD_VALUE = 10
#			}
#		}
#		
#		every_in_list = {
#			list = target_titles
#			save_temporary_scope_as = target
#		}
#		
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			#attacker_prestige = -10
#			victory = no
#			title = scope:target
#		}
#
#		# Truce
#		add_truce_attacker_defeat_effect = yes
#	
#		hidden_effect = {
#			scope:attacker = {
#				trigger_event = roman_restoration.0174
#			}
#			scope:defender = {
#				trigger_event = roman_restoration.0175
#			}
#		}
#		
#		scope:attacker = {
#			save_temporary_scope_as = loser
#		}
#		on_lost_aggression_war_discontent_loss = yes
#	}
#	
#	on_primary_attacker_death = inherit
#	on_primary_defender_death = inherit
#	
#	transfer_behavior = transfer
#	
#	attacker_allies_inherit = yes
#	defender_allies_inherit = yes
#	
#	war_name = "DISMANTLE_EMPIRE_WAR_SPECIFIC_NAME"
#	war_name_base = "DISMANTLE_EMPIRE_WAR_SPECIFIC_NAME_BASE"
#	cb_name = DISMANTLE_EMPIRE_SPECIFIC_NAME
#	interface_priority = 98 #Below take all and regular dejure.
#	
#	attacker_ticking_warscore = 0.01
#	defender_ticking_warscore = 0.05
#	attacker_wargoal_percentage = 0.9
#	defender_ticking_warscore_delay = { months = 24 }
#	
#	max_ai_diplo_distance_to_title = 2000
#	
#	on_invalidated_desc = msg_invalidate_war_title
#
#}
