###TRIGGER LIST###
#LOTR: made weak orcs a bit easier to be pruned

#GUEST/COURTIER LEAVING/ARRIVING TRIGGERS:
#any_child_not_in_traveling_family_trigger
#any_consort_not_in_traveling_family_trigger
#courtier_allowed_to_leave_trigger
#guest_allowed_to_leave_trigger
#guest_allowed_to_arrive_trigger

#GUEST/COURTIER USEFULNESS:
#courtier_or_guest_claim_trigger
#useful_courtier_or_guest_claim_trigger
#has_useful_potential_spouse_claim_trigger
#guest_knight_candidate_trigger
#guest_commander_candidate_trigger
#guest_vassal_candidate_trigger
#guest_physician_candidate_trigger
#guest_male_female_balance_trigger
#child_available_for_guest_marriage_trigger
#guest_marriage_candidate_trigger

#POOL CHARACTER TRIGGERS:
#pool_character_is_pruneable_trigger


####GUEST/COURTIER LEAVING/ARRIVING TRIGGERS###
same_location_and_court_status_as = { # Same location and both are in court / are guests / are pool characters
	exists = location
	exists = $CHARACTER$.location
	location = $CHARACTER$.location
	OR = {
		is_in_the_same_court_as = $CHARACTER$
		trigger_if = {
			limit = { $CHARACTER$ = { is_pool_guest = yes } }
			is_pool_guest = yes
		}
		trigger_if = {
			limit = { $CHARACTER$ = { is_pool_character = yes } }
			is_pool_character = yes
		}
	}

}

any_child_not_in_traveling_family_trigger = {
	save_temporary_scope_as = traveler
	exists = location
	any_child = {
		is_adult = no
		same_location_and_court_status_as = { CHARACTER = scope:traveler }
		save_temporary_scope_as = checking_child
		scope:traveler = {
			NOT = {
				any_traveling_family_member = { this = scope:checking_child }
			}
		}
	}
}

any_consort_not_in_traveling_family_trigger = {
	save_temporary_scope_as = traveler
	exists = location
	any_spouse = {
		exists = location
		same_location_and_court_status_as = { CHARACTER = scope:traveler }
		save_temporary_scope_as = checking_consort
		scope:traveler = {
			NOT = {
				any_traveling_family_member = { this = scope:checking_consort }
			}
		}
	}
}


courtier_allowed_to_leave_trigger = {
	save_temporary_scope_as = leaving_courtier
	NOR = {
		# Not blocked by script
		has_character_flag = blocked_from_leaving
		is_councillor_of = scope:liege
		is_consort_of = scope:liege
		scope:liege = {
			player_heir_position = {
				target = prev
				position <= 2 #Not 1st, 2nd or 3rd player heir (0,1,2)
			}
		}
		scope:liege = { has_relation_court_physician = scope:leaving_courtier }
		has_relation_lover = scope:liege
		is_knight_of = scope:liege
		any_relation = {
			type = ward
			OR = {
				this = scope:liege
				AND = {
					is_courtier_of = scope:liege
					OR = {
						NOT = { any_close_family_member = { this = scope:leaving_courtier } }
						any_close_family_member = { this = scope:liege }
					}
				}
			}
		}
		any_relation = {
			type = guardian
			OR = {
				this = scope:liege
				AND = {
					is_courtier_of = scope:liege
					OR = {
						NOT = { any_close_family_member = { this = scope:leaving_courtier } }
						any_close_family_member = { this = scope:liege }
					}
				}
			}
		}
		any_relation = {
			type = mentor
			OR = {
				this = scope:liege
				AND = {
					is_courtier_of = scope:liege
					OR = {
						NOT = { any_close_family_member = { this = scope:leaving_courtier } }
						any_close_family_member = { this = scope:liege }
					}
				}
			}
		}
		any_relation = {
			type = student
			OR = {
				this = scope:liege
				AND = {
					is_courtier_of = scope:liege
					OR = {
						NOT = { any_close_family_member = { this = scope:leaving_courtier } }
						any_close_family_member = { this = scope:liege }
					}
				}
			}
		}
		has_epidemic_disease_trigger = yes
		#Keep daughters/sons for marriages
		AND = {
			OR = {
				is_child_of = scope:liege
				is_grandchild_of = scope:liege
				is_great_grandchild_of = scope:liege
			}
			NOT = { has_trait = bastard }
			trigger_if = { #Daughters
				limit = { is_female = yes }
				scope:liege = {
					OR = {
						has_realm_law = male_only_law
						has_realm_law = male_preference_law
					}
				}
			}
			trigger_else = { #Sons
				scope:liege = {
					OR = {
						has_realm_law = female_only_law
						has_realm_law = female_preference_law
					}
				}
			}
		}
		#No children of liege can leave court while children
		AND = {
			OR = {
				is_child_of = scope:liege
				is_grandchild_of = scope:liege
				is_great_grandchild_of = scope:liege
			}
			is_adult = no
		}
		#Claimant won't leave while claim is pressed...
		scope:liege = { pressing_claim_of_character_trigger = { CHARACTER = scope:leaving_courtier } }
		#Would be leaving without a child or consort
		any_child_not_in_traveling_family_trigger = yes
		any_consort_not_in_traveling_family_trigger = yes
		#...Or while they have a promise for a claim getting pressed
		has_character_flag = courtier_staying_for_claim

		#...Or if they're involved in an ongoing event
		has_variable = stewardship_duty_1062_employer

		#...Or if someone is trying to elope with them
		any_targeting_scheme = {
			scheme_type = elope
		}
		
		#Non-dominant spouses don't wander off
		AND = {
			is_married = yes
			any_spouse = {
				is_in_the_same_court_as = scope:leaving_courtier
			}
			trigger_if = {
				limit = { is_female = yes }
				scope:liege = {
					OR = {
						has_realm_law = male_only_law
						has_realm_law = male_preference_law
					}
				}
			}
			trigger_else = {
				scope:liege = {
					OR = {
						has_realm_law = female_only_law
						has_realm_law = female_preference_law
					}
				}
			}
		}
		
		#Shieldmaidens stay till dismissed.
		has_trait = shieldmaiden
		
		# Children taught a lesson won't leave
		has_character_modifier = mellowed_spirit
	}
}


guest_allowed_to_leave_trigger = {
	NOR = {
		# Not blocked by script
		has_character_flag = blocked_from_leaving
		#Agent in a local scheme
		scope:host = {
			any_courtier = {
				any_targeting_scheme = {
					any_scheme_agent = {
						this = scope:guest
					}
				}
			}
		}
		scope:host = {
			any_targeting_scheme = {
				any_scheme_agent = {
					this = scope:guest
				}
			}
		}
		any_child = { # No child can be a known child of the host
			is_adult = no
			any_parent = { this = scope:host }
		}
		#Too sick to travel
		has_epidemic_disease_trigger = yes
		#Would be leaving without spouse or underage child
		any_child_not_in_traveling_family_trigger = yes
		any_consort_not_in_traveling_family_trigger = yes
	}
}

guest_allowed_to_arrive_trigger = {
	trigger_if = {
		limit = { exists = var:last_visited_ruler }
		NOT = { var:last_visited_ruler = $HOST$ }
	}
	trigger_if = { # Make sure that they're not trying to go back to where they are right now
		limit = { exists = host }
		NOT = { host = $HOST$ }
	}
	has_epidemic_disease_trigger = no
	NOT = { has_relation_rival = $HOST$ }
	#Compatible faiths
	faith = {
		save_temporary_scope_as = potential_guest_faith
		faith_hostility_level = {
			target = $HOST$.faith
			value < faith_evil_level
		}
	}
	$HOST$.faith = {
		faith_hostility_level = {
			target = scope:potential_guest_faith
			value < faith_evil_level
		}
	}
	
	#Isn't too good for host
	NAND = {
		OR = {
			any_claim = { tier = tier_empire }
			any_close_family_member = { highest_held_title_tier = tier_empire }
		}
		$HOST$ = { highest_held_title_tier <= tier_county }
	}
} #Note: this trigger used to contain opinion triggers but then some awful rulers could never get guests because everyone hates them

###GUEST/COURTIER USEFULNESS TRIGGERS###
courtier_or_guest_claim_trigger = {
	exists = holder
	NOT = {
		holder = {
			OR = {
				this = $RULER$
				target_is_liege_or_above = $RULER$
			}
		}
	}
}

useful_courtier_or_guest_claim_trigger = {
	courtier_or_guest_claim_trigger = { RULER = $RULER$ }
	tier < $RULER$.highest_held_title_tier
	exists = $RULER$.capital_province
	OR = { #For distance check
		exists = title_province
		exists = holder.capital_province
	}
	#The higher tier the ruler has, the longer distance is acceptable
	#We prefer to measure against the title's province, but if there is none, check its holder
	trigger_if = {
		limit = { $RULER$ = { highest_held_title_tier = tier_empire } }
		trigger_if = {
			limit = { exists = title_province }
			title_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_almost_massive } }
		}
		trigger_else = {
			holder.capital_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_almost_massive } }
		}
	}
	trigger_else_if = {
		limit = { $RULER$ = { highest_held_title_tier = tier_kingdom } }
		trigger_if = {
			limit = { exists = title_province }
			title_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_huge } }
		}
		trigger_else = {
			holder.capital_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_huge } }
		}
	}
	trigger_else_if = {
		limit = { $RULER$ = { highest_held_title_tier = tier_duchy } }
		trigger_if = {
			limit = { exists = title_province }
			title_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_large } }
		}
		trigger_else = {
			holder.capital_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_large } }
		}
	}
	trigger_else = {
		trigger_if = {
			limit = { exists = title_province }
			title_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_medium } }
		}
		trigger_else = {
			holder.capital_province = { squared_distance = { target = $RULER$.capital_province value <= squared_distance_medium } }
		}
	}
}

neighboring_useful_courtier_or_guest_claim_trigger = {
	courtier_or_guest_claim_trigger = { RULER = $RULER$ }
	tier < $RULER$.highest_held_title_tier
	exists = $RULER$.capital_province
	holder = {
		any_sub_realm_county = {
			is_neighbor_to_realm = $RULER$		
		}
	}
}

has_useful_potential_spouse_claim_trigger = {
	any_claim = {
		pressed = yes
		exists = holder
		NOT = {
			holder = {
				OR = {
					this = $RULER$
					target_is_liege_or_above = $RULER$
				}
			}
		}
	}
}

guest_knight_candidate_trigger = {
	can_be_knight_trigger = { ARMY_OWNER = $HOST$ }
	age < 60
	age >= 25
	prowess > medium_skill_rating
}

guest_commander_candidate_trigger = {
	can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = $HOST$ }
	age < 60
	age >= 25
	martial > medium_skill_rating
}

guest_vassal_candidate_good_traits_trigger = {
	OR = { #Gives +opinion of liege
		has_trait = content
		has_trait = trusting
		has_trait = humble
	}
}

guest_vassal_candidate_bad_traits_trigger = {
	OR = { #Gives -opinion of liege
		has_trait = ambitious
		has_trait = arrogant
		has_trait = impatient
	}
}

guest_vassal_candidate_trigger = {
	age < 60
	faith = scope:host.faith
	culture = scope:host.culture
	faith = {
		has_dominant_ruling_gender = prev
	}
	guest_vassal_candidate_bad_traits_trigger = no
	save_temporary_scope_as = vassal_candidate
	NOR = { #So they don't leave your realm through inheritance
		any_heir_title = {
			scope:guest = { is_primary_heir_of = scope:vassal_candidate }
		}
		any_child = { is_landed = yes }
		has_trait = devoted
		has_trait = order_member
		has_trait = eunuch
	}
}

guest_physician_candidate_trigger = {
	age < 70
	learning >= decent_skill_rating
}

guest_male_female_balance_trigger = { #are you interesting enough to get "upbalanced" to make up for lack of available positions due to your gender?
	is_adult = yes
	age <= 65
	is_lowborn = no
}
	
child_available_for_guest_marriage_trigger = {
	is_married = no
	is_betrothed = no
	age >= 10
	OR = {
		is_vassal_of = scope:host
		is_courtier_of = scope:host
	}
}	

guest_marriage_candidate_trigger = {
	save_temporary_scope_as = marriage_candidate
	OR = {
		is_male = yes
		age <= 40
	}
	OR = {
		AND = {
			is_married = no
			can_marry_character_trigger = { CHARACTER = scope:host }
		}
		scope:host = {
			any_child = {
				child_available_for_guest_marriage_trigger = yes
				can_marry_character_trigger = { CHARACTER = scope:marriage_candidate }
			}
		}
	}
}


###POOL TRIGGERS###
is_visitable_relation_trigger = {
	exists = capital_province
	capital_province = { local_pool_is_full_trigger = no }
	opinion = {
		target = $CHARACTER$
		value >= medium_negative_opinion
	}
	reverse_opinion = {
		target = $CHARACTER$
		value >= medium_negative_opinion
	}
	NOT = { this = $CHARACTER$.host }
	$CHARACTER$ = {
		NAND = {
			exists = var:last_visited_ruler
			var:last_visited_ruler = prev
		}
	}
}


###########################
# POOL CHARACTER TRIGGERS #
###########################

pool_character_is_pruneable_trigger = {
	save_temporary_scope_as = pool_prune_check
	is_adult = yes
	NOR = {
		any_close_or_extended_family_member = { is_ruler = yes }
		AND = { #Belongs to a dynasty with more than 1 member
			exists = dynasty
			dynasty = { any_dynasty_member = { NOT = { this = scope:pool_prune_check } } }
		}
		any_relation = {
			type = lover
			is_ruler = yes
		}
		any_relation = {
			type = friend
			is_ruler = yes
		}
		any_relation = {
			type = rival
			is_ruler = yes
		}
		any_claim = { always = yes }
		is_married = yes
		any_child = { is_adult = no }
		AND = {
			is_orc = no
			diplomacy >= high_skill_rating
		}
		martial >= high_skill_rating
		AND = {
			is_orc = no
			stewardship >= high_skill_rating
		}
		intrigue >= high_skill_rating
		AND = {
			is_orc = no
			learning >= high_skill_rating
		}
		prowess >= high_skill_rating
		num_of_good_genetic_traits >= 1
	}
}


local_pool_is_full_trigger = {
	number_of_characters_in_pool >= full_pool_size
}

