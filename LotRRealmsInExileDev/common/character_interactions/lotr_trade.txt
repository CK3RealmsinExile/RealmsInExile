# Purchase resource from another character
buy_resource_interaction = {
	icon = icon_gold
	category = interaction_category_diplomacy
	common_interaction = yes
	interface_priority = 60
	desc = buy_resource_interaction_desc

	greeting = positive
	notification_text = SEND_GIFT_PROPOSAL

	answer_accept_key = SEND_GIFT_ACCEPT
	answer_reject_key = SEND_GIFT_REJECT

	is_shown = {
		scope:actor = { same_alignment = { TARGET = scope:recipient } }
		NOT = {
			scope:recipient = scope:actor
		}
		scope:actor = {			
			NOT = { has_culture = culture:wastelands }
			is_in_valinor = no
			has_perk = material_knowledge_perk
		}
		scope:recipient = {			
			NOT = { has_culture = culture:wastelands }
			is_in_valinor = no
		}
		OR = { # Does recipient have a resource that I do not have?
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_mithril_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_mithril_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_gold_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_gold_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_silver_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_silver_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_iron_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_iron_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_copper_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_copper_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_tin_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_tin_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_lead_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_lead_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_diamond_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_diamond_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_ruby_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_ruby_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_sapphire_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_sapphire_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_emerald_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_emerald_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_amethyst_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_amethyst_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_onyx_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_onyx_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_peridot_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_peridot_province_modifier } }
			}
			AND = {
				scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_quartz_province_modifier } } }
				scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_quartz_province_modifier } }
			}
		}
		# has_trait = lifestyle_artifact_crafting
		# NOTE - may link to perk in the future, possibly condition sharing vassal resources on vassal contract
	}

	is_valid_showing_failures_only = {
		# scope:actor.gold >= gift_value # Check vs minimum cost
		scope:recipient = { is_busy_in_events_localised = yes }
	}

	auto_accept = {
		# custom_description = {
		# 	text = auto_accept_interaction_ai	
		# 	object = scope:recipient
		# 	scope:recipient = {
		# 		is_ai = yes
		# 	}
		# }
		always = yes
	}

	on_auto_accept = {
		# scope:recipient = {
		# 	trigger_event = char_interaction.0100
		# }
	}

	on_accept = {
		custom_tooltip = buy_resource_interaction_accept_tt
		if = {
			limit = {
				OR = { # If they lack metals, send them to the metal menu first, else gems
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_mithril_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_mithril_province_modifier } }
					}
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_gold_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_gold_province_modifier } }
					}
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_silver_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_silver_province_modifier } }
					}
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_iron_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_iron_province_modifier } }
					}
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_copper_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_copper_province_modifier } }
					}
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_tin_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_tin_province_modifier } }
					}
					AND = {
						scope:actor = { NOT = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_lead_province_modifier } } }
						scope:recipient = { contains_prospecting_modifier = { PROSPECTING_MODIFIER = mining_lead_province_modifier } }
					}
				}
			}
			scope:actor = { trigger_event = crafting_mechanic.1001 }
		}
		else = {
			scope:actor = { trigger_event = crafting_mechanic.1002 }
		}
	}
	
	ai_accept = {
		base = 0
		modifier = {
			add = 100
			desc = GOLD_REASON
		}

		# Struggle motive
		modifier = {
			desc = AI_STRUGGLE_INTENT
			scope:recipient = {
				is_independent_ruler = yes
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
						}
					}
					add = 200
				}
			}
		}
	}
	
	ai_potential = {
		is_available_at_peace_ai_adult = yes
		ai_greed < medium_positive_ai_value
		short_term_gold >= gift_interaction_cutoff
		NOT = {
			has_trait = greedy
		}
	}

	ai_targets = {
		ai_recipients = scripted_relations
	}
	ai_targets = {
		ai_recipients = liege
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 10
	}
	ai_targets = {
		ai_recipients = vassals
		max = 10
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 60	
	
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	
	ai_will_do = {
		base = 100
		
		modifier = { # Do not send double-gifts
			factor = 0
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}
		
		modifier = { # Basic Filtering
			factor = 0
			scope:recipient = {
				NOR = {
					AND = { # Bankrupt vassals, lovers, friends and a bankrupt liege should be considered
						OR = {
							is_vassal_of = scope:actor
							AND = {
								exists = liege
								liege = scope:actor
							}
							has_secret_relation_lover = scope:actor
							has_relation_lover = scope:actor
							has_relation_soulmate = scope:actor
							has_relation_friend = scope:actor
							has_relation_best_friend = scope:actor
						}
						gold < 0
					}
					AND = { # Generous characters will give gifts to their friends/lovers
						OR = {
							has_secret_relation_lover = scope:actor
							has_relation_lover = scope:actor
							has_relation_soulmate = scope:actor
							has_relation_friend = scope:actor
							has_relation_best_friend = scope:actor
						}
						scope:actor = {
							OR = {
								ai_greed <= high_negative_ai_value
								AND = {
									ai_greed < 0
									culture = {
										has_cultural_parameter = gives_more_gifts
									}
								}
							}
						}
					}
					AND = { # Characters with the Generous Cultural Tradition will give gifts to more people
						is_ruler = yes
						OR = {
							is_allied_to = scope:actor
							is_close_or_extended_family_of = scope:actor
						}
						scope:actor = {
							ai_greed < 0
							culture = {
								has_cultural_parameter = gives_more_gifts
							}
						}
					}
					AND = { # Characters with the loyal trait more likely to give gifts to friends
						OR = {
							has_relation_friend = scope:actor
							has_relation_best_friend = scope:actor
							is_allied_to = scope:actor
							is_close_or_extended_family_of = scope:actor
						}
						scope:actor = {
							ai_greed <= 0
							has_trait = loyal
						}
					}
					AND = { # Zealous characters want to support the defending side in GHW's
						gold < 200
						any_character_war = {
							OR = {
								using_cb = undirected_great_holy_war
								using_cb = directed_great_holy_war
							}
							primary_defender = scope:recipient
						}
						scope:actor = {
							ai_zeal >= 50
						}
					}
					AND = { # Powerful vassals should be considered
						is_powerful_vassal_of = scope:actor
						opinion = {
							target = scope:actor
							value < 0
						}
						NOT ={
							has_opinion_modifier = {
								target = scope:actor
								modifier = gift_opinion
							}
						}
					}
					AND = { # Factioneering vassals should be considered
						is_vassal_of = scope:actor
						is_a_faction_member = yes
						NOT ={
							has_opinion_modifier = {
								target = scope:actor
								modifier = gift_opinion
							}
						}
					}
					AND = { # Realm Priests should be considered
						scope:actor = {
							faith = { has_doctrine = doctrine_theocracy_temporal }
							exists = cp:councillor_court_chaplain
							cp:councillor_court_chaplain = scope:recipient
						}
						opinion = {
							target = scope:actor
							value <= 25
						}
						NOT = {
							has_opinion_modifier = {
								target = scope:actor
								modifier = gift_opinion
							}
						}
					}
					AND = { # Rulers at war with your rivals deserve gold if they're bankrupt
						gold < 0
						is_at_war = yes
						any_war_enemy = {
							has_relation_rival = scope:actor
						}
					}
					AND = { # Independent ruler within the struggle should be considered
					 	any_character_struggle = {
					 		phase_has_catalyst = catalyst_gift_independent_ruler
					 	}
					}
				}
			}
		}

		# Struggle
		modifier = {
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
					phase_has_catalyst = catalyst_gift_independent_ruler
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
					phase_has_catalyst = catalyst_gift_independent_ruler
				}
				NOT = {
					has_relation_rival = scope:recipient
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:actor = {
							has_character_flag = agenda_towards_deescalation
						}
						scope:recipient = {
							has_character_flag = agenda_towards_deescalation
						}
					}
					add = {
						value = 150
						if = {
							limit = { scope:recipient = { is_ai = no} }
							add = 150 # higher for human player to Prioritize them
						}
						# Then lower the intent depending on the gold reserve
						# Base value applied if the AI has 3x the gold cutoff
						multiply = {
							value = short_term_gold
							divide = {
								value = gift_interaction_cutoff
								multiply = 3
							}
						}
					}
				}
				else_if = {
					limit = {
						scope:actor = {
							has_character_flag = agenda_towards_deescalation
						}
					}
					add = {
						value = 25
						if = {
							limit = { scope:recipient = { is_ai = no} }
							add = 150 # higher for human player to Prioritize them
						}
						# Then lower the intent depending on the gold reserve
						# Base value applied if the AI has 3x the gold cutoff
						multiply = {
							value = short_term_gold
							divide = {
								value = gift_interaction_cutoff
								multiply = 3
							}
						}
					}
				}
			}
		}
		
		modifier = {
			factor = 0.1
			scope:recipient = {
				opinion = {
					target = scope:actor
					value < 0
				}
				NAND = {
					is_vassal_of = scope:actor
					scope:actor = {
						ai_rationality > 50
					}
				}
			}
		}
	}
}
