arrange_courtship = {
	icon = icon_scheme_romance
	interface_priority = 64
	common_interaction = yes
	category = interaction_category_diplomacy
	interface = marriage
	desc = arrange_courtship_desc

	is_highlighted = {
		scope:actor = {
			exists = player_heir
			player_heir = {
				is_nubile = yes
				is_married = no
			}
		}
	}
	
	redirect = {
		# If the define MARRIAGE_OWNER_IS_MATCHMAKER is set to yes, the actor must end up as the "matchmaker" link for courtiers
		scope:actor = {
			if = {
				limit = {
					exists = matchmaker
					NOT = { this = matchmaker }
				}
				save_scope_as = secondary_actor
				matchmaker = {
					save_scope_as = actor
				}
			}
			if = {
				limit = {
					is_betrothed = yes
					betrothed = scope:recipient
				}
				save_scope_as = secondary_actor
			}
		}

		scope:recipient = {
			if = {
				limit = {
					is_betrothed = yes
					betrothed.matchmaker = scope:actor
					is_nubile = yes
					betrothed = {
						is_nubile = yes
					}
				}

				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
				betrothed = {
					save_scope_as = secondary_actor
				}
			}
			if = {
				limit = {
					exists = matchmaker
					NOT = { this = matchmaker }
				}
				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
			}
		}
	}

	is_shown = {
		scope:actor = {
			uses_marriage_consent = yes
		}
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			NOT = {
				is_in_prison_type = dungeon
			}
		}
	}
	
	on_accept = {
		start_wokc_scheme = {SCHEME = courting}
	}
	
	populate_actor_list = {
		scope:actor = {
			add_to_list = characters
			every_courtier = {
				add_to_list = characters
			}
			every_courtier_away = {
				add_to_list = characters
			}
			every_child = {
				even_if_dead = yes
				if = {
					limit = {
						is_alive = yes
						NOT = { is_in_list = characters }
					}
					add_to_list = characters
				}
				every_child = {
					even_if_dead = yes
					if = {
						limit = {
							is_alive = yes
							NOT = { is_in_list = characters }
						}
						add_to_list = characters
					}
					every_child = {
						if = {
							limit = {
								is_alive = yes
								NOT = { is_in_list = characters }
							}
							add_to_list = characters
						}
					}
				}
			}
		}
	}
	
	populate_recipient_list = {
		scope:recipient = {
			add_to_list = characters
			every_courtier = {
				add_to_list = characters
			}
			every_courtier_away = {
				add_to_list = characters
			}
			every_child = {
				limit = {
					NOT = { is_in_list = characters }
				}
				add_to_list = characters
			}
		}
	}
	
	# whether a character can be picked for the interaction, interface only (e.g. picking the first character in the marriage interaction)
	# in character scope, actor and recipient event targets can be used, but not the secondary characters (because none exist yet)
	can_be_picked = {
		OR = {
			marriage_interaction_can_be_picked_trigger = yes
			AND = {
				exists = scope:secondary_actor
				exists = scope:secondary_recipient
				scope:secondary_actor.betrothed = scope:secondary_recipient
			}
		}
	}
	
	#Is evaluated only after secondary_recipient and secondary_actor are both chosen
	has_valid_target_showing_failures_only = {
		marriage_interaction_valid_target_base_trigger = yes  #Checks marriage status, betrothed, gender, consanguinity, faith hostility etc.

		#Blocks AI from marrying player guests
		scope:secondary_recipient = {
			trigger_if = {
				limit = {
					is_pool_guest = yes
					host = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				NOT = { is_pool_guest_of = host }
			}
		}
		
		#Blocks most AI's from marrying Evil faiths
		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = yes
					NOT = { has_trait = cynical }
				}
			}
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value < faith_hostility_prevents_marriage_level
				}
			}
		}
	}
	
	auto_accept = {
		marriage_interaction_auto_accept_trigger = yes
	}
		
	ai_accept = {
		base = 0
		modifier = {add = 0 save_temporary_scope_value_as = {name = marriage_hook value = no}}
		marriage_ai_accept_modifier = yes
	}
}

find_courtship_match = {
	icon = icon_scheme_romance
	interface_priority = 63
	category = interaction_category_diplomacy
	common_interaction = yes

	desc = find_courtship_match_desc
	
	send_name = arrange_courtship
	needs_recipient_to_open = no
	interface = marriage
	
	is_highlighted = {
		scope:secondary_actor = {
			is_nubile = yes
			is_married = no
		}
	}
	
	redirect = {
		if = {
			limit = {
				exists = scope:secondary_actor
			}
			scope:recipient = {
				save_scope_as = secondary_recipient
				matchmaker = {
					save_scope_as = recipient
				}
			}

		}
		else_if = {
			scope:recipient = {
				save_scope_as = secondary_actor
			}
			clear_saved_scope = recipient
		}
	}
	
	populate_recipient_list = {
		scope:secondary_actor = {
			if = {
				limit = {
					allowed_to_marry_same_sex_trigger = yes
				}
				every_opposite_sex_spouse_candidate = {
					limit = {
						NAND = {
							is_landless_ruler = yes
							faith.religious_head = this
							NOT = { scope:secondary_actor.faith = faith }
						}
					}
					add_to_list = characters
				}
				every_same_sex_spouse_candidate = {
					limit = {
						NAND = {
							is_landless_ruler = yes
							faith.religious_head = this
							NOT = { scope:secondary_actor.faith = faith }
						}
					}
					add_to_list = characters
				}
			}
			else = {
				every_opposite_sex_spouse_candidate = {
					limit = {
						NAND = {
							is_landless_ruler = yes
							faith.religious_head = this
							NOT = { scope:secondary_actor.faith = faith }
						}
					}
					add_to_list = characters
				}
			}
			populate_wok_marriage_candidates = yes
		}
	}

	# actor, recipient ... characters arranging the marriage
	# secondary_actor, secondary_recipient ... characters that should marry

	is_shown = {
		scope:actor = {
			uses_marriage_consent = yes
		}
		scope:secondary_actor = {
			#Is this someone I can marry off?
			OR = {
				is_courtier_of = scope:actor
				AND = {
					is_child_of = scope:actor
					target_is_liege_or_above = scope:actor
				}
				scope:actor = this
			}
			#They can be married
			can_marry_trigger = yes
			#You can only look for a soulmate if you don't currently have one
			num_of_relation_soulmate = 0
		}
	}

	is_valid_showing_failures_only = {
		#Diplomatic availability & prison
		scope:secondary_actor = {
			is_busy_in_events_localised = yes
			is_imprisoned = no
		}
	}

	has_valid_target_showing_failures_only = {
		marriage_interaction_valid_target_base_trigger = yes  #Checks marriage status, betrothed, gender, consanguinity, faith hostility etc.

		#Diplomatic availability & prison (located here because these will never be set at the start)
		scope:recipient = {
			is_busy_in_events_localised = yes
			is_imprisoned = no
		}
		NOT = {
			scope:actor = {
				is_at_war_with = scope:recipient
			}
		}
		trigger_if = {
			limit = { NOT = { scope:recipient = scope:secondary_recipient } }
			scope:secondary_recipient = {
				is_busy_in_events_localised = yes
				is_imprisoned = no
			}
		}
		#secondary_actor is checked above because they are always available

		#Blocks AI from marrying player guests
		scope:secondary_recipient = {
			trigger_if = {
				limit = {
					is_pool_guest = yes
					host = {
						is_ai = no
						NOT = { this = scope:actor }
					}
				}
				NOT = { is_pool_guest_of = host }
			}
		}
	}

	on_accept = {
		start_wokc_scheme = {SCHEME = courting}
	}

	on_decline = {
		scope:actor = {
			if = {	
				limit = { NOT = { this = scope:recipient } }
				trigger_event = marriage_interaction.0011	
			}
		}
	}

	auto_accept = {
		marriage_interaction_auto_accept_trigger = yes
	}
	
	ai_accept = {
		base = 0 # Should be 0 for all interactions
		
		modifier = {add = 0 save_temporary_scope_value_as = {name = marriage_hook value = no}
		save_temporary_scope_value_as = {name = matrilineal value = no}}
		marriage_ai_accept_modifier = yes
	}
	show_effects_in_notification = no
	greeting = positive
	
	notification_text = {
		desc = {
			first_valid = {	
				triggered_desc = {
					trigger = {
						exists = scope:matrilineal
						scope:matrilineal = yes
						scope:secondary_actor = scope:actor
						scope:secondary_recipient = scope:recipient
					}
					desc = MARRIAGE_NOTIFICATION_BOTH_PERSONAL_MATRI
				}
				triggered_desc = {
					trigger = {
						exists = scope:matrilineal
						scope:matrilineal = yes
						scope:secondary_actor = scope:actor
					}
					desc = MARRIAGE_NOTIFICATION_ACTOR_PERSONAL_MATRI
				}
				triggered_desc = {
					trigger = {
						exists = scope:matrilineal
						scope:matrilineal = yes
						scope:secondary_recipient = scope:recipient
					}
					desc = MARRIAGE_NOTIFICATION_RECIPIENT_PERSONAL_MATRI
				}
				triggered_desc = {
					trigger = {
						exists = scope:matrilineal
						scope:matrilineal = yes
					}
					desc = MARRIAGE_NOTIFICATION_MATRI
				}
				triggered_desc = {
					trigger = {
						scope:secondary_actor = scope:actor
						scope:secondary_recipient = scope:recipient
					}
					desc = MARRIAGE_NOTIFICATION_BOTH_PERSONAL
				}
				triggered_desc = {
					trigger = {
						scope:secondary_actor = scope:actor
					}
					desc = MARRIAGE_NOTIFICATION_ACTOR_PERSONAL
				}
				triggered_desc = {
					trigger = {
						scope:secondary_recipient = scope:recipient
					}
					desc = MARRIAGE_NOTIFICATION_RECIPIENT_PERSONAL
				}
				desc = MARRIAGE_NOTIFICATION
			}
		}
	}
}