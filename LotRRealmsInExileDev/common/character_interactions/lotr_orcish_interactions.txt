lotr_orc_ruler_dismiss_second_in_command_interaction = {
	category = interaction_category_diarch
	common_interaction = yes
	icon = icon_dismiss_temporary_regency

	desc = liege_dismiss_temporary_regency_interaction_desc


	is_shown = {
		# The obvious.
		NOT = { scope:actor = scope:recipient }
		# Diarchy checks for scope:actor.
		scope:actor = {
			# If you're not in a diarchy, we don't care.
			exists = diarch
			diarch = scope:recipient
			# With the extra consideration that we only want this to appear for Temporary Regencies.
			has_diarchy_parameter = can_be_instantly_dismissed
		}
	}

	is_valid_showing_failures_only = {
		# Basic requirements must be fulfilled.
		scope:actor = { can_leave_diarchy_trigger = yes }
	}
	
	on_accept = {
		scope:actor = {
			# Tell scope:recipient what's up.
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = liege_dismiss_temporary_regency_interaction.tt.recipient_notification
				left_icon = scope:actor
				# End the diarchy.
				end_diarchy = yes
			}
		}
	}
	
	auto_accept = yes

	# AI
	ai_targets = { ai_recipients = diarch }
	ai_frequency = 24
	ai_potential = { has_active_diarchy = yes }

	ai_will_do = {
		# You never _don't_ want to do this.
		base = 1000
	}
}

lotr_orc_ruler_appoint_second_in_command_interaction = {
	category = interaction_category_diarch
	common_interaction = yes
	icon = icon_dismiss_temporary_regency

	desc = liege_dismiss_temporary_regency_interaction_desc


	is_shown = {
		# The obvious.
		NOT = { scope:actor = scope:recipient }
		scope:actor = { lotr_may_appoint_heir_to_orc_realm_trigger = yes }
	}

	is_valid_showing_failures_only = {
		# Basic requirements must be fulfilled.
		scope:actor = { is_available_at_peace = yes }
	}
	
	on_accept = {
		scope:actor = {
			start_diarchy = lotr_orc_second_in_command
			set_diarch = scope:recipient
			# We set them to be our designated heir.
			## First grabbing the old one for opinions.
			designated_heir ?= {
				if = {
					limit = { this != scope:recipient }
					# Nab them for use further on.
					save_scope_as = old_heir
				}
			}
			## Then overwriting.
			set_designated_heir_unsafe   = scope:recipient
		}
	}
	
	auto_accept = yes

	# AI
	ai_targets = { ai_recipients = diarch }
	ai_frequency = 24
	ai_potential = { has_active_diarchy = yes }

	ai_will_do = {
		# You never _don't_ want to do this.
		base = 1000
	}
}