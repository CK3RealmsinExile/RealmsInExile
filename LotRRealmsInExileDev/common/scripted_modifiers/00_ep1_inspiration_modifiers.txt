#################################################
# MODIFIER LIST 								#
#################################################
# inspiration_royal_court_grandeur_attraction_modifier			- Base attraction value of an individual Royal Court. Inspired characters are more likely to choose to visit courts with a higher value
# inspiration_royal_court_oversaturation_penalty_modifier		- Substantial penalty to attraction (as above) based on population. Forces inspired characters to spread out instead of all congregating in the 'best' court
# inspiration_region_court_grandeur_attraction_modifier			- Sum of the attraction value of all Royal Courts in a given $GEOGRAPHIC_REGION$
# inspiration_region_oversaturation_penalty_modifier			- Substantial penalty similar to the one for specific Royal Courts, but based on all courts in a region
# inspiration_bonus_quality_from_traditions_modifier			- Collection of all bonuses characters with certain Traditions get to quality when completing Inspirations

inspiration_royal_court_grandeur_attraction_modifier = {
	modifier = {
		add = {
			# Base weight equal to current Court Grandeur, scaled to a value between 0 and 10.
			value = court_grandeur_current
			multiply = 0.1

			# 50% penalty if current Court Grandeur is under the expected Court Grandeur Minimum.
			if = {
				limit = {
					court_grandeur_current < court_grandeur_minimum_expected
				}
				multiply = 0.5
			}
		}
	}
	
	# Preference for a court with the Scholarly Court Type
	modifier = {
		factor = {
			if = {
				limit = { # Slightly higher bonus if you have Grandeur level 6 or higher
					has_court_type = court_scholarly
					court_grandeur_current_level >= 6
				}
				value = 1.2
			}
			else = { # Smaller bonus for courts with at least Grandeur level 1, but below 6
				value = 1.1
			}
		}
		has_court_type = court_scholarly
		court_grandeur_current_level >= 1
	}

	# Extra weights for certain Cultural Traditions - To make sure you get the corresponding inspiration type
	modifier = {
		factor = 1.1
		culture = { has_cultural_parameter = improved_artisan_inspiration }
		exists = scope:inspired_character
		scope:inspired_character = {
			exists = inspiration
			inspiration = { has_inspiration_type = artisan_inspiration }
		}
	}
	modifier = {
		factor = 1.1
		culture = { has_cultural_parameter = improved_weaver_inspiration }
		exists = scope:inspired_character
		scope:inspired_character = {
			exists = inspiration
			inspiration = { has_inspiration_type = weaver_inspiration }
		}
	}
}

inspiration_royal_court_oversaturation_penalty_modifier = {
	modifier = {
		factor = {
			value = 1
			divide = {
				add = 1
				every_inspired_character = {
					limit = {
						exists = location
						location = {
							exists = barony
							barony = {
								exists = holder
								holder = {
									top_liege = scope:tmp_royal_court_owner
								}
							}
						}
					}
					add = 1
				}
			}
		}
	}
}

inspiration_region_court_grandeur_attraction_modifier = {
	modifier = {
		add = {
			every_character_with_royal_court = {
				limit = { 
					exists = capital_province
					capital_province = {
						geographical_region = $GEOGRAPHICAL_REGION$
					}
				}
				# Base weight equal to current Court Grandeur
				add = court_grandeur_current

				# 50% penalty if current Court Grandeur is under the expected Court Grandeur Minimum.
				if = {
					limit = {
						court_grandeur_current < court_grandeur_minimum_expected
					}
					multiply = 0.5
				}
			}
		}
	}
}

inspiration_region_oversaturation_penalty_modifier = {
	modifier = {
		factor = {
			value = 0
			every_character_with_royal_court = {
				limit = { 
					exists = capital_province
					capital_province = {
						geographical_region = $GEOGRAPHICAL_REGION$
					}
				}
				add = 1
			}
			divide = {
				every_inspired_character = {
					limit = {
						exists = location
						location = {
							geographical_region = $GEOGRAPHICAL_REGION$
						}
						NOR = { # LotR - so inspired characters don't completely disappear after a few centuries
							host ?= { is_landless_adventurer = yes }
							liege ?= { is_landless_adventurer = yes }
							employer ?= { is_landless_adventurer = yes }
						}
					}
					add = 3
				}
				min = 1
			}
		}
	}
}
