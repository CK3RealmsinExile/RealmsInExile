# LotR: Added in Blood of Numenor modifiers to marital chances.
###MARRIAGE SCRIPTED MODIFIERS###


elopment_ai_accept_modifier = { #Should copy marriage_ai_accept_modifier on relevant points, note: there are no secondary targets
	############
	# ELOPMENT #
	############

	modifier = {
		NOT = { has_relation_soulmate = scope:actor }
		add = {
			value = -25
			if = {
				limit = {
					is_married = yes
				}
				add = -25
			}
		}
		desc = AI_ELOPE_CONSEQUENCES
	}


	#########
	# PERKS #
	#########
	modifier = { # A lot of acceptance for yourself - you are likely already married, thus you need motivation to get rid of your spouse to marry someone better
		scope:actor = { has_perk = promising_prospects_perk }
		add = promising_prospects_self_value
		desc = PROMISING_PROSPECTS_PERK_MODIFIER
	}
	modifier = { # Dynasty Glory Perk acceptance,
		exists = scope:actor.dynasty
		scope:actor.dynasty = { has_dynasty_perk = glory_legacy_1 }
		add = glory_legacy_1_marriage_acceptance
		desc = DYNASTY_LEGACY_GLORY_MARRIAGE_ACCEPTANCE_PERK_MODIFIER
	}

	############
	# OPINIONS #
	############
	opinion_modifier = { # More likely to accept if Recipient likes the person the Actor offers for marriage
		who = scope:recipient
		opinion_target = scope:actor
		multiplier = 1
		desc = AI_OPINION_REASON
	}

	opinion_modifier = {
		trigger = { exists = scope:recipient.primary_spouse }
		who = scope:recipient
		opinion_target = scope:recipient.primary_spouse
		multiplier = -1
		desc = AI_SPOUSE_OPINION
	}


	####################
	# TIER DIFFERENCES #
	####################
	modifier = {
		exists = scope:recipient.liege.dynasty
		scope:recipient = {
			OR = {
				AND = {
					exists = dynasty
					dynasty = scope:recipient.liege.dynasty
				}
				is_close_or_extended_family_of = scope:recipient.liege
				is_spouse_of = scope:recipient.liege
			}
		}
		scope:actor.primary_title.tier > scope:recipient.liege.primary_title.tier
		add = {
			value = scope:actor.highest_held_title_tier
			subtract = scope:recipient.liege.highest_held_title_tier
			multiply = 30
		}
		desc = MARRYING_UP_REASON
	}
	
	modifier = {
		exists = scope:recipient.liege.dynasty
		scope:recipient = {
			OR = {
				AND = {
					exists = dynasty
					dynasty = scope:recipient.liege.dynasty
				}
				is_close_or_extended_family_of = scope:recipient.liege
				is_spouse_of = scope:recipient.liege
			}
		}
		scope:actor.primary_title.tier < scope:recipient.liege.primary_title.tier
		add = {
			value = scope:actor.highest_held_title_tier
			subtract = scope:recipient.liege.highest_held_title_tier
			if = {
				limit = { scope:actor.highest_held_title_tier = tier_kingdom }
				multiply = 25
			}
			else = {
				multiply = 35
			}
		}
		desc = MARRYING_DOWN_REASON
	}

	
	####################
	# NUMENOREAN BLOOD #
	####################
	modifier = {
		scope:secondary_actor.numenorean_blood_tier > scope:secondary_recipient.numenorean_blood_tier
		add = {
			value = scope:secondary_actor.numenorean_blood_tier
			subtract = scope:secondary_recipient.numenorean_blood_tier
			multiply = 60
		}
		desc = NUMENOREAN_BLOOD_HIGHER_TIER_REASON
	}
	
	modifier = {
		scope:secondary_actor.numenorean_blood_tier < scope:secondary_recipient.numenorean_blood_tier
		add = {
			value = scope:secondary_actor.numenorean_blood_tier
			subtract = scope:secondary_recipient.numenorean_blood_tier
			multiply = 60
		}
		desc = NUMENOREAN_BLOOD_LOWER_TIER_REASON
	}
	
	
	###########################
	# DYNASTY PRESTIGE LEVELS #
	###########################
	modifier = {
		scope:actor = {
			OR = {
				has_dynasty = no
				scope:actor = {
					has_dynasty = yes
					dynasty.dynasty_prestige_level = 0
				}
			}
		}
		add = -5
		desc = AI_DYNASTY_PRESTIGE_REASON
	}
	modifier = {
		scope:actor = {
			has_dynasty = yes
			dynasty.dynasty_prestige_level >= 2
		}
		add = {
			value = scope:actor.dynasty.dynasty_prestige_level
			multiply = 5
			subtract = 5 #At 0 dynasty prestige level, there should be a penalty
		}
		desc = AI_DYNASTY_PRESTIGE_REASON
	}


	#########
	# FAITH #
	#########
	modifier = { # A recipient will be reluctant (to differing degrees) to agree to marriages sent from an actor of a different faith
		scope:recipient.faith = {
			faith_hostility_level = {
				target = scope:actor.faith
				value > faith_fully_accepted_level
			}
		}
		add = {
			value = -10
			if = {
				limit = {
					scope:recipient.faith = {
						faith_hostility_level = {
							target = scope:actor.faith
							value > faith_astray_level
						}
					}
				}
				subtract = 15
			}
			if = {
				limit = {
					scope:recipient.faith = {
						faith_hostility_level = {
							target = scope:actor.faith
							value >= faith_hostility_prevents_marriage_level
						}
					}
				}
				subtract = 975
			}
		}
		
		desc = MARRY_DIFFERENT_FAITH_REASON
	}
	
	##################
	# MISC PENALTIES #
	##################
	modifier = {
		scope:recipient.liege = { has_weak_hook = scope:recipient }
		desc = AI_ELOPE_WEAK_HOOK
		add = -15
	}

	modifier = {
		scope:recipient.liege = { has_strong_hook = scope:recipient }
		desc = AI_ELOPE_STRONG_HOOK
		add = -100
	}

	modifier = {
		scope:recipient = {
			any_heir_title = {
				place_in_line_of_succession = {
					target = scope:recipient
					value <= 1
				}
			}
		}
		desc = AI_ELOPE_INHERITANCE
		add = -75
	}

	modifier = {
		scope:recipient = {
			NOT = {
				any_heir_title = {
					place_in_line_of_succession = {
						target = scope:recipient
						value <= 1
					}
				}
			}
			any_heir_title = {
				place_in_line_of_succession = {
					target = scope:recipient
					value <= 3
				}
			}
		}
		desc = AI_ELOPE_POSSIBLE_INHERITANCE
		add = -30
	}

	#########################
	# FAMILY CONSIDERATIONS #
	#########################

	modifier = {
		add = -1000
		scope:recipient.faith = {
			NOT = {
				faith_allows_marriage_consanguinity_trigger = { CHARACTER_1 = scope:recipient CHARACTER_2 = scope:actor }
			}
		}
		desc = MARRY_CONSANGUINITY_REASON
	}
}


marriage_ai_accept_modifier = {
	#########
	# HOOKS #
	#########
	modifier = { #Weak hook
		scope:marriage_hook = yes
		add = 100
		scope:actor = { NOT = { has_strong_hook = scope:recipient } }
		desc = SCHEME_WEAK_HOOK_USED
	}
	modifier = { #Strong Hook (in some cases it's not auto accept)
		scope:marriage_hook = yes
		add = 200
		scope:actor = { has_strong_hook = scope:recipient }
		desc = SCHEME_STRONG_HOOK_USED
	}
	
	#########
	# PERKS #
	#########
	modifier = { # A lot of acceptance for yourself - you are likely already married, thus you need motivation to get rid of your spouse to marry someone better
		scope:actor = { has_perk = promising_prospects_perk }
		scope:actor = scope:secondary_actor
		add = promising_prospects_self_value
		desc = PROMISING_PROSPECTS_PERK_MODIFIER
	}
	modifier = { # A significant but lesser chunk of acceptance for your extended family, to increase the value of the perk!
		scope:actor = { has_perk = promising_prospects_perk }
		NOT = { scope:actor = scope:secondary_actor }
		scope:secondary_actor = {
			is_close_or_extended_family_of = scope:actor
		}
		add = promising_prospects_other_value
		desc = PROMISING_PROSPECTS_PERK_MODIFIER
	}
	modifier = { # Dynasty Glory Perk acceptance, checks the secondary recipients dynasty for the perk
		exists = scope:secondary_actor.dynasty
		scope:secondary_actor.dynasty = { has_dynasty_perk = glory_legacy_1 }
		add = glory_legacy_1_marriage_acceptance
		desc = DYNASTY_LEGACY_GLORY_MARRIAGE_ACCEPTANCE_PERK_MODIFIER
	}

	##########################
	# WHO IS GETTING MARRIED #
	##########################
	modifier = {
		add = -15 # Less likely if it's the recipient him/herself
		scope:recipient = scope:secondary_recipient
		desc = MY_OWN_MARRIAGE_REASON
	}
	#More likely if the secondary_actor is the actor's heir
	modifier = {
		add = 10
		scope:actor = {
			player_heir_position = {
				position <= 4 #0, 1, 2, 3, 4 = 5 first player heirs
				target = scope:secondary_actor
			}
			NOT = {
				player_heir_position = {
					position = 0 #player heir
					target = scope:secondary_actor
				}
			}
		}
		scope:actor = {
			tier_difference = {
				target = scope:recipient
				value > 0
			}
		}
		desc = MARRYING_HEIR_REASON
	}

	modifier = {
		add = 20
		scope:actor = {
			player_heir_position = {
				position = 0 #player heir
				target = scope:secondary_actor
			}
		}
		scope:actor = {
			tier_difference = {
				target = scope:recipient
				value > 0
			}
		}
		desc = MARRYING_HEIR_REASON
	}
	
	##############################################
	# ALLIANCE/HOSTILITY FACTORS ("REALPOLITIK") #
	##############################################
	modifier = {
		add = {
			value = 40
			if = {
				limit = {
					scope:actor = {
						tier_difference = {
							target = scope:recipient
							value = -1
						}
					}
				}
				subtract = 10
			}
			else_if = {
				limit = {
					scope:actor = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
				}
				subtract = 30
			}
			if = {
				limit = {
					scope:actor = {
						any_ally = {
							NOR = {
    							target_is_liege_or_above = scope:actor
    							target_is_vassal_or_below = scope:actor
							}
							count >= 2
						}
					}
				}
				scope:actor = {
					every_ally = {
						limit = {
							NOR = {
    							target_is_liege_or_above = scope:actor
    							target_is_vassal_or_below = scope:actor
							}
						}
						multiply = 0.5
					}
				}
			}
		}
		scope:recipient = {
			NOR = {
				is_allied_to = scope:actor
				scope:actor = { # Emperors do not care for Counts at all
					tier_difference = {
						target = scope:recipient
						value <= -3
					}
				}
			}
			OR = {
				ai_diplomacy_stance = {
					target = scope:actor
					stance = neutral
				}
				ai_diplomacy_stance = {
					target = scope:actor
					stance = threat
				}
			}
			yields_alliance = {
				candidate = scope:secondary_recipient
				target = scope:actor
				target_candidate = scope:secondary_actor
			}
		}
		OR = {
			scope:actor = {
				is_independent_ruler = yes
			}
			scope:recipient = {
				is_independent_ruler = yes
			}
			scope:recipient.liege = scope:actor.liege
		}
		
		desc = DESIRES_ALLIANCE
	}
	modifier = {
		add = {
			value = 100
			if = {
				limit = {
					scope:actor = {
						any_ally = {
							NOR = {
    							target_is_liege_or_above = scope:actor
    							target_is_vassal_or_below = scope:actor
							}
							count >= 2
						}
					}
				}
				scope:actor = {
					every_ally = {
						limit = {
							NOR = {
    							target_is_liege_or_above = scope:actor
    							target_is_vassal_or_below = scope:actor
							}
						}
						multiply = 0.5
					}
				}
			}
		}
		scope:recipient = {
			NOT = { is_allied_to = scope:actor }
			ai_diplomacy_stance = {
				target = scope:actor
				stance = friend
			}
			yields_alliance = {
				candidate = scope:secondary_recipient
				target = scope:actor
				target_candidate = scope:secondary_actor
			}
		}
		desc = DESIRES_ALLIANCE
	}
	modifier = {
		add = -100
		scope:recipient = {
			NOT = { is_allied_to = scope:actor }
			ai_diplomacy_stance = {
				target = scope:actor
				stance = enemy
			}
			yields_alliance = {
				candidate = scope:secondary_recipient
				target = scope:actor
				target_candidate = scope:secondary_actor
			}
		}
		desc = DOES_NOT_WANT_ALLIANCE
	}
	modifier = {
		add = {
			scope:actor = {
				every_ally = {
					limit = {
						NOR = {
    						target_is_liege_or_above = scope:actor
    						target_is_vassal_or_below = scope:actor
						}
					}
					add = -15
				}
			}
		}
		scope:actor = {
			any_ally = {
				NOR = {
					target_is_vassal_or_below = scope:actor
					target_is_liege_or_above = scope:actor
				}
				count >= 2
			}
		}
		scope:recipient = {
			NOR = {
				is_allied_to = scope:actor
				target_is_vassal_or_below = scope:actor
				target_is_liege_or_above = scope:actor
			}
			yields_alliance = {
				candidate = scope:secondary_recipient
				target = scope:actor
				target_candidate = scope:secondary_actor
			}
		}
		desc = YOU_HAVE_TOO_MANY_ALLIANCES
	}

	####################
	# TIER DIFFERENCES #
	####################
	modifier = {
		scope:recipient = {
			OR = {
				dynasty = scope:secondary_recipient.dynasty
				is_close_or_extended_family_of = scope:secondary_recipient
			}
		}
		scope:actor = {
			OR = {
				is_close_or_extended_family_of = scope:secondary_actor
				this = scope:secondary_actor
			}
			tier_difference = {
				target = scope:recipient
				value >= 1
			}
		}
		add = {
			value = scope:actor.highest_held_title_tier
			subtract = scope:recipient.highest_held_title_tier
			multiply = 30
		}
		desc = MARRYING_UP_REASON
	}
	
	modifier = {
		scope:recipient = {
			OR = {
				dynasty = scope:secondary_recipient.dynasty
				is_close_or_extended_family_of = scope:secondary_recipient
			}
		}
		scope:actor = {
			OR = {
				is_close_or_extended_family_of = scope:secondary_actor
				this = scope:secondary_actor
			}
			tier_difference = {
				target = scope:recipient
				value <= -1
			}
		}
		add = {
			value = scope:actor.highest_held_title_tier
			subtract = scope:recipient.highest_held_title_tier
			if = {
				limit = { scope:actor.highest_held_title_tier = tier_kingdom }
				multiply = 30
			}
			else = {
				multiply = 40
			}
		}
		desc = MARRYING_DOWN_REASON
	}
	
	modifier = {
		scope:recipient = {
			OR = {
				dynasty = scope:secondary_recipient.dynasty
				is_close_or_extended_family_of = scope:secondary_recipient
			}
		}
		scope:actor = {
			NOR = {
				is_close_or_extended_family_of = scope:secondary_actor
				this = scope:secondary_actor
			}
		}
		NOR = {
			scope:secondary_actor = {
				tier_difference = {
					target = scope:recipient
					value >= 0
				}
			}
			AND = {
				exists = scope:secondary_actor.father
				scope:secondary_actor.father = {
					tier_difference = {
						target = scope:recipient
						value >= 0
					}
				}
			}
			AND = {
				exists = scope:secondary_actor.mother
				scope:secondary_actor.mother = {
					tier_difference = {
						target = scope:recipient
						value >= 0
					}
				}
			}
		}
		add = {
			value = 0
			if = {
				limit = {
					scope:secondary_actor = {
						exists = father.primary_title
						trigger_if = {
							limit = {
								exists = mother.primary_title
							}
							father.primary_title.tier >= mother.primary_title.tier
						}
					}
				}
				add = scope:secondary_actor.father.highest_held_title_tier
				subtract = scope:recipient.highest_held_title_tier
				if = {
					limit = { scope:secondary_actor.father.highest_held_title_tier = tier_kingdom }
					multiply = 30
				}
				else = {
					multiply = 40
				}
			}
			else_if = {
				limit = {
					scope:secondary_actor = {
						exists = mother.primary_title
						trigger_if = {
							limit = {
								exists = father.primary_title
							}
							mother.primary_title.tier >= father.primary_title.tier
						}
					}
				}
				add = scope:secondary_actor.mother.highest_held_title_tier
				subtract = scope:recipient.highest_held_title_tier
				if = {
					limit = { scope:secondary_actor.mother.highest_held_title_tier = tier_kingdom }
					multiply = 30
				}
				else = {
					multiply = 40
				}
			}
			else = {
				add = scope:secondary_actor.highest_held_title_tier
				subtract = scope:recipient.highest_held_title_tier
				if = {
					limit = { scope:secondary_actor.highest_held_title_tier = tier_kingdom }
					multiply = 30
				}
				else = {
					multiply = 40
				}
			}
			
		}
		desc = MARRYING_DOWN_REASON
	}

	############
	# OPINIONS #
	############
	opinion_modifier = { # More likely to accept if Recipient likes the person the Actor offers for marriage
		trigger = {
			NOT = { scope:actor = scope:secondary_actor }
		}
		who = scope:recipient
		opinion_target = scope:secondary_actor
		multiplier = 0.25
		desc = AI_OPINION_REASON
	}
	opinion_modifier = { # A lot more likely if Recipient likes Actor
		trigger = {
			NOT = { scope:actor = scope:recipient }
		}
		who = scope:recipient
		opinion_target = scope:actor
		multiplier = 0.75
		desc = AI_OPINION_REASON
	}
	modifier = { # Likely to want two candidates who like each other to marry if Recipient likes them both
		add = 15
		scope:secondary_recipient = { #Do they like each other a lot?
			opinion = {
				target = scope:secondary_actor
				value > 50
			}
			reverse_opinion = {
				target = scope:secondary_actor
				value > 50
			}
		}
		scope:recipient = { #The Recipient needs to want well for both candidates
			NOT = { has_trait = sadistic }
			NOT = { has_trait = callous }
			NOT = { has_trait = cynical }
			opinion = {
				target = scope:secondary_actor
				value > 0
			}
			opinion = {
				target = scope:secondary_recipient
				value > 0
			}
		}
		desc = wishes_well_for_lovers_tooltip
	}
	compare_modifier = { #If the Secondary_recipient has the Love opinion for the Secondary_actor, add the Recipients compassion value
		target = scope:recipient
		trigger = {
			scope:recipient = {
				ai_compassion > 0
				opinion = {
					target = scope:secondary_recipient
					value > 0
				}
			}
			scope:secondary_recipient = {
				has_opinion_modifier = {
					target = scope:secondary_actor
					modifier = love_opinion
				}
			}
		}
		value = ai_compassion
		multiplier = 0.25
	}

	
	###########################
	# DYNASTY PRESTIGE LEVELS #
	###########################
	modifier = {
		scope:secondary_actor = { has_dynasty = no }
		add = {
			value = -20 # AI really doesn't like marrying lowborn courtiers.
			if = {
				limit = { # Especially not if they're not lowborn themselves
					scope:secondary_recipient = { has_dynasty = yes }
				}
				multiply = 6
			}
		}
		desc = AI_DYNASTY_PRESTIGE_REASON_LOWBORN
	}
	modifier = {
		scope:secondary_actor = { has_dynasty = yes }
		scope:recipient.dynasty = scope:secondary_recipient.dynasty
		NOT = { scope:secondary_actor.dynasty = { dynasty_prestige_level = 1 } } #Would equal a value of 0, so we hide it
		add = {
			value = scope:secondary_actor.dynasty.dynasty_prestige_level
			multiply = 5
			subtract = 5 #At 0 dynasty prestige level, there should be a penalty
		}
		desc = AI_DYNASTY_PRESTIGE_REASON_SECONDARY
	}	
	
	####################
	# NUMENOREAN BLOOD #
	####################
	modifier = {
		scope:secondary_actor.numenorean_blood_tier > scope:secondary_recipient.numenorean_blood_tier
		add = {
			value = scope:secondary_actor.numenorean_blood_tier
			subtract = scope:secondary_recipient.numenorean_blood_tier
			multiply = 60
		}
		desc = NUMENOREAN_BLOOD_HIGHER_TIER_REASON
	}
	
	modifier = {
		scope:secondary_actor.numenorean_blood_tier < scope:secondary_recipient.numenorean_blood_tier
		add = {
			value = scope:secondary_actor.numenorean_blood_tier
			subtract = scope:secondary_recipient.numenorean_blood_tier
			multiply = 60
		}
		desc = NUMENOREAN_BLOOD_LOWER_TIER_REASON
	}


	#####################################
	# PENALTIES FOR INCORRECT LINEALITY # (matrilineal for men, patrilineal for women)
	#####################################
	modifier = {
		scope:secondary_recipient = {
			exists = dynasty
			exists = scope:recipient.dynasty
			dynasty = scope:recipient.dynasty
			NAND = {
				dynasty = scope:actor.dynasty
				dynasty = scope:secondary_actor.dynasty
				scope:secondary_actor = { NOT = { has_trait = bastard } }
			}

			scope:recipient = { is_ruler = yes }
			#Incorrect lineality
			OR = {
				AND = {
					NOT = { always = scope:matrilineal }
					is_female = yes
				}
				AND = {
					always = scope:matrilineal
					is_male = yes
				}
			}
		}
		#Only cares about the ruler, first 3 heirs, and the dominant gender dynasty members
		scope:recipient = {
			OR = {
				this = scope:secondary_recipient
				player_heir_position = { #0, 1, 2 = the first three player heirs in succession line.
					position <= 2
					target = scope:secondary_recipient
				}
				has_realm_law = equal_law
				AND = {
					scope:secondary_recipient = { is_female = yes }
					OR = {
						has_realm_law = female_only_law
						has_realm_law = female_preference_law
					}
				}
				AND = {
					scope:secondary_recipient = { is_male = yes }
					OR = {
						has_realm_law = male_only_law
						has_realm_law = male_preference_law
					}
				}
			}
		}

		add = {
			#For the ruler themselves and their first player heir
			if = {
				limit = {
					scope:recipient = {
						OR = {
							this = scope:secondary_recipient
							player_heir_position = {
								position = 0 #First player heir
								target = scope:secondary_recipient
							}
						}
					}
					OR = {
						AND = {
							scope:recipient.faith = {
								has_doctrine = doctrine_gender_male_dominated
							}
							scope:secondary_recipient = {
								is_male = yes
							}
						}
						AND = {
							scope:recipient.faith = {
								has_doctrine = doctrine_gender_female_dominated
							}
							scope:secondary_recipient = {
								is_female = yes
							}
						}
					}
				}
				subtract = 1000
			}
			else_if = {
				limit = {
					scope:recipient = {
						OR = {
							this = scope:secondary_recipient
							player_heir_position = {
								position = 0 #First player heir
								target = scope:secondary_recipient
							}
						}
					}
				}
				subtract = 100
			}
			#For the second heir
			else_if = {
				limit = {
					scope:recipient = {
						player_heir_position = {
							position = 1 #Second player heir
							target = scope:secondary_recipient
						}
					}
				}
				subtract = 60 #A bit more than a strong hook
			}
			#For the third heir
			else_if = {
				limit = {
					scope:recipient = {
						player_heir_position = {
							position = 2 #Third player heir
							target = scope:secondary_recipient
						}
					}
				}
				subtract = 30 #A bit more than a weak hook
			}
			else_if = {
				limit = {
					scope:recipient = { has_realm_law = equal_law }
				}
				subtract = 10 #If The realm law is equal, and the secondary_recipient is NOT ruler or their 1st/2nd/3rd heir, slash the penalty in half
			}
			else = {
				subtract = 20 #Base penalty for dynasty members who are NOT ruler or their 1st/2nd/3rd heir
			}
		}
		desc = MATRILINEAL_PATRILINEAL_REASON
	}

	#########
	# FAITH #
	#########
	modifier = { # A recipient will be reluctant (to differing degrees) to agree to marriages sent from an actor of a different faith
		add = {
			value = -10
			if = {
				limit = {
					scope:recipient.faith = {
						faith_hostility_level = {
							target = scope:actor.faith
							value > faith_astray_level
						}
					}
				}
				subtract = 15
			}
			if = {
				limit = {
					scope:recipient.faith = {
						faith_hostility_level = {
							target = scope:actor.faith
							value >= faith_hostility_prevents_marriage_level
						}
					}
				}
				subtract = 975
			}
		}

		scope:recipient.faith = {
			faith_hostility_level = {
				target = scope:actor.faith
				value > faith_fully_accepted_level
			}
		}
		desc = MARRY_DIFFERENT_FAITH_REASON
	}

	modifier = { # Polygamy not supported
		add = -1000
		desc = DIVORCE_POLYGAMY

		scope:secondary_actor = { 
			is_married = yes 
		}
		scope:secondary_recipient.faith = { NOT = {	has_doctrine = doctrine_polygamy }	}
	}

	###############
	# PROCREATION #
	###############
	compare_modifier = { # Recipient is reluctant to marry old women (procreation is a key factor)
		trigger = {
			scope:secondary_actor = {
				age > 29
				is_female = yes
			}
			scope:secondary_recipient = {
				is_adult = yes
				OR = {
					AND = {
						exists = scope:secondary_recipient.dynasty
						scope:secondary_recipient.dynasty = {
							OR = {
								any_dynasty_member = {
									count >= 2
								}
								dynasty_prestige_level > 1
							}
						}
					}
					is_ruler = yes
					is_close_or_extended_family_of = scope:recipient
					this = scope:recipient.player_heir
				}
			}
		}
		target = scope:secondary_actor
		value = age
		multiplier = -5.0
		step = 1
		offset = -29
		desc = MARRY_AGE
	}
	
	compare_modifier = { # Recipient is VERY reluctant to betrothe old women to boys
		trigger = {
			scope:secondary_actor = {
				age > 20
				is_female = yes
			}
			scope:secondary_recipient = {
				is_adult = no
			}
		}
		target = scope:secondary_actor
		value = age
		multiplier = -5.0
		step = 1
		offset = -20
		desc = MARRY_AGE
	}

	modifier = { # A Recipient is unlikely to agree to a marriage where the Secondary_recipient is fertile and the Secondary_actor isn't even if Secondary_recipient has children
		add = -100
		
		scope:secondary_recipient = {
			OR = {
				fertility > 0.1
				is_adult = no
			}
			OR = {
				AND = {
					exists = scope:secondary_recipient.dynasty
					scope:secondary_recipient.dynasty = {
						OR = {
							any_dynasty_member = {
								count >= 2
							}
							dynasty_prestige_level > 1
						}
					}
				}
				is_ruler = yes
				is_close_or_extended_family_of = scope:recipient
				this = scope:recipient.player_heir
			}
			OR = {
				is_female = no
				age < 45
			}
			any_child = {
				count >= 1
			}
		}
		scope:secondary_actor = {
			is_adult = yes
			OR = {
				fertility < 0.1
				AND = {
					is_female = yes
					age >= marriage_female_fertility_cutoff_age_value
				}
			}
		}
		desc = MARRY_LOW_FERTILITY_REASON
	}

	modifier = { # A Recipient is VERY unlikely to agree to a marriage where the Secondary_recipient is fertile and the Secondary_actor isn't if Secondary_recipient doesn't have children
		add = -200
		
		scope:secondary_recipient = {
			OR = {
				fertility > 0.1
				is_adult = no
			}
			OR = {
				AND = {
					exists = scope:secondary_recipient.dynasty
					scope:secondary_recipient.dynasty = {
						OR = {
							any_dynasty_member = {
								count >= 2
							}
							dynasty_prestige_level > 1
						}
					}
				}
				is_ruler = yes
				is_close_or_extended_family_of = scope:recipient
				this = scope:recipient.player_heir
			}
			OR = {
				is_female = no
				age < 45
			}
			any_child = {
				count < 1
			}
		}
		scope:secondary_actor = {
			is_adult = yes
			OR = {
				fertility < 0.1
				AND = {
					is_female = yes
					age >= marriage_female_fertility_cutoff_age_value
				}
			}
		}
		desc = MARRY_LOW_FERTILITY_REASON
	}

	modifier = { # A Recipient is VERY unlikely to agree to a marriage where the Secondary_recipient is a fertile woman and the Secondary_actor is an underage boy who won't become an adult before the woman is infertile
		add = -200
		
		scope:secondary_recipient = {
			is_female = yes
			is_adult = yes
			age < 45
			OR = {
				AND = {
					exists = scope:secondary_recipient.dynasty
					scope:secondary_recipient.dynasty = {
						OR = {
							any_dynasty_member = {
								count >= 2
							}
							dynasty_prestige_level > 1
						}
					}
				}
				is_ruler = yes
				is_close_or_extended_family_of = scope:recipient
				this = scope:recipient.player_heir
			}
		}
		scope:secondary_actor = {
			is_adult = no
		}
		marriage_fertile_age_reverse_value >= 43
		
		desc = MARRY_LOW_FERTILITY_REASON
	}

	modifier = { # A Recipient is VERY unlikely to agree to a marriage where the Secondary_actor is a woman and the Secondary_recipient is an underage boy who won't become an adult before the woman is infertile
		add = -200
		
		scope:secondary_actor = {
			is_female = yes
			is_adult = yes
		}
		scope:secondary_recipient = {
			is_adult = no
			OR = {
				AND = {
					exists = scope:secondary_recipient.dynasty
					scope:secondary_recipient.dynasty = {
						OR = {
							any_dynasty_member = {
								count >= 2
							}
							dynasty_prestige_level > 1
						}
					}
				}
				is_ruler = yes
				is_close_or_extended_family_of = scope:recipient
				this = scope:recipient.player_heir
			}
		}
		marriage_fertile_age_value >= 43
		
		desc = MARRY_LOW_FERTILITY_REASON
	}
	
	modifier = { # Unimportant courtier? Fair game, have them.
		add = 10

		scope:secondary_recipient = {
			is_adult = yes
			NOR = {
				dynasty = scope:recipient.dynasty
				is_close_or_extended_family_of = scope:recipient
				
				is_councillor_of = scope:recipient
				has_relation_lover = scope:recipient
				has_relation_soulmate = scope:recipient
				has_relation_friend = scope:recipient
				has_relation_best_friend = scope:recipient
				is_knight_of = scope:recipient
			}
		}
		desc = MARRY_UNIMPORTANT_COURTIER_REASON
	}

	modifier = {
		add = -10
		scope:secondary_recipient = {
			is_adult = yes
			OR = {		
				is_councillor_of = scope:recipient
				has_relation_lover = scope:recipient
				has_relation_soulmate = scope:recipient
				has_relation_friend = scope:recipient
				has_relation_best_friend = scope:recipient
				is_knight_of = scope:recipient
			}
		}
		desc = MARRY_CARES_ABOUT_COURTIER_REASON
	}

	modifier = {
		add = -25
		scope:secondary_recipient = {
			any_child = {
				is_child_of = scope:recipient
			}
			NOT = { this = scope:recipient }
		}
		desc = MARRY_PARENT_OF_CHILDREN_REASON
	}


	#########
	# LIEGE #
	#########
	modifier = { # A Recipient is more likely to agree to a marriage arranged by their liege.
		add = 40
		
		scope:recipient = {
			target_is_liege_or_above = scope:actor
			NOT = { target_is_liege_or_above = scope:secondary_actor }
			OR = {
				opinion = {
					target = scope:secondary_actor
					value > -40
				}
				NOT = { is_close_or_extended_family_of = scope:secondary_recipient }
			}
		}
		desc = LIEGE_REASON
	}

	modifier = { # A Recipient is more likely to agree to a marriage with their liege.
		add = 60
		
		scope:recipient = {
			target_is_liege_or_above = scope:secondary_actor
		}
		desc = LIEGE_REASON
	}

	#############
	# CLAIMANTS #
	#############
	modifier = { # Don't agree to marry off Claimants to inconsequential courtiers
		add = -50
		scope:secondary_recipient = {
			is_claimant = yes
			NOT = {
				any_claim = {
					holder = scope:recipient
				}
			}
			NOR = {
				this = scope:recipient
				is_close_or_extended_family_of = scope:recipient
			}
		}
		scope:secondary_actor = {
			is_landed = no
			NOT = { is_close_or_extended_family_of = scope:secondary_recipient }
		}
		desc = VALUABLE_CLAIMANT
	}
	
	modifier = { # Reluctance in marrying off Claimants to my own titles, if I am not related to the secondary_recipient. I'd rather keep the claimants under lock and key!
		add = -50
		scope:secondary_recipient = {
			any_claim = {
				holder = scope:recipient
			}
			NOT = { is_close_or_extended_family_of = scope:recipient }
		}
		desc = CLAIMANT_TO_MY_TITLES
	}

	#########
	# DREAD #
	#########
	#More likely to accept a preposition that doesn't include them if they fear you
	modifier = {
		add = intimidated_marriage_reason_value
		scope:recipient = {
			NOT = { this = scope:secondary_recipient }
			target_is_liege_or_above = scope:actor
			has_dread_level_towards = {
				target = scope:actor
				level = 1
			}
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = cowed_marriage_reason_value
		scope:recipient = {
			NOT = { this = scope:secondary_recipient }
			target_is_liege_or_above = scope:actor
			has_dread_level_towards = {
				target = scope:actor
				level = 2
			}
		}
		desc = COWED_REASON
	}
	
	modifier = {
		add = intimidated_marriage_external_reason_value
		scope:recipient = {
			NOT = { this = scope:secondary_recipient }
			NOT = { target_is_liege_or_above = scope:actor }
			has_dread_level_towards = {
				target = scope:actor
				level = 1
			}
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = cowed_marriage_external_reason_value
		scope:recipient = {
			NOT = { this = scope:secondary_recipient }
			NOT = { target_is_liege_or_above = scope:actor }
			has_dread_level_towards = {
				target = scope:actor
				level = 2
			}
		}
		desc = COWED_REASON
	}
	#Less likely to accept a marriage with someone they are scared off
	modifier = {
		add = -50
		scope:actor = scope:secondary_actor
		scope:recipient = {
			this = scope:secondary_recipient
			target_is_liege_or_above = scope:actor
			has_dread_level_towards = {
				target = scope:actor
				level = 1
			}
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = -75
		scope:actor = scope:secondary_actor
		scope:recipient = {
			this = scope:secondary_recipient
			target_is_liege_or_above = scope:actor
			has_dread_level_towards = {
				target = scope:actor
				level = 2
			}
		}
		desc = COWED_REASON
	}
	
	modifier = {
		add = -75
		scope:actor = scope:secondary_actor
		scope:recipient = {
			this = scope:secondary_recipient
			NOT = { target_is_liege_or_above = scope:actor }
			has_dread_level_towards = {
				target = scope:actor
				level = 1
			}
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = -150
		scope:actor = scope:secondary_actor
		scope:recipient = {
			this = scope:secondary_recipient
			NOT = { target_is_liege_or_above = scope:actor }
			has_dread_level_towards = {
				target = scope:actor
				level = 2
			}
		}
		desc = COWED_REASON
	}
	#More likely to accept a marriage proposal from someone they're scared of if they're not the secondary_actor
	modifier = {
		add = intimidated_marriage_not_secondary_reason_value
		NOT = { scope:actor = scope:secondary_actor }
		scope:recipient = {
			this = scope:secondary_recipient
			has_dread_level_towards = {
				target = scope:actor
				level = 1
			}
		}
		desc = INTIMIDATED_REASON
	}
	modifier = {
		add = cowed_marriage_not_secondary_reason_value
		NOT = { scope:actor = scope:secondary_actor }
		scope:recipient = {
			this = scope:secondary_recipient
			has_dread_level_towards = {
				target = scope:actor
				level = 2
			}
		}
		desc = COWED_REASON
	}

	opinion_modifier = { # Additional reluctance if recipient likes the close relative
		trigger = {
			NOT = { scope:recipient = scope:secondary_recipient }
			scope:recipient = {
				OR = {
					is_close_or_extended_family_of = scope:secondary_recipient
					has_relation_lover = scope:secondary_recipient
				}
				opinion = {
					target = scope:secondary_recipient
					value > 10
				}
			}
		}
	
		who = scope:recipient
		opinion_target = scope:secondary_recipient
		multiplier = -0.15
		desc = DEAR_TO_ME_REASON
	}

	### FAMILY CONSIDERATIONS
	modifier = {
		add = -1000
		scope:recipient.faith = {
			NOT = {
				faith_allows_marriage_consanguinity_trigger = { CHARACTER_1 = scope:secondary_recipient CHARACTER_2 = scope:secondary_actor }
			}
		}
		desc = MARRY_CONSANGUINITY_REASON
	}
	
	modifier = {
		trigger = {
			scope:secondary_recipient = {
				age > 20
				OR = {
					dynasty = scope:recipient.dynasty
					is_close_or_extended_family_of = scope:recipient
				}
			}
		}
		add = {
			value = scope:secondary_recipient.age
			subtract = 20
		}
		desc = MARRIAGE_DESPERATION
	}

	modifier = { #The actor's spouse has boosted the AI's willingness to marry the heir
		add = 75
		scope:actor = {
			exists = player_heir
			player_heir = scope:secondary_actor
		}
		scope:secondary_actor = {
			has_character_modifier = heir_easier_to_marry_off_modifier
		}
		desc = MARRIAGE_SPOUSE_COUNCILLOR_BOOST_HEIR
	}
	modifier = {
		add = 50
		scope:secondary_actor = {
			is_child_of = scope:actor
			has_character_modifier = child_easier_to_marry_off_modifier
		}
		desc = MARRIAGE_SPOUSE_COUNCILLOR_BOOST_CHILD
	}
}

divorce_character_ai_accept_modifier = {
	modifier = {
		add = -50
		desc = BASE_RELUCTANCE
	}
	
	modifier = { # Less likely if it's the recipient him/herself
		add = -100
		desc = MY_OWN_MARRIAGE_REASON
		scope:recipient = scope:secondary_recipient
	}
	
	opinion_modifier = { # A lot more likely if Recipient likes Actor
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		who = scope:recipient
		opinion_target = scope:actor
		multiplier = 1
		desc = AI_OPINION_REASON
	}
	
	opinion_modifier = { # Unlikely if Recipient likes Secondary Recipient
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		who = scope:recipient
		opinion_target = scope:secondary_recipient
		multiplier = -1
		desc = AI_OPINION_REASON
	}

	modifier = { # Very unlikely if the marriage is between kin and the religion has Divine Marriages
		add = -100
		desc = DIVORCE_HOLY
		scope:actor = {
			faith = {
				has_doctrine = tenet_divine_marriage
			}
		}
		scope:actor = {
			OR = {
				is_cousin_of = scope:secondary_recipient
				is_close_or_extended_family_of = scope:secondary_recipient
			}
		}
	}
		
	modifier = { # More likely if the spouse is openly incestuous
		add = 150
		desc = DIVORCE_OPENLY_INCESTUOUS_SPOUSE

		scope:secondary_recipient = {
			any_relation = {
				type = lover
				NOR = {
					this = scope:actor
					this = scope:recipient
				}
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_recipient	}
			}
		}
	}

	modifier = { # More likely if the spouse has been unfaithful (lover relation or std)
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		desc = DIVORCE_INFIDELITY
		add = {
			# Cheating isn't awful
			if = {
				limit = {
					trigger_if = {
						limit = {
							scope:secondary_recipient = { is_male = yes }
						}
						faith = { has_doctrine = doctrine_adultery_men_accepted }
					}
					trigger_else_if = {
						limit = {
							scope:secondary_recipient = { is_female = yes }
						}
						faith = { has_doctrine = doctrine_adultery_women_accepted }
					}
					# making the default behavior explicit if no other trigger_(else_)ifs are valid
					trigger_else = {
						always = yes
					}
				}
				value = 20
			}
			# Cheating is awful
			else = {
				value = 50
			}
		}
		scope:secondary_recipient = {
			exposed_cheating_on_spouse_trigger = { SPOUSE = scope:actor }
		}
	}

	modifier = { # Eunuchs
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		add = 100
		desc = DIVORCE_IMPOTENT_EUNUCH
		scope:secondary_recipient = {
			is_female = no
			has_trait = eunuch
		}
	}

	modifier = { # Very likely if the marriage has turned Polygamous and their faith doesn't support it
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		add = 100
		desc = DIVORCE_POLYGAMY
		scope:actor = {
			any_consort = { 
				is_alive = yes
				NOT = { this = scope:secondary_recipient } 
			}
			any_consort = { 
				this = scope:secondary_recipient  
			}
		}
		scope:secondary_recipient.faith = { NOT = {	has_doctrine = doctrine_polygamy }	}
	}
	
	
	modifier = { # Heathens
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		add = 100
		desc = DIVORCE_HEATHEN
		NOT = {
			scope:secondary_recipient.faith.religion = scope:actor.faith.religion
		}
	}
	
	modifier = { # Heretic
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		add = 10
		desc = DIVORCE_HERETIC
		scope:secondary_recipient.faith.religion = scope:actor.faith.religion
		scope:secondary_recipient = {
			NOT = {
				faith = scope:actor.faith
			}
		}
	}

	modifier = { # I am a Kinslayer
		add = -50
		desc = I_AM_A_KINSLAYER
		scope:actor = {
			has_trait_rank = {
				trait = kinslayer
				rank >= 1
			}
		}
	}
	
	modifier = { # They are a Kinslayer
		trigger = { NOT = { scope:recipient = scope:secondary_recipient } }
		add = 50
		desc = THEY_ARE_A_KINSLAYER
		scope:secondary_recipient = {
			has_trait_rank = {
				trait = kinslayer
				rank >= 1
			}
		}
	}

	modifier = { # Friend of the Head of Faith
		add = 50
		desc = WE_ARE_FRIENDS
		scope:recipient = {
			has_relation_friend = scope:actor
		}
	}
	
	modifier = { # Best Friend of the Head of Faith
		add = 150
		desc = WE_ARE_BEST_FRIENDS
		scope:recipient = {
			has_relation_best_friend = scope:actor
		}
	}
	
	modifier = { # Lover of the Head of Faith
		add = 25
		desc = WE_ARE_LOVERS
		scope:recipient = {
			has_relation_lover = scope:actor
		}
	}
	
	modifier = { # Rival of the Head of Faith
		add = -100
		desc = WE_ARE_RIVALS
		scope:recipient = {
			has_relation_rival = scope:actor
		}
	}
	
	modifier = { # Nemesis of the Head of Faith
		add = -500
		desc = WE_ARE_NEMESES
		scope:recipient = {
			has_relation_nemesis = scope:actor
		}
	}
}