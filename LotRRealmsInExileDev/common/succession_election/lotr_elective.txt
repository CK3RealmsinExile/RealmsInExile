# The entry should be named in the same way that the elective succession law is named to define it's voter's logic.
# Root scope - Elector, the character voting in the election.
# scope:candidate scope - Candidate, Character considered for the title.
# scope:title scope - Title, The title the nomination is for.
# scope:holder scope - Ruler, The ruler currently holding the title.
# scope:holder_candidate scope - Favored Candidate, The title owner's candidate.
# The voter will vote for the top score candidate calculated from this script.

aristocratic_elective = {
	elector_vote_strength = {
		base = 1

		modifier = { #Incumbant
			desc = tooltip_aristocratic_elective_is_incumbant
			add = 3
			this = scope:holder
		}
		modifier = { #Powerful Vassal
			desc = tooltip_aristocratic_elective_powerful_vassal
			add = 2
			NOT = { this = scope:holder }
			is_powerful_vassal = yes
			liege = scope:holder
		}
		modifier = { #Established Military
			desc = tooltip_aristocratic_elective_military_1
			add = 1
			max_military_strength > 2000
			max_military_strength <= 5000
		}
		modifier = { #Notable Military
			desc = tooltip_aristocratic_elective_military_2
			add = 2
			max_military_strength > 5000
			max_military_strength <= 10000
		}
		modifier = { # Significant Military
			desc = tooltip_aristocratic_elective_military_3
			add = 3
			max_military_strength > 10000
		}
		modifier = { #Fame - Illustrious
			desc = tooltip_aristocratic_elective_fame_3
			add = 1
			prestige_level = 3
		}
		modifier = { #Fame - Exalted among Men
			desc = tooltip_aristocratic_elective_fame_4
			add = 2
			prestige_level = 4
		}
		modifier = { #Fame - Living Legend
			desc = tooltip_aristocratic_elective_fame_5
			add = 3
			prestige_level = 5
		}
		modifier = { #Diplomacy Education - Charismatic Negotiator
			desc = tooltip_aristocratic_elective_diplo_education_3
			add = 1
			has_trait = education_diplomacy_3
		}
		modifier = { #Diplomacy Education - Grey Eminence
			desc = tooltip_aristocratic_elective_diplo_education_4
			add = 2
			has_trait = education_diplomacy_4
		}
		modifier = { #Councillor
			desc = tooltip_aristocratic_elective_is_councillor
			add = 1
			is_councillor_of = scope:holder
		}
		modifier = { #Historic Rhunic Dynasty
			desc = tooltip_aristocratic_elective_historic_rhunic_dynasty
			add = 1
			dynasty = { has_variable = historic_rhunic_dynasty }
		}		
	}
	
	electors = {
		add = holder
		add = {
			type = holder_direct_vassals
			limit = {
				highest_held_title_tier >= 1
			}				
		}
	}

	candidate_score = {
		base = 0
		######################	Elector self-voting pattern	##########################
		elector_self_voting_pattern_feudal_elective_modifier = yes

		##########################	Holder voting pattern	##########################
		holder_voting_pattern_feudal_elective_modifier = yes

		##########################	Elector voting patterns (circumstances)	##########################
		elector_voting_pattern_circumstances_feudal_elective_modifier = yes

		##########################	Elector voting patterns (prestige/piety)	##########################
		elector_voting_pattern_prestige_piety_feudal_elective_modifier = yes

		##########################	Elector voting patterns (traits)	##########################
		elector_voting_pattern_traits_feudal_elective_modifier = yes

		##########################	Elector voting patterns (opinion)	##########################
		elector_voting_pattern_opinion_feudal_elective_modifier = yes
	}
	
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_direct_vassals
			limit = {
				feudal_elective_potential_landed_candidate_trigger = yes
			}
		}
		add = {
			type = title_claimants
			limit = {
				feudal_elective_potential_landless_claimant_candidate_trigger = yes
			}
		}
		add = {
			type = holder_close_family
			limit = {
				is_close_family_of = scope:holder
				feudal_elective_potential_landless_dynastic_candidate_trigger = yes
			}
		}
	}
}

oligarchic_elective = {
	elector_vote_strength = {
		base = 1

		modifier = { #Development
			desc = tooltip_oligarchic_elective_development
			add = total_county_development
		}
		
		modifier = { #Master Merchants - Master Merchant dynast wealth 1
			desc = tooltip_oligarchic_merchant_dynast_wealth_1
			add = 5
			exists = dynasty
			dynasty = { 
				has_dynasty_modifier = master_merchants
				dynast = {
					monthly_character_income > 5
					monthly_character_income <= 10
				}
			}			
		}
		
		modifier = { #Master Merchants - Master Merchant dynast wealth 2
			desc = tooltip_oligarchic_merchant_dynast_wealth_2
			add = 10
			exists = dynasty
			dynasty = { 
				has_dynasty_modifier = master_merchants
				dynast = {
					monthly_character_income > 10
					monthly_character_income <= 20
				}
			}			
		}
		
		modifier = { #Master Merchants - Master Merchant dynast wealth 3
			desc = tooltip_oligarchic_merchant_dynast_wealth_3
			add = 15
			exists = dynasty
			dynasty = { 
				has_dynasty_modifier = master_merchants
				dynast = {
					monthly_character_income > 20
				}
			}			
		}
		
		modifier = { #Master Merchants - Master Merchant dynast fame 1
			desc = tooltip_oligarchic_merchant_dynast_fame_2
			add = 5
			exists = dynasty
			dynasty = { 
				has_dynasty_modifier = master_merchants
				dynast = {
					prestige_level = 2
				}
			}			
		}
		
		modifier = { #Master Merchants - Master Merchant dynast fame 2
			desc = tooltip_oligarchic_merchant_dynast_fame_3
			add = 10
			exists = dynasty
			dynasty = { 
				has_dynasty_modifier = master_merchants
				dynast = {
					prestige_level = 3
				}
			}			
		}
		
		modifier = { #Master Merchants - Master Merchant dynast fame 3
			desc = tooltip_oligarchic_merchant_dynast_fame_4
			add = 15
			exists = dynasty
			dynasty = { 
				has_dynasty_modifier = master_merchants
				dynast = {
					prestige_level >= 4
				}
			}			
		}
		
		modifier = { #Master Merchants - Master Merchant Stewardship
			desc = tooltip_oligarchic_merchant_dynast_stewardship
			add = stewardship
			exists = dynasty
			dynasty = {
				has_dynasty_modifier = master_merchants
			}			
		}
	}
	
	electors = {
		add = holder
		add = {
			type = title_dejure_vassals
			limit = {
				highest_held_title_tier >= 1
				target_is_liege_or_above = scope:holder
			}	
		}
	}

	candidate_score = {
		base = 0
		######################	Elector self-voting pattern	##########################
		elector_self_voting_pattern_feudal_elective_modifier = yes

		##########################	Holder voting pattern	##########################
		holder_voting_pattern_feudal_elective_modifier = yes

		##########################	Elector voting patterns (circumstances)	##########################
		elector_voting_pattern_circumstances_feudal_elective_modifier = yes

		##########################	Elector voting patterns (prestige/piety)	##########################
		elector_voting_pattern_prestige_piety_feudal_elective_modifier = yes

		##########################	Elector voting patterns (traits)	##########################
		elector_voting_pattern_traits_feudal_elective_modifier = yes

		##########################	Elector voting patterns (opinion)	##########################
		elector_voting_pattern_opinion_feudal_elective_modifier = yes
		
		###Dorwinion Factionalism - needs a fix
		modifier = { #Master Merchants hate Winelords
			desc = tooltip_oligarchic_merchants_hate_winelords
			add = -75
			NOT = { scope:candidate = root }
			exists = this.dynasty
			this.dynasty = {
				has_dynasty_modifier = master_merchants
			}
			exists = scope:candidate.dynasty
			scope:candidate.dynasty = {
				has_dynasty_modifier = winelords
			}
		}
		
		modifier = { #Winelords hate Master Merchants
			desc = tooltip_oligarchic_winelords_hate_merchants
			add = -75
			NOT = { scope:candidate = root }
			exists = this.dynasty
			this.dynasty = {
				has_dynasty_modifier = winelords
			}
			exists = scope:candidate.dynasty
			scope:candidate.dynasty = {
				has_dynasty_modifier = master_merchants
			}
		}
		
		modifier = { #Winelords like Winelords
			desc = tooltip_oligarchic_winelords_like_winelords
			add = 75
			NOT = { scope:candidate = root }
			exists = this.dynasty
			this.dynasty = {
				has_dynasty_modifier = winelords
			}
			exists = scope:candidate.dynasty
			scope:candidate.dynasty = {
				has_dynasty_modifier = winelords
			}
		}
		
		modifier = { #Master Merchants like Master Merchants
			desc = tooltip_oligarchic_merchants_like_merchants
			add = 75
			NOT = { scope:candidate = root }
			exists = root.dynasty
			this.dynasty = {
				has_dynasty_modifier = master_merchants
			}
			exists = scope:candidate.dynasty
			scope:candidate.dynasty = {
				has_dynasty_modifier = master_merchants
			}
		}
	}
	
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_direct_vassals
			limit = {
				feudal_elective_potential_landed_candidate_trigger = yes
			}
		}
		add = {
			type = title_dejure_vassals
			limit = {
				is_independent_ruler = yes #De jure vassals of the title who are not de facto vassals of the current ruler.
				feudal_elective_potential_landed_candidate_trigger = yes
			}
		}
		add = {
			type = title_claimants
			limit = {
				feudal_elective_potential_landless_claimant_candidate_trigger = yes
			}
		}
		add = {
			type = holder_close_or_extended_family
			limit = {
				is_close_family_of = scope:holder
				feudal_elective_potential_landless_dynastic_candidate_trigger = yes
			}
		}
	}
}

vassal_conclave_dynastic_elective = {
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_dynasty
			limit = {
				feudal_elective_potential_landless_dynastic_candidate_trigger = yes
			}
		}
	}

	electors = {
		add = holder
		add = { # De Jure Vassals in Realm
			type = title_dejure_vassals
			limit = {
				highest_held_title_tier >= tier_county
				target_is_liege_or_above = scope:holder
				NOT = { dynasty = scope:holder.dynasty }
			}	
		}
	}
	
	elector_vote_strength = {
		base = 0

		modifier = { #Ruler's limited vote strength is tied to their legitimacy
			desc = tooltip_vassal_conclave_dynastic_elective_votes_ruler_legitimacy
			this = scope:holder
			add = legitimacy_level
		}

		modifier = { #Ruler's limited vote strength is tied to their legitimacy
			desc = tooltip_vassal_conclave_dynastic_elective_votes_ruler_any_same_heritage_vassals
			this = scope:holder
			add = {
				value = legitimacy_level
				multiply = -1
				add = 1
			}
		}

		modifier = { #Each voter is the "representative" of all the people they rule over. The larger the domain, the more voting power he has.
			desc = tooltip_vassal_conclave_dynastic_elective_votes_vassal_total_development
			NOT = { this = scope:holder }
			is_landed = yes
			domain_size >= 1
			any_held_title = {
				tier = tier_county
				development_level > 0
				target_is_de_jure_liege_or_above = scope:title
			}
			add = {
				every_held_title = {
					limit = {
						tier = tier_county
						development_level > 0
						target_is_de_jure_liege_or_above = scope:title
					}
					add = {
						value = this.development_level
						min = 1
					}
				}
			}
		}

	}
	
	candidate_score = {
		base = 0
		######################	Elector self-voting pattern	##########################
		elector_self_voting_pattern_feudal_elective_modifier = yes

		##########################	Holder voting pattern	##########################
		holder_voting_pattern_feudal_elective_modifier = yes

		##########################	Elector voting patterns (circumstances)	##########################
		elector_voting_pattern_circumstances_feudal_elective_modifier = yes

		##########################	Elector voting patterns (prestige/piety)	##########################
		elector_voting_pattern_prestige_piety_feudal_elective_modifier = yes

		##########################	Elector voting patterns (traits)	##########################
		elector_voting_pattern_traits_feudal_elective_modifier = yes

		##########################	Elector voting patterns (opinion)	##########################
		elector_voting_pattern_opinion_feudal_elective_modifier = yes
	}
	
	
}

balan_lai_leader_elective = {
	#scope:candidate = Candidate, scope:title = Title, scope:holder_candidate = Candidate currently selected by ruler.
	candidates = {
		add = {
			type = holder_dynasty
			limit = { # Direct heir of the current holder of correct culture
				is_primary_heir_of = scope:holder
				OR = { # Kharadunaim or Kharadunaim-descendant
					culture = culture:kharadunaim
					culture = { any_parent_culture_or_above = { this = culture:kharadunaim } }
				}
			}
		}
		add = {
			type = title_claimants
			limit = { # Any landed Balan lai members of the correct culture (with claims - handled seperately)
				is_independent_ruler = yes
				has_trait = balan_lai_member
				OR = { # Kharadunaim or Kharadunaim-descendant
					culture = culture:kharadunaim
					culture = { any_parent_culture_or_above = { this = culture:kharadunaim } }
				}
			}
		}
	}

	electors = {
		add = holder
		add = {
			type = title_claimants
			limit = { # Any landed Balan lai members of the correct culture (with claims - handled seperately)
				is_independent_ruler = yes
				has_trait = balan_lai_member
				OR = { # Kharadunaim or Kharadunaim-descendant
					culture = culture:kharadunaim
					culture = { any_parent_culture_or_above = { this = culture:kharadunaim } }
				}
			}
		}
	}
	
	elector_vote_strength = { # All Balan lai members are equal
		base = 1
	}
	
	candidate_score = {
		base = 0
		######################	Elector self-voting pattern	##########################
		elector_self_voting_pattern_balan_lai_leader_elective_modifier = yes

		##########################	Holder voting pattern	##########################
		holder_voting_pattern_balan_lai_leader_elective_modifier = yes

		# ##########################	Elector voting patterns (prestige)	##########################
		elector_voting_pattern_prestige_balan_lai_leader_elective_modifier = yes

		# ##########################	Elector voting patterns (circumstances)	##########################
		elector_voting_pattern_circumstances_balan_lai_leader_elective_modifier = yes

		# ##########################	Elector voting patterns (traits)	##########################
		elector_voting_pattern_traits_balan_lai_leader_elective_modifier = yes

		# ##########################	Elector voting patterns (opinion)	##########################
		elector_voting_pattern_opinion_balan_lai_leader_elective_modifier = yes
	}
	
	
}
