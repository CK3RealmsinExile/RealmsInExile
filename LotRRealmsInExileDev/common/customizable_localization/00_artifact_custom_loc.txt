
#############################
# Basic quality descriptors #
#############################
ArtifactQuality  = {
	type = character

	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality > 75

				}
				AND = {
					exists = var:quality
					var:quality > 75
				}
			}
		}
		localization_key = quality_masterful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality > 50

				}
				AND = {
					exists = var:quality
					var:quality > 50
				}
			}
		}
		localization_key = quality_excellent
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality > 25

				}
				AND = {
					exists = var:quality
					var:quality > 25
				}
			}
		}
		localization_key = quality_very_fine
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality <= 25

				}
				AND = {
					exists = var:quality
					var:quality <= 25
				}
			}
		}
		localization_key = quality_fine
		fallback = yes
	}
}

ArtifactAdverbQuality  = {
	type = character

	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality > 75

				}
				AND = {
					exists = var:quality
					var:quality > 75
				}
			}
		}
		localization_key = adverb_quality_masterful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality > 40

				}
				AND = {
					exists = var:quality
					var:quality > 40
				}
			}
		}
		localization_key = adverb_quality_excellent
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:quality
					scope:quality <= 40

				}
				AND = {
					exists = var:quality
					var:quality <= 40
				}
			}
		}
		localization_key = adverb_quality_fine
		fallback = yes
	}
}

ArtifactWealth = {
	type = character

	random_valid = yes

	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 85
				}
				AND = {
					exists = var:wealth
					var:wealth >= 85
				}
			}
		}
		localization_key = wealth_extravagant
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 65
					scope:wealth < 85

				}
				AND = {
					exists = var:wealth
					var:wealth >= 65
					var:wealth < 85
				}
			}
		}
		localization_key = wealth_opulent
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 55
					scope:wealth < 65

				}
				AND = {
					exists = var:wealth
					var:wealth >= 55
					var:wealth < 65
				}
			}
		}
		localization_key = wealth_beautiful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 45
					scope:wealth < 55

				}
				AND = {
					exists = var:wealth
					var:wealth >= 45
					var:wealth < 55
				}
			}
		}
		localization_key = wealth_elegant
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 25
					scope:wealth < 45

				}
				AND = {
					exists = var:wealth
					var:wealth >= 25
					var:wealth < 45
				}
			}
		}
		localization_key = wealth_ornate
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 15
					scope:wealth < 25

				}
				AND = {
					exists = var:wealth
					var:wealth >= 15
					var:wealth < 25
				}
			}
		}
		localization_key = wealth_fancy
	}
	text = {
		localization_key = wealth_plain
		fallback = yes
	}
}

ArtifactArticleWealth = {
	type = character

	random_valid = yes

	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 85
				}
				AND = {
					exists = var:wealth
					var:wealth >= 85
				}
			}
		}
		localization_key = article_wealth_extravagant
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 65
					scope:wealth < 85

				}
				AND = {
					exists = var:wealth
					var:wealth >= 65
					var:wealth < 85
				}
			}
		}
		localization_key = article_wealth_opulent
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 55
					scope:wealth < 65

				}
				AND = {
					exists = var:wealth
					var:wealth >= 55
					var:wealth < 65
				}
			}
		}
		localization_key = article_wealth_beautiful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 45
					scope:wealth < 55

				}
				AND = {
					exists = var:wealth
					var:wealth >= 45
					var:wealth < 55
				}
			}
		}
		localization_key = article_wealth_elegant
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 25
					scope:wealth < 45

				}
				AND = {
					exists = var:wealth
					var:wealth >= 25
					var:wealth < 45
				}
			}
		}
		localization_key = article_wealth_ornate
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 15
					scope:wealth < 25

				}
				AND = {
					exists = var:wealth
					var:wealth >= 15
					var:wealth < 25
				}
			}
		}
		localization_key = article_wealth_fancy
	}
	text = {
		trigger = { always = no }
		localization_key = article_wealth_plain
		fallback = yes
	}
}

ArtifactAdverbWealth = {
	type = character

	random_valid = yes
	
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 85
				}
				AND = {
					exists = var:wealth
					var:wealth >= 85
				}
			}
		}
		localization_key = adverb_wealth_extravagant
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 85
				}
				AND = {
					exists = var:wealth
					var:wealth >= 85
				}
			}
		}
		localization_key = adverb_wealth_masterful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 75
					scope:wealth < 85

				}
				AND = {
					exists = var:wealth
					var:wealth >= 75
					var:wealth < 85
				}
			}
		}
		localization_key = adverb_wealth_opulent
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 65
					scope:wealth < 75

				}
				AND = {
					exists = var:wealth
					var:wealth >= 65
					var:wealth < 75
				}
			}
		}
		localization_key = adverb_wealth_wonderful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 55
					scope:wealth < 65

				}
				AND = {
					exists = var:wealth
					var:wealth >= 55
					var:wealth < 65
				}
			}
		}
		localization_key = adverb_wealth_elegant
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 55
					scope:wealth < 65

				}
				AND = {
					exists = var:wealth
					var:wealth >= 55
					var:wealth < 65
				}
			}
		}
		localization_key = adverb_wealth_lavish
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 45
					scope:wealth < 55

				}
				AND = {
					exists = var:wealth
					var:wealth >= 45
					var:wealth < 55
				}
			}
		}
		localization_key = adverb_wealth_beautiful
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 35
					scope:wealth < 45

				}
				AND = {
					exists = var:wealth
					var:wealth >= 35
					var:wealth < 45
				}
			}
		}
		localization_key = adverb_wealth_rich
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 25
					scope:wealth < 35

				}
				AND = {
					exists = var:wealth
					var:wealth >= 25
					var:wealth < 35
				}
			}
		}
		localization_key = adverb_wealth_ornate
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:wealth
					scope:wealth >= 25
					scope:wealth < 15

				}
				AND = {
					exists = var:wealth
					var:wealth >= 25
					var:wealth < 15
				}
			}
		}
		localization_key = adverb_wealth_fancy
	}
	text = {
		localization_key = adverb_wealth_plain
		fallback = yes
	}
}

ArtifactPrefixGeneric = {
	type = character

	random_valid = yes

	text = {
		trigger = {	exists = scope:owner }
		localization_key = artifact_name_prefix_owner_name
	}
	text = {
		trigger = {
			exists = scope:owner
			OR = { # If it's from an adventure it shouldn't say the owner's culture
				NOT = {
					exists = scope:owner.var:adventure_artifact_location
				}
				AND = {
					exists = scope:owner.var:adventure_artifact_location
					scope:owner = {
						any_sub_realm_barony = { this = scope:owner.var:adventure_artifact_location }
					}
				}
			}
		}
		localization_key = artifact_name_prefix_owner_culture
	}
	text = {
		trigger = {
			exists = scope:owner
			exists = scope:owner.var:adventure_artifact_location
			scope:owner = {
				NOT = {
					any_sub_realm_barony = { this = scope:owner.var:adventure_artifact_location }
				}
			}
		}
		localization_key = artifact_name_prefix_location_culture
	}
	text = {
		trigger = {
			exists = scope:owner
			exists = scope:owner.dynasty
			trigger_if = {
				limit = { exists = scope:inspiration }
				NOT = { scope:inspiration = { has_inspiration_type = adventure_inspiration } }
			}
		}
		localization_key = artifact_name_prefix_owner_dynasty
	}
	text = {
		trigger = {
			exists = scope:inspiration_owner
			trigger_if = { # If it's a throne it shouldn't say it's the inspiration owner's throne...!
				limit = {
					exists = scope:inspiration_owner.var:artifact_artisan_type
				}
				NOT = { scope:inspiration_owner.var:artifact_artisan_type = flag:artisan_type_throne }
			}
		}
		localization_key = artifact_name_prefix_inspiration_owner_name
	}
	text = {
		trigger = {
			exists = scope:quality
			scope:quality >= 70
		}
		localization_key = artifact_name_prefix_descriptor_high_quality
	}
	text = {
		trigger = {
			exists = scope:quality
			scope:quality < 70
			scope:quality >= 40
			trigger_if = { #It does not make sense to refer to these artifacts as "sturdy"
				limit = {
					exists = scope:newly_created_artifact
				}
				NOR = {
					scope:newly_created_artifact = { artifact_type = regalia }
					scope:newly_created_artifact = { artifact_type = brooch }
					scope:newly_created_artifact = { artifact_type = brooch_pedestal }
					scope:newly_created_artifact = { artifact_type = necklace }
					scope:newly_created_artifact = { artifact_type = necklace_pedestal }
					scope:newly_created_artifact = { artifact_type = wall_big }
					scope:newly_created_artifact = { artifact_type = tapestry }
					scope:newly_created_artifact = { artifact_type = helmet }
					scope:newly_created_artifact = { artifact_type = wall_small }
					scope:newly_created_artifact = { artifact_type = book }
					scope:newly_created_artifact = { artifact_type = elixir }
					scope:newly_created_artifact = { artifact_type = panacea }
					scope:newly_created_artifact = { artifact_type = miscellaneous }
				}
			}
		}
		localization_key = artifact_name_prefix_descriptor_medium_quality
	}
	text = {
		trigger = {
			exists = scope:quality
			scope:quality < 70
			scope:quality >= 40
			trigger_if = { #Version for non-"sturdy" artifacts
				limit = {
					exists = scope:newly_created_artifact
				}
				OR = {
					scope:newly_created_artifact = { artifact_type = regalia }
					scope:newly_created_artifact = { artifact_type = brooch }
					scope:newly_created_artifact = { artifact_type = brooch_pedestal }
					scope:newly_created_artifact = { artifact_type = necklace }
					scope:newly_created_artifact = { artifact_type = necklace_pedestal }
					scope:newly_created_artifact = { artifact_type = wall_big }
					scope:newly_created_artifact = { artifact_type = tapestry }
					scope:newly_created_artifact = { artifact_type = helmet }
					scope:newly_created_artifact = { artifact_type = wall_small }
					scope:newly_created_artifact = { artifact_type = book }
					scope:newly_created_artifact = { artifact_type = elixir }
					scope:newly_created_artifact = { artifact_type = panacea }
					scope:newly_created_artifact = { artifact_type = miscellaneous }
				}
			}
		}
		localization_key = artifact_name_prefix_descriptor_medium_alt_version_quality
		fallback = yes
	}
	text = {
		trigger = {
			exists = scope:quality
			scope:quality < 40
		}
		localization_key = artifact_name_prefix_descriptor_low_quality
	}

}

ArtifactPrefixGenericAfterCreation = {
	type = character

	random_valid = yes

	text = {
		localization_key = artifact_name_prefix_artifact_scope_owner_name
	}
	text = {
		localization_key = artifact_name_prefix_artifact_scope_owner_culture
	}
	text = {
		trigger = {
			exists = scope:owner.dynasty
		}
		localization_key = artifact_name_prefix_artifact_scope_owner_dynasty
	}
	text = {
		trigger = {
			exists = var:quality
			var:quality >= 70
		}
		localization_key = artifact_name_prefix_descriptor_high_quality
	}
	text = {
		trigger = {
			exists = var:quality
			var:quality < 70
			var:quality >= 40
			trigger_if = { #It does not make sense to refer to these artifacts as "sturdy"
				limit = {
					exists = scope:newly_created_artifact
				}
				NOR = {
					scope:newly_created_artifact = { artifact_type = regalia }
					scope:newly_created_artifact = { artifact_type = brooch }
					scope:newly_created_artifact = { artifact_type = brooch_pedestal }
					scope:newly_created_artifact = { artifact_type = necklace }
					scope:newly_created_artifact = { artifact_type = necklace_pedestal }
					scope:newly_created_artifact = { artifact_type = wall_big }
					scope:newly_created_artifact = { artifact_type = wall_small }
					scope:newly_created_artifact = { artifact_type = book }
					scope:newly_created_artifact = { artifact_type = elixir }
				}
			}
		}
		localization_key = artifact_name_prefix_descriptor_medium_quality
		fallback = yes
	}
	text = {
		trigger = {
			exists = var:quality
			var:quality < 70
			var:quality >= 40
			trigger_if = { #Version for non-"sturdy" artifacts
				limit = {
					exists = scope:newly_created_artifact
				}
				OR = {
					scope:newly_created_artifact = { artifact_type = regalia }
					scope:newly_created_artifact = { artifact_type = brooch }
					scope:newly_created_artifact = { artifact_type = brooch_pedestal }
					scope:newly_created_artifact = { artifact_type = necklace }
					scope:newly_created_artifact = { artifact_type = wall_big }
					scope:newly_created_artifact = { artifact_type = wall_small }
					scope:newly_created_artifact = { artifact_type = book }
					scope:newly_created_artifact = { artifact_type = elixir }
				}
			}
		}
		localization_key = artifact_name_prefix_descriptor_medium_alt_version_quality
	}
	text = {
		trigger = {
			exists = var:quality
			var:quality < 40
		}
		localization_key = artifact_name_prefix_descriptor_low_quality
	}

}

ArtifactType = {
	type = artifact

	text = {
		trigger = { artifact_type = helmet }
		localization_key = artifact_type_helmet
	}

	text = {
		trigger = { artifact_slot_type = primary_armament }
		localization_key = artifact_type_primary_armament
	}

	text = {
		trigger = { artifact_slot_type = armor }
		localization_key = artifact_type_armor
	}

	text = {
		trigger = { artifact_type = regalia }
		localization_key = artifact_type_regalia
	}

	text = {
		trigger = { artifact_type = miscellaneous }
		localization_key = artifact_type_trinket
	}

	text = {
		trigger = { artifact_type = wall_big }
		localization_key = artifact_type_wall_big
	}

	text = {
		trigger = { artifact_type = wall_small }
		localization_key = artifact_type_wall_small
	}

	text = {
		trigger = { artifact_type = throne }
		localization_key = artifact_type_throne
	}

	text = {
		trigger = { artifact_type = sculpture }
		localization_key = artifact_type_sculpture
	}

	text = {
		trigger = { artifact_type = book }
		localization_key = artifact_type_book
	}

	text = {
		trigger = { artifact_type = pedestal }
		localization_key = artifact_type_pedestal
	}

	text = {
		trigger = { artifact_type = elixir }
		localization_key = artifact_type_elixir
	}
}

ThisArtifactType = {
	type = character

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = helmet
			}
		}
		localization_key = artifact_type_helmet
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_slot_type = primary_armament
			}
		}
		localization_key = artifact_type_primary_armament
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_slot_type = armor
			}
		}
		localization_key = artifact_type_armor
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = regalia
			}
		}
		localization_key = artifact_type_regalia
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = miscellaneous
			}
		}
		localization_key = artifact_type_trinket
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = wall_big
			}
		}
		localization_key = artifact_type_wall_big
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = wall_small
			}
		}
		localization_key = artifact_type_wall_small
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = throne
			}
		}
		localization_key = artifact_type_throne
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = sculpture
			}
		}
		localization_key = artifact_type_sculpture
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = book
			}
		}
		localization_key = artifact_type_book
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = pedestal
			}
		}
		localization_key = artifact_type_pedestal
	}

	text = {
		trigger = {
			scope:this_artifact = {
				artifact_type = elixir
			}
		}
		localization_key = artifact_type_elixir
	}
}

InventoryCourtArtifact = {
	type = artifact

	text = {
		trigger = {
			OR = {
				artifact_slot_type = helmet
				artifact_slot_type = armor
				artifact_slot_type = primary_armament
				artifact_slot_type = regalia
				artifact_slot_type = miscellaneous
			}
		}
		localization_key = game_concept_inventory_artifact
	}

	text = {
		trigger = { always = yes }
		localization_key = game_concept_court_artifact
	}
}



###################################
# Specific Item Type Descriptions #
###################################

ArtifactSwordDecoration = {
	type = artifact

	text = {
		trigger = {
			AND = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
			}
		}
		localization_key = sword_decoration_hilt_and_blade
	}
	text = {
		trigger = {
			has_artifact_feature_group = blade_decoration
			NOT = { has_artifact_feature_group = hilt_decoration }
		}
		localization_key = sword_decoration_blade
	}
	text = {
		trigger = {
			has_artifact_feature_group = hilt_decoration
			NOT = { has_artifact_feature_group = blade_decoration }
		}
		localization_key = sword_decoration_hilt
	}
	text = {
		trigger = {
			NAND = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
			}
		}
		weight_multiplier = {
			base = 0.5
			modifier = {
				add = -1
				exists = scope:owner
				scope:owner = {
					has_trait = greedy
				}	
			}
			modifier = {
				add = 0.5
				exists = scope:owner
				scope:owner = {
					has_trait = humble
				}
			}
		}
		localization_key = sword_decoration_none_alt
	}
	text = {
		trigger = {
			NAND = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
			}
		}
		localization_key = sword_decoration_none
		fallback = yes
	}
}

ArtifactDaggerDecoration = {
	type = artifact

	text = {
		trigger = {
			AND = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
			}
		}
		localization_key = dagger_decoration_hilt_and_blade
	}
	text = {
		trigger = {
			NOT = { has_artifact_feature_group = hilt_decoration }
			has_artifact_feature_group = blade_decoration
		}
		localization_key = dagger_decoration_blade
	}
	text = {
		trigger = {
			NOT = { has_artifact_feature_group = blade_decoration }
			has_artifact_feature_group = hilt_decoration
		}
		localization_key = dagger_decoration_hilt
	}
	text = {
		trigger = {
			NAND = {
				has_artifact_feature_group = blade_decoration
				has_artifact_feature_group = hilt_decoration
			}
		}
		localization_key = dagger_decoration_none
		fallback = yes
	}
}

# Axes, Two-Handed Axes, Spears, Hammers, and Maces

ArtifactAxeHeadDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = head_decoration
		}
		localization_key = artifact_axe_head_decorated
	}
	text = {
		localization_key = artifact_axe_head_undecorated
	}
}

ArtifactAxeHaftDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = shaft_decoration
		}
		localization_key = artifact_axe_haft_decorated
	}
	text = {
		localization_key = artifact_axe_haft_undecorated
	}
}

ArtifactLongaxeHeadDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = head_decoration
		}
		localization_key = artifact_longaxe_head_decorated
	}
	text = {
		localization_key = artifact_longaxe_head_undecorated
	}
}

ArtifactLongaxeHaftDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = shaft_decoration
		}
		localization_key = artifact_longaxe_haft_decorated
	}
	text = {
		localization_key = artifact_longaxe_haft_undecorated
	}
}

ArtifactHammerHeadDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = head_decoration
		}
		localization_key = artifact_hammer_head_decorated
	}
	text = {
		localization_key = artifact_hammer_head_undecorated
	}
}

ArtifactHammerShaftDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = shaft_decoration
		}
		localization_key = artifact_hammer_shaft_decorated
	}
	text = {
		localization_key = artifact_hammer_shaft_undecorated
	}
}

ArtifactSpearHeadDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = head_decoration
		}
		localization_key = artifact_spear_head_decorated
	}
	text = {
		trigger = {
			has_artifact_feature_group = head_decoration
		}
		localization_key = artifact_spear_head_decorated_flanked
	}
	text = {
		localization_key = artifact_spear_head_undecorated
	}
}

ArtifactSpearShaftDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = shaft_decoration
		}
		localization_key = artifact_spear_shaft_decorated
	}
	text = { #This loc gives a bit more flavor to weight up for not having any decorations
		trigger = {
			NOT = { has_artifact_feature_group = shaft_decoration }
		}
		localization_key = artifact_spear_shaft_undecorated_alt
	}
	text = {
		localization_key = artifact_spear_shaft_undecorated
	}
}

ArtifactMaceHeadDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = head_decoration
		}
		localization_key = artifact_mace_head_decorated
	}
	text = {
		localization_key = artifact_mace_head_undecorated
	}
}

ArtifactMaceHandleDescription = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature_group = metal_handle_decoration
		}
		localization_key = artifact_mace_handle_decorated
	}
	text = {
		localization_key = artifact_mace_handle_undecorated
	}
}

ArtifactWeaponType = {
	type = character

	text = { #
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_axe
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_axe
				}
			}
		}
		localization_key = weapon_axe_inspiration_description
	}
	text = { #
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_longaxe
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_longaxe
				}
			}
		}
		localization_key = weapon_longaxe_inspiration_description
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_hammer
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_hammer
				}
			}
		}
		localization_key = weapon_hammer_inspiration_description
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_mace
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_mace
				}
			}
		}
		localization_key = weapon_mace_inspiration_description
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_spear
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_spear
				}
			}
		}
		localization_key = weapon_spear_inspiration_description
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_sword
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_sword
				}
			}
		}
		localization_key = weapon_sword_inspiration_description
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_dagger
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_dagger
				}
			}
		}
		localization_key = weapon_dagger_inspiration_description
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_bow
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_bow
				}
			}
		}
		localization_key = weapon_bow_inspiration_description
	}
}

ArtifactArmorArtifactName = {
	type = character

	random_valid = yes

	text = {
		trigger = {
			always = yes
		}
		localization_key = artifact_armor_name_basic
	}

	text = {
		trigger = {
			exists = scope:armor_type
			exists = culture
		}
		localization_key = artifact_armor_name_culture
	}

	text = {
		trigger = {
			exists = scope:armor_type
			exists = dynasty
		}
		localization_key = artifact_armor_name_dynasty
	}

	text = {
		trigger = {
			exists = scope:armor_type
		}
		localization_key = artifact_armor_name_descriptor
	}
}

ArtifactArmorTypeUppercase = {
	type = character

	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_mail
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_mail
				}
			}
		}
		localization_key = artifact_armor_mail_uppercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_plate
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_plate
				}
			}
		}
		localization_key = artifact_armor_plate_uppercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_scale
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_scale
				}
			}
		}
		localization_key = artifact_armor_scale_uppercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_lamellar
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_lamellar
				}
			}
		}
		localization_key = artifact_armor_lamellar_uppercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_laminar
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_laminar
				}
			}
		}
		localization_key = artifact_armor_laminar_uppercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_brigandine
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_brigandine
				}
			}
		}
		localization_key = artifact_armor_brigandine_uppercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_shield
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_shield
				}
			}
		}
		localization_key = artifact_armor_shield_uppercase
	}
}

ArtifactArmorTypeLowercase = {
	type = character

	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_mail
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_mail
				}
			}
		}
		localization_key = artifact_armor_mail_lowercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_plate
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_plate
				}
			}
		}
		localization_key = artifact_armor_plate_lowercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_scale
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_scale
				}
			}
		}
		localization_key = artifact_armor_scale_lowercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_lamellar
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_lamellar
				}
			}
		}
		localization_key = artifact_armor_lamellar_lowercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_laminar
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_laminar
				}
			}
		}
		localization_key = artifact_armor_laminar_lowercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_brigandine
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_brigandine
				}
			}
		}
		localization_key = artifact_armor_brigandine_lowercase
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:armor_type
					scope:armor_type = flag:armor_type_shield
				}
				AND = {
					exists = var:artifact_armor_type
					var:artifact_armor_type = flag:armor_type_shield
				}
			}
		}
		localization_key = artifact_armor_shield_lowercase
	}
}

ArtifactDecorationArmor = {
	type = artifact

	text = {
		trigger = {
			has_artifact_feature = armor_decoration_inlay_pattern
		}
		localization_key = feature_armor_decoration_inlay_pattern
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_painted_pattern
		}
		localization_key = feature_armor_decoration_painted_pattern
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_etched_pattern
		}
		localization_key = feature_armor_decoration_etched_pattern 
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_lines
		}
		localization_key = feature_armor_decoration_lines 
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_gold_plating
		}
		localization_key = feature_armor_decoration_gold_plating 
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_lining
		}
		localization_key = feature_armor_decoration_lining 
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_embossed
		}
		localization_key = feature_armor_decoration_embossed 
	}
	text = {
		trigger = {
			has_artifact_feature = armor_decoration_grouped_rivets
		}
		localization_key = feature_armor_decoration_grouped_rivets 
	}
}

ArtifactArmorDesc = {
	type = character

	text = {
		trigger = {
			scope:armor_type = flag:armor_type_mail
		}
		localization_key = artifact_armor_mail_description
	}
	text = {
		trigger = {
			scope:armor_type = flag:armor_type_plate
		}
		localization_key = artifact_armor_plate_description
	}
	text = {
		trigger = {
			scope:armor_type = flag:armor_type_scale
		}
		localization_key = artifact_armor_scale_description
	}
	text = {
		trigger = {
			scope:armor_type = flag:armor_type_lamellar
		}
		localization_key = artifact_armor_lamellar_description
	}
	text = {
		trigger = {
			scope:armor_type = flag:armor_type_laminar
		}
		localization_key = artifact_armor_laminar_description
	}
	text = {
		trigger = {
			scope:armor_type = flag:armor_type_brigandine
		}
		localization_key = artifact_armor_brigandine_description
	}

	text = {
		trigger = {
			always = no
		}
		fallback = yes
		localization_key = artifact_armor_fallback_description
	}
}

InspiredPersonQuality  = {
	type = character

	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weapon_inspiration
			}
			weapon_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weapon_inspiration
			}
			weapon_inspiration_average_skill_value >= medium_inspiration_skill
			weapon_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weapon_inspiration
			}
			weapon_inspiration_average_skill_value >= low_inspiration_skill
			weapon_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weapon_inspiration
			}
			weapon_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = armor_inspiration
			}
			armor_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = armor_inspiration
			}
			armor_inspiration_average_skill_value >= medium_inspiration_skill
			armor_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = armor_inspiration
			}
			armor_inspiration_average_skill_value >= low_inspiration_skill
			armor_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = armor_inspiration
			}
			armor_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = book_inspiration
			}
			book_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = book_inspiration
			}
			book_inspiration_average_skill_value >= medium_inspiration_skill
			book_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = book_inspiration
			}
			book_inspiration_average_skill_value >= low_inspiration_skill
			book_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = book_inspiration
			}
			book_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weaver_inspiration
			}
			weaver_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weaver_inspiration
			}
			weaver_inspiration_average_skill_value >= medium_inspiration_skill
			weaver_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weaver_inspiration
			}
			weaver_inspiration_average_skill_value >= low_inspiration_skill
			weaver_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = weaver_inspiration
			}
			weaver_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = adventure_inspiration
			}
			adventure_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = adventure_inspiration
			}
			adventure_inspiration_average_skill_value >= medium_inspiration_skill
			adventure_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = adventure_inspiration
			}
			adventure_inspiration_average_skill_value >= low_inspiration_skill
			adventure_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = adventure_inspiration
			}
			adventure_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = artisan_inspiration
			}
			artisan_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = artisan_inspiration
			}
			artisan_inspiration_average_skill_value >= medium_inspiration_skill
			artisan_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = artisan_inspiration
			}
			artisan_inspiration_average_skill_value >= low_inspiration_skill
			artisan_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = artisan_inspiration
			}
			artisan_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = smith_inspiration
			}
			smith_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = smith_inspiration
			}
			smith_inspiration_average_skill_value >= medium_inspiration_skill
			smith_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = smith_inspiration
			}
			smith_inspiration_average_skill_value >= low_inspiration_skill
			smith_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = smith_inspiration
			}
			smith_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = alchemy_inspiration
			}
			alchemy_inspiration_average_skill_value >= high_inspiration_skill
		}
		localization_key = legendary_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = alchemy_inspiration
			}
			alchemy_inspiration_average_skill_value >= medium_inspiration_skill
			alchemy_inspiration_average_skill_value < high_inspiration_skill
		}
		localization_key = masterful_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = alchemy_inspiration
			}
			alchemy_inspiration_average_skill_value >= low_inspiration_skill
			alchemy_inspiration_average_skill_value < medium_inspiration_skill
		}
		localization_key = competent_inspiration_skill
	}
	text = {
		trigger = {
			NOT = {
				has_character_flag = local_artisan
			}
			inspiration = {
				has_inspiration_type = alchemy_inspiration
			}
			alchemy_inspiration_average_skill_value < low_inspiration_skill
		}
		localization_key = decent_inspiration_skill
	}
	text = {
		trigger = {
			always = no
		}
		localization_key = SUPPRESS
		fallback = yes
	}
}

#Call this effect (set_up_horned_mythical_creature_effect = yes) in the line before creating the artifact that sports this custom_loc
#Remember to clear the var:horned_mythical_creature in your after = { ... }
HornedMythicalCreature = { #For Horn Trinkets
	type = character

	#Tarasque
	text = {
		trigger = { var:horned_mythical_creature ?= flag:tarasque }
		localization_key = horned_mythical_creature_tarasque
	}
	#Indrik
	text = {
		trigger = { var:horned_mythical_creature ?= flag:indrik }
		localization_key = horned_mythical_creature_indrik
	}
	#Ophiotaurus
	text = {
		trigger = { var:horned_mythical_creature ?= flag:ophiotaurus }
		localization_key = horned_mythical_creature_ophiotaurus
	}
	#Monocerus
	text = {
		trigger = { var:horned_mythical_creature ?= flag:monocerus }
		localization_key = horned_mythical_creature_monocerus
	}
	#Centicore
	text = {
		trigger = { var:horned_mythical_creature ?= flag:centicore }
		localization_key = horned_mythical_creature_centicore
	}
	#Erchitu
	text = {
		trigger = { var:horned_mythical_creature ?= flag:erchitu }
		localization_key = horned_mythical_creature_erchitu
	}
	#Hadhayosh
	text = {
		trigger = { var:horned_mythical_creature ?= flag:hadhayosh }
		localization_key = horned_mythical_creature_hadhayosh
	}
	#Bulgu
	text = {
		trigger = { var:horned_mythical_creature ?= flag:bulgu }
		localization_key = horned_mythical_creature_bulgu
	}
	#Catoblepas
	text = {
		trigger = { var:horned_mythical_creature ?= flag:catoblepas }
		localization_key = horned_mythical_creature_catoblepas
	}
	#Keewakw
	text = {
		trigger = { var:horned_mythical_creature ?= flag:keewakw }
		localization_key = horned_mythical_creature_keewakw
	}
}

#Call this effect (set_up_regional_mythical_creature_effect = yes) in the line before creating the artifact that sports this custom_loc
#Remember to clear the var:regional_mythical_creature_trinket in your after = { ... }
RegionalMythicalCreature = {
	type = character
	random_valid = yes

	#Britannia
	##Water Leper
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:water_leper 
			}
			trigger_else = {
				location = { geographical_region = world_europe_west_britannia }
			}
		}
		localization_key = mythical_creature_britannia_water_leper
	}

	##Fomorian
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:fomorian 
			}
			trigger_else = {
				location = { geographical_region = world_europe_west_britannia }
			}
		}
		localization_key = mythical_creature_britannia_fomorian
	}

	##Fachan
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:fachan 
			}
			trigger_else = {
				location = { geographical_region = world_europe_west_britannia }
			}
		}
		localization_key = mythical_creature_britannia_fachan
	}

	#West Europe
	##Cockatrice
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:cockatrice 
			}
			trigger_else = {
				# location = { geographical_region = world_europe_west } #LotR
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_europe_cockatrice
	}

	##Lou Carcolh - French snake-snail
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:lou_carcolh 
			}
			trigger_else = {
				# location = { geographical_region = world_europe_west } #LotR
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_europe_lou_carcolh
	}

	##Myrmecoleon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:myrmecoleon 
			}
			trigger_else = {
				# location = { geographical_region = world_europe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_europe_myrmecoleon
	}

	#North Europe
	##Antero Vipunen
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:antero_vipunen 
			}
			trigger_else = {
				location = { geographical_region = world_europe_north }
			}
		}
		localization_key = mythical_creature_north_europe_antero_vipunen
	}

	##Tjelvar
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:tjelvar 
			}
			trigger_else = {
				location = { geographical_region = world_europe_north }
			}
		}
		localization_key = mythical_creature_north_europe_tjelvar
	}

	##Fin
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:fin 
			}
			trigger_else = {
				location = { geographical_region = world_europe_north }
			}
		}
		localization_key = mythical_creature_north_europe_fin
	}

	##Gotland
	###Bysn - will-o'-the-wisp gnome
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:bysn 
			}
			trigger_else = {
				# location = { geographical_region = custom_gotland }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_north_europe_bysn
	}

	###Di Sma Undar Jordi - Gutnish goblins
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:disma 
			}
			trigger_else = {
				# location = { geographical_region = custom_gotland }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_north_europe_disma
	}

	#South Europe
	##Basilisk
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:basilisk 
			}
			trigger_else = {
				location = { geographical_region = world_europe_south }
			}
		}
		localization_key = mythical_creature_south_europe_basilisk
	}

	##L'hombri - Spanish fish-man
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:lhombri 
			}
			trigger_else = {
				location = { geographical_region = world_europe_south }
			}
		}
		localization_key = mythical_creature_south_europe_lhombri
	}

	##Argus Panoptes
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:argus_panoptes 
			}
			trigger_else = {
				location = { geographical_region = world_europe_south }
			}
		}
		localization_key = mythical_creature_south_europe_argus_panoptes
	}

	#East Europe
	##Baba Yaga
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:baba_yaga 
			}
			trigger_else = {
				location = { geographical_region = world_europe_east }
			}
		}
		localization_key = mythical_creature_east_europe_baba_yaga
	}

	##Psoglav - dog head, human torso, horse legs
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:psoglav 
			}
			trigger_else = {
				location = { geographical_region = world_europe_east }
			}
		}
		localization_key = mythical_creature_east_europe_psoglav
	}

	##Sirin
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:sirin 
			}
			trigger_else = {
				location = { geographical_region = world_europe_east }
			}
		}
		localization_key = mythical_creature_east_europe_sirin
	}

	#West Africa
	##Mami Wata - slithering, tempting woman-like creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:mami_wata 
			}
			trigger_else = {
				location = { geographical_region = world_africa_west }
			}
		}
		localization_key = mythical_creature_west_africa_mami_wata
	}

	##Dodo - large, devouring creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:dodo 
			}
			trigger_else = {
				location = { geographical_region = world_africa_west }
			}
		}
		localization_key = mythical_creature_west_africa_dodo
	}

	##Utelif - aquarian creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:utelif 
			}
			trigger_else = {
				location = { geographical_region = world_africa_west }
			}
		}
		localization_key = mythical_creature_west_africa_utelif
	}

	#East Africa
	##Liqimsa - large, devouring elephant creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:liqimsa 
			}
			trigger_else = {
				location = { geographical_region = world_africa_east }
			}
		}
		localization_key = mythical_creature_east_africa_liqimsa
	}

	##Bulgu - giant, horned creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:bulgu 
			}
			trigger_else = {
				location = { geographical_region = world_africa_east }
			}
		}
		localization_key = mythical_creature_east_africa_bulgu
	}

	##Opimachus - bird-like creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:opimachus 
			}
			trigger_else = {
				location = { geographical_region = world_africa_east }
			}
		}
		localization_key = mythical_creature_east_africa_opimachus
	}

	#Middle East
	##Manticore
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:manticore 
			}
			trigger_else = {
				location = { geographical_region = world_middle_east }
			}
		}
		localization_key = mythical_creature_middle_east_manticore
	}

	##Behemoth
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:behemoth 
			}
			trigger_else = {
				location = { geographical_region = world_middle_east }
			}
		}
		localization_key = mythical_creature_middle_east_behemoth
	}

	##Humbaba
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:humbaba 
			}
			trigger_else = {
				location = { geographical_region = world_middle_east }
			}
		}
		localization_key = mythical_creature_middle_east_humbaba
	}

	#India
	##Makara
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:makara 
			}
			trigger_else = {
				location = { geographical_region = world_india }
			}
		}
		localization_key = mythical_creature_india_makara
	}

	##Yali
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:yali 
			}
			trigger_else = {
				location = { geographical_region = world_india }
			}
		}
		localization_key = mythical_creature_india_yali
	}

	##Rakshasha
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:rakshasha 
			}
			trigger_else = {
				location = { geographical_region = world_india }
			}
		}
		localization_key = mythical_creature_india_rakshasha
	}

	#East Asia
	##Manaul - bird from the Philippines
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:manaul 
			}
			trigger_else = {
				location = { geographical_region = world_tibet }
			}
		}
		localization_key = mythical_creature_east_asia_manaul
	}

	##Bashee
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:bashee 
			}
			trigger_else = {
				location = { geographical_region = world_tibet }
			}
		}
		localization_key = mythical_creature_east_asia_bashee
	}

	##Camphruch - piscivore unicorn
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:camphruch 
			}
			trigger_else = {
				location = { geographical_region = world_tibet }
			}
		}
		localization_key = mythical_creature_east_asia_camphruch
	}

	#West Steppe
	##Aptah-Baga - legendary two-headed frog (from Sakha)
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:aptah_baga 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_steppe_aptah_baga
	}

	##Xullykuns - supernatural water spirit (from Sakha)
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:xullyukuns 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_steppe_xullykuns
	}

	##Zilant - dragon/wyvern-like creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:zilant 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_steppe_zilant
	}

	#East Steppe
	##Yelbeghen - seven-headed giant/dragon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:yelbeghen 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_east }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_east_steppe_yelbeghen
	}

	##Tepegöz - fleshy giant-like cyclops
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:tepegoz 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_east }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_east_steppe_tepegoz
	}

	##Archura - deceitful forest demon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:archura 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_east }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_east_steppe_archura
	}

	#Fallback
	##Aztec Cipactli
	text = {
		trigger = { var:regional_mythical_creature_trinket ?= flag:cipactli }
		localization_key = mythical_creature_other_cipactli
	}

	##Standard Dragon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:dragon 
			}
			# trigger_else_if = { #LotR
			# 	limit = {
			# 		NOR = {
			# 			location = {
			# 				geographical_region = world_europe_west_britannia
			# 				geographical_region = world_europe_west
			# 				geographical_region = world_europe_north
			# 				geographical_region = world_europe_south
			# 				geographical_region = world_europe_east
			# 				geographical_region = world_africa_west
			# 				geographical_region = world_africa_east
			# 				geographical_region = world_middle_east
			# 				geographical_region = world_india
			# 				geographical_region = world_tibet
			# 				geographical_region = world_steppe_west
			# 				geographical_region = world_steppe_east
			# 			}
			# 		}
			# 	}
			# }
			# trigger_else = { always = no }
			trigger_else = { always = yes } #LotR
		}
		localization_key = mythical_creature_other_dragon
	}
}

#Since some of the creatures consist of two words
#Call this effect (set_up_regional_mythical_creature_effect = yes) in the line before creating the artifact that sports this custom_loc
#Remember to clear the var:regional_mythical_creature_trinket in your after = { ... }
RegionalMythicalCreatureLower = {
	type = character
	random_valid = yes

	#Britannia
	##Water Leper
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:water_leper 
			}
			trigger_else = {
				location = { geographical_region = world_europe_west_britannia }
			}
		}
		localization_key = mythical_creature_britannia_water_leper_lower
	}

	##Fomorian
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:fomorian 
			}
			trigger_else = {
				location = { geographical_region = world_europe_west_britannia }
			}
		}
		localization_key = mythical_creature_britannia_fomorian_lower
	}

	##Fachan
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:fachan 
			}
			trigger_else = {
				location = { geographical_region = world_europe_west_britannia }
			}
		}
		localization_key = mythical_creature_britannia_fachan_lower
	}

	#West Europe
	##Cockatrice
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:cockatrice 
			}
			trigger_else = {
				# location = { geographical_region = world_europe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_europe_cockatrice_lower
	}

	##Lou Carcolh - French snake-snail
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:lou_carcolh 
			}
			trigger_else = {
				# location = { geographical_region = world_europe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_europe_lou_carcolh_lower
	}

	##Myrmecoleon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:myrmecoleon 
			}
			trigger_else = {
				# location = { geographical_region = world_europe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_europe_myrmecoleon_lower
	}

	#North Europe
	##Antero Vipunen, Tjelvar, Fin
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				OR = {
					var:regional_mythical_creature_trinket ?= flag:antero_vipunen
					var:regional_mythical_creature_trinket ?= flag:tjelvar
					var:regional_mythical_creature_trinket ?= flag:fin
				}
				var:regional_mythical_creature_trinket ?= flag:antero_vipunen 
			}
			trigger_else = {
				location = { geographical_region = world_europe_north }
			}
		}
		localization_key = mythical_creature_north_europe_giant_lower
	}

	##Gotland
	###Bysn - will-o'-the-wisp gnome guy
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:bysn 
			}
			trigger_else = {
				# location = { geographical_region = custom_gotland }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_north_europe_bysn_lower
	}

	###Di Sma Undar Jårdi - Gutnish goblins
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:disma 
			}
			trigger_else = {
				# location = { geographical_region = custom_gotland }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_north_europe_disma_lower
	}

	#South Europe
	#Basilisk
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:basilisk 
			}
			trigger_else = {
				location = { geographical_region = world_europe_south }
			}
		}
		localization_key = mythical_creature_south_europe_basilisk_lower
	}

	##L'hombri - Spanish fish-man
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:lhombri 
			}
			trigger_else = {
				location = { geographical_region = world_europe_south }
			}
		}
		localization_key = mythical_creature_south_europe_lhombri_lower
	}

	##Argus Panoptes
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:argus_panoptes 
			}
			trigger_else = {
				location = { geographical_region = world_europe_south }
			}
		}
		localization_key = mythical_creature_south_europe_argus_panoptes_lower
	}

	#East Europe
	##Baba Yaga
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:baba_yaga 
			}
			trigger_else = {
				location = { geographical_region = world_europe_east }
			}
		}
		localization_key = mythical_creature_east_europe_baba_yaga_lower
	}

	##Psoglav - dog head, human torso, horse legs
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:psoglav 
			}
			trigger_else = {
				location = { geographical_region = world_europe_east }
			}
		}
		localization_key = mythical_creature_east_europe_psoglav_lower
	}

	##Sirin
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:sirin 
			}
			trigger_else = {
				location = { geographical_region = world_europe_east }
			}
		}
		localization_key = mythical_creature_east_europe_sirin_lower
	}

	#West Africa
	##Mami Wata - slithering, tempting woman-like creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:mami_wata 
			}
			trigger_else = {
				location = { geographical_region = world_africa_west }
			}
		}
		localization_key = mythical_creature_west_africa_mami_wata_lower
	}

	##Dodo - large, devouring creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:dodo 
			}
			trigger_else = {
				location = { geographical_region = world_africa_west }
			}
		}
		localization_key = mythical_creature_west_africa_dodo_lower
	}

	##Utelif - aquarian creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:utelif 
			}
			trigger_else = {
				location = { geographical_region = world_africa_west }
			}
		}
		localization_key = mythical_creature_west_africa_utelif_lower
	}

	#East Africa
	##Liqimsa - large, devouring elephant creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:liqimsa 
			}
			trigger_else = {
				location = { geographical_region = world_africa_east }
			}
		}
		localization_key = mythical_creature_east_africa_liqimsa_lower
	}

	##Bulgu - giant, horned creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:bulgu 
			}
			trigger_else = {
				location = { geographical_region = world_africa_east }
			}
		}
		localization_key = mythical_creature_east_africa_bulgu_lower
	}

	##Opimachus - bird-like creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:opimachus 
			}
			trigger_else = {
				location = { geographical_region = world_africa_east }
			}
		}
		localization_key = mythical_creature_east_africa_opimachus_lower
	}

	#Middle East
	##Manticore
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:manticore 
			}
			trigger_else = {
				location = { geographical_region = world_middle_east }
			}
		}
		localization_key = mythical_creature_middle_east_manticore_lower
	}

	##Behemoth
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:behemoth 
			}
			trigger_else = {
				location = { geographical_region = world_middle_east }
			}
		}
		localization_key = mythical_creature_middle_east_behemoth_lower
	}

	##Humbaba
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:humbaba 
			}
			trigger_else = {
				location = { geographical_region = world_middle_east }
			}
		}
		localization_key = mythical_creature_middle_east_humbaba_lower
	}

	#India
	##Makara
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:makara 
			}
			trigger_else = {
				location = { geographical_region = world_india }
			}
		}
		localization_key = mythical_creature_india_makara_lower
	}

	##Yali
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:yali 
			}
			trigger_else = {
				location = { geographical_region = world_india }
			}
		}
		localization_key = mythical_creature_india_yali_lower
	}

	##Rakshasha
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:rakshasha 
			}
			trigger_else = {
				location = { geographical_region = world_india }
			}
		}
		localization_key = mythical_creature_india_rakshasha_lower
	}

	#East Asia
	##Manaul
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:manaul 
			}
			trigger_else = {
				location = { geographical_region = world_tibet }
			}
		}
		localization_key = mythical_creature_east_asia_manaul_lower
	}

	##Bashee
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:bashee 
			}
			trigger_else = {
				location = { geographical_region = world_tibet }
			}
		}
		localization_key = mythical_creature_east_asia_bashee_lower
	}

	##Camphruch
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:camphruch 
			}
			trigger_else = {
				location = { geographical_region = world_tibet }
			}
		}
		localization_key = mythical_creature_east_asia_camphruch_lower
	}

	#West Steppe
	##Aptah-Baga - legendary two-headed frog (from Sakha)
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:aptah_baga 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_steppe_aptah_baga_lower
	}

	##Xullykuns - supernatural water spirit (from Sakha)
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:xullyukuns 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_steppe_xullykuns_lower
	}

	##Zilant - dragon/wyvern-like creature
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:zilant 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_west }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_west_steppe_zilant_lower
	}

	#East Steppe
	##Yelbeghen - seven-headed giant/dragon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:yelbeghen 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_east }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_east_steppe_yelbeghen_lower
	}

	##Tepegöz - fleshy giant-like cyclops
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:tepegoz 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_east }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_east_steppe_tepegoz_lower
	}

	##Archura - deceitful forest demon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:archura 
			}
			trigger_else = {
				# location = { geographical_region = world_steppe_east }
				always = no #LotR
			}
		}
		localization_key = mythical_creature_east_steppe_archura_lower
	}

	#Fallback
	##Aztec Cipactli
	text = {
		trigger = { var:regional_mythical_creature_trinket ?= flag:cipactli }
		localization_key = mythical_creature_other_cipactli_lower
	}

	##Standard Dragon
	text = {
		trigger = {
			trigger_if = {
				limit = { exists = var:regional_mythical_creature_trinket }
				var:regional_mythical_creature_trinket ?= flag:dragon 
			}
			#Our fallback option
			# trigger_else_if = {
			# 	limit = {
			# 		NOR = {
			# 			location = {
			# 				geographical_region = world_europe_west_britannia
			# 				geographical_region = world_europe_west
			# 				geographical_region = world_europe_north
			# 				geographical_region = world_europe_south
			# 				geographical_region = world_europe_east
			# 				geographical_region = world_africa_west
			# 				geographical_region = world_africa_east
			# 				geographical_region = world_middle_east
			# 				geographical_region = world_india
			# 				geographical_region = world_tibet
			# 				geographical_region = world_steppe_west
			# 				geographical_region = world_steppe_east
			# 			}
			# 		}
			# 	}
			# }
			#But don't override any of the other two
			# trigger_else = { always = no } #LotR
			trigger_else = { always = yes }
		}
		localization_key = mythical_creature_other_dragon_lower
	}

}

#Call this effect (set_up_trinket_adjective_effect = yes) in the line before creating the trinket that sports this custom_loc
#Remember to clear the var:trinket_adjective_followup in your after = { ... }
TrinketLookAdjective = {
	type = character
	random_valid = yes

	#Adorned
	text = {
		trigger = { var:trinket_adjective_followup ?= flag:adorned }
		localization_key = trinket_look_adorned
	}
	#Decorated
	text = {
		trigger = { var:trinket_adjective_followup ?= flag:decorated }
		localization_key = trinket_look_decorated
	}
	#Embellished
	text = {
		trigger = { var:trinket_adjective_followup ?= flag:embellished }
		localization_key = trinket_look_embellished
	}
	#Ornamented
	text = {
		trigger = { var:trinket_adjective_followup ?= flag:ornamented }
		localization_key = trinket_look_ornamented
	}
}

TrinketLookAdverbFollowup = {
	type = character
	random_valid = yes

	#Beautifully
	text = {
		localization_key = trinket_look_adverb_beautifully
	}
	#Carefully
	text = {
		localization_key = trinket_look_adverb_carefully
	}
	#Curiously
	text = {
		localization_key = trinket_look_adverb_curiously
	}
	#Delightfully
	text = {
		localization_key = trinket_look_adverb_delightfully
	}
	#Elegantly
	text = {
		localization_key = trinket_look_adverb_elegantly
	}
	#Intricately
	text = {
		localization_key = trinket_look_adverb_intricately
	}
	#Intriguingly
	text = {
		localization_key = trinket_look_adverb_intriguingly
	}
	#Mysteriously
	text = {
		localization_key = trinket_look_adverb_mysteriously
	}
}

ArtifactWeaponBaseType = {
	type = character

	text = { #
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_axe
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_axe
				}
			}
		}
		localization_key = weapon_axe_inspiration_name
	}
	text = { #
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_longaxe
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_longaxe
				}
			}
		}
		localization_key = weapon_longaxe_inspiration_name
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_hammer
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_hammer
				}
			}
		}
		localization_key = weapon_hammer_inspiration_name
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_mace
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_mace
				}
			}
		}
		localization_key = weapon_mace_inspiration_name
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_spear
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_spear
				}
			}
		}
		localization_key = weapon_spear_inspiration_name
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_sword
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_sword
				}
			}
		}
		localization_key = weapon_sword_inspiration_name
	}
	text = {
		trigger = {
			OR = {
				AND = {
					exists = scope:weapon_type
					scope:weapon_type = flag:artifact_weapon_type_dagger
				}
				AND = {
					exists = var:artifact_weapon_type
					var:artifact_weapon_type = flag:artifact_weapon_type_dagger
				}
			}
		}
		localization_key = weapon_dagger_inspiration_name
	}
}


artifact_relic_desc = {
	type = character

	random_valid = yes
	
	text = {
		localization_key = relic_name_afterlife
	}

	text = {
		localization_key = relic_name_highgod
	}

	text = {
		localization_key = relic_name_highgod_alternate
	}

	text = {
		localization_key = relic_name_health

	}

	text = {
		localization_key = relic_name_symbol
	}

	text = {
		localization_key = relic_name_text
	}
}


ArtifactBaseWeaponType = {
	type = artifact

	text = { #
		trigger = { artifact_type = axe }
		localization_key = weapon_axe_inspiration_name
	}
	text = { #
		trigger = { artifact_type = longaxe }
		localization_key = weapon_longaxe_inspiration_name
	}
	text = {
		trigger = { artifact_type = hammer }
		localization_key = weapon_hammer_inspiration_name
	}
	text = {
		trigger = { artifact_type = mace }
		localization_key = weapon_mace_inspiration_name
	}
	text = {
		trigger = { artifact_type = spear }
		localization_key = weapon_spear_inspiration_name
	}
	text = {
		trigger = { artifact_type = dagger }
		localization_key = weapon_dagger_inspiration_name
	}
	text = {
		trigger = { artifact_type = sword }
		fallback = yes
		localization_key = weapon_sword_inspiration_name
	}
}

#Generates artifact description out of Marco Polo quotes
ArtifactMarcoPoloIntro = {
	type = artifact
	random_valid = yes
	text = {
		localization_key = marco_polo_quote_intro_1
	}
	text = {
		localization_key = marco_polo_quote_intro_2
	}

}

ArtifactMarcoPoloDesc = {
	type = artifact
	random_valid = yes
	text = {
		localization_key = marco_polo_quote_desc_1
	}
	text = {
		localization_key = marco_polo_quote_desc_2
	}
	text = {
		localization_key = marco_polo_quote_desc_3
	}
	text = {
		localization_key = marco_polo_quote_desc_4
	}
	text = {
		localization_key = marco_polo_quote_desc_5
	}

}

ArtifactMarcoPoloEnd = {
	type = artifact
	random_valid = yes
	text = {
		localization_key = marco_polo_quote_end_1
	}
	text = {
		localization_key = marco_polo_quote_end_2
	}
}
