### DWARVEN EFFECTS ###

# Save my cultures' dwarf-father as scope:cultural_dorfdad
scope_my_culture_dorfdad_effect = {
	if = { # Durin - Longbeards
		limit = { culture = { has_cultural_pillar = heritage_longbeard } }
		character:lineofdurin1 = { save_scope_as = cultural_dorfdad  }
	}
	else_if = { # Uri - Firebeards
		limit = { culture = { has_cultural_pillar = heritage_firebeard } }
		character:lineofuri0 = { save_scope_as = cultural_dorfdad  }
	}
	else_if = { # Dwalin - Broadbeams
		limit = { culture = { has_cultural_pillar = heritage_broadbeam } }
		character:lineofdwalin0 = { save_scope_as = cultural_dorfdad  }
	}
	else_if = { # Thrar - Blacklocks
		limit = { culture = { has_cultural_pillar = heritage_blacklock } }
		character:lineofthrar1 = { save_scope_as = cultural_dorfdad  }
	}
	else_if = { # Sindri - Ironfists
		limit = { culture = { has_cultural_pillar = heritage_ironfist } }
		character:lineofsindri0 = { save_scope_as = cultural_dorfdad  }
	}
	else_if = { # Thulin - Stiffbeards
		limit = { culture = { has_cultural_pillar = heritage_stiffbeard } }
		character:lineofthulin0 = { save_scope_as = cultural_dorfdad  }
	}
	else_if = { # Bavor - Stonefoots
		limit = { culture = { has_cultural_pillar = heritage_stonefoot } }
		character:lineofbavor0 = { save_scope_as = cultural_dorfdad  }
	}
	else = { # Fallback
		character:lineofdurin1 = { save_scope_as = cultural_dorfdad  }
	}
}

### Reincarnation Effects

# Turn a newborn into a reincarnation.
# Will only be revealed upon turning 16, so if they die prematurely we can pretend they never existed
create_possible_dorfdad_effect = {
	# Save self for event scopes
	save_scope_as = new_dorfdad
	# Save first incarnation for event scopes
	if = {
		limit = { dynasty = { exists = var:dorfdad } }
		dynasty.var:dorfdad = { save_scope_as = my_dorfdad }
		# Copy DNA
		copy_inheritable_appearance_from = scope:my_dorfdad
	}
	else = {
		debug_log = "Couldnt find original dorfdad variable!"
	}
#	# Save the kid as our newest potential reincarnation - Will be confirmed upon adulthood
#	dynasty = {
#		set_variable = {
#			name = current_reincarnation
#			value = root
#		}
#	}
	# Dont want him to die as a baby
	if = {
		limit = {
			has_trait = sickly
		}
		remove_trait = sickly
	}
	if = {
		limit = {
			age <= 2
		}
		# Gain "resemblance of dwarf father" modifier in a few years (life expectancy)
		trigger_event = {
			id = dwarven.5002
			years = { 5 12 }
		}
	}
}

become_dorfdad_effect = {
	# Save first incarnation for event scopes
	dynasty.var:dorfdad ?= { save_scope_as = my_dorfdad }
	# Save self for event scopes
	save_scope_as = new_dorfdad
	# Confirm as Reincarnation
#	dynasty = {
#		set_variable = {
#			name = current_reincarnation
#			value = root
#		}
#	}
	# Reincarnation Counter
	dynasty = {
		change_variable = {
			name = dorfdad_incarnations
			add = 1
		}
	}
	# Get the Name
	change_first_name = { template_character = scope:my_dorfdad }
	# Get the trait
	add_trait = dwarf_father
	# Remove the modifiers
	remove_character_modifier ?= reflection_of_durin
	remove_character_modifier ?= reflection_of_bavor
	remove_character_modifier ?= reflection_of_dwalin
	remove_character_modifier ?= reflection_of_sindri
	remove_character_modifier ?= reflection_of_thrar
	remove_character_modifier ?= reflection_of_thulin
	remove_character_modifier ?= reflection_of_uri
	# Education upgrade
	if = { # Education Upgrade
		limit = {
			OR = {
				has_level_1_education_trait_trigger = yes
				has_level_2_education_trait_trigger = yes
			}
		}
		if = {
			limit = { has_trait = education_diplomacy }
			buff_dorfdad_education_effect = { TYPE = diplomacy }
		}
		else_if = {
			limit = { has_trait = education_martial }
			buff_dorfdad_education_effect = { TYPE = martial }
		}
		else_if = {
			limit = { has_trait = education_stewardship }
			buff_dorfdad_education_effect = { TYPE = stewardship }
		}
		else_if = {
			limit = { has_trait = education_intrigue }
			buff_dorfdad_education_effect = { TYPE = intrigue }
		}
		else_if = {
			limit = { has_trait = education_learning }
			buff_dorfdad_education_effect = { TYPE = learning }
		}
	}
	# Remove old personality traits
	hidden_effect = { lotr_remove_personality_effect = yes }
	# Add personality traits (Based on scope:my_dorfdad)
	dorfdad_personality_effect = yes
	# Add scripted hairstyle + beard!
	if = {
		limit = {
			dynasty = dynasty:dynasty_durin
		}
		add_character_flag = scripted_appearance_durin
	}
	else_if = {
		limit = {
			dynasty = dynasty:dynasty_bavor
		}
		add_character_flag = scripted_appearance_bavor
	}
	else_if = {
		limit = {
			dynasty = dynasty:dynasty_dwalin
		}
		add_character_flag = scripted_appearance_dwalin
	}
	else_if = {
		limit = {
			dynasty = dynasty:dynasty_sindri
		}
		add_character_flag = scripted_appearance_sindri
	}
	else_if = {
		limit = {
			dynasty = dynasty:dynasty_thrar
		}
		add_character_flag = scripted_appearance_thrar
	}
	else_if = {
		limit = {
			dynasty = dynasty:dynasty_thulin
		}
		add_character_flag = scripted_appearance_thulin
	}
	else_if = {
		limit = {
			dynasty = dynasty:dynasty_uri
		}
		add_character_flag = scripted_appearance_uri
	}
}

buff_dorfdad_education_effect = {
	hidden_effect = {
		remove_trait = education_$TYPE$_1
		remove_trait = education_$TYPE$_2
	}
	add_trait_force_tooltip = education_$TYPE$_3
}

lotr_remove_personality_effect = {
	# Personality traits
	remove_trait = brave
	remove_trait = craven
	remove_trait = calm
	remove_trait = wrathful
	remove_trait = chaste
	remove_trait = lustful
	remove_trait = content
	remove_trait = ambitious
	remove_trait = diligent
	remove_trait = lazy
	remove_trait = forgiving
	remove_trait = vengeful
	remove_trait = generous
	remove_trait = greedy
	remove_trait = gregarious
	remove_trait = shy
	remove_trait = honest
	remove_trait = deceitful
	remove_trait = humble
	remove_trait = arrogant
	remove_trait = just
	remove_trait = arbitrary
	remove_trait = patient
	remove_trait = impatient
	remove_trait = temperate
	remove_trait = gluttonous
	remove_trait = trusting
	remove_trait = paranoid
	remove_trait = zealous
	remove_trait = cynical
	remove_trait = compassionate
	remove_trait = callous
	remove_trait = sadistic
	remove_trait = fickle
	remove_trait = stubborn
	remove_trait = eccentric
	# Childhood traits
	remove_trait = bossy
	remove_trait = charming
	remove_trait = curious
	remove_trait = pensive
	remove_trait = rowdy
}

dorfdad_personality_effect = { # Add personality traits (based on scope:my_dorfdad)
	if = {
		limit = { scope:my_dorfdad = { has_trait = brave } }
		add_trait = brave
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = craven } }
		add_trait = craven
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = calm } }
		add_trait = calm
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = wrathful } }
		add_trait = wrathful
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = chaste } }
		add_trait = chaste
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = lustful } }
		add_trait = lustful
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = content } }
		add_trait = content
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = ambitious } }
		add_trait = ambitious
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = diligent } }
		add_trait = diligent
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = lazy } }
		add_trait = lazy
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = forgiving } }
		add_trait = forgiving
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = vengeful } }
		add_trait = vengeful
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = generous } }
		add_trait = generous
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = greedy } }
		add_trait = greedy
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = gregarious } }
		add_trait = gregarious
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = shy } }
		add_trait = shy
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = honest } }
		add_trait = honest
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = deceitful } }
		add_trait = deceitful
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = humble } }
		add_trait = humble
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = arrogant } }
		add_trait = arrogant
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = just } }
		add_trait = just
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = arbitrary } }
		add_trait = arbitrary
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = patient } }
		add_trait = patient
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = impatient } }
		add_trait = impatient
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = temperate } }
		add_trait = temperate
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = gluttonous } }
		add_trait = gluttonous
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = trusting } }
		add_trait = trusting
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = paranoid } }
		add_trait = paranoid
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = zealous } }
		add_trait = zealous
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = cynical } }
		add_trait = cynical
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = compassionate } }
		add_trait = compassionate
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = callous } }
		add_trait = callous
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = sadistic } }
		add_trait = sadistic
	}
	if = {
		limit = { scope:my_dorfdad = { has_trait = fickle } }
		add_trait = fickle
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = stubborn } }
		add_trait = stubborn
	}
	else_if = {
		limit = { scope:my_dorfdad = { has_trait = eccentric } }
		add_trait = eccentric
	}
}

dorfdad_one_personality_trait_effect = { # Gives a potential reincarnation kid one of their dwarven fathers traits
	random_list = {
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = brave }
			}
			remove_trait = craven
			add_trait = brave
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = craven }
			}
			remove_trait = brave
			add_trait = craven
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = calm }
			}
			remove_trait = wrathful
			add_trait = calm
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = wrathful }
			}
			remove_trait = calm
			add_trait = wrathful
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = chaste }
			}
			remove_trait = lustful
			add_trait = chaste
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = lustful }
			}
			remove_trait = chaste
			add_trait = lustful
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = content }
			}
			remove_trait = ambitious
			add_trait = content
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = ambitious }
			}
			remove_trait = content
			add_trait = ambitious
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = diligent }
			}
			remove_trait = lazy
			add_trait = diligent
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = lazy }
			}
			remove_trait = diligent
			add_trait = lazy
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = forgiving }
			}
			remove_trait = vengeful
			add_trait = forgiving
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = vengeful }
			}
			remove_trait = forgiving
			add_trait = vengeful
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = generous }
			}
			remove_trait = greedy
			add_trait = generous
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = greedy }
			}
			remove_trait = generous
			add_trait = greedy
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = gregarious }
			}
			remove_trait = shy
			add_trait = gregarious
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = shy }
			}
			remove_trait = gregarious
			add_trait = shy
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = honest }
			}
			remove_trait = deceitful
			add_trait = honest
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = deceitful }
			}
			remove_trait = honest
			add_trait = deceitful
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = humble }
			}
			remove_trait = arrogant
			add_trait = humble
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = arrogant }
			}
			remove_trait = humble
			add_trait = arrogant
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = just }
			}
			remove_trait = arbitrary
			add_trait = just
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = arbitrary }
			}
			remove_trait = just
			add_trait = arbitrary
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = patient }
			}
			remove_trait = impatient
			add_trait = patient
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = impatient }
			}
			remove_trait = patient
			add_trait = impatient
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = temperate }
			}
			remove_trait = gluttonous
			add_trait = temperate
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = gluttonous }
			}
			remove_trait = temperate
			add_trait = gluttonous
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = trusting }
			}
			remove_trait = paranoid
			add_trait = trusting
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = paranoid }
			}
			remove_trait = trusting
			add_trait = paranoid
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = zealous }
			}
			remove_trait = cynical
			add_trait = zealous
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = cynical }
			}
			remove_trait = zealous
			add_trait = cynical
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = compassionate }
			}
			remove_trait = callous
			remove_trait = sadistic
			add_trait = compassionate
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = callous }
			}
			remove_trait = sadistic
			remove_trait = compassionate
			add_trait = callous
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = sadistic }
			}
			remove_trait = callous
			remove_trait = compassionate
			add_trait = sadistic
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = fickle }
			}
			remove_trait = stubborn
			remove_trait = eccentric
			add_trait = fickle
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = stubborn }
			}
			remove_trait = fickle
			remove_trait = eccentric
			add_trait = stubborn
		}
		1 = {
			trigger = {
				scope:my_dorfdad = { has_trait = eccentric }
			}
			remove_trait = fickle
			remove_trait = stubborn
			add_trait = eccentric
		}
	}
}

transfer_moria_duchy_titles_effect = {
	if = {
		limit = { $TITLE$.holder = { is_dwarf = yes } }
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		$TITLE$.holder = {
			change_liege = {
				liege = scope:dwarf_in_moria
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
	else_if = {
		limit = {
			OR = {
				is_elf = yes
				is_human = yes
			}
		}
	}
	else = {
		create_title_and_vassal_change = {
			type = revoked
			save_scope_as = change
			add_claim_on_loss = no
		}
		$TITLE$ = {
			change_title_holder = {
				holder = scope:dwarf_in_moria
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
	}

}

transfer_central_moria_effect = {
	title:d_zirakzigil = { moria_wastelands_to_delvings_effect = yes }
	title:d_barazinbar = { moria_wastelands_to_delvings_effect = yes }
	title:d_bundushathur = { moria_wastelands_to_delvings_effect = yes }
	scope:dwarf_in_moria = { get_title = title:k_khazad_dum }
}

moria_wastelands_to_delvings_effect = {
	every_de_jure_county = {
		every_county_province = {
			limit = {
				terrain = halls
				has_holding = yes
			}
			set_holding_type = dwarven_holding
		}
		every_county_province = {
			limit = {
				NOT = { terrain = halls }
				has_holding = yes
			}
			set_holding_type = castle_holding
		}
		set_county_culture = scope:dwarf_in_moria.culture
		set_county_faith = scope:dwarf_in_moria.faith
		random_list = {
			1 = { change_development_level = 3 }
			1 = { change_development_level = 4 }
			1 = { change_development_level = 5 }
		}
		### THIS SHOULD BE DOWN HERE
		transfer_moria_duchy_titles_effect = { TITLE = this }
		generate_coa = yes
	}
}

transfer_highpass_to_valemen = {
	if = {
		limit = { title:c_central_high_pass.holder = character:k_wastelands_holder }
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
			add_claim_on_loss = no
		}
		title:c_central_high_pass = {
			change_title_holder = {
				holder = $VALEMEN$
				change = scope:change
			}
			set_county_culture = $VALEMEN$.culture
			set_county_faith = $VALEMEN$.faith
			title_province = { set_holding_type = tribal_holding }
			change_development_level = 3
			generate_coa = yes
		}
		resolve_title_and_vassal_change = scope:change
	}
	if = {
		limit = { title:c_western_high_pass.holder = character:k_wastelands_holder }
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
			add_claim_on_loss = no
		}
		title:c_western_high_pass = {
			change_title_holder = {
				holder = $VALEMEN$
				change = scope:change
			}
			set_county_culture = $VALEMEN$.culture
			set_county_faith = $VALEMEN$.faith
			title_province = { set_holding_type = tribal_holding }
			change_development_level = 3
		}
		resolve_title_and_vassal_change = scope:change
	}
	if = {
		limit = { title:c_eastern_high_pass.holder = character:k_wastelands_holder }
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = change
			add_claim_on_loss = no
		}
		title:c_eastern_high_pass = {
			change_title_holder = {
				holder = $VALEMEN$
				change = scope:change
			}
			set_county_culture = $VALEMEN$.culture
			set_county_faith = $VALEMEN$.faith
			title_province = { set_holding_type = tribal_holding }
			change_development_level = 3
		}
		resolve_title_and_vassal_change = scope:change
	}
}
### Balrog Struggle Effects
# Effects regarding the Struggle for Moria

kill_balrog_decision_effect = {
	custom_tooltip = struggle_balrog_ending_kill_balrog_decision_effect_4
	add_prestige = 2500
	dynasty = { add_dynasty_prestige = 1500 }
	dynasty = { add_dynasty_prestige_level = 1 }
	struggle:balrog_struggle = { end_struggle = yes }
	if = {
		limit = {
			NOT = {
				exists = title:k_khazad_dum.holder
			}
			is_independent_ruler = yes
		}
		get_title = title:k_khazad_dum
	}
	# Nickname
	if = {
		limit = {
			is_dwarf = yes
		}
		give_nickname = nick_durin_bane_bane
	}
	else = {
		give_nickname = nick_flame_of_moria
	}
	# Legend
	if = {
		limit = {
			has_dlc_feature = legends
		}
		custom_tooltip = balrog_slayer_legend.tt
		hidden_effect = {
			create_legend_seed = {
				type = heroic
				quality = illustrious
				chronicle = beast_slayer
				properties = {
					beast = flag:balrog
					location = province:4913 # Endless Stairs
				}
			}
		}
	}
}

serve_balrog_decision_effect = {
	get_title = title:e_servants_of_the_dark_flame
	give_nickname = nick_flamesworn
	if = {
		limit = {
			has_dlc_feature = legends
			faith = faith:faith_balrog_cult
		}
		custom_tooltip = balrog_warlord_legend.tt
		hidden_effect = {
			create_legend_seed = {
				type = holy
				quality = illustrious
				chronicle = priesthood_restoration
				properties = {
					founder = root
					faith = root.faith
					religion = root.religion
				}
			}
		}
	}
	custom_tooltip = {
		text = balrog_struggle.1002.effect3
	}
	custom_tooltip = {
		text = balrog_struggle.1002.effect
	}
	add_prestige = 1000
	add_piety = 750
	dynasty = {
		add_dynasty_prestige = 750
		add_dynasty_prestige_level = 1
	}
	faith:faith_balrog_cult = {
		add_doctrine = doctrine_temporal_head
	}
}