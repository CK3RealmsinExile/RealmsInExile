steal_artifact_in_siege_effect = {
	# Save scopes for localization
	$LOCATION$ = { save_scope_as = SAISE_location }
	$ATTACKER$ = { save_scope_as = SAISE_attacker }
	$DEFENDER$ = { save_scope_as = SAISE_defender }
	$ARTIFACT$ = { save_scope_as = SAISE_artifact }

	scope:SAISE_artifact = {
		# Suppress generic notifications, as we will send custom ones
		set_variable = {
			name = suppress_artifact_notifications
			value = yes
			days = 1
		}
		if = {
			limit = {
				NOT = { has_variable = stolen_artifact }
			}
			set_variable = {
				name = stolen_artifact
				value = 1
			}
		}
		else = {
			change_variable = {
				name = stolen_artifact
				add = 1
			}
		}

		# Transfer the artifact to its new owner
		if = {
			limit = {
				has_variable = ai_to_ai_destroy_in_sieges
				scope:SAISE_attacker = {
					is_ai = yes
				}
				scope:SAISE_defender = {
					is_ai = yes
				}
			}
			destroy_artifact = this
		}
		else = {
			set_owner = {
				target = scope:SAISE_attacker
				history = {
					location = scope:SAISE_location
					actor = scope:SAISE_attacker
					recipient = scope:SAISE_defender
					type = taken_in_siege
				}
			}
			scope:SAISE_defender = { add_personal_artifact_claim = scope:SAISE_artifact }
			# Send notifications to the relevant parties
			scope:SAISE_defender = {
				send_interface_toast = {
					title = artifact_lost_toast
					left_icon = scope:SAISE_artifact
					right_icon = scope:SAISE_attacker
					if = {
						limit = { $IS_RAID$ = yes }
						custom_tooltip = artifact_lost_in_raid
					}
					else = {
						custom_tooltip = artifact_lost_in_siege
					}
				}
			}
			scope:SAISE_attacker = {
				send_interface_toast = {
					title = artifact_seized_toast
					left_icon = scope:SAISE_artifact
					right_icon = scope:SAISE_defender
					if = {
						limit = { $IS_RAID$ = yes }
						custom_tooltip = artifact_seized_in_raid
					}
					else = {
						custom_tooltip = artifact_seized_in_siege
					}
				}
				if = {
					limit = {
						NOT = { any_claimed_artifact = { this = scope:SAISE_artifact } }
					}
					scope:SAISE_artifact = {
						set_variable = {
							name = last_person_to_steal
							value = scope:SAISE_attacker
						}
					} 
				}
			}
		}
	}
}

damage_artifact_in_battle_effect = {
	# Save scopes for localization
	$OWNER$ = {
		save_scope_as = DAIBE_owner
	}
	$OPPONENT$ = { save_scope_as = DAIBE_opponent }
	$LOCATION$ = { save_scope_as = DAIBE_location }
	$ARTIFACT$ = { save_scope_as = DAIBE_artifact 

		# Suppress generic notifications, as we will send custom ones
		set_variable = {
			name = suppress_artifact_notifications
			value = yes
			days = 1
		}

		set_variable = {
			name = DAIBE_damage
			value = $DURABILITY_LOSS$
			days = 1
		}

		# Damage the artifact by the specified amount
		add_durability = {
			value = 0
			subtract = var:DAIBE_damage
		}

		if = {
			# If the artifact has no durability left, destroy it now.
			limit = {
				artifact_durability <= 0
			}
			destroy_artifact = this
		}
	}

	# Send notifications to the relevant party IF the artifact was not destroyed
	if = {
		limit = { exists = scope:DAIBE_artifact }
		$OWNER$ = {
			# Send the toast
			send_interface_toast = {
				title = artifact_damaged_toast
				left_icon = scope:DAIBE_artifact
				right_icon = scope:DAIBE_opponent
				if = {
					limit = {
						$IS_DUEL$ = yes
					}
					custom_tooltip = artifact_damaged_in_duel
				}
				else = {
					custom_tooltip = artifact_damaged_in_siege
				}
			}
		}
	}
}

flag_as_trash_artifact = {
	set_variable = {
		name = ai_to_ai_destroy_in_sieges
		value = yes
	}
}

flag_as_unwanted_artifact = {
	set_variable = {
		name = unwanted_artifact
		value = yes
	}
}

flag_as_cursed_artifact = {
	set_variable = {
		name = cursed_artifact
		value = yes
	}
}

#For use with HornedMythicalCreature / call this effect (set_up_horned_mythical_creature_effect = yes) in the line before creating the artifact 
#Use this in the artifact's name/description in the loc-file [ROOT.Char.Custom('HornedMythicalCreature')]
#Remember to clear the var:horned_mythical_creature in your after = { ... }
set_up_horned_mythical_creature_effect = {
	random_list = {
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:tarasque
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:indrik
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:ophiotaurus
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:monocerus
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:centicore
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:erchitu
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:hadhayosh
			}
		}
		50 = {
			set_variable = {
				name = horned_mythical_creature
				value = flag:bulgu
			}
		}
		#5 = {
		#	trigger = { 
		#		capital_province = { geographical_region = custom_iceland }
		#	}
		#	set_variable = {
		#		name = horned_mythical_creature
		#		value = flag:keewakw
		#	}
		#}

	}
}

#For use with RegionalMythicalCreature / call this effect (set_up_regional_mythical_creature_effect = yes) in the line before creating the artifact 
#Use this in the artifact's name/description in the loc-file [ROOT.Char.Custom('RegionalMythicalCreature')] /and/ [ROOT.Char.Custom('RegionalMythicalCreatureLower')]
#Remember to clear the var:regional_mythical_creature_trinket in your after = { ... }
set_up_regional_mythical_creature_effect = {
	#if = {
	#	#Britannia
	#	limit = {
	#		capital_province = { geographical_region = world_europe_west_britannia }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:water_leper
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:fomorian
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:fachan
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#West Europe
	#	limit = {
	#		capital_province = { geographical_region = world_europe_west }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:cockatrice
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:lou_carcolh
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:myrmecoleon
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#North Europe
	#	limit = {
	#		capital_province = { geographical_region = world_europe_north }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:antero_vipunen
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:tjelvar
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:fin
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#South Europe
	#	limit = {
	#		capital_province = { geographical_region = world_europe_south }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:basilisk
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:lhombri
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:argus_panoptes
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#East Europe
	#	limit = {
	#		capital_province = { geographical_region = world_europe_east }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:baba_yaga
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:psoglav
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:sirin
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#West Africa
	#	limit = {
	#		capital_province = { geographical_region = world_africa_west }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:mami_wata
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:dodo
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:utelif
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#East Africa
	#	limit = {
	#		capital_province = { geographical_region = world_africa_east }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:liqimsa
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:bulgu
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:opimachus
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#Middle East
	#	limit = {
	#		capital_province = { geographical_region = world_middle_east }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:manticore
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:behemoth
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:humbaba
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#India
	#	limit = {
	#		capital_province = { geographical_region = world_india }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:makara
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:yali
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:rakshasha
	#			}
	#		}
	#	}
	#}
	#else_if = {
	#	#East Asia
	#	limit = {
	#		capital_province = { geographical_region = world_tibet }
	#		NOT = { exists = var:regional_mythical_creature_trinket }
	#	}
	#	random_list = {
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:manaul
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:bashee
	#			}
	#		}
	#		50 = {
	#			set_variable = {
	#				name = regional_mythical_creature_trinket
	#				value = flag:camphruch
	#			}
	#		}
	#	}
	#}
	#Fallback
	else = {
		random_list = {
			100 = {
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:dragon
				}
			}
			5 = {
				set_variable = {
					name = regional_mythical_creature_trinket
					value = flag:cipactli
				}
			}
		}
	}	
}

#For use with trinket looks / call this effect (set_up_trinket_adjective_effect = yes) in the line before creating the trinket
#Use this in the trinket's name/description in the loc-file [ROOT.Char.Custom('TrinketLookAdjective')] /and/ [ROOT.Char.Custom('TrinketLookAdverbFollowup')]
#Remember to clear the var:trinket_adjective_followup in your after = { ... }
set_up_trinket_adjective_effect = {
	random_list = {
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:adorned
			}
		}
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:decorated
			}
		}
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:embellished
			}
		}
		50 = {
			set_variable = {
				name = trinket_adjective_followup
				value = flag:ornamented
			}
		}

	}
}

# Grant claims on familial banners
grant_banner_house_claim_effect = {
	save_scope_as = familial_banner
	hidden_effect = {
		if = { # Dynasty banner not owned or claimed by all child house's already
			limit = {
				exists = var:banner_dynasty
				var:banner_dynasty = {
					any_dynasty_member = {
						this = house.house_head
						house = { artifact_house_not_owns_or_claims_trigger = yes } # House not owns or claims already
					}
				}
			}
			var:banner_dynasty = {
				every_dynasty_member = {
					limit = {
						this = house.house_head
						house = { artifact_house_not_owns_or_claims_trigger = yes } # House not owns or claims already
					}
					house = { add_house_artifact_claim = scope:familial_banner }
				}
			}
		}
		else_if = { # House banner not owned or claimed by creating house already
			limit = {
				exists = var:banner_house
				var:banner_house = { artifact_house_not_owns_or_claims_trigger = yes } # House not owns or claims already
			}
			var:banner_house = { add_house_artifact_claim = scope:familial_banner }
		}
	}
}

#Determine what type of artifact a court artifact is, for defacement
determine_artifact_damage_type_effect = {
	$ARTIFACT$ = { save_scope_as = artifact_to_determine }
	scope:artifact_to_determine = {
		random_list = {
			10 = {
				trigger = { 
					OR = {
						artifact_type = chest
						artifact_type = box
						artifact_type = cabinet
						artifact_type = pedestal
						artifact_type = tapestry
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big
						artifact_type = wall_shield
						artifact_type = throne
						artifact_type = throne_special
						artifact_type = book
					}
				}
				set_variable = artifact_burned
			}
			10 = {
				trigger = { 
					OR = {
						artifact_type = sculpture
						artifact_type = box
						artifact_type = goblet
						artifact_type = pedestal
						artifact_type = book
						artifact_type = elixir
						artifact_type = panacea
						artifact_type = philosophers_stone
					}
				}
				set_variable = artifact_knocked_over
			}
			10 = {
				trigger = { 
					OR = {
						artifact_type = sculpture
						artifact_type = chest
						artifact_type = box
						artifact_type = cabinet
						artifact_type = goblet
						artifact_type = pedestal
						artifact_type = tapestry #cloth
						artifact_type = animal_skull
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big #shields, banners
						artifact_type = wall_small #animal trophy
						artifact_type = wall_shield
						artifact_type = wall_shield_special #kite shields
						artifact_type = throne
						artifact_type = throne_special
						artifact_type = book
						artifact_type = elixir
						artifact_type = panacea
						artifact_type = philosophers_stone #box
					}
				}
				set_variable = artifact_smeared_food
			}
			10 = {
				trigger = { 
					OR = {
						artifact_type = chest
						artifact_type = box
						artifact_type = cabinet
						artifact_type = pedestal
						artifact_type = tapestry
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big
						artifact_type = wall_small
						artifact_type = throne
						artifact_type = throne_special
						artifact_type = book
					}
				}
				set_variable = artifact_spilled_drink
			}
			10 = {
				trigger = { 
					OR = {
						artifact_type = tapestry
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = book
					}
				}
				set_variable = artifact_tear
			}
			10 = {
				trigger = { 
					OR = {
						artifact_type = tapestry
						artifact_type = animal_skull
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big
						artifact_type = wall_small
						artifact_type = wall_shield
						artifact_type = wall_shield_special
					}
				}
				set_variable = artifact_tear_down
			}
			10 = {
				trigger = { 
					OR = {
						artifact_type = chest
						artifact_type = box
						artifact_type = pedestal
						artifact_type = tapestry
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big
						artifact_type = wall_small
						artifact_type = wall_shield
						artifact_type = wall_shield_special
						artifact_type = throne
						artifact_type = throne_special
						artifact_type = book
					}
				}
				set_variable = artifact_threw_up
			}
			10 = {
				trigger = {
					OR = {
						artifact_type = sculpture
						artifact_type = chest
						artifact_type = box
						artifact_type = cabinet
						artifact_type = goblet
						artifact_type = pedestal
						artifact_type = tapestry #cloth
						artifact_type = animal_skull
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big #shields, banners
						artifact_type = wall_small #animal trophy
						artifact_type = wall_shield
						artifact_type = wall_shield_special #kite shields
						artifact_type = throne
						artifact_type = throne_special
						artifact_type = book
						artifact_type = elixir
						artifact_type = panacea
						artifact_type = philosophers_stone #box
					}
				}
				set_variable = artifact_unspeakable
			}
			10 = {
				trigger = {
					NOR = {
						artifact_type = sculpture
						artifact_type = chest
						artifact_type = box
						artifact_type = cabinet
						artifact_type = goblet
						artifact_type = pedestal
						artifact_type = tapestry #cloth
						artifact_type = animal_skull
						artifact_type = animal_hide
						artifact_type = animal_hide_big
						artifact_type = wall_big #shields, banners
						artifact_type = wall_small #animal trophy
						artifact_type = wall_shield
						artifact_type = wall_shield_special #kite shields
						artifact_type = throne
						artifact_type = throne_special
						artifact_type = book
						artifact_type = elixir
						artifact_type = panacea
						artifact_type = philosophers_stone #box
					}
				}
				set_variable = artifact_damage_fallback
			}
		}
	}
}
