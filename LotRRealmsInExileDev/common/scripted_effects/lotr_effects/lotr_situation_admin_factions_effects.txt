##################
# Admin Factions #
##################

# Determines who should be the faction leader - Scope: situation_participant_group
set_faction_leader_effect = {
	ordered_situation_group_participant = {
		order_by = admin_factions_character_power_value
		scope:situation_participant_group = {
			set_variable = {
				name = faction_leader
				value = prev
			}
		}
	}
}

# Updates the Total Faction Power saved on a given Faction - Scope: situation_participant_group
update_faction_power_effect = {
	scope:situation_participant_group = {
		set_variable = {
			name = faction_power
			value = faction_power_value
		}
	}
}

# Updates Individual Faction Power - Scope: situation_participant_group
update_character_faction_power_individual_effect = {
	set_variable = {
		name = faction_power_individual
		value = admin_factions_character_power_value
	}
}

# Updates the saved character faction power - Scope: situation_participant_group
update_character_faction_power_effect = {
	update_character_faction_power_individual_effect = yes
	set_variable = {
		name = faction_power
		value = {
			add = {
				value = var:faction_power_individual
			}
		}
	}
}

# Updates Faction Power and Leader - Scope: character (requires saved situation_participant_group)
set_faction_leader_and_power_effect = {
	save_scope_as = char
	scope:situation_participant_group = {
		# set root as leader if leader doesn't exist yet
		if = {
			limit = {
				NOT = { exists = var:faction_leader }
			}
			set_variable = {
				name = faction_leader
				value = scope:char
			}
		}
		# update faction power
		set_variable = {
			name = faction_power
			value = faction_power_value
		}
	}
}