lotr_get_aggressive = { root.house = { add_house_modifier = { modifier = lotr_conquering_modifier years = 30 } } }

increase_variable = { # From Tobbzn
    if = { limit = { NOT = { has_variable = $NAME$ } }
        set_variable = { name = $NAME$ value = 0 }
    }
    change_variable = {
        name = $NAME$
        add = $AMOUNT$
    }
}

decrease_variable = { # From Tobbzn
    if = { limit = { NOT = { has_variable = $NAME$ } }
        set_variable = { name = $NAME$ value = 0 }
    }
    change_variable = {
        name = $NAME$
        subtract = $AMOUNT$
    }
}

decrease_global_variable_effect = {
	if = {
		limit = {
			NOT = { exists = global_var:$VAR$ }
		}
		set_global_variable = {
			name = $VAR$
			value = $VAL$
		}
	}
	else = {
		change_global_variable = {
			name = $VAR$
			subtract = $VAL$
		}
	}
}

set_every_county_wilderness = {
	create_title_and_vassal_change = {
		type = granted
		save_scope_as = change
		add_claim_on_loss = no
	}

	if = {
		limit = { NOT = { exists = global_var:used_wastelands_gui } }
		set_global_variable = used_wastelands_gui 
	}

	if = {
		limit = {
			OR = {
				$SELECTED_TITLE$ = title:e_rhovanion
				$SELECTED_TITLE$ = title:e_rhun
			}
		}
		title:e_golden_realm_rhun = {
			holder = {
				every_courtier_or_guest = { death = { death_reason = death_vanished } }
				every_knight = { death = { death_reason = death_vanished } }
			}
			holder = { destroy_title = prev }
		}
	}
	if = {
		limit = { $SELECTED_TITLE$ = title:e_bozisha_miraz }
		title:e_thon_an_kharlokh = {
			holder = {
				every_courtier_or_guest = { death = { death_reason = death_vanished } }
				every_knight = { death = { death_reason = death_vanished } }
			}
			holder = { destroy_title = prev }
		} 
	}
	if = {
		limit = { $SELECTED_TITLE$ = title:e_calenardhon }
		title:d_isengard = {
			holder = {
				every_courtier_or_guest = { death = { death_reason = death_vanished } }
				every_knight = { death = { death_reason = death_vanished } }
			}
			every_de_jure_county = {
				if = {
					limit = { exists = global_var:wastelands_colonisable }
               		add_county_modifier = block_settlement_ability
				}
				if = {
					limit = {
						NOT = {
							any_in_list = {
								list = prev_title_holder
								this = holder
							}
							holder = character:k_wastelands_holder
						}
					}
					holder = { add_to_list = prev_title_holder }
				}
	
				every_county_province = {
					limit = {
						is_county_capital = yes
						OR = {
							has_holding_type = city_holding
							has_holding_type = church_holding
							has_holding_type = settlement_holding
							has_holding_type = tribal_holding
							has_holding_type = castle_holding
							has_holding_type = elven_holding
						}
					}
					set_holding_type = wastelands_holding
				}
				every_county_province = {
					limit = {
						is_county_capital = no
						OR = {
							has_holding_type = city_holding
							has_holding_type = church_holding
							has_holding_type = settlement_holding
							has_holding_type = tribal_holding
							has_holding_type = castle_holding
							has_holding_type = elven_holding
						}
					}
					set_holding_type = ruined_holding
				}
				
				change_title_holder = {
					holder = character:k_wastelands_holder
					change = scope:change
					take_baronies = yes
				}
				change_development_level = -100
			}
		}
		
	}

	$SELECTED_TITLE$ = {
		every_de_jure_county = {
			if = {
				limit = { exists = global_var:wastelands_colonisable }
            	add_county_modifier = block_settlement_ability
			}
			if = {
				limit = {
					NOT = {
						any_in_list = {
							list = prev_title_holder
							this = holder
						}
						holder = { 
							any_held_title = {
								tier = tier_county
								count > 0 
							}
						}
						holder = character:k_wastelands_holder
					}
				}
				holder = { add_to_list = prev_title_holder }
			}

			every_county_province = {
				limit = {
					is_county_capital = yes
					OR = {
						has_holding_type = city_holding
						has_holding_type = church_holding
						has_holding_type = settlement_holding
						has_holding_type = tribal_holding
						has_holding_type = castle_holding
						has_holding_type = elven_holding
					}
				}
				set_holding_type = wastelands_holding
			}
			every_county_province = {
				limit = {
					is_county_capital = no
					OR = {
						has_holding_type = city_holding
						has_holding_type = church_holding
						has_holding_type = settlement_holding
						has_holding_type = tribal_holding
						has_holding_type = castle_holding
						has_holding_type = elven_holding
					}
				}
				set_holding_type = ruined_holding
			}
			
			change_title_holder = {
				holder = character:k_wastelands_holder
				change = scope:change
				take_baronies = yes
			}
			change_development_level = -100
		}
		set_color_from_title = title:k_invisible_title
		set_title_name = k_wastelands
	}

	resolve_title_and_vassal_change = scope:change

	# Kills off all the previous rulers, stops courtier bloat
	every_in_list = {
		list = prev_title_holder
		if = {
			limit = {
				NOR = {
					this = character:lineofsauron
					this = character:nazgul1
					this = character:nazgul2
					this = character:nazgul3
					this = character:nazgul4
					this = character:nazgul5
					this = character:nazgul6
					this = character:nazgul7
					this = character:nazgul8
					this = character:nazgul9
					this = character:lineofsaruman
					this = character:lineofgandalf
					this = character:lineofradagast
				}
			}
			death = { death_reason = death_disappearance }

			every_close_family_member = {
				limit = { is_ruler = no }
				death = { death_reason = death_disappearance }
			}
		}
		else = {
			set_character_faith_with_conversion = faith:faith_ainur
			set_location = province:3900
		}
	}
		
	character:k_wastelands_holder = {
		every_held_county = {
			set_county_faith = faith:faith_wastelands_pagan
			set_county_culture = culture:wastelands
			change_development_level = -100
			generate_coa = yes

			if = {
				limit = {
					kingdom = {
						any_in_de_jure_hierarchy = {
							tier = tier_county
							NOT = { holder = character:k_wastelands_holder }
						}
					}
				}
			} 
			else_if = { 
				limit = {
					trigger_if = {
						limit = {
							NOT = { $SELECTED_TITLE$ = title:k_eregion }
						}
						NOT = { kingdom = title:k_eregion }
					}
				}
				kingdom = { 
					set_color_from_title = title:k_invisible_title 
					set_title_name = k_wastelands
				} 
			}
		}
		
	}
	kill_random_courtiers = yes
	stop_wastelands_wars = yes
	
	every_tributary = {
		limit = { 
			OR = {
				var:my_suzerain = character:k_wastelands_holder
				var:my_suzerain = { is_landed = no } 
			}
		}
		free_tributary = yes
	}
}

add_empires_to_global_list = {
	every_empire = {
		limit = { any_de_jure_county = { count > 0 } }
		add_to_global_variable_list = {
			name = all_empires_in_game
			target = this
		}
	}
}

add_kingdom_titles_to_list = {
	every_in_global_list = {
		variable = all_empires_in_game
		save_scope_as = curr_empire
		every_de_jure_county = {
			duchy = { save_scope_as = curr_duchy }
			duchy.kingdom = {
				if = {
					limit = {
						NOT = {
							scope:curr_empire = {
								is_target_in_variable_list = {
									name = de_jure_kingdoms
									target = prev
								}
							}
						}
					}
					scope:curr_empire = {
						add_to_variable_list = {
							name = de_jure_kingdoms
							target = prev
						}
					}
				}
			}
			if = {
				limit = {
					NOT = {
						kingdom = {
							is_target_in_variable_list = {
								name = de_jure_duchies
								target = scope:curr_duchy
							}
						}
					}
				}
				
				kingdom = {
					add_to_variable_list = {
						name = de_jure_duchies
						target = scope:curr_duchy
					}
				}
			}
		}
	}
}

canon_area_empires = {
	every_in_global_list = {
		variable = all_empires_in_game
		limit = {
			NOT = {
				title_capital_county.title_province = { # Juke note: Tried to improve code so we dont have to update this list repeatedly
					OR = {
						geographical_region = middleearth_blue_mountains
						geographical_region = middleearth_misty_mountains
						geographical_region = middleearth_iron_mountains

						geographical_region = middleearth_west
						geographical_region = middleearth_forodwaith
						geographical_region = middleearth_haradwaith_near
						geographical_region = middleearth_mordor
						geographical_region = middleearth_rhun_dorwinion
						geographical_region = middleearth_rhun_seaofrhun
						geographical_region = middleearth_rhun_khand
						geographical_region = middleearth_rhun_nurunkizdin
					}
				}
			}
		}
		add_to_global_variable_list = {
			name = non_canon_areas
			target = this
		}
	}
}

kill_random_courtiers = {
	every_living_character = {
		limit = {
			OR = {
				AND = {
					is_ruler = no
					is_knight = no
					is_sauron = no
					is_councillor = no
					is_concubine = no
					is_clergy = no
					is_courtier = no
					is_in_valinor = no
				}
				# primary_title ?= { is_mercenary_company = yes }
			}
		}
		death = { death_reason = death_disappearance }
	}

}

stop_wastelands_wars = {
	character:k_wastelands_holder = { every_character_war = { end_war = white_peace } }
}

remove_kingdom_and_duchy_variables_from_empires = {
	every_in_global_list = {
		variable = all_empires_in_game
		save_scope_as = curr_empire
		every_de_jure_county = {
			duchy = { save_scope_as = curr_duchy }
			duchy.kingdom = {
				if = {
					limit = {
						scope:curr_empire = {
							is_target_in_variable_list = {
								name = de_jure_kingdoms
								target = prev
							}
						}
					}
					scope:curr_empire = {
						remove_list_variable = {
							name = de_jure_kingdoms
							target = prev
						}
					}
				}
			}
			if = {
				limit = {
					kingdom = {
						is_target_in_variable_list = {
							name = de_jure_duchies
							target = scope:curr_duchy
						}
					}
				}
				
				kingdom = {
					remove_list_variable = {
						name = de_jure_duchies
						target = scope:curr_duchy
					}
				}
			}
		}
	}
}

test_ai_colonization = {
	$EMPIRE$ = {
		every_de_jure_county = {
			limit = { holder = { is_wastelands = no } }
			holder = { trigger_event = wastelands.0006 }
		}
	}
}

test_ai_directive_colonization = {
	$EMPIRE$ = {
		every_de_jure_county = {
			limit = { holder = { is_wastelands = no } }
			holder = { trigger_event = wastelands.0022 }
		}
	}
}

set_balan_lai_game_start = {
	every_balan_lai_member = {
		save_scope_as = curr_balan_lai
		title:k_wastelands = {
			add_to_variable_list = {
				name = balan_lai_members
				target = scope:curr_balan_lai
			}
		}
	}
}

remove_cannot_marry_imrazor_arimith = {
	character:lineofkrassabarohin103 = {
		remove_trait = cannot_marry
	}
	character:linealsariastwo37 = {
		remove_trait = cannot_marry
	}
}

lotr_sunset_invasion_adventurer_effect = {
	save_scope_as = new_landless_adventurer
	if = {
		limit = {
			exists = house
		}
		house = { save_scope_as = new_landless_adventurer_house }
	}
	if = {
		limit = {
			exists = location
		}
		location = { save_scope_as = new_landless_adventurer_location }
	}
	save_scope_value_as = {
		name = adventurer_creation_reason
		value = $REASON$
	}
	hidden_effect = {
		create_adventurer_title = {
			name = d_eonwe_host_valinor_landing
			holder = scope:new_landless_adventurer
			article = DEFAULT_TITLE_NAME_ARTICLE
			save_scope_as = new_title
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:new_title ?= {
			create_landless_adventurer_title_history_effect = yes
			set_variable = {
				name = adventurer_creation_reason
				value = scope:adventurer_creation_reason
			}
			change_title_holder = {
				holder = scope:new_landless_adventurer
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		scope:new_title = { save_scope_as = new_landless_adventurer_title }
		scope:new_landless_adventurer = {
			if = {
				limit = {
					NOT = { has_government = landless_adventurer_government }
				}
				change_government = landless_adventurer_government
			}
			if = {
				limit = {
					NOT = { has_realm_law = landless_adventurer_succession_law }
				}
				add_realm_law = landless_adventurer_succession_law
			}
			if = {
				limit = {
					has_realm_law = crown_authority_0
				}
				remove_realm_law = crown_authority_0
			}
			domicile = {
				change_provisions = starting_provisions_value
			}
		}
		every_player = {
			limit = {
				NOR = {
					root ?= this
					this = scope:new_landless_adventurer
				}
				OR = {
					# Either they're important to us.
					is_close_or_extended_family_of = scope:new_landless_adventurer
					is_consort_of = scope:new_landless_adventurer
					has_important_relationship_with_character_trigger = { CHARACTER = scope:new_landless_adventurer }
					# Or they're just close enough.
					AND = {
						capital_province = { "squared_distance(scope:new_landless_adventurer.location)" <= squared_distance_medium }
						OR = {
							top_liege = root.top_liege
							any_neighboring_and_across_water_top_liege_realm_owner = { this = root.top_liege }
						}
					}
				}
			}
			send_interface_message = {
				type = msg_landless_adventurer_nearby
				title = nearby_landless_adventurer_created_message_title
				left_icon = scope:new_landless_adventurer
				switch = {
					trigger = scope:adventurer_creation_reason
					flag:conquest = { custom_tooltip = nearby_landless_adventurer_created_message_conquest_tt }
					flag:deposition = { custom_tooltip = nearby_landless_adventurer_created_message_deposition_tt }
					flag:succession = { custom_tooltip = nearby_landless_adventurer_created_message_succession_tt }
					flag:exile = { custom_tooltip = nearby_landless_adventurer_created_message_exile_tt }
					flag:voluntary = { custom_tooltip = nearby_landless_adventurer_created_message_voluntary_tt }
					flag:revocation = { custom_tooltip = nearby_landless_adventurer_created_message_revocation_tt }
					flag:runaway_allowed = { custom_tooltip = nearby_landless_adventurer_created_message_runaway_allowed_tt }
					flag:runaway_forbidden = { custom_tooltip = nearby_landless_adventurer_created_message_runaway_forbidden_tt }
					flag:wanderer = { custom_tooltip = nearby_landless_adventurer_created_message_wanderer_tt }
					fallback = { custom_tooltip = nearby_landless_adventurer_created_message_fallback_tt }
				}
			}
		}
	}
	custom_tooltip = laamp_become_adventurer_tt
	hidden_effect = {
		if = {
			limit = {
				scope:new_landless_adventurer = {
					is_ai = no
				}
				NOT = { exists = scope:expelled }
			}
			populate_location_with_contracts_effect = {
				AREA_CHAR = scope:new_landless_adventurer
				AMOUNT = 3
			}
		}
		scope:new_landless_adventurer = {
			every_councillor = {
				if = {
					limit = {
						NOR = {
							has_council_position = councillor_court_chaplain
							has_council_position = councillor_spouse
						}
					}
					scope:new_landless_adventurer = {
						fire_councillor = prev
					}
					remove_opinion = {
						modifier = fired_from_council_opinion
						target = scope:new_landless_adventurer
					}
				}
				else_if = {
					limit = {
						NOR = {
							is_close_or_extended_family_of = scope:new_landless_adventurer
							has_relation_lover = scope:new_landless_adventurer
							has_relation_friend = scope:new_landless_adventurer
							is_consort_of = scope:new_landless_adventurer
							has_council_position = councillor_spouse
						}
					}
					death = {
						death_reason = death_vanished
					}
				}
			}
			every_courtier = {
				limit = {
					NOR = {
						is_close_or_extended_family_of = scope:new_landless_adventurer
						has_relation_lover = scope:new_landless_adventurer
						has_relation_friend = scope:new_landless_adventurer
						is_consort_of = scope:new_landless_adventurer
					}
				}
				move_to_pool = yes
			}
			# Give us a couple of starting chars if we're almost completely bereft.
			if = {
				limit = {
					any_courtier = { count <= 2 }
				}
				trigger_event = {
					id = ep3_laamps.1001
					weeks = { 2 6 }
				}
			}
		}
		trigger_event = { id = misc.0001 days = 1 }
	}
	add_to_global_variable_list = {
		name = laamps_tally
		target = scope:new_landless_adventurer.primary_title
	}
	set_variable = flavourise_camp_purpose_wanderers

	add_realm_law_skip_effects = camp_purpose_mercenaries
	set_invasion_camp_buildings = yes
}

set_invasion_camp_buildings = {
	domicile = {
		# Domicile
		add_domicile_building = camp_main_02
		add_domicile_building = camp_main_03
		add_domicile_building = camp_main_04

		# Supply Tent
		add_domicile_building = supply_tent_01
		add_domicile_building = supply_tent_02
		add_domicile_building = supply_tent_03
		add_domicile_building = supply_tent_04
		add_domicile_building = supply_tent_05
		add_domicile_building = supply_tent_06

		# Camp Perimeter
		add_domicile_building = camp_perimeter_01
		add_domicile_building = camp_perimeter_02
		add_domicile_building = camp_perimeter_03
		add_domicile_building = camp_perimeter_04
		add_domicile_building = camp_perimeter_05
		add_domicile_building = camp_perimeter_06
		add_domicile_building = camp_perimeter_fixed_layout

		# Proving Grounds
		add_domicile_building = proving_grounds_01
		add_domicile_building = proving_grounds_02
		add_domicile_building = proving_grounds_03
		add_domicile_building = proving_grounds_04
		add_domicile_building = proving_grounds_05
		add_domicile_building = proving_grounds_06
		add_domicile_building = proving_grounds_nightly_barding_drills
		add_domicile_building = proving_grounds_the_stump
		add_domicile_building = proving_grounds_personal_bouts
		add_domicile_building = proving_grounds_training_circle
		add_domicile_building = proving_grounds_horse_run
		add_domicile_building = proving_grounds_mock_battle_drills

		# Baggage Trains
		add_domicile_building = baggage_train_01
		add_domicile_building = baggage_train_02
		add_domicile_building = baggage_train_03
		add_domicile_building = baggage_train_04
		add_domicile_building = baggage_train_05
		add_domicile_building = baggage_train_06
		add_domicile_building = baggage_train_ample_steeds
		add_domicile_building = baggage_train_porters
		add_domicile_building = baggage_train_trackers
		add_domicile_building = baggage_train_siege_engineers

		# Provisions
		change_provisions = max_provisions
	}
}

### Tamska System
make_former_tamska_effect = {
	remove_trait = tamska
	add_trait = former_tamska
}

become_tamskangi_effect = {
	# TBD: Save former house, parents and bastardry traits for un-tamskangi-ing
	if = {
		limit = { has_trait = former_tamska }
		remove_trait = former_tamska
	}
	if = {
		limit = { has_trait = tamska }
		remove_trait = tamska
	}
	hidden_effect = {
		remove_trait = bastard
		remove_trait = bastard_founder
		remove_trait = disputed_heritage
		remove_trait = disinherited
	}
	add_trait = tamska_heir
	set_house = root.house
	if = {
		limit = { NOT = { faith = ROOT.faith } }
   		set_character_faith = ROOT.faith
	}
	ROOT = {
		adopt = scope:tamska_heir
		set_designated_heir = scope:tamska_heir
        create_character_memory = {
            type = adopted_a_child
            participants = {
                child = scope:tamska_heir
            }
        }
	}
}

become_tamska_effect = {
	if = {
		limit = { has_trait = former_tamska }
		remove_trait = former_tamska
	}
	if = {
		limit = { has_trait = tamska_heir }
		remove_trait = tamska_heir
	}
	add_trait = tamska
	every_child = {
		limit = { NOT = { has_trait = child_of_tamska } }
		add_trait = child_of_tamska
	}
}

set_children_as_tamksa_dynasty = {
	house ?= { save_scope_as = tamska_old_house }
	if = {
		limit = {
			exists = scope:tamska_old_house
		}
		every_child = {
			limit = { house = scope:tamska_old_house }
			set_house = character:linetamska1.house

			if = {
				limit = {
					can_have_children = yes
					any_child = { count > 0 }
				}
				every_child = {
					limit = { house = scope:tamska_old_house }
					set_house = character:linetamska1.house

					if = {
						limit = {
							can_have_children = yes
							any_child = { count > 0 }
						}
					}
					every_child = {
						limit = { house = scope:tamska_old_house }
						set_house = character:linetamska1.house

						if = {
							limit = {
								can_have_children = yes
								any_child = { count > 0 }
							}
						}
						every_child = {
							limit = { house = scope:tamska_old_house }
							set_house = character:linetamska1.house

							if = {
								limit = {
									can_have_children = yes
									any_child = { count > 0 }
								}
							}
						}
					}
				}
			}
		}
	}
}

add_building_if_possible = {
	if = {
		limit = { has_free_building_slot = yes }
		add_building = $BUILDING$
	}
}