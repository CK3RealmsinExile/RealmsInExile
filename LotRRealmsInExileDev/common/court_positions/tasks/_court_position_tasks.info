# A task type available to a court position type
name_of_the_task_type = {
	# Position(s) that can perform this task (positions can be found in 'common/court_positions/types/')
	position_types = { bodyguard_court_position }

	# What background assets does this task use in GUI windows (overrides asset of position type), will pick first valid match
	# root: court owner character
	court_position_asset = {
		# Trigger for scoped character when to pick this asset over another, remove trigger part to always pick this asset
		trigger = { ... }

		# Path to animation played in GUI
		animation = X

		# Path to background texture shown in GUI
		background = "path/to/image.dds"
	}

	# Monthly cost for the task
	# root: empty
	#  scope:liege - Employer character
	cost = {
		gold = { <script value> }
		prestige = { <script value> }
		piety = { <script value> }
	}

	# Modifier applied to the court position employee while performing this task.
	employee_modifier = { <modifier> }

	# Non-scaling modifiers gained by the employer of the court position.
	base_employer_modifier = { <modifier> }

	# Scaling modifiers gained by the employer of the court position as the
	# employee's aptitude level increases. Can define 0-5 scaling modifiers.
	# If less than 5 are defined, the highest will be picked as aptitude level
	# increases.
	#
	# ERRORS:
	#		Will error if naming convention and indices aren't followed.
	scaling_employer_modifiers = {
		aptitude_level_1 = { ... }
		aptitude_level_2 = { ... }
		aptitude_level_3 = { ... }
		aptitude_level_4 = { ... }
		aptitude_level_5 = { ... }
	}

	# Non-scaling modifiers gained by all characters in the court (excluding the court owner aka liege).
	base_employer_court_modifier = { <modifier> }

	# Scaling modifiers gained by all characters in the court (excluding the court owner aka liege).
	# Can define 0-5 scaling modifiers. If less than 5 are defined, the highest will be picked as aptitude level
	# increases.
	#
	# ERRORS:
	#		Will error if naming convention and indices aren't followed.
	scaling_employer_court_modifiers = {
		aptitude_level_1 = { ... }
		aptitude_level_2 = { ... }
		aptitude_level_3 = { ... }
		aptitude_level_4 = { ... }
		aptitude_level_5 = { ... }
	}

	# Is this task shown/available in general.
	# Task will stop if this is at any time false.  (This task will not be visible at all when false)
	# Root: employer character
	is_shown = { <trigger> }
	# Check if the task is valid. Otherwise the task will be grayed out showing the reason(s).
	# Root: employee character
	#  scope:liege - Employer character
	is_valid_showing_failures_only = { <trigger> }

	# Effect run when the task starts
	# Root: employee character
	#  scope:liege - Employer character
	on_start = { <effect> }

	# Effect run when the task ends
	# (run when a character stops an task, or switches to another task)
	# Root: employee character
	#  scope:liege - Employer character
	on_end = { <effect> }

	# Effect run once per month on the court position with this task
	# Root: employee character
	#  scope:liege - Employer character
	on_monthly = { <effect> }

	# Effect run once per year on the court position with this task
	# Root: employee character
	#  scope:liege - Employer character
	on_yearly = { <effect> }

	# How likely is the AI to pick/switch task. Tasks will be selected using best scoring first.
	# AI will not start tasks unless
	#
	# A available tasks for each court position will be considered periodically.
	# See defines (common/defines/ai/00_ai.txt):
	# 	COURT_POSITION_TASK_SWITCH_SCORE - Degree by which a task has to be better scored to switch
	#   MIN_SCORE_TO_START_COURT_POSITION_TASK - Score above which tasks are considered to start (best first)
	#   MAX_SCORE_TO_STOP_COURT_POSITION_TASK - Score below which tasks are stopped
	#
	# Root: Employer character (Liege!)
	#  scope:liege - Employer character
	#  scope:employee - Employee character
	#  scope:monthly_character_expenses - current monthly expenses
	ai_will_do = {
		<scripted_value>
	}
}
 
