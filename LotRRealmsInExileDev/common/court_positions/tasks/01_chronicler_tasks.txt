chronicler_promote_legend_realm = {
	court_position_types = { court_musician_court_position court_poet_court_position chronicler_court_position stone_singer_court_position }

	# Monthly cost for the task
	cost = {
		round = no
		gold = {
			add = {
				value = base_chronicler_promote_legend_realm_cost
				desc = COURT_POSITION_TASK_COST_BREAKDOWN_BASE
				format = "BASE_VALUE_FORMAT_DECIMALS_PLUS_NEGATIVE"
			}
		}
	}

	employee_modifier = {
		monthly_prestige = minor_court_position_task_prestige_salary
	}

	scaling_employer_modifiers = {
		terrible = {
		 	owned_legend_spread_mult = 0.05
		}
		poor = {
		 	owned_legend_spread_mult = 0.1
		}
		average = {
		 	owned_legend_spread_mult = 0.2
		}
		good = {
		 	owned_legend_spread_mult = 0.4
		}
		excellent = {
		 	owned_legend_spread_mult = 0.6
		}
	}

	is_shown = {
		has_dlc_feature = legends_of_the_dead
	}
	is_valid_showing_failures_only = {
		custom_tooltip = {
			text = legend_no_legend
			scope:liege = {
				exists = promoted_legend
			}
		}
	}

	on_start = { }
	on_end = { }

	ai_will_do = {
		value = 0
		if = {
			limit = {
				promoted_legend ?= { legend_owner = root } #do you own a legend
			}
			add = 50
		}
		if = {
			limit = {
				promoted_legend ?= {
					legend_owner = root
				}
				monthly_character_income < famed_legend_owner_cost
			}
			value = -100 #to force the switch to default task, the ai_will_do must be negative
		}
		else_if = {
			limit = {
				monthly_character_income < famed_legend_promoter_cost
			}
			value = -100
		}
	}
}

chronicler_espouse_legend = {
	court_position_types = { chronicler_court_position court_musician_court_position court_poet_court_position cultural_emissary_court_position stone_singer_court_position }

	# Monthly cost for the task
	cost = {
		round = no
		gold = {
			add = {
				value = monthly_court_position_task_cost_double
				desc = COURT_POSITION_TASK_COST_BREAKDOWN_BASE
				format = "BASE_VALUE_FORMAT_DECIMALS_PLUS_NEGATIVE"
			}
		}
	}

	employee_modifier = {
		monthly_prestige = minor_court_position_task_prestige_salary
	}

	is_shown = {
		has_dlc_feature = legends_of_the_dead
	}
	is_valid_showing_failures_only = {
		custom_tooltip = {
			text = legend_no_legend
			scope:liege = {
				exists = promoted_legend
			}
		}
	}

	on_start = {
		custom_tooltip = yearly_legend_spread_tt
	}
	on_yearly = {
		if = {
			limit = {
				scope:liege = {
					OR = {
						# Vassals
						any_vassal_or_below = {
							# No barons
							highest_held_title_tier >= tier_county
							# Not promoting their own legend
							NOT = { promoted_legend = { prev = legend_owner } }
							NOT = { promoted_legend = scope:liege.promoted_legend }
							is_ai = yes
						}
						# Neighbourinos
						any_neighboring_and_across_water_top_liege_realm_owner = {
							# Not promoting their own legend
							NOT = { promoted_legend = { prev = legend_owner } }
							NOT = { promoted_legend = scope:liege.promoted_legend }
							is_ai = yes
						}
					}
				}
			}
			random = {
				chance = {
					value = 20
					if = {
						limit = {
							aptitude = {
								court_position = chronicler_court_position
								value >= 2
							}
						}
						add = 5
					}
					if = {
						limit = {
							aptitude = {
								court_position = chronicler_court_position
								value >= 3
							}
						}
						add = 10
					}
					if = {
						limit = {
							aptitude = {
								court_position = chronicler_court_position
								value >= 4
							}
						}
						add = 20
					}
					if = {
						limit = {
							aptitude = {
								court_position = chronicler_court_position
								value >= 5
							}
						}
						add = 30
					}
				}
				save_scope_as = chronicler
				scope:liege = {
					random_list = {
						# Vassals
						75 = {
							trigger = {
								any_vassal_or_below = {
									highest_held_title_tier >= tier_county
									NOT = { promoted_legend = { prev = legend_owner } }
									NOT = { promoted_legend = scope:liege.promoted_legend }
									is_ai = yes
								}
							}
							random_vassal_or_below = {
								limit = {
									highest_held_title_tier >= tier_county
									NOT = { promoted_legend = { prev = legend_owner } }
									NOT = { promoted_legend = scope:liege.promoted_legend }
									is_ai = yes
								}
								save_scope_as = potential_promoter
							}
						}
						# Neighbourinos
						25 = {
							trigger = {
								any_neighboring_and_across_water_top_liege_realm_owner = {
									NOT = { promoted_legend = { prev = legend_owner } }
									NOT = { promoted_legend = scope:liege.promoted_legend }
									is_ai = yes
								}
							}
							random_neighboring_and_across_water_top_liege_realm_owner = {
								limit = {
									NOT = { promoted_legend = { prev = legend_owner } }
									NOT = { promoted_legend = scope:liege.promoted_legend }
									is_ai = yes
								}
								save_scope_as = potential_promoter
							}
						}
					}
					trigger_event = {
						id = legend_events.0010
						months = { 0 6 } # To avoid triggering on January every year
					}
				}
			}
		}
	}
	on_end = { }

	ai_will_do = {
		value = 0
		if = {
			limit = { # I own my promoted legend
				promoted_legend ?= { legend_owner = root }
			}
			add = 30
			add = ai_sociability
		}
		if = {
			limit = {
				OR = {
					monthly_character_income < monthly_court_position_task_cost_double
					is_at_war = yes
				}
			}
			add = -100 #to force the switch to default task, the ai_will_do must be negative
		}
	}
}
