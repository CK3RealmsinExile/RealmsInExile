
# Have a look at _court_positions.info for documentation

# COURT POSITIONS
# overseer_of_the_mines_court_position
# stone_singer_court_position

overseer_of_the_mines_court_position = {
	max_available_positions = 1
	category = court_position_category_common
	minimum_rank = county
	skill = stewardship

	opinion = {
		value = ceremonial_court_position_opinion
	}
	
	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 25
		add = {
			value = stewardship
			multiply = 2
			max = 50
			desc = court_position_skill_stewardship
		}
		add = {
			value = learning
			multiply = 1.5
			max = 50
			desc = court_position_skill_learning
		}
		if = {
			limit = {
				miner_lifestyle_track_greater_equal_trigger = { TRACK = hewer GREATER_EQUAL = 100 }
			}
			add = { 
				value = 40
				desc = court_position_miner_3_trait
			}
		}
		else_if = {
			limit = {
				miner_lifestyle_track_greater_equal_trigger = { TRACK = hewer GREATER_EQUAL = 50 }
			}
			add = { 
				value = 30
				desc = court_position_miner_2_trait
			}
		}
		else_if = {
			limit = { has_trait = lifestyle_miner }
			add = { 
				value = 20
				desc = court_position_miner_1_trait
			}
		}
		if = {
			limit = { has_trait = brave }
			add = {
				value = 5
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = { has_trait = lazy }
			add = {
				value = -10
				desc = court_position_lazy_trait
			}
		}
		if = {
			limit = { has_trait = overseer }
			add = {
				value = 15
				desc = court_position_overseer_trait
			}
		}
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_high_penalty_value
	}

	is_shown = {
		is_dwarf = no
		is_landless_adventurer = no
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_county
		culture = { has_cultural_parameter = can_use_mining_activity }
	}

	is_shown_character = {
		scope:employee = {
			is_courtier_of = scope:liege
			is_imprisoned = no
			is_lotr_adult = yes
		}
	}

	valid_character = {
		scope:employee = {
			NOR = {
				has_trait = blind
				has_trait = incapable
				has_trait = infirm
			}
			OR = {
				is_vassal_of = scope:liege
				is_courtier_of = scope:liege
			}
		}
	}

	revoke_cost = {
		prestige =  {
			value = major_court_position_prestige_revoke_cost

			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = overseer_of_the_mines_court_position
					any_court_position_holder = {
				        type = overseer_of_the_mines_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = overseer_of_the_mines_court_position
						any_court_position_holder = {
					        type = overseer_of_the_mines_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = overseer_of_the_mines_court_position
						any_court_position_holder = {
					        type = overseer_of_the_mines_court_position
					        scope:liege = {
								has_hook_of_type = {
									type = obligation_hook
									target = prev
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
				}
			}
		}
	}

	custom_employer_modifier_description = overseer_of_the_mines_custom_effect_description

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints) 
	scaling_employer_modifiers = {
		terrible = {
			monthly_income_mult = 0.01
		}
		poor = {
			court_grandeur_baseline_add = 1
			monthly_income_mult = 0.02
		}
		average = {
			court_grandeur_baseline_add = 1
			monthly_income_mult = 0.03
		}
		good = {
			court_grandeur_baseline_add = 2
			monthly_income_mult = 0.04
		}
		excellent = {
			court_grandeur_baseline_add = 2
			monthly_income_mult = 0.05
		}
	}

	modifier = {
		monthly_prestige = minor_court_position_prestige_salary
		stewardship = 1
	}

	on_court_position_received = {
		overseer_of_the_mines_title_accepted_effect = yes
	}
	on_court_position_revoked = { 
		overseer_of_the_mines_revoked_effect = yes
	}
	on_court_position_invalidated = {
		overseer_of_the_mines_invalidated_effect = yes
	}
	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		scope:liege = {
			# More likely to hire if you're a miner
			if = {
				limit = {
					has_trait = lifestyle_miner
				}
				add = 25
			}
		}
		add = court_position_debt_considerations_value
	}
}

stone_singer_court_position = {
	max_available_positions = 1
	category = court_position_category_common
	opinion = {
		value = regular_court_position_opinion
	}
	skill = learning
	
	# How high the aptitude has to be to reach the 5 different modifier levels

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 1
		add = {
			value = diplomacy
			multiply = 2
			max = 40
			desc = court_position_skill_diplomacy
		}
		add = {
			value = learning
			max = 20
			desc = court_position_skill_learning
		}
		if = { # Poets are likely to have a better singing voice
			limit = {
				has_trait = poet
			}
			add = {
				value = 15
				desc = court_position_poet_trait
			}
		}
		if = {
			limit = {
				has_trait = lifestyle_mystic
				has_trait_xp = {
					trait = lifestyle_mystic
					value >= 100
				}
			}
			add = { 
				value = 20
				desc = court_position_mystic_3_trait
			}
		}
		else_if = {
			limit = {
				has_trait = lifestyle_mystic
				has_trait_xp = {
					trait = lifestyle_mystic
					value >= 50
				}
			}
			add = { 
				value = 10
				desc = court_position_mystic_2_trait
			}
		}
		else_if = {
			limit = { 
				has_trait = lifestyle_mystic
			}
			add = { 
				value = 5
				desc = court_position_mystic_1_trait
			}
		}
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_low_penalty_value
	}

	is_shown = {
		is_dwarf = yes
		is_landless_adventurer = no
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_county
	}

	is_shown_character = {
		scope:employee = {
			is_courtier_of = scope:liege
			is_imprisoned = no
			is_lotr_adult = yes
			is_dwarf = yes
		}
	}

	valid_character = {
		scope:employee = {
			custom_tooltip = {
				text = IS_NOT_THE_SPOUSE_OF_CHARACTER_COURT_POSITION
				NOT = { is_spouse_of = scope:liege }
			}
			trigger_if = {
				limit = { NOT = { has_court_position = stone_singer_court_position } }
				court_position_does_not_already_have_a_job_trigger = yes # This positions is considered a job, and cannot be held at the same tims as another similar position
			}
		}
	}

	revoke_cost = {
		prestige =  {
			value = major_court_position_prestige_revoke_cost

			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = stone_singer_court_position
					any_court_position_holder = {
				        type = stone_singer_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = stone_singer_court_position
						any_court_position_holder = {
					        type = stone_singer_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = stone_singer_court_position
						any_court_position_holder = {
					        type = stone_singer_court_position
					        scope:liege = {
								has_hook_of_type = {
									type = obligation_hook
									target = prev
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints) 
	scaling_employer_modifiers = {
		terrible = {
			monthly_dynasty_prestige = 0.01
		}
		poor = {
			monthly_dynasty_prestige = 0.02
		}
		average = {
			monthly_dynasty_prestige = 0.03
		}
		good = {
			monthly_dynasty_prestige = 0.04
		}
		excellent = {
			monthly_dynasty_prestige = 0.05
		}
	}
	
	custom_employer_modifier_description = stone_singer_custom_effect_description

	modifier = {
		monthly_prestige = minor_court_position_prestige_salary
	}

	on_court_position_received = {
		stone_singer_title_accepted_effect = yes
	}
	on_court_position_revoked = { 
		stone_singer_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		stone_singer_title_invalidated_effect = yes
	}
	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = {
			limit = {
				scope:liege = {
					highest_held_title_tier >= tier_duchy
				}
			}
			add = 50
		}
		if = {
			limit = {
				scope:liege = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			add = 50
		}
        if = {
            limit = {
                exists = scope:firing_court_position
            }
            add = 100
            scope:employee = {
                # Does the liege have a better candidate that they should be hiring instead?
                if = {
                    limit = {
                        scope:highest_available_aptitude > scope:employee_aptitude
                    }
                    add = -75
                }
            }
        }
		add = court_position_debt_considerations_value
	}
}

second_marshal_of_rohan_position = {
	max_available_positions = 1
	category = court_position_category_royal
	minimum_rank = kingdom # Should only be available for kings and emperors
	skill = martial

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 20
		add = {
			value = martial
			multiply = 3
			max = 80
			desc = court_position_skill_martial
		}
		if = {
			limit = { var:bonus_aptitude_role ?= flag:master_of_horse }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
	}

	is_shown = {
		NOT = { government_has_flag = government_is_landless_adventurer }
		primary_title = title:k_rohan
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_kingdom
	}

	is_shown_character = {  # Can't employ the 3rd marshal as 2nd marshal
		scope:employee = {
			is_imprisoned = no
			is_lotr_adult = yes
			is_landed = yes
		}
		trigger_if = {
			limit = { scope:liege = { employs_court_position = third_marshal_of_rohan_position } }
			scope:liege = {
				any_court_position_holder = {
					type = third_marshal_of_rohan_position
					NOT = { this = scope:employee }
				}
			}
		}
	}

	valid_character = {
		scope:employee = {
			base_court_position_validity_trigger = { EMPLOYER = scope:liege }
			NOR = {
				has_trait = blind
				has_trait = infirm
			}
			can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = { 
					court_position_obligation_hook_salary_trigger = {
						POS = master_of_horse
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					is_landless_adventurer = yes
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		round = no
		gold = 0
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			light_cavalry_damage_mult = 0.03
			light_cavalry_screen_mult = 0.02
		}
		poor = {
			light_cavalry_damage_mult = 0.06
			light_cavalry_screen_mult = 0.04
		}
		average = {
			court_grandeur_baseline_add = 1
			monthly_county_control_growth_add = 0.02
			light_cavalry_damage_mult = 0.09
			light_cavalry_screen_mult = 0.06
		}
		good = {
			court_grandeur_baseline_add = 2
			monthly_county_control_growth_add = 0.05
			light_cavalry_damage_mult = 0.12
			light_cavalry_screen_mult = 0.08
		}
		excellent = {
			court_grandeur_baseline_add = 3
			monthly_county_control_growth_add = 0.10
			light_cavalry_damage_mult = 0.15
			light_cavalry_screen_mult = 0.10
		}
	}

	modifier = {
		monthly_prestige = minor_court_position_prestige_salary
	}

	on_court_position_received = {
		second_marshal_of_rohan_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		second_marshal_of_rohan_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		second_marshal_of_rohan_title_invalidated_effect = yes
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		add = court_position_debt_considerations_value
	}
}

third_marshal_of_rohan_position = {
	max_available_positions = 1
	category = court_position_category_royal
	minimum_rank = kingdom # Should only be available for kings and emperors
	skill = martial

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 20
		add = {
			value = martial
			multiply = 3
			max = 80
			desc = court_position_skill_martial
		}
		if = {
			limit = { var:bonus_aptitude_role ?= flag:master_of_horse }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
	}

	is_shown = {
		NOT = { government_has_flag = government_is_landless_adventurer }
		primary_title = title:k_rohan
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_kingdom
	}

	is_shown_character = {
		scope:employee = {
			is_imprisoned = no
			is_lotr_adult = yes
			is_landed = yes
		}
		trigger_if = { # Can't employ the 2nd marshal as 3rd marshal
			limit = { scope:liege = { employs_court_position = second_marshal_of_rohan_position } }
			scope:liege = {
				any_court_position_holder = {
					type = second_marshal_of_rohan_position
					NOT = { this = scope:employee }
				}
			}
		}
	}

	valid_character = {
		scope:employee = {
			base_court_position_validity_trigger = { EMPLOYER = scope:liege }
			NOR = {
				has_trait = blind
				has_trait = infirm
			}
			can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege }
			trigger_if = {
				limit = { scope:liege = { employs_court_position = second_marshal_of_rohan_position } }
				any_court_position_holder = {
				    type = second_marshal_of_rohan_position
					NOT = { this = scope:employee }
				}
			}
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = { 
					court_position_obligation_hook_salary_trigger = {
						POS = master_of_horse
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					is_landless_adventurer = yes
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		round = no
		gold = 0
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			heavy_cavalry_damage_mult = 0.03
			heavy_cavalry_toughness_mult = 0.02
		}
		poor = {
			heavy_cavalry_damage_mult = 0.06
			heavy_cavalry_toughness_mult = 0.04
		}
		average = {
			court_grandeur_baseline_add = 1
			monthly_county_control_growth_add = 0.02
			heavy_cavalry_damage_mult = 0.09
			heavy_cavalry_toughness_mult = 0.06
		}
		good = {
			court_grandeur_baseline_add = 2
			monthly_county_control_growth_add = 0.05
			heavy_cavalry_damage_mult = 0.12
			heavy_cavalry_toughness_mult = 0.08
		}
		excellent = {
			court_grandeur_baseline_add = 3
			monthly_county_control_growth_add = 0.10
			heavy_cavalry_damage_mult = 0.15
			heavy_cavalry_toughness_mult = 0.10
		}
	}

	modifier = {
		monthly_prestige = minor_court_position_prestige_salary
	}

	on_court_position_received = {
		third_marshal_of_rohan_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		third_marshal_of_rohan_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		third_marshal_of_rohan_title_invalidated_effect = yes
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		add = court_position_debt_considerations_value
	}
}