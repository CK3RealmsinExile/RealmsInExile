
# Have a look at _court_positions.info for documentation

##################################
### !!! IMPORTANT JUKE NOTE!!! ###
##################################
# You should keep the following effects updated when adding a new court position:

### common/customizable_localization
# RelationToMe
# RelationToMePossessive
# RelationToMeShort
# GetTargetCourtPosition
# GetTargetCourtPositionDesc
# GetCourtPositionSubject (Optional)

# The Rest is Optional!
# Mostly event effects that assign random court positions

### common/scripted_effects
# court_position_generator_effect
# court_position_generator_assignment_effect
# camp_officer_generator_effect	(If LAAMP position)
# camp_officer_generator_assignment_effect (If LAAMP position)
# decide_court_position_to_give_effect
# distribute_determined_court_position_effect
## Hold Court Stuff
# employ_character_as_any_free_position_effect
# mark_court_position_for_employment_effect
# employ_character_as_marked_court_position_effect

### common/scripted_triggers
## Hold Court Stuff
# can_be_employed_as_any_court_position_trigger
# character_can_be_employed_in_a_court_position_trigger
# can_be_employed_in_any_court_position_trigger

### common/script_values
# diarch_loyalty_score_standard_values_general_court_positions_value

### events
## Hold Court Stuff
# hold_court.8090 # A Place at Court

########################################
### !!! IMPORTANT JUKE NOTE OVER !!! ###
########################################

# COURT POSITIONS

### Overseer of the Mines ###
overseer_of_the_mines_court_position = {
	max_available_positions = 1
	minimum_rank = county
	skill = stewardship

	court_position_asset = {
		animation = page_flipping
		background = "gfx/interface/illustrations/event_scenes/throneroom_noldor_mid.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}
	
	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 25
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = stewardship
			multiply = 2
			max = 50
			desc = court_position_skill_stewardship
		}
		add = {
			value = learning
			multiply = 1.5
			max = 50
			desc = court_position_skill_learning
		}
		if = {
			limit = {
				miner_lifestyle_track_greater_equal_trigger = { TRACK = hewer GREATER_EQUAL = 100 }
			}
			add = { 
				value = 40
				desc = court_position_miner_3_trait
			}
		}
		else_if = {
			limit = {
				miner_lifestyle_track_greater_equal_trigger = { TRACK = hewer GREATER_EQUAL = 50 }
			}
			add = { 
				value = 30
				desc = court_position_miner_2_trait
			}
		}
		else_if = {
			limit = { has_trait = lifestyle_miner }
			add = { 
				value = 20
				desc = court_position_miner_1_trait
			}
		}
		if = {
			limit = { has_trait = brave }
			add = {
				value = 5
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = { has_trait = lazy }
			add = {
				value = -10
				desc = court_position_lazy_trait
			}
		}
		if = {
			limit = { has_trait = overseer }
			add = {
				value = 15
				desc = court_position_overseer_trait
			}
		}
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_high_penalty_value
	}

	is_shown = {
		NOT = { is_dwarf = yes }
		is_landless_adventurer = no
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_county
		culture = { has_cultural_parameter = can_use_mining_activity }
	}

	is_shown_character = {
		scope:employee = {
			is_lotr_adult = yes
			is_courtier_of = scope:liege
			is_imprisoned = no
			is_lotr_adult = yes
		}
	}

	valid_character = {
		scope:employee = {
			overseer_of_the_mines_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = {
		prestige =  {
			value = major_court_position_prestige_revoke_cost

			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = overseer_of_the_mines_court_position
					any_court_position_holder = {
				        type = overseer_of_the_mines_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = overseer_of_the_mines_court_position
						any_court_position_holder = {
					        type = overseer_of_the_mines_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = overseer_of_the_mines_court_position
						any_court_position_holder = {
					        type = overseer_of_the_mines_court_position
					        scope:liege = {
								has_hook_of_type = {
									type = obligation_hook
									target = prev
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
				}
			}
		}
	}

	custom_employer_modifier_description = overseer_of_the_mines_custom_effect_description

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints) 
	scaling_employer_modifiers = {
		terrible = {
			monthly_income_mult = 0.01
		}
		poor = {
			court_grandeur_baseline_add = 1
			monthly_income_mult = 0.02
		}
		average = {
			court_grandeur_baseline_add = 1
			monthly_income_mult = 0.03
		}
		good = {
			court_grandeur_baseline_add = 2
			monthly_income_mult = 0.04
		}
		excellent = {
			court_grandeur_baseline_add = 2
			monthly_income_mult = 0.05
		}
	}

	modifier = {
		monthly_prestige = 0.25
		stewardship = 1
	}

	on_court_position_received = {
		overseer_of_the_mines_title_accepted_effect = yes
	}
	on_court_position_revoked = { 
		overseer_of_the_mines_revoked_effect = yes
	}
	on_court_position_invalidated = {
		overseer_of_the_mines_invalidated_effect = yes
	}
	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		scope:liege = {
			# More likely to hire if you're a miner
			if = {
				limit = {
					has_trait = lifestyle_miner
				}
				add = 25
			}
		}
		add = court_position_debt_considerations_value
	}
}

### Stone Singer ###
stone_singer_court_position = {
	max_available_positions = 1
	opinion = {
		value = regular_court_position_opinion
	}
	skill = learning

	court_position_asset = {
		animation = chaplain
		background = "gfx/interface/illustrations/event_scenes/throneroom_dwarf.dds"
	}
	
	# How high the aptitude has to be to reach the 5 different modifier levels

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 1
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = diplomacy
			multiply = 2
			max = 50
			desc = court_position_skill_diplomacy
		}
		add = {
			value = learning
			multiply = 1.5
			max = 20
			desc = court_position_skill_learning
		}
		if = { # Poets are likely to have a better singing voice
			limit = {
				has_trait = poet
			}
			add = {
				value = 15
				desc = court_position_poet_trait
			}
		}
		if = {
			limit = {
				miner_lifestyle_track_greater_equal_trigger = { TRACK = hewer GREATER_EQUAL = 100 }
			}
			add = { 
				value = 20
				desc = court_position_miner_3_trait
			}
		}
		else_if = {
			limit = {
				miner_lifestyle_track_greater_equal_trigger = { TRACK = hewer GREATER_EQUAL = 50 }
			}
			add = { 
				value = 15
				desc = court_position_miner_2_trait
			}
		}
		else_if = {
			limit = { has_trait = lifestyle_miner }
			add = { 
				value = 10
				desc = court_position_miner_1_trait
			}
		}
		if = {
			limit = {
				has_trait = lifestyle_mystic
				has_trait_xp = {
					trait = lifestyle_mystic
					value >= 100
				}
			}
			add = { 
				value = 20
				desc = court_position_mystic_3_trait
			}
		}
		else_if = {
			limit = {
				has_trait = lifestyle_mystic
				has_trait_xp = {
					trait = lifestyle_mystic
					value >= 50
				}
			}
			add = { 
				value = 10
				desc = court_position_mystic_2_trait
			}
		}
		else_if = {
			limit = { 
				has_trait = lifestyle_mystic
			}
			add = { 
				value = 5
				desc = court_position_mystic_1_trait
			}
		}
		else_if = {
			limit = { 
				has_character_modifier = pilgrim_of_mount_dolmed
			}
			add = { 
				value = 25
				desc = court_position_pilgrim_of_mount_dolmed_modifier
			}
		}
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_low_penalty_value
	}

	is_shown = {
		is_dwarf = yes
		is_landless_adventurer = no
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_county
	}

	is_shown_character = {
		scope:employee = {
			is_lotr_adult = yes
			is_courtier_of = scope:liege
			is_imprisoned = no
			is_lotr_adult = yes
			is_dwarf = yes
		}
	}

	valid_character = {
		scope:employee = {
			stone_singer_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = {
		prestige =  {
			value = major_court_position_prestige_revoke_cost

			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = stone_singer_court_position
					any_court_position_holder = {
				        type = stone_singer_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = stone_singer_court_position
						any_court_position_holder = {
					        type = stone_singer_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = stone_singer_court_position
						any_court_position_holder = {
					        type = stone_singer_court_position
					        scope:liege = {
								has_hook_of_type = {
									type = obligation_hook
									target = prev
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints) 
	scaling_employer_modifiers = {
		terrible = {
			monthly_dynasty_prestige = 0.01
		}
		poor = {
			monthly_dynasty_prestige = 0.02
		}
		average = {
			monthly_dynasty_prestige = 0.03
		}
		good = {
			monthly_dynasty_prestige = 0.04
		}
		excellent = {
			monthly_dynasty_prestige = 0.05
		}
	}
	
	custom_employer_modifier_description = stone_singer_custom_effect_description

	modifier = {
		monthly_prestige = 0.25
	}

	on_court_position_received = {
		stone_singer_title_accepted_effect = yes
	}
	on_court_position_revoked = { 
		stone_singer_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		stone_singer_title_invalidated_effect = yes
	}
	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = {
			limit = {
				scope:liege = {
					highest_held_title_tier >= tier_duchy
				}
			}
			add = 50
		}
		if = {
			limit = {
				scope:liege = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			add = 50
		}
        if = {
            limit = {
                exists = scope:firing_court_position
            }
            add = 100
            scope:employee = {
                # Does the liege have a better candidate that they should be hiring instead?
                if = {
                    limit = {
                        scope:highest_available_aptitude > scope:employee_aptitude
                    }
                    add = -75
                }
            }
        }
		add = court_position_debt_considerations_value
	}
}

raven_keeper_court_position = { # Raven Keeper, Dwarven Keeper of the Swans equivalent for Ravens of Erebor
	sort_order = 164
	max_available_positions = 1
	minimum_rank = kingdom # Should only be available for kings and emperors
	skill = stewardship

	court_position_asset = {
		animation = personality_compassionate
		background = "gfx/interface/illustrations/event_scenes/temple_dwarven.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 40
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = stewardship
			multiply = 4
			max = 50
			desc = court_position_skill_stewardship
		}
		if = {
			limit = {
				hunt_lifestyle_track_greater_equal_trigger = { TRACK = hunter GREATER_EQUAL = 100 }
			}
			add = {
				value = 20
				desc = court_position_hunter_3_trait
			}
		}
		else_if = {
			limit = {
				hunt_lifestyle_track_greater_equal_trigger = { TRACK = hunter GREATER_EQUAL = 50 }
			}
			add = {
				value = 10
				desc = court_position_hunter_2_trait
			}
		}
		else_if = {
			limit = { has_trait = lifestyle_hunter }
			add = {
				value = 5
				desc = court_position_hunter_1_trait
			}
		}
		if = {
			limit = {
				has_trait = blind # Can't see the damn birds
			}
			add = {
				value = -20
				desc = court_position_blind_trait
			}
		}
		add = court_position_aptitude_traveling_friends_value
		add = court_position_aptitude_eunuch_tradition_value
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_low_penalty_value
		# Bonus from court.8311
		if = {
			limit = { var:bonus_aptitude_role ?= flag:raven_keeper }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
		# Seneschal
		if = {
			limit = {
				liege.court_position:seneschal_court_position ?= {
					has_variable = performing_improve_court
				}
			}
			add = {
				value = liege.court_position:seneschal_court_position.seneschal_improve_court_value
				desc = seneschal_improve_court_aptitude_desc
			}
		}
	}

	is_shown = {
	 	is_landed_or_landless_administrative = yes
		capital_province = {
			geographical_region = middleearth_mountains_iron_erebor
		}
		is_dwarf = yes
		trigger_if = {
			limit = {
				is_ai = yes
				highest_held_title_tier <= tier_county
			}
			always = no
		}
	}

	valid_position = {
		has_title = title:c_ravenhill
		is_landed_or_landless_administrative = yes
		highest_held_title_tier >= tier_county
		culture = culture:longbeards
	}
		# culture = {
		# 	has_cultural_pillar = heritage_west_germanic
		# }
		# always = no #LotR
	#}

	is_shown_character = {
		scope:employee = {
			is_lotr_adult = yes
			is_imprisoned = no
			is_landless_adventurer = no
			is_dwarf = yes
		}
	}


	valid_character = {
		scope:employee = {
			raven_keeper_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = raven_keeper
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					government_has_flag = government_is_landless_adventurer
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = raven_keeper } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved with obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = raven_keeper
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = raven_keeper }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = raven_keeper }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
		prestige = {
			value = minor_court_position_prestige_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = raven_keeper } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved via obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = raven_keeper
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = raven_keeper }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = raven_keeper }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
	}

	base_employer_modifier = {
		diplomacy_per_prestige_level = 1
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
		}
		poor = {
			court_grandeur_baseline_add = 1
		}
		average = {
			court_grandeur_baseline_add = 1
		}
		good = {
			court_grandeur_baseline_add = 2
		}
		excellent = {
			court_grandeur_baseline_add = 2
		}
	}

	modifier = {
		diplomacy = 2
		general_opinion = 5
	}

	on_court_position_received = {
		raven_keeper_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		raven_keeper_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		raven_keeper_title_invalidated_effect = yes
	}
	on_court_position_vacated = {
		court_position_vacated_event_effect = {
			COURT_POSITION_TYPE = raven_keeper_court_position
		}
	}
	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 25
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = { # To stop petitioned positions immediately being fired by the AI
			limit = {
				court_position_petition_ai_weight_trigger = { ROLE = raven_keeper }
			}
			add = 1000
		}
		add = court_position_debt_considerations_value
	}
}

### Second Marshal of Rohan ###
second_marshal_of_rohan_court_position = {
	max_available_positions = 1
	minimum_rank = kingdom # Should only be available for kings and emperors
	skill = martial

	court_position_asset = {
		animation = marshal_shield
		background = "gfx/interface/illustrations/event_scenes/throneroom_rohirrim.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 20
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = martial
			multiply = 3
			max = 80
			desc = court_position_skill_martial
		}
		if = {
			limit = { var:bonus_aptitude_role ?= flag:master_of_horse }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
		if = {
			limit = { has_trait = brave }
			add = {
				value = 5
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = { has_trait = craven }
			add = {
				value = -10
				desc = court_position_craven_trait
			}
		}
		if = {
			limit = {
				OR = {
					has_trait = education_martial_1
					has_trait = education_martial_2
					has_trait = education_martial_3
					has_trait = education_martial_4
					has_trait = education_martial_5
				}
			}
			add = {
				value = 5
				if = {
					limit = { has_trait = education_martial_2 }
					add = 10
				}
				if = {
					limit = {has_trait = education_martial_3 }
					add =  15
				}
				if = {
					limit = { has_trait = education_martial_4 }
					add = 20
				}
				if = {
					limit = { has_trait = education_martial_5 }
					add = 25
				}
				desc = trait_education_martial_prowess
			}
		}
		if = {
			limit = {
				has_trait = blind
			}
			add = {
				value = -50
				desc = court_position_blind_trait
			}
		}
		if = {
			limit = {
				has_trait = infirm
			}
			add = {
				value = -75
				desc = court_position_infirm_trait
			}
		}
		if = {
			limit = { has_trait = overseer }
			add = {
				value = 15
				desc = court_position_overseer_trait
			}
		}
		if = {
			limit = { has_trait = gallant }
			add = {
				value = 15
				desc = court_position_gallant_trait
			}
		}
	}

	is_shown = {
		NOT = { government_has_flag = government_is_landless_adventurer }
		primary_title = title:k_rohan
		is_human = yes
		culture = {
			OR = {
				has_cultural_pillar = heritage_northron
				has_cultural_pillar = heritage_hadorim
			}
		}
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_kingdom
	}

	is_shown_character = {  # Can't employ the 3rd marshal as 2nd marshal
		scope:employee = {
			is_imprisoned = no
			is_lotr_adult = yes
			is_landed = yes
			NOT = { has_court_position = third_marshal_of_rohan_court_position }
		}
	}

	valid_character = {
		scope:employee = {
			second_marshal_of_rohan_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = { 
					court_position_obligation_hook_salary_trigger = {
						POS = master_of_horse
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					is_landless_adventurer = yes
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		gold = {
			value = medium_court_position_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = master_of_horse } }
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved with obligation hook
			else_if = {
				limit = { 
					court_position_obligation_hook_salary_trigger = {
						POS = master_of_horse
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = master_of_horse }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = master_of_horse_court_position
						any_court_position_holder = {
					        type = master_of_horse_court_position
					        has_character_flag = free_master_of_horse
						}
					}
				}
				multiply = {
					value = 0
					desc = free_court_position
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { is_landless_adventurer = yes }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			light_cavalry_damage_mult = 0.03
			light_cavalry_screen_mult = 0.02
		}
		poor = {
			light_cavalry_damage_mult = 0.06
			light_cavalry_screen_mult = 0.04
		}
		average = {
			court_grandeur_baseline_add = 1
			monthly_county_control_growth_add = 0.02
			light_cavalry_damage_mult = 0.09
			light_cavalry_screen_mult = 0.06
		}
		good = {
			court_grandeur_baseline_add = 2
			monthly_county_control_growth_add = 0.05
			light_cavalry_damage_mult = 0.12
			light_cavalry_screen_mult = 0.08
		}
		excellent = {
			court_grandeur_baseline_add = 3
			monthly_county_control_growth_add = 0.10
			light_cavalry_damage_mult = 0.15
			light_cavalry_screen_mult = 0.10
		}
	}

	modifier = {
		monthly_prestige = 0.25
	}

	on_court_position_received = {
		second_marshal_of_rohan_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		second_marshal_of_rohan_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		second_marshal_of_rohan_title_invalidated_effect = yes
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		add = court_position_debt_considerations_value
	}
}

### Third Marshal of Rohan ###
third_marshal_of_rohan_court_position = {
	max_available_positions = 1
	minimum_rank = kingdom # Should only be available for kings and emperors
	skill = martial

	court_position_asset = {
		animation = marshal_shield
		background = "gfx/interface/illustrations/event_scenes/throneroom_rohirrim.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 20
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = martial
			multiply = 3
			max = 80
			desc = court_position_skill_martial
		}
		if = {
			limit = { var:bonus_aptitude_role ?= flag:master_of_horse }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
		if = {
			limit = { has_trait = brave }
			add = {
				value = 5
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = { has_trait = craven }
			add = {
				value = -10
				desc = court_position_craven_trait
			}
		}
		if = {
			limit = {
				OR = {
					has_trait = education_martial_1
					has_trait = education_martial_2
					has_trait = education_martial_3
					has_trait = education_martial_4
					has_trait = education_martial_5
				}
			}
			add = {
				value = 5
				if = {
					limit = { has_trait = education_martial_2 }
					add = 10
				}
				if = {
					limit = {has_trait = education_martial_3 }
					add =  15
				}
				if = {
					limit = { has_trait = education_martial_4 }
					add = 20
				}
				if = {
					limit = { has_trait = education_martial_5 }
					add = 25
				}
				desc = trait_education_martial_prowess
			}
		}
		if = {
			limit = {
				has_trait = blind
			}
			add = {
				value = -50
				desc = court_position_blind_trait
			}
		}
		if = {
			limit = {
				has_trait = infirm
			}
			add = {
				value = -75
				desc = court_position_infirm_trait
			}
		}
		if = {
			limit = { has_trait = overseer }
			add = {
				value = 15
				desc = court_position_overseer_trait
			}
		}
		if = {
			limit = { has_trait = gallant }
			add = {
				value = 15
				desc = court_position_gallant_trait
			}
		}
	}

	is_shown = {
		NOT = { government_has_flag = government_is_landless_adventurer }
		primary_title = title:k_rohan
		is_human = yes
		culture = {
			OR = {
				has_cultural_pillar = heritage_northron
				has_cultural_pillar = heritage_hadorim
			}
		}
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_kingdom
		employs_court_position = second_marshal_of_rohan_court_position
	}

	is_shown_character = {
		scope:employee = {
			is_lotr_adult = yes
			is_imprisoned = no
			is_lotr_adult = yes
			is_landed = yes
			can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege }
			NOT = { has_court_position = second_marshal_of_rohan_court_position }
		}
	}

	valid_character = {
		scope:employee = {
			third_marshal_of_rohan_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = { 
					court_position_obligation_hook_salary_trigger = {
						POS = master_of_horse
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					is_landless_adventurer = yes
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		
		gold = {
			value = medium_court_position_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = master_of_horse } }
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved with obligation hook
			else_if = {
				limit = { 
					court_position_obligation_hook_salary_trigger = {
						POS = master_of_horse
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = master_of_horse }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = master_of_horse_court_position
						any_court_position_holder = {
					        type = master_of_horse_court_position
					        has_character_flag = free_master_of_horse
						}
					}
				}
				multiply = {
					value = 0
					desc = free_court_position
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { is_landless_adventurer = yes }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			heavy_cavalry_damage_mult = 0.03
			heavy_cavalry_toughness_mult = 0.02
		}
		poor = {
			heavy_cavalry_damage_mult = 0.06
			heavy_cavalry_toughness_mult = 0.04
		}
		average = {
			court_grandeur_baseline_add = 1
			monthly_county_control_growth_add = 0.02
			heavy_cavalry_damage_mult = 0.09
			heavy_cavalry_toughness_mult = 0.06
		}
		good = {
			court_grandeur_baseline_add = 2
			monthly_county_control_growth_add = 0.05
			heavy_cavalry_damage_mult = 0.12
			heavy_cavalry_toughness_mult = 0.08
		}
		excellent = {
			court_grandeur_baseline_add = 3
			monthly_county_control_growth_add = 0.10
			heavy_cavalry_damage_mult = 0.15
			heavy_cavalry_toughness_mult = 0.10
		}
	}

	modifier = {
		monthly_prestige = 0.25
	}

	on_court_position_received = {
		third_marshal_of_rohan_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		third_marshal_of_rohan_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		third_marshal_of_rohan_title_invalidated_effect = yes
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		add = court_position_debt_considerations_value
	}
}

### Warden of the Keys of Minas Tirith ###
warden_of_the_keys_court_position = {
	max_available_positions = 1
	skill = stewardship

	court_position_asset = {
		animation = zealous
		background = "gfx/interface/illustrations/event_scenes/minas_tirith.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }
	
	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 20
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = stewardship
			multiply = 2.5
			max = 50
			desc = court_position_skill_stewardship
		}
		if = {
			limit = {
				has_trait = administrator
			}
			add = {
				value = 20
				desc = court_position_administrator_trait
			}
		}
		if = {
			limit = {
				has_trait = overseer
			}
			add = {
				value = 20
				desc = court_position_overseer_trait
			}
		}
		if = {
			limit = {
				has_trait = organizer
			}
			add = {
				value = 20
				desc = court_position_organizer_trait
			}
		}
		if = {
			limit = {
				has_trait = unyielding_defender
			}
			add = {
				value = 10
				desc = court_position_unyielding_defender_trait
			}
		}
		if = {
			limit = { has_trait = brave }
			add = {
				value = 5
				desc = court_position_brave_trait
			}
		}
		if = {
			limit = { has_trait = craven }
			add = {
				value = -10
				desc = court_position_craven_trait
			}
		}
		add = court_position_aptitude_traveling_friends_value
		add = court_position_aptitude_eunuch_tradition_value
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_low_penalty_value
	}

	is_shown = {
		NOT = { government_has_flag = government_is_landless_adventurer }
		is_human = yes
		any_sub_realm_barony = {
			county.holder = root
			title_province = { has_building_or_higher = wonder_minas_anor_01 }
		}
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		highest_held_title_tier >= tier_county
	}


	is_shown_character = {
		scope:employee = {
			is_lotr_adult = yes
			is_courtier_of = scope:liege
			is_imprisoned = no
			is_lotr_adult = yes
			can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege }
		}
	}

	valid_character = {
		scope:employee = {
			warden_of_the_keys_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = {
		prestige =  {
			value = major_court_position_prestige_revoke_cost

			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					exists = dynasty
					dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

					employs_court_position = warden_of_the_keys_court_position
					any_court_position_holder = {
				        type = warden_of_the_keys_court_position
						exists = dynasty
						house = prev.house
					}
				}
				multiply = 0
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = {
					scope:liege = {
						exists = dynasty
						dynasty = { has_dynasty_perk = fp2_coterie_legacy_1 }

						employs_court_position = warden_of_the_keys_court_position
						any_court_position_holder = {
					        type = warden_of_the_keys_court_position
							exists = dynasty
							house = prev.house
						}
					}
				}
				multiply = {
					value = 0.0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			if = {
				limit = {
					scope:liege = {
						employs_court_position = warden_of_the_keys_court_position
						any_court_position_holder = {
					        type = warden_of_the_keys_court_position
					        scope:liege = {
								has_hook_of_type = {
									type = obligation_hook
									target = prev
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
				}
			}
		}
	}

	is_powerful_agent = yes

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = { # Juke note: We discussed quite a bit what to give here
		terrible = {
			court_grandeur_baseline_add = 1
			enemy_hostile_scheme_success_chance_add = -2
			#controlled_province_advantage = 1
			monthly_war_income_mult = 0.02
		}
		poor = {
			court_grandeur_baseline_add = 1
			enemy_hostile_scheme_success_chance_add = -4
			#controlled_province_advantage = 2
			monthly_war_income_mult = 0.02
		}
		average = {
			court_grandeur_baseline_add = 2
			enemy_hostile_scheme_success_chance_add = -6
			#controlled_province_advantage = 3
			monthly_war_income_mult = 0.05
		}
		good = {
			court_grandeur_baseline_add = 2
			enemy_hostile_scheme_success_chance_add = -8
			#controlled_province_advantage = 4
			monthly_war_income_mult = 0.08
		}
		excellent = {
			court_grandeur_baseline_add = 3
			enemy_hostile_scheme_success_chance_add = -10
			#controlled_province_advantage = 5
			monthly_war_income_mult = 0.1
		}
	}
	
	#custom_employer_modifier_description = warden_of_the_keys_custom_effect_description

	modifier = {
		monthly_prestige = 0.75
		monthly_martial_lifestyle_xp_gain_mult = 0.2
		monthly_stewardship_lifestyle_xp_gain_mult = 0.2
		same_culture_opinion = 10
		stress_gain_mult = 0.1
	}

	on_court_position_received = {
		warden_of_the_keys_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		warden_of_the_keys_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		warden_of_the_keys_title_invalidated_effect = yes
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = {
			limit = {
				scope:liege = {
					highest_held_title_tier >= tier_duchy
				}
			}
			add = 50
		}
		if = {
			limit = {
				scope:liege = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			add = 50
		}
        if = {
            limit = {
                exists = scope:firing_court_position
            }
            add = 100
            scope:employee = {
                # Does the liege have a better candidate that they should be hiring instead?
                if = {
                    limit = {
                        scope:highest_available_aptitude > scope:employee_aptitude
                    }
                    add = -75
                }
            }
        }
		add = court_position_debt_considerations_value
	}
}

butler_court_position = { # LotR equivalent for Court Brewmaster, used for Dorwinrim and Northern Elves
	sort_order = 210
	max_available_positions = 1
	minimum_rank = county
	skill = learning

	court_position_asset = {
		animation = toast_goblet
		background = "gfx/interface/illustrations/event_scenes/bp1_wine_cellar.dds"
	}

	opinion = {
		value = regular_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 25
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = learning
			multiply = 2.5
			max = 50
			desc = court_position_skill_learning
		}

		# Positive Traits
		if = {
			limit = {
				has_trait = diligent
			}
			add = {
				value = 15
				desc = court_position_diligent_trait
			}
		}
		if = {
			limit = {
				has_trait = patient
			}
			add = {
				value = 15
				desc = court_position_patient_trait
			}
		}
		if = {
			limit = {
				has_trait = humble
			}
			add = {
				value = 15
				desc = court_position_humble_trait
			}
		}
		if = {
			limit = {
				has_trait = lifestyle_reveler
			}
			add = {
				value = 15
				desc = court_position_reveler_trait
			}
		}
		# Negative Traits
		if = {
			limit = {
				has_trait = impatient
			}
			add = {
				value = -10
				desc = court_position_impatient_trait
			}
		}
		if = {
			limit = {
				has_trait = lazy
			}
			add = {
				value = -10
				desc = court_position_lazy_trait
			}
		}

		add = court_position_aptitude_traveling_friends_value
		add = court_position_aptitude_eunuch_tradition_value
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_high_penalty_value
		# Bonus from court.8311
		if = {
			limit = { var:bonus_aptitude_role ?= flag:butler }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
		# Seneschal
		if = {
			limit = {
				liege.court_position:seneschal_court_position ?= {
					has_variable = performing_improve_court
				}
			}
			add = {
				value = liege.court_position:seneschal_court_position.seneschal_improve_court_value
				desc = seneschal_improve_court_aptitude_desc
			}
		}
	}

	is_shown = {
		is_landed_or_landless_administrative = yes
		trigger_if = {
			limit = {
				is_ai = yes
				highest_held_title_tier <= tier_county
			}
			always = no
		}
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		OR = {
			culture = { has_cultural_tradition = tradition_heryvellyn }
			culture = { has_cultural_tradition = tradition_dorwinion_vineyards }
		}
		is_landed_or_landless_administrative = yes
		highest_held_title_tier >= tier_county
	}

	is_shown_character = {
		scope:employee = {
			is_imprisoned = no
		}
	}

	valid_character = {
		scope:employee = {
			liege = scope:liege # To ensure invalidation if they leave court
			butler_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = butler
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					government_has_flag = government_is_landless_adventurer
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = minor_court_position_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = butler } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved via obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = butler
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = butler }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = butler }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = 0
			}
		}
		prestige = {
			value = minor_court_position_prestige_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = butler } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved via obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = butler
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = butler }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = butler }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			county_opinion_add = 1
		}
		poor = {
			county_opinion_add = 2
		}
		average = {
			county_opinion_add = 3
		}
		good = {
			county_opinion_add = 6
		}
		excellent = {
			county_opinion_add = 10
		}
	}

	custom_employer_modifier_description = butler_employer_custom_effect_description

	modifier = {
		general_opinion = 5
		monthly_prestige = 0.25
		learning = 1
	}

	on_court_position_received = {
		butler_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		butler_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		butler_title_invalidated_effect = yes
	}
	on_court_position_vacated = {
		court_position_vacated_event_effect = {
			COURT_POSITION_TYPE = butler_court_position
		}
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = { # To stop petitioned positions immediately being fired by the AI
			limit = {
				court_position_petition_ai_weight_trigger = { ROLE = butler }
			}
			add = 1000
		}
		add = court_position_debt_considerations_value
	}
}

first_axe_court_position = { # Dwarven equivalent for Master of the Horse
	sort_order = 280
	max_available_positions = 1
	minimum_rank = duchy # Should only be available for dukes or higher tiers
	skill = martial

	court_position_asset = {
		animation = marshal_axe
		background = "gfx/interface/illustrations/event_scenes/throneroom_dwarf.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 25
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = martial
			multiply = 2.5
			max = 50
			desc = court_position_skill_martial
		}
		add = {
			value = prowess
			multiply = 2
			max = 50
			desc = court_position_skill_prowess
		}
		if = {
			limit = {
				has_trait = calm
			}
			add = {
				value = 15
				desc = court_position_calm_trait
			}
		}
		if = {
			limit = { has_trait = overseer }
			add = {
				value = 15
				desc = court_position_overseer_trait
			}
		}
		if = {
			limit = { has_trait = gallant }
			add = {
				value = 15
				desc = court_position_gallant_trait
			}
		}
		add = court_position_aptitude_traveling_friends_value
		add = court_position_aptitude_eunuch_tradition_value
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_high_penalty_value
		# Bonus from court.8311
		if = {
			limit = { var:bonus_aptitude_role ?= flag:first_axe }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
		# Seneschal
		if = {
			limit = {
				liege.court_position:seneschal_court_position ?= {
					has_variable = performing_improve_court
				}
			}
			add = {
				value = liege.court_position:seneschal_court_position.seneschal_improve_court_value
				desc = seneschal_improve_court_aptitude_desc
			}
		}
	}

	is_shown = {
		is_landed_or_landless_administrative = yes
		is_dwarf = yes
		trigger_if = {
			limit = {
				is_ai = yes
				highest_held_title_tier <= tier_county
			}
			always = no
		}
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		is_landed_or_landless_administrative = yes
		highest_held_title_tier >= tier_duchy
		is_dwarf = yes
	}

	is_shown_character = {
		scope:employee = {
			is_imprisoned = no
			is_lotr_adult = yes
		}
	}

	valid_character = {
		scope:employee = {
			first_axe_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = first_axe
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					government_has_flag = government_is_landless_adventurer
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = medium_court_position_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = first_axe } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved with obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = first_axe
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = first_axe }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = first_axe }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
		prestige = {
			value = medium_court_position_prestige_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = first_axe } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved via obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = first_axe
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = first_axe }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = first_axe }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			knight_effectiveness_mult = 0.01
			character_travel_speed_mult = 0.01
		}
		poor = {
			knight_effectiveness_mult = 0.02
			character_travel_speed_mult = 0.02
			knight_limit = 1
		}
		average = {
			knight_effectiveness_mult = 0.03
			character_travel_speed_mult = 0.03
			knight_limit = 2
		}
		good = {
			knight_effectiveness_mult = 0.05
			character_travel_speed_mult = 0.05
			knight_limit = 2
		}
		excellent = {
			knight_effectiveness_mult = 0.08
			character_travel_speed_mult = 0.08
			knight_limit = 3
		}
	}

	modifier = {
		monthly_martial_lifestyle_xp_gain_mult = 0.15
		knight_effectiveness_mult = 0.15
	}

	on_court_position_received = {
		first_axe_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		first_axe_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		first_axe_title_invalidated_effect = yes
	}
	on_court_position_vacated = {
		court_position_vacated_event_effect = {
			COURT_POSITION_TYPE = first_axe_court_position
		}
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = {
			limit = {
				scope:liege = {
					ai_has_warlike_personality = yes
				}
			}
			add = 200
		}
		if = { # To stop petitioned positions immediately being fired by the AI
			limit = {
				court_position_petition_ai_weight_trigger = { ROLE = first_axe }
			}
			add = 1000
		}
		add = court_position_debt_considerations_value
	}
}

taskmaster_court_position = { # Orc and Goblin equivalent for Master of the Horse
	sort_order = 280
	max_available_positions = 1
	minimum_rank = duchy # Should only be available for dukes or higher tiers
	skill = martial
	
	court_position_asset = {
		animation = menacing
		background = "gfx/interface/illustrations/event_scenes/throneroom_orc.dds"
	}

	opinion = {
		value = ceremonial_court_position_opinion
	}

	# How high the aptitude has to be to reach the 5 different modifier levels
	aptitude_level_breakpoints = { 20 40 60 80 }

	# How good is this character in this position? root scope is the holder of the court position
	aptitude = {
		value = 25
		add = court_position_aptitude_boon_voyager_trait
		add = {
			value = martial
			multiply = 2.5
			max = 50
			desc = court_position_skill_martial
		}
		add = {
			value = prowess
			multiply = 2
			max = 50
			desc = court_position_skill_prowess
		}
		if = {
			limit = {
				has_trait = calm
			}
			add = {
				value = 15
				desc = court_position_calm_trait
			}
		}
		if = {
			limit = { has_trait = overseer }
			add = {
				value = 15
				desc = court_position_overseer_trait
			}
		}
		if = {
			limit = { has_trait = gallant }
			add = {
				value = 15
				desc = court_position_gallant_trait
			}
		}
		add = court_position_aptitude_traveling_friends_value
		add = court_position_aptitude_eunuch_tradition_value
		add = court_position_aptitude_family_business_value
		add = court_position_aptitude_high_penalty_value
		# Bonus from court.8311
		if = {
			limit = { var:bonus_aptitude_role ?= flag:first_axe }
			add = {
				value = cp_bonus_aptitude_value
				desc = cp_bonus_aptitude
			}
		}
		# Seneschal
		if = {
			limit = {
				liege.court_position:seneschal_court_position ?= {
					has_variable = performing_improve_court
				}
			}
			add = {
				value = liege.court_position:seneschal_court_position.seneschal_improve_court_value
				desc = seneschal_improve_court_aptitude_desc
			}
		}
	}

	is_shown = {
		is_landed_or_landless_administrative = yes
		OR = {
			is_orc = yes
			is_goblin = yes
		}
		trigger_if = {
			limit = {
				is_ai = yes
				highest_held_title_tier <= tier_county
			}
			always = no
		}
	}

	# Is this an available position for this court? (root is court owner)
	valid_position = {
		is_landed_or_landless_administrative = yes
		highest_held_title_tier >= tier_duchy
		OR = {
			is_orc = yes
			is_goblin = yes
		}
	}

	is_shown_character = {
		scope:employee = {
			is_imprisoned = no
			is_lotr_adult = yes
		}
	}

	valid_character = {
		scope:employee = {
			taskmaster_validity_trigger = { EMPLOYER = scope:liege }
		}
	}

	revoke_cost = { # root is the liege, no other scopes are passed here!
		prestige =  {
			value = major_court_position_prestige_revoke_cost
			# Set to 0 via obligation hook
			if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = taskmaster
						LIEGE = root
					}
				}
				multiply = 0
			}
			# Avoid AI prestige issues
			if = {
				limit = {
					exists = this
					is_ai = yes
				}
				multiply = 0
			}
			# Special case for events
			if = {
				limit = {
					exists = this
					has_character_flag = free_revoke_cost
				}
				multiply = 0
			}
			#Lowering for LAAMPS, to match Camp Officer revoke cost
			if = {
				limit = { 
					exists = this
					government_has_flag = government_is_landless_adventurer
				}
				value = minor_court_position_prestige_revoke_cost
			}
		}
	}

	salary = {
		round = no
		gold = {
			value = medium_court_position_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = taskmaster } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved with obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = taskmaster
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = taskmaster }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = taskmaster }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
		prestige = {
			value = medium_court_position_prestige_salary # Update X_salary_tooltip if script_value is changed
			# Set to 0 with Dynasty Perk Inner Circle
			if = {
				limit = { court_position_inner_circle_salary_trigger = { POS = taskmaster } }
				multiply = {
					value = 0
					desc = inner_circle_salary_mod
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved via obligation hook
			else_if = {
				limit = {
					court_position_obligation_hook_salary_trigger = {
						POS = taskmaster
						LIEGE = scope:liege
					}
				}
				multiply = {
					value = 0.5
					desc = obligation_hook_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Halved salary
			if = {
				limit = {
					court_position_halved_salary_trigger = { POS = taskmaster }
				}
				multiply = {
					value = 0.5
					desc = court_position_halved_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			# Increased salary
			if = {
				limit = {
					court_position_increased_salary_trigger = { POS = taskmaster }
				}
				multiply = {
					value = 1.5
					desc = court_position_increased_salary
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
			#You're working with LAAMPS now
			if = {
				limit = { 
					scope:liege ?= { government_has_flag = government_is_landless_adventurer }
				}
				multiply = {
					value = 0
					desc = court_position_laamps_free
					format = "BASE_VALUE_FORMAT_DECIMALS_MINUS_POSITIVE"
				}
			}
		}
	}

	# These modifiers are employed based on what level the aptitude reaches (levels are defined as breakpoints)
	scaling_employer_modifiers = {
		terrible = {
			knight_effectiveness_mult = 0.01
			character_travel_speed_mult = 0.01
		}
		poor = {
			knight_effectiveness_mult = 0.02
			character_travel_speed_mult = 0.02
			knight_limit = 1
		}
		average = {
			knight_effectiveness_mult = 0.03
			character_travel_speed_mult = 0.03
			knight_limit = 2
		}
		good = {
			knight_effectiveness_mult = 0.05
			character_travel_speed_mult = 0.05
			knight_limit = 2
		}
		excellent = {
			knight_effectiveness_mult = 0.08
			character_travel_speed_mult = 0.08
			knight_limit = 3
		}
	}

	modifier = {
		monthly_martial_lifestyle_xp_gain_mult = 0.15
		knight_effectiveness_mult = 0.15
	}

	on_court_position_received = {
		taskmaster_title_accepted_effect = yes
	}
	on_court_position_revoked = {
		taskmaster_title_revoked_effect = yes
	}
	on_court_position_invalidated = {
		taskmaster_title_invalidated_effect = yes
	}
	on_court_position_vacated = {
		court_position_vacated_event_effect = {
			COURT_POSITION_TYPE = taskmaster_court_position
		}
	}

	# Scripted value to determine whether an AI will hire/fire a position or not. Hires over 0, fires under -50. Look in _court_positions.info for more extensive documentation!
	candidate_score = {
		value = 50
		add = scope:base_value
		add = court_position_candidate_score_base_value
		add = court_position_candidate_aptitude_value
		if = {
			limit = {
				scope:liege = {
					ai_has_warlike_personality = yes
				}
			}
			add = 200
		}
		if = { # To stop petitioned positions immediately being fired by the AI
			limit = {
				court_position_petition_ai_weight_trigger = { ROLE = taskmaster }
			}
			add = 1000
		}
		add = court_position_debt_considerations_value
	}
}