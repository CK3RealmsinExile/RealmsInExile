activity_sailing = {

	is_shown = {
		is_playable_character = yes
		is_in_valinor = no
		is_ai = no
		NOR = {
			is_undead = yes 
			is_maiar_fallen = yes
			is_orc = yes # Orcs hate water
			is_dwarf = yes # What will we do with the Dwarven sailor ? Early in the morning !
		}
		OR = {
			any_realm_county = {
				title_province = { 
					is_coastal = yes
					NOT = { geographical_region = middleearth_rhun } # Inland sea
				}
			}
			is_landless_ruler = yes
			# domicile ?= {
				# domicile_location = {
					# is_coastal = yes 
					# NOT = { geographical_region = middleearth_rhun } # Inland sea
				# }
			# }
		}
	}

	can_start_showing_failures_only = { # Done
		is_available_adult = yes
		custom_tooltip = {
			text = expedition_variable_trigger
			NOT = { has_variable = expedition_type_cooldown }
		}
	}

	is_valid = { # Done
		scope:host = {
			is_alive = yes
			is_imprisoned = no
			is_playable_character = yes 
			NOT = { is_incapable = yes }
			# OR = {
				# owns_a_boat = yes
				# can_afford_a_boat = yes
			# }
		}
	}

	on_invalidated = { #
		# if = {
			# limit = {
				# scope:host = { is_landed = no }
			# }
			# scope:activity = {
				# activity_type = { save_scope_as = activity_type }
			# }
			# every_attending_character = {
				# trigger_event = activity_system.0320
			# }
		# }
		# Save scopes for flavor events
		scope:activity = {
			activity_location = { save_scope_as = location }
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}
	}

	cost = { 
		gold = {
			add = {
				add = {
					value = sailing_base_cost #Base level
					desc = hunt_base_cost
				}
				add = {
					value = sailing_base_cost
					multiply = activity_cost_scale_by_era
					subtract = sailing_base_cost
					desc = activity_cost_scale_by_era_desc
				}
				if = {
					limit = {
						dynasty ?= {
							has_dynasty_perk = law_legacy_1
						}
					}
					subtract = {
						value = 0
						add = {
							value = sailing_base_cost
							add = {
								value = sailing_base_cost
								multiply = activity_cost_scale_by_era
								subtract = sailing_base_cost
							}
						}
						multiply = law_legacy_cost_reduction_mult
						desc = law_legacy_1_name
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = common_tradeport_01 
							NOT = { has_building_or_higher = common_tradeport_03 }
						}
					}
					multiply = {
						value = 0.9
						desc = activity_sailing_province_desc_common_tradeport_minor
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = common_tradeport_03 
							NOT = { has_building_or_higher = common_tradeport_06 }
						}
					}
					multiply = {
						value = 0.8
						desc = activity_sailing_province_desc_common_tradeport_medium
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = common_tradeport_06
						}
					}
					multiply = {
						value = 0.6
						desc = activity_sailing_province_desc_common_tradeport_major
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = elven_port_01 
							NOT = { has_building_or_higher = elven_port_04 }
						}
					}
					multiply = {
						value = 0.85
						desc = activity_sailing_province_desc_common_elven_port_minor
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = elven_port_04 
							NOT = { has_building_or_higher = elven_port_06 }
						}
					}
					multiply = {
						value = 0.72
						desc = activity_sailing_province_desc_common_elven_port_medium
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = elven_port_06 
						}
					}
					multiply = {
						value = 0.5
						desc = activity_sailing_province_desc_common_elven_port_major
					}
				}
				if = {
					limit = {
						scope:province ?= { 
							has_building_or_higher = wonder_port_of_pelargir_01
						}
					}
					multiply = {
						value = 0.75
						desc = activity_sailing_province_desc_special_building_major
					}
				}
			}
		}
	}

	ui_predicted_cost = { # Done
		# All costs are balanced on County/Early Era starting point
		gold = {
			add = { # Base cost, scaled by era
				value = sailing_base_cost
				multiply = activity_cost_scale_by_era
			}

			if = {
				limit = {
					dynasty ?= {
						has_dynasty_perk = law_legacy_1
					}
				}
				subtract = {
					value = sailing_base_cost
					multiply = law_legacy_cost_reduction_mult
				}
			}
			
			# Make it a multiple of 5 (rounded up)
			divide = 5
			ceiling = yes
			multiply = 5
		}
	}

	on_host_death = {
		invalidate_activity = scope:activity
	}

	is_location_valid = {
		trigger_if = {
			limit = {
				scope:host = { 
					is_ai = no 
					OR = {
						is_landless_adventurer = yes
						is_landed = no
					}
				}
				this = scope:host.location
			}
			custom_tooltip = {
				text = sailing_province_requirement_landless
				scope:host.location = {
					is_coastal = yes
					has_holding = yes
					barony = { is_capital_barony = yes }
				}
			}
		}
		trigger_else_if = {
			limit = {
				scope:host = {
					is_ai = no
					is_landless_adventurer = no
				}
			}
			custom_tooltip = {
				text = sailing_province_requirement_landed
				scope:host = {
					any_realm_province = {
						this = root
						has_holding = yes
						is_coastal = yes
						barony = { is_capital_barony = yes }
					}
				}
			}
		}
		trigger_else = {
			is_coastal = yes
			has_holding = yes
			barony = { is_capital_barony = yes }
		}
	}

	ai_will_do = { # Done
		value = 100
	}

	host_description = {
		desc = activity_sailing_host_desc
	}
	
	guest_description = {
		desc = activity_sailing_guest_desc
	}
	
	cooldown = { years = 5 } 

	conclusion_description = {
		desc = activity_sailing_conclusion_desc
	}

	###################
	# PARAMETERS
	###################

	is_grand_activity = no

	is_single_location = yes

	###################
	# LOCATION
	###################

	province_filter = all
	ai_province_filter = all

	province_description = { # Done
		desc = activity_sailing_province_desc
		
		# Activity type
		triggered_desc = {
			trigger = {
				scope:special_option ?= flag:sailing_type_explore
			}
			desc = activity_sailing_explore_province_desc
		}
		triggered_desc = {
			trigger = {
				scope:special_option ?= flag:sailing_type_raid
			}
			desc = activity_sailing_raid_province_desc
		}
		triggered_desc = {
			trigger = {
				scope:special_option ?= flag:sailing_type_meneltarma
			}
			desc = activity_sailing_meneltarma_province_desc
		}
		
		# Cost reduction due to port building chain
		triggered_desc = {
			trigger = {
				has_building_or_higher = common_tradeport_01
				NOT = { has_building_or_higher = common_tradeport_03 }
			}
			desc = activity_sailing_province_desc_common_tradeport_minor
		}
		triggered_desc = {
			trigger = {
				has_building_or_higher = common_tradeport_03
				NOT = { has_building_or_higher = common_tradeport_06 }
			}
			desc = activity_sailing_province_desc_common_tradeport_medium
		}
		triggered_desc = {
			trigger = {
				has_building_or_higher = common_tradeport_06
			}
			desc = activity_sailing_province_desc_common_tradeport_major
		}
		
		triggered_desc = {
			trigger = {
				has_building_or_higher = elven_port_01
				NOT = { has_building_or_higher = elven_port_04 }
			}
			desc = activity_sailing_province_desc_elven_port_minor
		}
		triggered_desc = {
			trigger = {
				has_building_or_higher = elven_port_04
				NOT = { has_building_or_higher = elven_port_06 }
			}
			desc = activity_sailing_province_desc_elven_port_medium
		}
		triggered_desc = {
			trigger = {
				has_building_or_higher = elven_port_06
			}
			desc = activity_sailing_province_desc_elven_port_major
		}
		triggered_desc = {
			trigger = {
				has_building_or_higher = wonder_port_of_pelargir_01
			}
			desc = activity_sailing_province_desc_special_building_major
		}
	}

	province_score = {
		value = 0
		if = {
			limit = {
				has_building_or_higher = common_tradeport_01
				NOT = { has_building_or_higher = common_tradeport_03 }
			}
			add = 5
		}
		if = {
			limit = {
				has_building_or_higher = common_tradeport_03
				NOT = { has_building_or_higher = common_tradeport_06 }
			}
			add = 10
		}
		if = {
			limit = {
				has_building_or_higher = common_tradeport_06
			}
			add = 15
		}
		if = {
			limit = {
				has_building_or_higher = elven_port_01
				NOT = { has_building_or_higher = elven_port_04 }
			}
			add = 10
		}
		if = {
			limit = {
				has_building_or_higher = elven_port_04
				NOT = { has_building_or_higher = elven_port_06 }
			}
			add = 15
		}
		if = {
			limit = {
				has_building_or_higher = elven_port_06
			}
			add = 20
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_port_of_pelargir_01
			}
			add = 10
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_port_of_hyarpende_01
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_edhellond_01
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_mirlond
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_umbar_01
			}
			add = 10
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_shipyards_nykkea
			}
			add = 10
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_haven_korlea
			}
			add = 10
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_bozisha_dar_port_01
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_esgaroth
			}
			add = 10
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_lond_daer_01
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_mistalonde_01
			}
			add = 5
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_mistalonde_original
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_mithlond_north_01
			}
			add = 10
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_mithlond_south_01
			}
			add = 10
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_harlond_01
			}
			add = 5
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_forlond_01
			}
			add = 5
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_haven_of_inzilloni
			}
			add = 10
		}
		if = { 
			limit = {
				has_building_or_higher = wonder_mispir
			}
			add = 5
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_ardinak_01
			}
			add = 5
		}
		if = {  
			limit = {
				has_building_or_higher = wonder_tul_harar_01
			}
			add = 5
		}
	}


	###################
	# OPTIONS
	###################

	special_option_category = special_type

	options = { 
		# option example
		special_type = {
			sailing_type_explore = {
				default = yes
				ai_will_do = { value = 100 }
			}
			sailing_type_raid = {
				is_valid = {
					custom_tooltip = {
						text = SAILING_RAID_ENABLED
						OR = {
							culture = { has_cultural_tradition = tradition_corsairs_of_umbar }
							culture = { has_cultural_tradition = tradition_seafaring }
						}
						# can_raid_across_water = yes
					}
				}
				cost = {
					gold = {
						add = {
							add = {
								value = sailing_base_cost
								desc = hunt_type_falconry
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 0
									add = {
										value = sailing_base_cost
										add = {
											value = sailing_base_cost
											multiply = activity_cost_scale_by_era
											subtract = sailing_base_cost
										}
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}
				ai_will_do = { value = 100 }
			}
			sailing_type_meneltarma = {
				is_valid = { 
					custom_tooltip = {
						text = SAILING_MENELTARMA_ENABLED
						has_trait = lifestyle_mariner 
					}
					custom_tooltip = {
						text = SAILING_FAILED_NAVIGATION
						NOT = { has_character_flag = failed_to_navigate_towards_numenor }
					}
				}
				cost = {
					gold = {
						add = {
							add = {
								value = sailing_base_cost
								desc = hunt_type_legendary
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 0
									add = {
										value = sailing_base_cost
										add = {
											value = sailing_base_cost
											multiply = activity_cost_scale_by_era
											subtract = sailing_base_cost
										}
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}
				ai_will_do = { value = 0 }
			}
		}

		#########
		# SHIP CHOICE
		#########
		sailing_option_ship_choice = {
			sailing_charter = {
				default = yes
				
				# desc is only shown in debug AI watch window
				ai_will_do = { value = 100 }
			}
			sailing_small_ship = {
				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.sailing_small_ship_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = sailing_small_ship_cost
								desc = sailing_select_small_ship
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_modifier = owns_small_ship
									}
								}
								subtract = {
									value = sailing_small_ship_cost
									desc = sailing_owns_small_ship_desc
								}
							}
						}
					}
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
			sailing_big_ship = {
				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.sailing_big_ship_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = sailing_big_ship_cost #Base level
								desc = sailing_select_big_ship
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_modifier = owns_big_ship
									}
								}
								subtract = {
									value = sailing_big_ship_cost
									desc = sailing_owns_big_ship_desc
								}
							}
						}
					}
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
		}

		#########
		# GUEST NUMBER
		#########
		sailing_option_guests = {
			sailing_guests_none = {
				#Alone or just one or two guests
				travel_entourage_selection = { 
					weight = hunt_entourage_base_set_weighting_value
					max = 3
   					invite_rule_order = 2
				}
				ai_will_do = {
					value = 20
					if = {
						limit = {
							has_trait = greedy
						}
						add = 10
					}
				}
			}
			sailing_guests_few = {
				default = yes
				cost = { 
					gold = {
						add = {
							value = 0
							desc = sailing_guests_few_amount
							add = {
								value = minor_gold_value
								desc = sailing_guests_few_amount
							}
						}
					}
				}	
				travel_entourage_selection = {
					weight = {
						add = hunt_entourage_base_set_weighting_value
						add = hunt_entourage_extras_set_weighting_value
					}
					max = 10
   					invite_rule_order = 2
				}				
				ai_will_do = {
					value = 30
					if = {
						limit = {
							short_term_gold <= minor_gold_value
						}
						subtract = {
							value = 30
						}
					}
					if = {
						limit = {
							has_trait = compassionate
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = just
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = generous
						}
						add = 5
					}
				}
			}
			sailing_guests_many = {
				cost = { 
					gold = {
						add = {
							value = 0
							desc = sailing_guests_many_amount
							add = {
								value = medium_gold_value
								desc = sailing_guests_many_amount
							}
						}
					}
				}		
				travel_entourage_selection = {
					weight = {
						add = hunt_entourage_base_set_weighting_value
						add = hunt_entourage_extras_set_weighting_value
						add = hunt_entourage_sodding_everyone_set_weighting_value
					}

					max = 20
   					invite_rule_order = 2
				}				
				ai_will_do = {
					value = 10
					if = {
						limit = {
							short_term_gold <= medium_gold_value
						}
						subtract = {
							value = 10
						}
					}
					if = {
						limit = {
							has_trait = compassionate
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = just
						}
						add = 5
					}
					if = {
						limit = {
							has_trait = generous
						}
						add = 5
					}
				}
			}
		}
	}

	###################
	# PHASES
	###################

	max_guest_arrival_delay_time = { months = 3 } # Done

	phases = { # Done # activity = {complete_activity = yes}
		sailing_phase = {
			is_predefined = yes

			on_phase_active = {
				create_character = { # Make sure we have at least one crewmate
					employer = scope:host
					gender_female_chance = 30
					template = new_commander_character
					faith = scope:host.faith
					culture = scope:host.culture
					trait = lifestyle_mariner
					save_scope_as = new_cremwmate
				}
				
				scope:new_cremwmate = { add_to_activity = scope:activity }
				
				scope:activity = { 
					random_attending_character = { 
						limit = { is_ai = yes }
						save_scope_as = first_mate 
					} 
				}
				if = {
					limit = {
						this = scope:host
						scope:activity = { has_activity_option = { category = special_type option = sailing_type_explore } }
					}
					scope:host = { trigger_event = sailing.0800 } #PLACEHOLDER
				}	
				if = {
					limit = {
						this = scope:host
						scope:activity = { has_activity_option = { category = special_type option = sailing_type_raid } }
					}
					scope:host = { trigger_event = sailing.0800 } #PLACEHOLDER
				}
				if = {
					limit = {
						this = scope:host
						scope:activity = { has_activity_option = { category = special_type option = sailing_type_meneltarma } }
					}
					scope:host = { trigger_event = sailing.0800 } #PLACEHOLDER
				}
			}
			on_weekly_pulse = {
				# Fires for every attendee	
				#trigger_event = { on_action = sailing_at_sea_events }
			}

			on_end = {
				# Run conclusion stuff here
				# if = {
				# 	limit = { this = scope:host }
				# 	scope:activity = { progress_activity_phase_after = { weeks = 2 } }
				# }
			}
		}
	}

	###################
	# GUEST HANDLING
	###################

	guest_invite_rules = { # Done
		rules = {
			2 = activity_invite_rule_lovers
			3 = activity_invite_rule_close_family
			3 = activity_invite_rule_extended_family
			3 = activity_invite_rule_knights
			#4 = activity_invite_rule_courtiers
			4 = activity_invite_rule_guests
			
			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_rule_friends
			4 = activity_invite_rule_courtiers
		}
	}

	max_guests = 20

	can_be_activity_guest = { # DONE
		is_lotr_adult = yes
		NOT = { has_trait = incapable }
		lotr_can_be_activity_guest = yes
	}

	host_intents = { # DONE
		intents = { reduce_stress_intent murder_attendee_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_intents = { # DONE
		intents = { reduce_stress_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_join_chance = { # DONE
		base = 10
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes 
		activity_guest_hunt_ai_accept_modifier = yes
	}

	###################
	# ACTIVITY-SPECIFIC PULSES
	###################

	pulse_actions = {
		entries = { guest_friendship guest_insulted impressed_zealot_vassal host_gains_learning_xp host_gains_diplo_xp apa_legend_spreads guest_tells_fantastic_joke relation_gains_friend apa_overcome_with_emotion spouse_skill_learning_improves apa_spotted_by_locals apa_legend_spreads }
	}
 
	on_start = { 
		scope:host = {
			if = {
				limit = {
					scope:activity = {
						has_activity_option = { category = sailing_option_ship_choice option = sailing_small_ship }
					}
					dynasty = { NOT = { has_dynasty_modifier = owns_small_ship } }
				}
				dynasty = { add_dynasty_modifier = owns_small_ship }
			}
		}
		scope:host = {
			if = {
				limit = {
					scope:activity = {
						has_activity_option = { category = sailing_option_ship_choice option = sailing_big_ship }
					}
					dynasty = { NOT = { has_dynasty_modifier = owns_big_ship } }
				}
				dynasty = { add_dynasty_modifier = owns_big_ship }
			}
		}
	}
	
	allow_zero_guest_invites = yes

	on_complete = {
	}

	###################
	# GRAPHICS
	###################

	# Travel
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = world_europe
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	
	background = { #LotR forest deep
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_deep_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_deep.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	
	background = { #LotR Rhûn desert
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_rhun_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/rhun.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #LotR forest_mallorn unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_mallorn_trigger = yes } 
			NOT = { exists = province_owner }
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_mallorn.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	
	background = { #LotR forest_mallorn settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_mallorn_trigger = yes } 
			exists = province_owner
		}
		texture = "gfx/interface/illustrations/event_scenes/lorien_day.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	
	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	
	background = { #LotR volcanic_plains
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_volcanic_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/volcanic_plains.dds"
		environment = "environment_event_feast" 
		ambience = "event:/SFX/Events/Backgrounds/burning_building"
	}

	background = { #LotR underground
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_underground_caverns_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/halls.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { #LotR saltflats
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_saltflats_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/saltflats.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	
	#Fallback
	background = {
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}

	window_characters = {

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = throne_room_two_handed_passive_1
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = throne_room_conversation_1
			}
		}
		
		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = throne_room_conversation_4
			}
		}
		
		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = interested
			}
		}
		
		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = personality_content
			}
		}
		
		travel_host = {
			camera = camera_activity_horse
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				animation = jockey_walk
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = personality_bold
			}
		}

		guest = {
			camera = camera_body
			
			effect = {
				every_attending_character = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					add_to_list = characters
				}
			}

			scripted_animation = {
				animation = personality_rational
			}
		}
	}
}
