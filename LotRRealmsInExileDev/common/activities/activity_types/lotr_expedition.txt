activity_expedition = {

	is_shown = { # Done
		highest_held_title_tier > tier_barony
		is_landed = yes
		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
			short_term_gold >= hunt_activity_base_cost
		}
		is_dwarf = yes # Needs to be a dwarf to let this activity show
		any_county = { # Needs to be uncolonized underground counties somewhere
			title_province = { terrain = halls }
			any_county_province = { has_holding_type = wastelands_holding }
		}
	}

	can_start_showing_failures_only = { # Done
		is_available_adult = yes
		can_expedition_trigger = yes
		custom_tooltip = {
			text = expedition_variable_trigger
			NOT = { has_variable = expedition_type_cooldown }
		}
	}

	is_valid = { # Done
		scope:host = {
			is_alive = yes
			is_imprisoned = no
			is_landed = yes 
			NOT = { is_incapable = yes }
		}
	}

	on_invalidated = { # WIP
		# Save scopes for flavor events
		scope:activity = {
			activity_location = { save_scope_as = location }
		}
	}

	cost = { # Done
		gold = {
			add = {
				add = {
					value = expedition_base_cost #Base level
					desc = hunt_base_cost
				}
				add = {
					value = expedition_base_cost
					multiply = activity_cost_scale_by_era
					subtract = expedition_base_cost
					desc = activity_cost_scale_by_era_desc
				}
				if = {
					limit = {
						dynasty ?= {
							has_dynasty_perk = law_legacy_1
						}
					}
					subtract = {
						value = 0
						add = {
							value = expedition_base_cost
							add = {
								value = expedition_base_cost
								multiply = activity_cost_scale_by_era
								subtract = expedition_base_cost
							}
						}
						multiply = law_legacy_cost_reduction_mult
						desc = law_legacy_1_name
					}
				}
			}
		}
	}

	ui_predicted_cost = { # Done
		# All costs are balanced on County/Early Era starting point
		gold = {
			add = { # Base cost, scaled by era
				value = expedition_base_cost
				multiply = activity_cost_scale_by_era
			}

			if = {
				limit = {
					dynasty ?= {
						has_dynasty_perk = law_legacy_1
					}
				}
				subtract = {
					value = expedition_base_cost
					multiply = law_legacy_cost_reduction_mult
				}
			}
			
			# Make it a multiple of 5 (rounded up)
			divide = 5
			ceiling = yes
			multiply = 5
		}
	}

	on_host_death = {
	}

	is_location_valid = { # Done
		custom_tooltip = {
			text = activity_expedition_valid_location_wastelands
			county_is_underground_wastelands = yes
		}
		custom_tooltip = {
			text = activity_expedition_valid_location_occupied
			surrounding_lands_empty = yes
		}
		"scope:host.capital_province.squared_distance(root)" <= squared_distance_massive
		"scope:host.capital_province.squared_distance(root)" >= squared_distance_small
	}

	ai_will_do = { # Done
		value = -1000
	}

	host_description = {
		desc = activity_expedition_host_desc
	}

	guest_description = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = { category = special_type option = expedition_type_standard }
					}
				}
				desc = activity_expedition_guest_desc_realm
			}
			desc = activity_expedition_guest_desc_satellite
		}
	}

	conclusion_description = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = { category = special_type option = expedition_type_standard }
					}
				}
				desc = activity_expedition_conclusion_desc_realm
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = { category = special_type option = expedition_type_satellite }
					}
				}
				desc = activity_expedition_conclusion_desc_satellite
			}
			desc = activity_expedition_conclusion_desc_standard # Should never appear
		}
	}

	###################
	# PARAMETERS
	###################

	is_grand_activity = no

	is_single_location = yes

	###################
	# LOCATION
	###################

	province_filter = all
	ai_province_filter = all

	province_description = { # Done
		desc = activity_expedition_province_desc

		triggered_desc = {
			trigger = {
				scope:special_option ?= flag:expedition_type_standard
			}
			desc = activity_expedition_realm_province_desc
		}
		triggered_desc = {
			trigger = {
				scope:special_option ?= flag:expedition_type_satellite
			}
			desc = activity_expedition_satellite_province_desc
		}
	}

	province_score = { value = 0 }

	###################
	# OPTIONS
	###################

	special_option_category = special_type

	options = { # Done
		# option example
		special_type = {
			expedition_type_standard = {
				default = yes
				ai_will_do = { value = 0 }
			}
			expedition_type_satellite = {
				cost = {
					gold = {
						add = {
							add = {
								value = expedition_base_cost
								desc = hunt_type_falconry
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 0
									add = {
										value = expedition_base_cost
										add = {
											value = expedition_base_cost
											multiply = activity_cost_scale_by_era
											subtract = expedition_base_cost
										}
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}
				ai_will_do = { value = 0 }
			}
		}

		#########
		# Gold Invested
		#########
		expedition_option_gold_investment = {
			expedition_gold_investment_low = {

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
			expedition_gold_investment_medium = {
				default = yes

				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.expedition_normal_option_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_normal_option_cost
								desc = hunt_attendants_normal
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = expedition_normal_option_cost
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
			expedition_gold_investment_high = {

				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.expedition_good_option_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_good_option_cost #Base level
								desc = hunt_attendants_many
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = expedition_good_option_cost
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
		}

		#########
		# GUEST NUMBER
		#########
		expedition_option_party_size = {
			expedition_party_size_few = {

				# Entourage option grabbing suitable bodyguards & maybe someone from court who really likes you, + randos.
				travel_entourage_selection = { 
					weight = hunt_entourage_base_set_weighting_value
					max = 5
   					invite_rule_order = 2
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
			expedition_party_size_normal = {
				default = yes

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_normal_option_cost
								desc = hunt_party_size_normal
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = expedition_normal_option_cost
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}

				#Entourage option grabbing most people suitable from court, + randos.
				travel_entourage_selection = {
					weight = {
						add = hunt_entourage_base_set_weighting_value
						add = hunt_entourage_extras_set_weighting_value
					}
					max = 8
   					invite_rule_order = 2
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
			expedition_party_size_many = {

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_good_option_cost
								desc = hunt_party_size_many
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = expedition_good_option_cost
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
						}
					}
				}

				#Entourage option grabbing sodding everyone suitable from court, + every grabbable rando in the duchy and maybe a few extra.
				travel_entourage_selection = {
					weight = {
						add = hunt_entourage_base_set_weighting_value
						add = hunt_entourage_extras_set_weighting_value
						add = hunt_entourage_sodding_everyone_set_weighting_value
					}

					max = 15
   					invite_rule_order = 2
				}

				# desc is only shown in debug AI watch window
				ai_will_do = { value = 0 }
			}
		}
	}

	###################
	# PHASES
	###################

	max_guest_arrival_delay_time = { months = 1 } # Done

	phases = { # Done # activity = {complete_activity = yes}
		expedition_phase = {
			is_predefined = yes

			is_shown = {}
			on_phase_active = {
				if = {
					limit = { scope:host = { is_independent_ruler = no } }
					scope:host = { set_variable = host_is_vassal }
				}
				# Generates a character if one isn't found
				if = {
					limit = { NOT = { exists = scope:host.var:opportunistic_dwarf } }
					create_character = {
						template = random_dwarf_template
						employer = scope:host
						save_scope_as = opportunistic_dwarf
					}
					scope:opportunistic_dwarf = { add_to_activity = scope:activity }
					scope:host = {
						set_variable = {
							name = opportunistic_dwarf
							value = scope:opportunistic_dwarf
						}
					}
				}
		
				# Give title to dwarf char
				if = {
					limit = {
						scope:activity = {
							has_activity_option = { category = special_type option = expedition_type_standard }
						}
					}
					scope:activity.activity_location = { activity_title_change_effect = { RULER = scope:host } }
				}
				else = {
					scope:activity.activity_location = {
						activity_title_change_effect = { RULER = scope:host.var:opportunistic_dwarf }
					}
				}

				scope:host = { trigger_event = expedition.9000 }

				invalidate_activity = scope:activity
			}

			on_enter_phase = {
			}

			on_end = { # Fires for every attendee
				target_weight_modifier_effect = { VALUE = -5 }
				scope:activity.activity_location = { save_scope_as = activity_location }
				scope:activity = { skip_activity_phase = yes }
			}
		}
	}

	ai_check_interval = 120

	ai_will_select_province = { value = 0 }

	###################
	# GUEST HANDLING
	###################

	guest_invite_rules = { # Done
		rules = {
			2 = activity_invite_rule_lovers
			3 = activity_invite_rule_close_family
			3 = activity_invite_rule_extended_family
			3 = activity_invite_rule_knights
			4 = activity_invite_rule_guests
			
			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_rule_friends
			4 = activity_invite_rule_courtiers
		}
	}

	max_guests = 20

	can_be_activity_guest = { # DONE
		is_a_minor = no
		NOT = { has_trait = incapable }
		can_dwarven_expedition_trigger = yes
		lotr_can_be_activity_guest = yes
	}

	host_intents = { # DONE
		intents = { reduce_stress_intent murder_attendee_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_intents = { # DONE
		intents = { reduce_stress_intent murder_attendee_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_join_chance = { # DONE
		base = 10
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes 
		activity_guest_hunt_ai_accept_modifier = yes
	}

	###################
	# ACTIVITY-SPECIFIC PULSES
	###################

	pulse_actions = {
		entries = { guest_friendship guest_insulted }
		chance_of_no_event = 3
	}
 
	on_start = { 
		scope:host = {
			if = {
				limit = {
					scope:activity = {
						has_activity_option = { category = special_type option = expedition_type_standard }
					}
				}
				set_variable = {
					name = dwarven_expedition
					value = flag:var_expedition_type_standard
				}
				set_variable = {
					name = expedition_type_cooldown
					years = 5
				}
				trigger_event = expedition.0001 
			}
			else = {
				set_variable = {
					name = dwarven_expedition
					value = flag:var_expedition_type_satellite
				}
				set_variable = {
					name = expedition_type_cooldown
					years = 15
				}
				trigger_event = expedition.0007
			}
		}
	}
	
	allow_zero_guest_invites = yes

	on_complete = {
	}

	###################
	# GRAPHICS
	###################

	map_entity = {
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_hunt_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_hunt_01_entity"
	}

	map_entity = "building_western_hunt_01_entity"

	# Travel
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = middleearth_west
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #LotR Rhûn desert
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_rhun_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/rhun.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	
	background = { #LotR forest deep
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_deep_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_deep.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #LotR forest_mallorn unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_mallorn_trigger = yes } 
			NOT = { exists = province_owner }
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_mallorn.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	background = { #LotR forest_mallorn settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_mallorn_trigger = yes } 
			exists = province_owner
		}
		texture = "gfx/interface/illustrations/event_scenes/lorien_day.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, dwarven settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
				is_dwarf = no
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/dwarven_gate.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
				is_dwarf = no
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, dwarven settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
				is_dwarf = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/dwarven_gate.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	
	background = { #LotR volcanic_plains
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_volcanic_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/volcanic_plains.dds"
		environment = "environment_event_feast" 
		ambience = "event:/SFX/Events/Backgrounds/burning_building"
	}

	background = { #LotR underground
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_underground_caverns_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/halls.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { #LotR saltflats
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_saltflats_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/saltflats.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	# End Travel

	background = { #Desert
		trigger = {
			activity_location ?= { graphical_wilderness_desert_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/DLC/EP2/SFX/Events/Grand_Activities/Hunts/ep2_event_grand_hunt_desert"
	}
	
	background = { #LotR volcanic_plains - TODO - Trigger not defined
	 	trigger = {
	 		activity_location ?= { graphical_wilderness_volcanic_trigger = yes }
	 	}
	 	texture = "gfx/interface/illustrations/event_scenes/volcanic_plains.dds"
	 	environment = "environment_event_feast"
	 	ambience = "event:/SFX/Events/Backgrounds/burning_building"
	}

	background = { #forest snowy
		trigger = { 
			activity_location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest" 
		ambience = "event:/SFX/Events/Backgrounds/mountains_day" 
	}
	
	background = { #managed_forest
		trigger = {
			activity_location ?= {
				#hunt_forest_camp_trigger = yes
				OR = {
					has_building_or_higher = royal_forest_01
					has_building_or_higher = hunting_grounds_01
					has_building_or_higher = elven_hunting_grounds_01
					has_building_or_higher = hunting_outposts_01
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_forest_managed.dds"
		environment = "environment_ep2_forest_managed"
		ambience = "event:/DLC/EP2/SFX/Events/Backgrounds/evn_background_dark_forest"
	}
	
	background = { #LotR - Deep forest
		trigger = { 
			activity_location ?= { graphical_wilderness_forest_deep_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_deep.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #LotR - Mallorn forest
		trigger = { 
			activity_location ?= { graphical_wilderness_forest_mallorn_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_mallorn.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { # Mountains
		trigger = {
			activity_location = { graphical_wilderness_mountains_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { # Steppe
		trigger = {
			activity_location = { graphical_wilderness_steppe_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #Desert
		trigger = {
			activity_location = { graphical_wilderness_desert_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { # Jungle
		trigger = {
			activity_location = { graphical_wilderness_jungle_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { # Drylands
		trigger = {
			activity_location = { graphical_drylands_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { # Subterranean
		trigger = {
			activity_location ?= { graphical_underground_caverns_trigger = yes }
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { # Fallback
		texture = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}
	

	### Plug in widgets
	activity_window_widgets = {
		artifact_rewards = "activity_plugin_widgets_conclusion"
		trait_rewards = "activity_plugin_widgets_conclusion"
	}

	window_characters = {
		attendant = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = { this = scope:host }
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_marshal
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_marshal
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_court_chaplain
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_court_chaplain
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_steward
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_steward
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									is_councillor_of = scope:host
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			scripted_animation = {
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_court_chaplain }
					animation = stress
				}
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_marshal }
					animation = marshal
				}
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_steward }
					animation = steward
				}
				#Fallback
				animation = lantern
			}
		}

		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = idle
			}
		}
		
		travel_host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						NOT = { scope:host.location = scope:activity.activity_location }
					}
					scope:host = { add_to_list = characters }
				}
			}

			scripted_animation = { animation = jockey_walk }
		}

		leader_of_expedition = {
			camera = camera_body
			
			effect = {
				scope:host.cp:councillor_spymaster ?= {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							is_participant_in_activity = scope:activity
							location = scope:activity.activity_location
						}
						add_to_list = characters
					}
				}
			}
			scripted_animation = { animation = happy_teacher }
		}

		attendant = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = { this = scope:host }
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_marshal
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_marshal
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_court_chaplain
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_court_chaplain
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_steward
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_steward
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									is_councillor_of = scope:host
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			
			scripted_animation = {
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_court_chaplain }
					animation = stress
				}
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_marshal }
					animation = marshal
				}
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_steward }
					animation = steward
				}
				#Fallback
				animation = lantern
			}
		}

		attendant = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = { this = scope:host }
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_marshal
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_marshal
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_court_chaplain
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_court_chaplain
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_steward
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = { this = scope:host }
							this = scope:host.cp:councillor_steward
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									is_councillor_of = scope:host
								}
							}
							add_to_list = characters
						}
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_court_chaplain }
					animation = stress
				}
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_marshal }
					animation = marshal
				}
				triggered_animation = {
					trigger = { scope:character = scope:host.cp:councillor_steward }
					animation = steward
				}
				#Fallback
				animation = lantern
			}
		}
	}

}
