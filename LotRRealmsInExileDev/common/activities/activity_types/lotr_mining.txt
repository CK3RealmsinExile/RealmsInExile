activity_mining = {
	is_shown = { # DONE
		highest_held_title_tier > tier_barony
		is_landed = yes
		culture = { has_cultural_parameter = can_use_mining_activity }
		trigger_if = {
			limit = {
				is_ai = yes
			}
			is_at_war = no
			short_term_gold >= mining_activity_base_cost
		}
	}

	can_start = { # DONE - Except need to add trigger disabling if already the target of a prospecting activity
		any_realm_province = {
			OR = {
				custom_tooltip = {
					valid_mining_activity_location = yes
					text = activity_mining_any_location_has_a_deposit
				}
				AND = {
					custom_tooltip = {
						valid_mining_activity_location = no
						text = activity_mining_any_location_no_deposit
					}
					custom_tooltip = {
						OR = {
							terrain = mountains
							terrain = halls
							terrain = desert_mountains
						}
						text = activity_mining_location_correct_terrain
					}
				}
			}
		}
		custom_tooltip = {
			text = mining_not_allowed_activity_tt
			NOT = { has_variable = not_allowed_mining_activity }
		}
	}

	can_start_showing_failures_only = { # DONE
		is_available_adult = yes
		can_mine_trigger = yes
	}

	is_valid = { # DONE
		scope:host = {
			is_alive = yes
			is_imprisoned = no
			is_landed = yes 
			NOT = { is_incapable = yes }
		}
		NOT = { has_variable = mining_invalidated }
		# If no one shows up
		trigger_if = {
			limit = {
				is_current_phase_active = yes
			}
			has_attending_activity_guests = yes
		}
	}

	on_invalidated = {
		# Save scopes for flavor events
		scope:activity = {
			var:mining_invalidated_flavor ?= { save_scope_as = invalidated_flavor }
			var:mining_invalidated_culprit ?= { save_scope_as = invalidated_culprit }
			every_attending_character = {
				limit = {
					is_ai = no
					is_alive = yes
					NOR = {
						this = scope:invalidated_culprit
						this = scope:activity.activity_host
					}
				}
				add_to_list = attendees
			}
			# if = { # Wound
			# 	limit = { var:mining_invalidated ?= flag:wounded }
			# 	save_scope_as = wounded_invalidation
			# 	every_in_list = {
			# 		list = attendees
			# 		trigger_event = hunt.0086
			# 	}
			# }
		# 	else_if = { # Death
		# 		limit = { var:hunt_invalidated ?= flag:death }
		# 		save_scope_as = death_invalidation
		# 		every_in_list = {
		# 			list = attendees
		# 			trigger_event = hunt.0080
		# 		}
		# 	}
			if = { # Assassination Attempt
				limit = { var:mining_invalidated ?= flag:assassination_attempt }
				save_scope_as = assassination_invalidation
				every_in_list = {
					list = attendees
					trigger_event = mining.0003
				}
			}
		# 	else_if = { # Abduction Attempt
		# 		limit = { var:hunt_invalidated ?= flag:abduction_attempt }
		# 		save_scope_as = abduction_attempt_invalidation
		# 		every_in_list = {
		# 			list = attendees
		# 			trigger_event = hunt.0084
		# 		}
		# 	}
		# 	else_if = { # Abduction
		# 		limit = { var:hunt_invalidated ?= flag:abduction }
		# 		save_scope_as = abduction_invalidation
		# 		every_in_list = {
		# 			list = attendees
		# 			trigger_event = hunt.0085
		# 		}
		# 	}
			else_if = { # Host Imprisoned
				limit = {
					scope:host = { is_imprisoned = yes}
				}
				every_in_list = {
					list = attendees
					trigger_event = mining.0002
				}
			}
			# Host becomes unlanded
			else_if = {
				limit = {
					scope:host = { is_landed = no }
				}
				scope:activity = {
					activity_type = { save_scope_as = activity_type }
				}
				every_in_list = {
					list = attendees
					limit = { NOT = { this = scope:host } }
					trigger_event = activity_system.0320
				}
			}
			else_if = {
				limit = {
					scope:host = { is_incapable = yes }
				}
				scope:activity = {
					activity_type = { save_scope_as = activity_type }
				}
				scope:host = {
					trigger_event = activity_system.0330
				}
				every_in_list = {
					list = attendees
					limit = { NOT = { this = scope:host } }
					trigger_event = activity_system.0331
				}
			}
			else_if = { # No one shows up
				limit = {
					has_attending_activity_guests = no
				}
				scope:activity = {
					activity_type = { save_scope_as = activity_type }
					activity_location = { save_scope_as = location }
				}
				scope:host = { trigger_event = activity_system.0100 }
			}
		}
	}

	cooldown = { # DONE
		years = standard_mining_cooldown_time
	} 

	cost = { # DONE
		gold = {
			add = {
				add = {
					value = mining_activity_base_cost #Base level
					desc = mining_base_cost
				}
				add = {
					value = mining_activity_base_cost
					multiply = activity_cost_scale_by_era
					subtract = mining_activity_base_cost
					desc = activity_cost_scale_by_era_desc
				}
				if = {
					limit = { has_perk = expedition_leader_perk }
					multiply = {
						value = 0.75
						desc = expedition_leader_perk_modifier_desc
					}
				}
			}
		}
	}

	ui_predicted_cost = { # DONE
		# All costs are balanced on County/Early Era starting point
		gold = {
			add = { # Base cost, scaled by era
				value = mining_activity_base_cost
				multiply = activity_cost_scale_by_era
			}
			
			# Options 
			add = { # Surveyors 
				value = mining_poor_option_cost # Local Enthusiasts
				add = mining_normal_option_cost # Select Talent
				add = mining_good_option_cost # Distinguished Experts
				# Divide by the number of option levels to get an average option cost
				divide = 3
			}
			add = { # Party Size
				value = mining_poor_option_cost # Intimate Party
				add = mining_normal_option_cost # Reasonable Party
				add = mining_good_option_cost # Substantial Party
				# Divide by the number of option levels to get an average option cost
				divide = 3
			}
			if = {
				limit = {
					dynasty ?= {
						has_dynasty_perk = law_legacy_1
					}
				}
				subtract = {
					value = mining_activity_base_cost
					multiply = law_legacy_cost_reduction_mult
				}
			}
			if = {
				limit = { has_perk = expedition_leader_perk }
				multiply = 0.9
			}
			
			# Make it a multiple of 5 (rounded up)
			divide = 5
			ceiling = yes
			multiply = 5
			
		}
	}

	on_host_death = {
		scope:activity = {
			save_scope_as = death_invalidation
			if = {
				limit = {
					has_activity_option = { category = special_type option = hunt_type_legendary }
				}
				save_scope_as = legendary_invalidation
			}
		}
		scope:host = {
			save_scope_as = invalidated_flavor
			player_heir ?= {
				save_scope_as = heir
				add_character_flag = {
					flag = hunt_heir
					weeks = 1
				}
				trigger_event = { id = hunt.0080 days = 1 }
			}
		}
	}

	is_location_valid = { # DONE
		trigger_if = {
			limit = {
				scope:special_option ?= flag:mining_type_standard
			}
			custom_tooltip = {
				text = activity_mining_location_does_not_have_a_deposit
				valid_mining_activity_location = yes
			}
		}
		trigger_else = {
			custom_tooltip = {
				text = activity_mining_location_already_has_deposit
				valid_mining_activity_location = no
			}
		}
		custom_tooltip = {
			text = activity_mining_location_incorrect_terrain
			OR = {
				terrain = mountains
				terrain = halls
				terrain = desert_mountains
			}
		}
	}

	ai_will_do = { # DONE
		value = 0
		
		# Base
		add = {
			value = 30
			desc = "base"
		}
		# ai_value
		add = {
            value = ai_greed
            desc = "ai_greed"
        }
        add = {
            value = ai_energy
            desc = "ai_boldness"
        }
        add = {
        	value = ai_sociability
        	multiply = 0.5
        	desc = "ai_sociability"
        }
        # Personality
		if = { # Avoids responsibilities
			limit = { has_trait = lazy }
			add = {
				value = -20
				desc = lazy
			}
		}
		if = {
			limit = { has_trait = ambitious }
			add = {
				value = 10
				desc = ambitious
			}
		}
		if = {
			limit = { has_trait = greedy }
			add = {
				value = 20
				desc = greedy
			}
		}
		if = { # Hard work pays off
			limit = { has_trait = diligent }
			add = {
				value = 20
				desc = diligent
			}
		}
		if = { # Likes to socialize
			limit = { has_trait = gregarious }
			add = {
				value = 20
				desc = gregarious
			}
		}
		else_if = {
			limit = { has_trait = shy }
			add = {
				value = -10
				desc = shy
			}
		}
		if = {
			limit = { has_trait = reclusive }
			add = {
				value = -25
				desc = reclusive
			}
		}
		if = { # MORE MORE MORE!
			limit = { has_trait = avaricious }
			add = {
				value = 50
				desc = avaricious
			}
		}
		# Court
		if = {
			limit = {
				has_royal_court = yes 
				has_court_type = court_administrative
			}
			add = {
				value = 15
				desc = court_administrative
			}
		}
		# Education
		if = {
			limit = { has_trait = education_stewardship }
			add = {
				value = 25
				desc = education_stewardship
			}
		}
		# Culture
		if = { # Mining Fervour
			limit = {
				culture = { has_cultural_parameter = mining_traits_more_common }
			}
			add = {
				value = 100
				desc = "mining_traits_more_common"
			}
		}
		if = { # Mining Fervour
			limit = {
				culture = { has_cultural_parameter = mining_traits_more_valued }
			}
			add = {
				value = 100
				desc = "mining_traits_more_valued"
			}
		}
		if = { # Sacred Mining
			limit = {
				faith = { has_doctrine_parameter = mining_traits_more_pious }
			}
			add = {
				value = 100
				desc = "mining_traits_more_pious"
			}
		}
		if = { # Communal
			limit = {
				culture = { has_cultural_pillar = ethos_communal }
			}
			add = {
				value = 15
				desc = ethos_communal
			}
		}
		# Lifestyle
		if = {
			limit = { has_trait = lifestyle_miner }
			add = {
				value = 25
				desc = lifestyle_miner
			}
		}
		if = {
			limit = {
				has_trait = lifestyle_miner
				OR = {
					has_trait_xp = {
						trait = lifestyle_miner
						track = hewer
						value >= trait_second_level
					}
					has_trait_xp = {
						trait = lifestyle_miner
						track = prospector
						value >= trait_second_level
					}
				}
			}
			add = {
				value = 25
				desc = "experienced miner"
			}
		}
		# Stress
		if = { # Low Stress
            limit = { stress >= lower_than_baseline_stress }
            add = {
            	value = 30
            	desc = "lower_than_baseline_stress"
            }
        }
        if = { # High Stress
        	limit = { stress >= higher_than_baseline_stress }
        	add = {
        		value = 30
        		desc = "higher_than_baseline_stress"
        	}
        }
        if = { # Very High Stress
        	limit = { stress >= high_stress }
        	add = {
        		value = 30
        		desc = "high_stress"
        	}
        }
        # Economic Archetype
		if = { # This could encourage booming the economy
            limit = {
                OR = {
                    ai_has_economical_boom_personality = yes
                    has_character_flag = ai_boom
                }
            }
            add = {
            	value = 200
            	desc = "Builder"
            }
        }
		if = {
			limit = {
				is_independent_ruler = no
				has_vassal_stance = parochial
			}
			add = {
				value = 10
				desc = parochial
			}
		}
        if = {
        	limit = { ai_has_warlike_personality = yes }
        	add = {
            	value = 10
            	desc = "Warlike"
            }
        }
        # Economy Sanity
        if = { # Work first, play later
            limit = {
                exists = capital_county
                capital_county.title_province = { free_building_slots > 0 }
            }
            add = {
            	value = -35
            	desc = "Work first, play later"
            }
        }
		# Available Gold
		if = {
			limit = {
				short_term_gold >= mining_activity_base_cost
				short_term_gold >= major_gold_value
			}
			add = {
				value = 30
				desc = "Got gold to burn"
			}
		}
		if = {
        	limit = { has_character_flag = mines_a_lot }
        	add = {
            	value = 500
            	desc = "Mines a lot"
            }
        }
	}

	host_description = { # DONE
		desc = activity_mining_host_desc
		first_valid = {
			triggered_desc = {
				trigger = {
					faith = { has_doctrine_parameter = sacred_mining }
				}
				desc = activity_mining_host_desc_piety
			}
			desc = activity_mining_host_desc_prestige
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_trait = lifestyle_miner }
				desc = activity_mining_host_desc_trait_xp
			}
			desc = activity_mining_host_desc_trait
		}
		triggered_desc = {
			trigger = {
				is_dwarf = no
				NOT = { employs_court_position = overseer_of_the_mines_court_position }
			}
			desc = activity_mining_host_desc_oftm
		}
		triggered_desc = {
			trigger = {
				is_dwarf = yes
				NOT = { employs_court_position = stone_singer_court_position }
			}
			desc = activity_mining_host_desc_stone_singer
		}
	}

	guest_description = { # DONE
		first_valid = {
			triggered_desc = {
				trigger = {
					faith = { has_doctrine_parameter = sacred_mining }
				}
				desc = activity_mining_host_desc_piety
			}
			desc = activity_mining_host_desc_prestige
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_trait = lifestyle_miner }
				desc = activity_mining_host_desc_trait_xp
			}
			desc = activity_mining_host_desc_trait
		}
	}

	conclusion_description = { # DONE
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity.var:mining_success_chance >= 50
					scope:activity.var:mining_success_chance_event >= mining_activity_success_increase_medium_value
				}
				desc = activity_mining_conclusion_desc_good
			}
			triggered_desc = {
				trigger = {
					scope:activity.var:mining_success_chance >= 50
					scope:activity.var:mining_success_chance_event < mining_activity_success_decrease_minor_value
				}
				desc = activity_mining_conclusion_desc_good_bad
			}
			triggered_desc = {
				trigger = {
					scope:activity.var:mining_success_chance < 50
					scope:activity.var:mining_success_chance_event < mining_activity_success_decrease_minor_value
				}
				desc = activity_mining_conclusion_desc_bad_good
			}
			triggered_desc = {
				trigger = {
					scope:activity.var:mining_success_chance < 50
					scope:activity.var:mining_success_chance_event >= mining_activity_success_increase_medium_value
				}
				desc = activity_mining_conclusion_desc_bad
			}
			desc = activity_mining_conclusion_desc_same
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = { category = special_type option = mining_type_prospecting }
					}
					scope:activity.var:mining_success ?= flag:yes
				}
				desc = activity_mining_conclusion_desc_prospecting_success
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = { category = special_type option = mining_type_prospecting }
					}
				}
				desc = activity_mining_conclusion_desc_prospecting_failure
			}
			triggered_desc = {
				trigger = { scope:activity.var:mining_success ?= flag:yes }
				desc = activity_mining_conclusion_desc_mining_success
			}
			desc = activity_mining_conclusion_desc_mining_failure
		}
	}

	###################
	# PARAMETERS
	###################

	is_grand_activity = no

	is_single_location = yes

	###################
	# LOCATION
	###################

	province_filter = realm
	ai_province_filter = domain

	province_description = { # IN PROGRESS - Defining composition in areas and need to define mining success chance modifiers
		desc = activity_mining_province_desc

		## PROSPECTING
		# Surveyors intro
		triggered_desc = {
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
			}
			desc = activity_mining_prospecting_province_desc
		}

		# Common Resources
		triggered_desc = { # Mithril
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_mithril_province = yes
			}
			desc = activity_mining_prospecting_province_desc_mithril_common
		}
		triggered_desc = { # Gold
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_gold_province = yes
			}
			desc = activity_mining_prospecting_province_desc_gold_common
		}
		triggered_desc = { # Silver
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_silver_province = yes
			}
			desc = activity_mining_prospecting_province_desc_silver_common
		}
		triggered_desc = { # Lead
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_lead_province = yes
			}
			desc = activity_mining_prospecting_province_desc_lead_common
		}
		triggered_desc = { # Tin
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_tin_province = yes
			}
			desc = activity_mining_prospecting_province_desc_tin_common
		}
		triggered_desc = { # Copper
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_copper_province = yes
			}
			desc = activity_mining_prospecting_province_desc_copper_common
		}
		triggered_desc = { # Iron
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_iron_province = yes
			}
			desc = activity_mining_prospecting_province_desc_iron_common
		}

		triggered_desc = { # Diamonds
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_diamond_province = yes
			}
			desc = activity_mining_prospecting_province_desc_diamond_common
		}
		triggered_desc = { # Ruby
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_ruby_province = yes
			}
			desc = activity_mining_prospecting_province_desc_ruby_common
		}
		triggered_desc = { # Sapphire
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_sapphire_province = yes
			}
			desc = activity_mining_prospecting_province_desc_sapphire_common
		}
		triggered_desc = { # Emerald
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_emerald_province = yes
			}
			desc = activity_mining_prospecting_province_desc_emerald_common
		}
		triggered_desc = { # Amethyst
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_amethyst_province = yes
			}
			desc = activity_mining_prospecting_province_desc_amethyst_common
		}
		triggered_desc = { # Onyx
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_onyx_province = yes
			}
			desc = activity_mining_prospecting_province_desc_onyx_common
		}
		triggered_desc = { # Peridot
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_peridot_province = yes
			}
			desc = activity_mining_prospecting_province_desc_peridot_common
		}
		triggered_desc = { # Quartz
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_common_quartz_province = yes
			}
			desc = activity_mining_prospecting_province_desc_quartz_common
		}

		# Uncommon Resources
		triggered_desc = { # Mithril
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_mithril_province = yes
			}
			desc = activity_mining_prospecting_province_desc_mithril_uncommon
		}
		triggered_desc = { # Gold
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_gold_province = yes
			}
			desc = activity_mining_prospecting_province_desc_gold_uncommon
		}
		triggered_desc = { # Silver
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_silver_province = yes
			}
			desc = activity_mining_prospecting_province_desc_silver_uncommon
		}
		triggered_desc = { # Lead
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_lead_province = yes
			}
			desc = activity_mining_prospecting_province_desc_lead_uncommon
		}
		triggered_desc = { # Tin
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_tin_province = yes
			}
			desc = activity_mining_prospecting_province_desc_tin_uncommon
		}
		triggered_desc = { # Copper
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_copper_province = yes
			}
			desc = activity_mining_prospecting_province_desc_copper_uncommon
		}
		triggered_desc = { # Iron
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_iron_province = yes
			}
			desc = activity_mining_prospecting_province_desc_iron_uncommon
		}

		triggered_desc = { # Diamonds
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_diamond_province = yes
			}
			desc = activity_mining_prospecting_province_desc_diamond_uncommon
		}
		triggered_desc = { # Ruby
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_ruby_province = yes
			}
			desc = activity_mining_prospecting_province_desc_ruby_uncommon
		}
		triggered_desc = { # Sapphire
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_sapphire_province = yes
			}
			desc = activity_mining_prospecting_province_desc_sapphire_uncommon
		}
		triggered_desc = { # Emerald
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_emerald_province = yes
			}
			desc = activity_mining_prospecting_province_desc_emerald_uncommon
		}
		triggered_desc = { # Amethyst
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_amethyst_province = yes
			}
			desc = activity_mining_prospecting_province_desc_amethyst_uncommon
		}
		triggered_desc = { # Onyx
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_onyx_province = yes
			}
			desc = activity_mining_prospecting_province_desc_onyx_uncommon
		}
		triggered_desc = { # Peridot
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_peridot_province = yes
			}
			desc = activity_mining_prospecting_province_desc_peridot_uncommon
		}
		triggered_desc = { # Quartz
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_uncommon_quartz_province = yes
			}
			desc = activity_mining_prospecting_province_desc_quartz_uncommon
		}

		# Rare Resources
		triggered_desc = { # Mithril
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_mithril_province = yes
			}
			desc = activity_mining_prospecting_province_desc_mithril_rare
		}
		triggered_desc = { # Gold
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_gold_province = yes
			}
			desc = activity_mining_prospecting_province_desc_gold_rare
		}
		triggered_desc = { # Silver
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_silver_province = yes
			}
			desc = activity_mining_prospecting_province_desc_silver_rare
		}
		triggered_desc = { # Lead
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_lead_province = yes
			}
			desc = activity_mining_prospecting_province_desc_lead_rare
		}
		triggered_desc = { # Tin
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_tin_province = yes
			}
			desc = activity_mining_prospecting_province_desc_tin_rare
		}
		triggered_desc = { # Copper
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_copper_province = yes
			}
			desc = activity_mining_prospecting_province_desc_copper_rare
		}
		triggered_desc = { # Iron
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_iron_province = yes
			}
			desc = activity_mining_prospecting_province_desc_iron_rare
		}

		triggered_desc = { # Diamonds
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_diamond_province = yes
			}
			desc = activity_mining_prospecting_province_desc_diamond_rare
		}
		triggered_desc = { # Ruby
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_ruby_province = yes
			}
			desc = activity_mining_prospecting_province_desc_ruby_rare
		}
		triggered_desc = { # Sapphire
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_sapphire_province = yes
			}
			desc = activity_mining_prospecting_province_desc_sapphire_rare
		}
		triggered_desc = { # Emerald
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_emerald_province = yes
			}
			desc = activity_mining_prospecting_province_desc_emerald_rare
		}
		triggered_desc = { # Amethyst
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_amethyst_province = yes
			}
			desc = activity_mining_prospecting_province_desc_amethyst_rare
		}
		triggered_desc = { # Onyx
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_onyx_province = yes
			}
			desc = activity_mining_prospecting_province_desc_onyx_rare
		}
		triggered_desc = { # Peridot
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_peridot_province = yes
			}
			desc = activity_mining_prospecting_province_desc_peridot_rare
		}
		triggered_desc = { # Quartz
			trigger = {
				scope:special_option ?= flag:mining_type_prospecting
				mining_rare_quartz_province = yes
			}
			desc = activity_mining_prospecting_province_desc_quartz_rare
		}

		### Mining ###

		triggered_desc = { # Standard
			trigger = {
				scope:special_option ?= flag:mining_type_standard
				NOR = {
					has_province_modifier = mining_mithril_province_modifier
					has_province_modifier = mining_gold_province_modifier
					has_province_modifier = mining_diamond_province_modifier
					has_province_modifier = mining_silver_province_modifier
					has_province_modifier = mining_ruby_province_modifier
					has_province_modifier = mining_sapphire_province_modifier
					has_province_modifier = mining_emerald_province_modifier
					has_province_modifier = mining_amethyst_province_modifier
				}
			}
			desc = activity_mining_mining_province_desc_standard_resource
		}
		triggered_desc = { # Valuable
			trigger = {
				scope:special_option ?= flag:mining_type_standard
				OR = {
					has_province_modifier = mining_silver_province_modifier
					has_province_modifier = mining_ruby_province_modifier
					has_province_modifier = mining_sapphire_province_modifier
					has_province_modifier = mining_emerald_province_modifier
					has_province_modifier = mining_amethyst_province_modifier
				}
			}
			desc = activity_mining_mining_province_desc_valuable_resource
		}
		triggered_desc = { # Very Valuable
			trigger = {
				scope:special_option ?= flag:mining_type_standard
				OR = {
					has_province_modifier = mining_mithril_province_modifier
					has_province_modifier = mining_gold_province_modifier
					has_province_modifier = mining_diamond_province_modifier
				}
			}
			desc = activity_mining_mining_province_desc_very_valuable_resource
		}

		### TODO - ADD info re: success of mining activity modifiers including mine building level, development, recently mined, cultural bonuses etc - see hunting

	}

	province_score = {
		value = 0
		if = {
			limit = {
				OR = {
					terrain = desert_mountains
					terrain = mountains
					terrain = halls
				}
			}
			add = 5
		}
		# Mining Type #
		if = {
			limit = {
				scope:special_option ?= flag:mining_type_standard
			}
			if = {
				limit = {
					OR = {
						has_province_modifier = mining_mithril_province_modifier
						has_province_modifier = mining_gold_province_modifier
						has_province_modifier = mining_diamond_province_modifier
					}
				}
				add = 5
			}
			if = {
				limit = {
					NOR = {
						has_province_modifier = mining_mithril_province_modifier
						has_province_modifier = mining_gold_province_modifier
						has_province_modifier = mining_diamond_province_modifier
						has_province_modifier = mining_silver_province_modifier
						has_province_modifier = mining_ruby_province_modifier
						has_province_modifier = mining_sapphire_province_modifier
						has_province_modifier = mining_emerald_province_modifier
						has_province_modifier = mining_amethyst_province_modifier
					}
				}
				subtract = 4
			}
		}
	}

	###################
	# OPTIONS
	###################

	special_option_category = special_type

	options = {
		special_type = { # DONE
			mining_type_prospecting = {
				default = {
					any_realm_province = {
						AND = {
								valid_mining_activity_location = no
								OR = {
									terrain = mountains
									terrain = halls
									terrain = desert_mountains
								}
						}
					}
				}
				is_valid = {
					custom_tooltip = {
						any_realm_province = {
							AND = {
									valid_mining_activity_location = no
									OR = {
										terrain = mountains
										terrain = halls
										terrain = desert_mountains
									}
							}
						}
						text = activity_mining_any_location_no_valid_prospecting_locations_long_desc
					}
				}
				cost = {
					gold = {
						add = {
							add = {
								value = mining_activity_base_cost #Base level
								multiply = 0.5
								desc = mining_type_prospecting
							}
							if = {
								limit = { has_perk = expedition_leader_perk }
								multiply = {
									value = 0.75
									desc = expedition_leader_perk_modifier_desc
								}
							}
						}	
					}
				}
				ai_will_do = {
					value = 200
				}
			}
			mining_type_standard = {
				default = {
					any_realm_province = {
						valid_mining_activity_location = yes
					}
				}
				is_valid = {
					custom_tooltip = {
						any_realm_province = {
							valid_mining_activity_location = yes
						}
						text = activity_mining_any_location_no_deposit_long_desc
					}
				}
				ai_will_do = {
					value = 50
				}
			}
		}

		#########
		# SURVEYORS NUMBER
		#########
		mining_option_surveyors = {
			mining_surveyors_few = {

				# desc is only shown in debug AI watch window
				# ai_will_do = {
				# 	value = 25
				# 	# Economic Archetype
				# 	if = { # Cautious
				# 		limit = { ai_has_cautious_personality = yes }
				# 		add = {
			    #         	value = 25
			    #         	desc = "Cautious"
			    #         }
				# 	}
				# 	if = { # Builder
			    #         limit = {
			    #             OR = {
			    #                 ai_has_economical_boom_personality = yes
			    #                 has_character_flag = ai_boom
			    #             }
			    #         }
			    #         add = {
			    #         	value = 25
			    #         	desc = "Builder"
			    #         }
			    #     }
			    #     # Economy Sanity
			    #     if = { # Work first, play later
			    #         limit = {
			    #             exists = capital_county
			    #             capital_county.title_province = { free_building_slots > 0 }
			    #         }
			    #         add = {
			    #         	value = 25
			    #         	desc = "Work first, play later"
			    #         }
			    #     }
				# }
			}
			mining_surveyors_normal = {
				default = yes

				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.mining_normal_option_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = mining_normal_option_cost
								desc = mining_surveyors_normal
							}
							if = {
								limit = { has_perk = expedition_leader_perk }
								multiply = {
									value = 0.75
									desc = expedition_leader_perk_modifier_desc
								}
							}
						}
					}
				}

				# desc is only shown in debug AI watch window
				ai_will_do = {
					add = {
						value = 25
						desc = mining_surveyors_normal
					}
					# if = { # Cautious
					# 	limit = { gold >= major_gold_value }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Rich"
			        #     }
					# }
					# if = { # Ambitious
					# 	limit = { has_trait = ambitious }
					# 	add = {
			        #     	value = 10
			        #     	desc = "Ambitious"
			        #     }
					# }
					# if = { # Ambitious
					# 	limit = { has_trait = greedy }
					# 	add = {
			        #     	value = -10
			        #     	desc = "Greedy"
			        #     }
					# }
					# if = { # Warlike
					# 	limit = { ai_has_warlike_personality = yes }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Warlike"
			        #     }
					# }
				}
			}
			mining_surveyors_many = {

				# is_shown = { has_dlc_feature = advanced_activities }

				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.mining_good_option_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = mining_good_option_cost #Base level
								desc = mining_surveyors_many
							}
							if = {
								limit = { has_perk = expedition_leader_perk }
								multiply = {
									value = 0.75
									desc = expedition_leader_perk_modifier_desc
								}
							}
						}
					}
				}

				# desc is only shown in debug AI watch window
				ai_will_do = {
					add = {
						value = 10
						desc = mining_surveyors_many
					}
					# if = { # Cautious
					# 	limit = { gold >= major_gold_value }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Rich"
			        #     }
					# }
					# if = { # Cautious
					# 	limit = { gold >= monumental_gold_value }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Rich"
			        #     }
					# }
					# if = { # Ambitious
					# 	limit = { has_trait = ambitious }
					# 	add = {
			        #     	value = 10
			        #     	desc = "Ambitious"
			        #     }
					# }
					# if = { # Ambitious
					# 	limit = { has_trait = greedy }
					# 	add = {
			        #     	value = -10
			        #     	desc = "Greedy"
			        #     }
					# }
					# if = { # Warlike
					# 	limit = { ai_has_warlike_personality = yes }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Warlike"
			        #     }
					# }
				}
			}
		}

		#########
		# GUEST NUMBER
		#########
		mining_option_party_size = {
			mining_party_size_few = {
				# is_shown = { has_dlc_feature = advanced_activities }

				# Entourage option grabbing suitable bodyguards & maybe someone from court who really likes you, + randos.
				travel_entourage_selection = { 
					weight = hunt_entourage_base_set_weighting_value
					max = 5
   					invite_rule_order = 2
				}

				# desc is only shown in debug AI watch window
				ai_will_do = {
					value = 0
					# # Economic Archetype
					# if = { # Cautious
					# 	limit = { ai_has_cautious_personality = yes }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Cautious"
			        #     }
					# }
					# if = { # Builder
			        #     limit = {
			        #         OR = {
			        #             ai_has_economical_boom_personality = yes
			        #             has_character_flag = ai_boom
			        #         }
			        #     }
			        #     add = {
			        #     	value = 25
			        #     	desc = "Builder"
			        #     }
			        # }
			        # # Economy Sanity
			        # if = { # Work first, play later
			        #     limit = {
			        #         exists = capital_county
			        #         capital_county.title_province = { free_building_slots > 0 }
			        #     }
			        #     add = {
			        #     	value = 25
			        #     	desc = "Work first, play later"
			        #     }
			        # }
				}
			}
			mining_party_size_normal = {
				default = yes

				cost = {
					gold = {
						add = {
							add = {
								value = mining_normal_option_cost
								desc = mining_party_size_normal
							}
							if = {
								limit = { has_perk = expedition_leader_perk }
								multiply = {
									value = 0.75
									desc = expedition_leader_perk_modifier_desc
								}
							}
						}
					}
				}

				#Entourage option grabbing most people suitable from court, + randos.
				travel_entourage_selection = {
					weight = {
						add = hunt_entourage_base_set_weighting_value
						add = hunt_entourage_extras_set_weighting_value
					}
					max = 8
   					invite_rule_order = 2
				}

				# desc is only shown in debug AI watch window
				ai_will_do = {
					add = {
						value = 25
						desc = mining_party_size_normal
					}
				}
			}
			mining_party_size_many = {
				# is_shown = { has_dlc_feature = advanced_activities }

				cost = {
					gold = {
						add = {
							add = {
								value = mining_good_option_cost
								desc = mining_party_size_many
							}
							if = {
								limit = { has_perk = expedition_leader_perk }
								multiply = {
									value = 0.75
									desc = expedition_leader_perk_modifier_desc
								}
							}
						}
					}
				}

				#Entourage option grabbing sodding everyone suitable from court, + every grabbable rando in the duchy and maybe a few extra.
				travel_entourage_selection = {
					weight = {
						add = hunt_entourage_base_set_weighting_value
						add = hunt_entourage_extras_set_weighting_value
						add = hunt_entourage_sodding_everyone_set_weighting_value
					}

					max = 15
   					invite_rule_order = 2
				}

				# desc is only shown in debug AI watch window
				ai_will_do = {
					add = {
						value = 10
						desc = mining_party_size_many
					}
					# if = { # Cautious
					# 	limit = { gold >= monumental_gold_value }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Rich"
			        #     }
					# }
					# if = { # Ambitious
					# 	limit = { has_trait = ambitious }
					# 	add = {
			        #     	value = 10
			        #     	desc = "Ambitious"
			        #     }
					# }
					# if = { # Ambitious
					# 	limit = { has_trait = greedy }
					# 	add = {
			        #     	value = -10
			        #     	desc = "Greedy"
			        #     }
					# }
					# if = { # Warlike
					# 	limit = { ai_has_warlike_personality = yes }
					# 	add = {
			        #     	value = 25
			        #     	desc = "Warlike"
			        #     }
					# }
				}
			}
		}
	}

	###################
	# PHASES
	###################

	max_guest_arrival_delay_time = { months = 8 }

	phases = {
		mining_phase = {
			is_predefined = yes

			on_phase_active = { # Fires for every attendee
				if = { # Option to appoint overseer of the mines if not appointed
					limit = {
						this = scope:host
						is_dwarf = no
						NOT = { employs_court_position = overseer_of_the_mines_court_position }
						involved_activity = {
							any_attending_character = {
								location = root.location
								scope:host = { can_appoint_char_to_court_position = { CHAR = prev COURT_POS = overseer_of_the_mines_court_position } }
								save_temporary_scope_as = potential_ootm
							}
						}
						# can_appoint_char_to_court_position = { CHAR = scope:potential_ootm COURT_POS = overseer_of_the_mines_court_position }
					}
					trigger_event = {
						id = mining.0100
					}
				}
				if = { # Option to appoint stone singer if not appointed
					limit = {
						this = scope:host
						is_dwarf = yes
						NOT = { employs_court_position = stone_singer_court_position }
						involved_activity = {
							any_attending_character = {
								location = root.location
								scope:host = { can_appoint_char_to_court_position = { CHAR = prev COURT_POS = stone_singer_court_position } }
								save_temporary_scope_as = potential_stone_singer
							}
						}
						# can_appoint_char_to_court_position = { CHAR = scope:potential_stone_singer COURT_POS = stone_singer_court_position }
					}
					trigger_event = {
						id = mining.0101
					}
				}
				if = { # Set up event pulses
					limit = { this = scope:host }
					scope:activity = { progress_activity_phase_after = { months = 8 } }

					trigger_event = { on_action = mining_start_events }
					scope:activity = {
						every_attending_character = {
							limit = { is_ai = no }
							trigger_event = { # Random
								on_action = mining_random_pulse
								months = 2
							}
							trigger_event = { # Random
								on_action = mining_random_pulse
								months = 4
							}
							trigger_event = { # Random
								on_action = mining_random_pulse
								months = 6
							}
						}
					}
					trigger_event = { # Outcome
						on_action = mining_outcome_end_events
						months = 7
					}
				}
			}

			on_weekly_pulse = { # Fires for every attendee
				# trigger_event = hunt.0081 # Invalidation
			}

			on_end = { # Fires for every attendee
				target_weight_modifier_effect = { VALUE = -5 } # Lose a bit of character weight from the physical activity
			}
		}
	}

	ai_check_interval = 60

	ai_will_select_province = {
		value = 50
		add = {
			value = scope:score # Derived from province_score
			multiply = 10
		}
	}

	###################
	# GUEST HANDLING
	###################

	guest_invite_rules = { # DONE
		rules = {
			2 = activity_invite_rule_rivals
			2 = activity_invite_rule_lovers
			3 = activity_invite_rule_close_family
			3 = activity_invite_rule_extended_family
			3 = activity_invite_rule_knights
			4 = activity_invite_rule_guests
			
			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_rule_miners
			1 = activity_invite_rule_friends
			2 = activity_invite_rule_parochials
			3 = activity_invite_rule_liege
			3 = activity_invite_rule_vassals
			4 = activity_invite_rule_courtiers
			4 = activity_invite_rule_fellow_vassals
		}
	}

	max_guests = 20

	can_be_activity_guest = { # DONE
		is_a_minor = no
		NOT = { has_trait = incapable }
		can_mine_trigger = yes
		in_diplomatic_range = scope:host
		lotr_can_be_activity_guest = yes
	}

	host_intents = {
		intents = { reduce_stress_intent murder_attendee_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_intents = {
		intents = { reduce_stress_intent murder_attendee_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_join_chance = { # DONE
		base = 10
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes 
	}

	###################
	# ACTIVITY-SPECIFIC PULSES
	###################

	pulse_actions = {
		entries = { guest_friendship guest_insulted }
		chance_of_no_event = 3
	}

	on_start = {
		set_variable = {
			name = mining_success_chance
			value = mining_success_chance_value
		}
		scope:host = {
			if = {
				limit = {
					ai_sociability > 0
					is_ai = yes
				}
				random = {
					chance = {
						value = 0.5 # One in 200 expeditions
						if = {
							limit = {
								has_trait = lifestyle_miner
							}
							add = 1
						}
						if = {
							limit = {
								ai_rationality <= -25
								has_personality_dominant_trigger = yes
							}
							add = 0.5
						}
					}
					add_character_flag = mines_a_lot
				}
			}
		}
	}

	allow_zero_guest_invites = no

	on_enter_passive_state = {
		# scope:activity = {
		# 	if = {
		# 		limit = {
		# 			NOT = { has_variable = progressed_to_active }
		# 			# Everyone who accepted is here
		# 			any_attending_character = {
		# 				count = all
		# 				location = scope:activity.activity_location
		# 			}
		# 			# There are no open invitations
		# 			any_invited_character = {
		# 				count = 0
		# 			}
		# 		}
		# 		set_variable = progressed_to_active
		# 		scope:activity = { progress_activity_phase_after = { days = 1 } }
		# 	}
		# }
		# trigger_event = hunt.0550
		# if = {
		# 	limit = {
		# 		this = scope:host
		# 		involved_activity = {
		# 			has_activity_option = { category = special_type option = hunt_type_legendary }
		# 		}
		# 	}
		# 	random = {
		# 		chance = 5
		# 		trigger_event = {
		# 			id = hunt.8540
		# 			days = { 10 12 }
		# 		}
		# 	}
		# }
	}

	on_enter_active_state = {
		# if = {
		# 	limit = { this = scope:host }
		# 	trigger_event = { id = hunt.0110 }
		# }
		trigger_event = {
			id = mining.3101 # Do you murder or not?
			days = 3
		}
		# trigger_event = {
		# 	id = hunt.7400 # Do you abduct or not?
		# 	days = 3
		# }
	}

	on_complete = {
		# Struggle catalyst
		if = {
			limit = {
				any_character_struggle = {
					involvement = involved
					phase_has_catalyst = catalyst_went_mining_in_moria
				}
				activity_province = {
					kingdom = title:k_khazad_dum
				}
			}
			scope:host = {
				every_character_struggle = {
					involvement = involved
					activate_struggle_catalyst = {
						catalyst = catalyst_went_mining_in_moria
						character = root
					}
				}
			}
		}
	}

	###################
	# GRAPHICS
	###################

	map_entity = {
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_hunt_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_hunt_01_entity"
	}

	map_entity = "building_western_hunt_01_entity"

	# Travel
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = middleearth_west
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #LotR Rhûn desert
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_rhun_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/rhun.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}
	
	background = { #LotR forest deep
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_deep_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_deep.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #LotR forest_mallorn unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_mallorn_trigger = yes } 
			NOT = { exists = province_owner }
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_mallorn.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #LotR forest_mallorn settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_forest_mallorn_trigger = yes } 
			exists = province_owner
		}
		texture = "gfx/interface/illustrations/event_scenes/lorien_day.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #mountains, dwarven settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
				is_dwarf = no
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/dwarven_gate.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
				is_dwarf = no
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, dwarven settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
				is_dwarf = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/dwarven_gate.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	
	background = { #LotR volcanic_plains
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_volcanic_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/volcanic_plains.dds"
		environment = "environment_event_feast" 
		ambience = "event:/SFX/Events/Backgrounds/burning_building"
	}

	background = { #LotR underground
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_underground_caverns_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/halls.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { #LotR saltflats
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = { graphical_wilderness_saltflats_trigger = yes } 
		}
		texture = "gfx/interface/illustrations/event_scenes/saltflats.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	# Location

	background = { # Desert Mountains
		trigger = {
			activity_location ?= { graphical_wilderness_desert_trigger = yes }
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { # Mountains
		trigger = {
			activity_location ?= { graphical_wilderness_mountains_trigger = yes }
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { # Subterranean
		trigger = {
			activity_location ?= { graphical_underground_caverns_trigger = yes }
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	background = { # Fallback
		texture = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
		environment = "environment_event_alley"
		ambience = "event:/SFX/Events/Backgrounds/city_alley_night"
	}

	### Plug in widgets
	activity_window_widgets = { # DONE
		mining_success_chance = "activity_plugin_widgets_summary"
		artifact_rewards = "activity_plugin_widgets_conclusion"
		trait_rewards = "activity_plugin_widgets_conclusion"
	}

	window_characters = { # DONE
		miner = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = {
								this = scope:host
								AND = {
									exists = scope:host.court_position:overseer_of_the_mines_court_position
									this = scope:host.court_position:overseer_of_the_mines_court_position
								}
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = {
								this = scope:host
								AND = {
									exists = scope:host.court_position:stone_singer_court_position
									this = scope:host.court_position:stone_singer_court_position
								}
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = overseer_of_the_mines_court_position
									has_court_position = stone_singer_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			scripted_animation = {
				triggered_animation = {
					trigger = {
						exists = scope:host.intent_target
						scope:host = {
							has_activity_intent = woo_attendee_intent
						}
						scope:character = scope:host.intent_target
					}
					animation = { love flirtation }
				}
				triggered_animation = {
					trigger = {
						exists = scope:host.intent_target
						scope:host = {
							has_activity_intent = murder_attendee_intent
						}
						scope:character = scope:host.intent_target
					}
					animation = { dismissal worry paranoia }
				}
				#Fallback
				animation = lantern
			}
		}

		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = personality_bold
			}
		}
		
		travel_host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character.location = { is_sea_province = yes }
					}
					animation = { idle }
				}
				triggered_animation = {
					trigger = { scope:character = { has_trait = impatient } }
					animation = { jockey_gallop }
				}
				animation = jockey_walk
			}
		}

		overseer_of_the_mines = {
			camera = camera_body
			
			effect = {
				scope:host.court_position:overseer_of_the_mines_court_position ?= {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							is_participant_in_activity = scope:activity
							location = scope:activity.activity_location
						}
						add_to_list = characters
					}
				}
			}
			scripted_animation = {
				animation = happy_teacher
			}
		}

		stone_singer = {
			camera = camera_body
			
			effect = {
				scope:host.court_position:stone_singer_court_position ?= {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							is_participant_in_activity = scope:activity
							location = scope:activity.activity_location
						}
						add_to_list = characters
					}
				}
			}
			scripted_animation = {
				animation = happy_teacher
			}
		}

		miner = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						NOT = { exists = var:animal_slayer }
					}
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							any_attending_character = {
								count >= 2
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								is_councillor_of = scope:host
							}
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								is_councillor_of = scope:host
							}
							add_to_list = characters
						}
					}
					else_if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							any_attending_character = {
								count >= 2
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_duchy
							}
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_duchy
							}
							add_to_list = characters
						}
					}
					else_if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							any_attending_character = {
								count >= 2
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_county
							}
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_county
							}
							add_to_list = characters
						}
					}
					else = {
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = master_of_hunt_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}

			scripted_animation = {
				#Fallback
				animation = throne_room_one_handed_passive_2
			}
		}

		miner = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							any_attending_character = {
								count >= 3
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								is_councillor_of = scope:host
							}
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								is_councillor_of = scope:host
							}
							add_to_list = characters
						}
					}
					else_if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							any_attending_character = {
								count >= 3
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_duchy
							}
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_duchy
							}
							add_to_list = characters
						}
					}
					else_if = {
						limit = {
							scope:host.location = scope:activity.activity_location
							any_attending_character = {
								count >= 3
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_county
							}
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOT = {
									this = scope:host
								}
								highest_held_title_tier >= tier_county
							}
							add_to_list = characters
						}
					}
					else = {
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = master_of_hunt_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}

			scripted_animation = {
				#Fallback
				animation = personality_cynical
			}
		}
	}	
}
