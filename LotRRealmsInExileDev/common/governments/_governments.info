my_government = {

	### brief: government_rules ( enum bitmask container )
	# Properties of a government type that referenced in code and also
	# can be tested by government_allows/disallows triggers.
	# The example value is the default assigned value for the flag.
	# All of these are referenced in code.
	#
	# Note: these are also supported outside of this data structure for
	# the duration of Roads to Power, but this functionality is
	# deprecated.
	#
	government_rules = {

		### brief: create_cadet_branches ( bool )
		# Should rulers be able to create cadet branches
		#
		create_cadet_branches = no

		### brief: religious ( bool )
		# Should rulers be considered clergy
		#
		religious = no

		### brief: court_generate_spouses ( bool )
		# Should new realm get suitable spouses as courtiers
		#
		court_generate_spouses = yes

		### brief: council ( bool )
		# The council is available for this ruler
		#
		council = yes

		### brief: rulers_should_have_dynasty ( bool )
		# Rulers of this government type generate a dynasty
		#
		rulers_should_have_dynasty = no

		### brief: regiments_prestige_as_gold ( bool )
		# Is this govenmnet type using prestige to buy and reinforce
		# MaA Regiments? ( mainteance still costs gold ).
		#
		regiments_prestige_as_gold = no

		### brief: dynasty_named_realms ( bool )
		# Allow using dynasty name as realm name
		#
		dynasty_named_realms = no

		###  brief: royal_court ( bool )
		# Should this government allow having a royal court if of the
		# correct tier from NRoyalCourt::MIN_ROYAL_COURT_TIER
		#
		royal_court = no

		### brief: legitimacy ( bool )
		# Rulers can have legitimacy if there's one valid for them
		#
		legitimacy = yes

		### brief: administrative ( bool )
		# Rule control several admin government mechanics:
		# -	Top liege can have landless vassal who are house heads of
		# 	noble families.
		# -	Allow hiring and usage of MaA that belong to a title
		#
		# Requires the dlc_flag admin_gov
		#
		administrative = no

		### brief: landless_playable ( bool )
		# Allow rulers be playable even when they don't have any county
		# or barony.
		#
		# Requires the dlc_flag landless_playable
		#
		landless_playable = no

		### brief: use_as_base_on_landed ( bool )
		# Switch to this government type when obtaining your first title (becoming landed) if the old holder of the title
		# was this government type
		#
		use_as_base_on_landed = no

		### brief: use_as_base_on_rank_up ( bool )
		# Switch to this government type when independent ruler gets higher tier top tier title from
		# independent ruler with this government type
		#
		use_as_base_on_rank_up = no

		### brief: conditional_maa_refill ( bool )
		# Maa won't normally reinforce, unless they meet specific
		# condition in MaA type trigger. Make sure only a very small
		# number of rulers use this option, because it can negatively
		# affect performance. Rulers with this government flag also
		# do not pay upkeep for their MAAs.
		#
		conditional_maa_refill = no

		### brief: mercenary ( bool )
		# Can unlanded rulers with this government type offer
		# themselves up as mercenaries for landed rulers that are at
		# war? The mercenary company government type is explicitly NOT
		# using this rule, as it has separate handling.
		#
		# Note: this is not the same as the government flag
		# government_is_mercenary, which is referring specifically to
		# the mercenary company government type.
		#
		mercenary = no

		### brief: use_title_tier_modifiers ( bool )
		# Enable passive prestige gain from held titles and title tier modifiers
		# Default is yes.
		use_title_tier_modifiers = yes

		### brief: inherit_from_dynastic_government ( bool )
		# All governments are split in 2 groups - strong dynastic and non-dynastic ones
		# Rulers from different dynastic governments can freely inherit from other dynastic governments
		# Rulers from non-dynastic governemnt can't inherit from a dynastic one
		# Many non-dynastic governments are unplayable, so it prevents game over
		# Other non-dynastic governments are considered more advanced, and this prevents inferior
		# dynastic governments from stealing land and non-dynastic vassals via inheritance
		# Default is yes.
		inherit_from_dynastic_government = yes
	}

	### brief: always_use_patronym ( bool )
	# Patronyms will display for characters if either their Culture or
	# Government has this. Default is no.
	#
	always_use_patronym = no

	### brief: affected_by_development ( bool )
	# Are the counties with owners with this government type affected
	# by development.
	#
	affected_by_development = yes

	### brief: fallback ( integer )
	# At least one government should be scripted as fallback, fallback
	# governments will be selected in order of priority (1 is selected
	# over 2), used when lacking other selection and when populating
	# the map with holdings but no county holder exists. This value
	# will define this government's priority as a fallback when other
	# government types are invalid.
	#
	fallback = 0

	### brief: can_get_government ( trigger )
	# Trigger in character scope; checked when landed to see if it is
	# an appropriate government. If failed, won't get this government
	# (fallback will be used even if this fails if no other government
	# is valid)
	#
	# Supported scopes:
	# 	root: ( Character )
	#		Character being evaluated for the government type
	#
	can_get_government = { ... }

	### brief: primary_holding ( database key )
	# What is the primary holding type of this government type? Key is
	# mapped to the holdings database: common/holdings/
	#
	primary_holding = castle_holding

	### brief: valid_holdings ( array of database keys )
	# Holdings that can be held directly by rulers of this government
	# type. The primary holding is always valid. Keys are mapped to the
	# holdings database: common/holdings/
	#
	valid_holdings = { church_holding }

	### brief: required_county_holdings ( array of database keys )
	# Which holdings must be present in a county before more of an
	# existing type or others can be built. Keys are mapped to the
	# holdings database: common/holdings/
	#
	required_county_holdings = { castle_holding city_holding }

	### brief: primary_heritages ( array of database keys )
	# A list of heritages for which this government type is valid and
	# preferred. If both primary_cultures and primary_heritages are
	# empty, there are no cultural restrictions or preferences. Keys
	# are mapped to all entries within common/culture/pillars with the
	# heritage type.
	#
	primary_heritages = { ... }

	### brief: preferred_religions ( array of database keys )
	# A list of religions for which this government type is preferred.
	# Keys are mapped to common/religion/religions
	#
	preferred_religions = { ... }

	### brief: court_generate_commanders ( integer / bool )
	# Should commanders be generated in courts of this government? Can
	# use a multiplier to the default number.
	#	yes = 1, no = 0
	#
	court_generate_commanders = yes / no / [0, int_max]

	# brief: supply_limit_mult_for_others ( fixed point )
	# Army owners of different govenment type have this multiplier
	# applied to the supply limit
	#
	supply_limit_mult_for_others = 0

	### brief: prestige_opinion_override ( array of int )
	# Override for the opinion bonus that prestige levels gain, number
	# of values should match the define in NCharacterOpinion::
	# PRESTIGIOUS
	#
	prestige_opinion_override = { -20 10 ... }

	### brief: vassal_contract ( array of database keys )
	# Vassal obligations, how much does the vassal give to their liege.
	# The vassal's government type determines which contract type is
	# used.Note that the values can be changed with the
	# vassal_tax_contribution_add and vassal_levy_contribution_add
	# modifiers. Key are mapped to the vassal contracts database:
	# common/vassal_contracts/
	#
	vassal_contract = {
		# List of vassal contract types
	}

	### brief: house_unity ( database key, optional )
	# Database key pointing to a configuration of house unity this
	# government uses if applicable. Key is mapped to
	# common/house_unities
	#
	house_unity = house_unity_key


	### brief: domicile_type ( database key, optional )
	# Database key pointing to a configuration of domicile this
	# government uses if applicable. Key is mapped to
	# common/domiciles
	#
	domicile_type = domicile type key


	### brief: ai
	# Overrides for some AI functionaltiy when held by an AI with this
	# government type. Note that some features might be disabled for
	# other reasons (e.g. if not independent, if below a certain tier).
	#
	ai = {
		### brief: use_lifestyle ( flag )
		# Whether or not the AI checks for lifestyles.
		#
		use_lifestyle = yes

		### brief: arrange_marriage ( flag )
		# Actively arrange marriages. Can still receive marriage
		# requests if disabled.
		#
		arrange_marriage = yes

		### brief: use_goals ( flag )
		# Use longterm goals (build holdings, perform major decisions,
		# etc)
		#
		use_goals = yes

		### brief: use_decisions ( flag )
		# Use minor decisions.
		#
		use_decisions = yes

		### brief: use_scripted_guis ( flag )
		# Will evaluate using scripted guis.
		#
		use_scripted_guis = yes

		### brief: use_legends ( flag )
		# Will create and promote legends.
		#
		use_legends = yes

		### brief: perform_religious_reformation ( flag )
		#
		perform_religious_reformation = yes
	}

	### brief: character_modifier ( modifiers )
	# Modifier applied to the ruler character with this government type.
	#
	character_modifier = {}

	### brief: color ( vector 3 )
	# Color for map mode
	#
	color = { 100 100 100 }

	### brief: flag ( flag )
	# List of flags this government uses. Can be defined as any string
	# that can be referenced by government_has_flag = some_flag. Can
	# be defined multiple times for multiple flags.
	#
	flag = some_flag
}

Allowed Modifiers
=================

Modifiers referenced by a government object can be only generic
(hardcoded) modifiers, or modifiers generated from the following
databases:
- schemes
- holdings
- lifestyles
- regions

Other generated modifiers are _not_ allowed, such as those from other
governments, men_at_arms_types, cultures, or terrain types.
