@laamp_base_contract_phases_per_agent_charge = 1

##################################################
# INFO
# For laamp contracts that are broadly applicable: that is, they should be able to trigger virtually anywhere and with a minimum of triggers.
# The idea is that any given laamp led by a character skilled in any one thing should always be viable — maybe through crime, maybe by demeaning themselves, but they should always have some contracts around to work with.
##################################################

##################################################
# #Diplo Contracts
#
# #Martial Contracts
#
# #Stewardship Contracts
#
# #Intrigue Contracts
#
# #Learning Contracts
# laamp_lotr_4001		Heal character or ruler
#
# #Prowess Contracts
#
##################################################


##################################################
# LEARNING CONTRACT SCHEMES

# Heal character or ruler
laamp_lotr_4001_contract_scheme = {
	# Basic Setup
	skill = learning
	desc = laamp_lotr_4001_contract_scheme_desc_general
	success_desc = laamp_lotr_4001_contract_scheme_desc_success
	icon = learning
	illustration = "gfx/interface/illustrations/event_scenes/study_physician.dds"
	target_type = character
	category = contract
	
	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	base_progress_goal = t2_base_phase_length_value
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = @laamp_base_contract_phases_per_agent_charge
	success_chance_growth_per_skill_point = laamp_contract_scgpsp_value
	spymaster_speed_per_skill_point = 0
	uses_resistance = no
	
	# Core Triggers
	valid = {
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:target
			LAAMP = scope:owner
		}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_laamp_contract_modifier = yes
	}
	valid_agent = { 
		is_valid_agent_standard_trigger = yes 
	}
	agent_groups_owner_perspective = { courtiers }

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = LEARNING }
		
		laamp_contract_scheme_basic_success_chance_modifier = yes

		laamp_improved_learning_contract_success_modifier = yes
		
		modifier = {
			add = 15
			desc = laamp_lotr_4001_contract.tt.elf_physician
			scope:owner = { is_elf = yes }
		}
		modifier = {
			add = 20
			desc = laamp_lotr_4001_contract.tt.istar_physician
			scope:owner = { is_istari  = yes }
		}
		modifier = {
			add = 5
			desc = laamp_lotr_4001_contract.tt.t0_physician
			scope:owner = { 
				has_trait = lifestyle_physician
				has_trait_xp = {
					trait = lifestyle_physician
					value < 50
				}
			}
		}
		modifier = {
			add = 10
			desc = laamp_lotr_4001_contract.tt.t1_physician
			scope:owner = { 
				has_trait = lifestyle_physician
				has_trait_xp = {
					trait = lifestyle_physician
					value >= 50
					value < 100
				}
			}
		}
		modifier = {
			add = 15
			desc = laamp_lotr_4001_contract.tt.t2_physician
			scope:owner = { 
				has_trait = lifestyle_physician
				has_trait_xp = {
					trait = lifestyle_physician
					value >= 100
				}
			}
		}
		modifier = {
			add = 10
			desc = laamp_lotr_4001_contract.tt.elessar
			scope:owner = { 
				any_character_artifact = {
					has_variable = elessar
				}
			}
		}
		modifier = {
			add = 30
			desc = laamp_lotr_4001_contract.tt.elven_ring
			scope:owner = { 
				any_character_artifact = {
					has_variable = elven_ring
				}
			}
		}
		modifier = {
			add = -200
			desc = laamp_lotr_4001_contract.tt.black_breath
			scope:owner = { 
				NOR = {
					is_elf = yes
					is_istari = yes
					OR = {
						dynasty = dynasty:dynasty_elros
						dynasty = dynasty:dynasty_elendil
						dynasty = dynasty:dynasty_anarion
					}
				}
			}
			scope:task_contract.task_contract_target = { has_trait = black_breath }
		}	
	}
	
	# On Actions
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		laamp_lotr_4001_contract_scheme_prep_effect = yes
		cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { laamp_lotr_4001_contract_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			laamp_lotr_4001_contract_scheme_prep_effect = yes
		}
	}
	on_monthly = { fire_generic_contract_scheme_on_going_events_effect = yes }
	on_invalidated = {
		save_scope_as = scheme
		scheme_owner = {
			send_interface_message = {
				title = scheme_invalidated_title
				type = learning_contract_scheme_invalidated_message
				right_icon = scope:scheme.scheme_target_character
				show_as_tooltip = {
					scope:scheme = { end_scheme = yes }
				}
			}
		}
	}
}