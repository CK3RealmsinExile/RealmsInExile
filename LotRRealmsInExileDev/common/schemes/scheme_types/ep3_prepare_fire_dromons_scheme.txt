prepare_fire_dromons_scheme = {
	# Basic Setup
	skill = stewardship
	desc = "prepare_fire_dromons_scheme_desc_general"
	success_desc = "prepare_fire_dromons_scheme_SUCCESS_DESC"
	icon = icon_raid_estate_scheme
	illustration = "gfx/interface/illustrations/event_scenes/docks.dds"
	category = political
	target_type = title
	cooldown = { years = 3 }

	# Parameters
	speed_per_skill_point = t3_spsp_owner_value
	speed_per_target_skill_point = t3_spsp_target_value
	spymaster_speed_per_skill_point = t3_spsp_owner_spy_value
	target_spymaster_speed_per_skill_point = 0
	tier_speed = 1
	base_progress_goal = t2_base_phase_length_value
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = 1
	success_chance_growth_per_skill_point = t2_scgpsp_value

	is_secret = no

	# Core Triggers
	allow = {
		has_character_flag = took_greek_fire_decision_flag
	}

	valid = {
		has_character_flag = took_greek_fire_decision_flag
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_basic_suite_modifier = yes
	}
	valid_agent = { is_valid_agent_standard_trigger = yes }
	agent_groups_owner_perspective = { councillors courtiers guests }

	odds_prediction = {
		add = base_odds_prediction_target_is_title_value
		add = odds_skill_contribution_diplomacy_value
		add = agent_groups_owner_perspective_value
		add = odds_prepare_fire_dromons_scheme_misc_value
	}

	# Base Chances
	base_success_chance = {
		base = 0

		# Skill
		compare_modifier = {
			desc = "SCHEME_MY_STEWARDSHIP"
			value = scope:owner.stewardship
			multiplier = 2
		}
		# Influence
		modifier = {
			desc = OWNER_INFLUENCE_LEVEL_DESC
			add = {
				value = scope:owner.influence_level
				multiply = 5
			}
		}
		# house_head_request_interaction
		modifier = {
			add = political_scheme_variable_list_value
			scope:owner = {
				has_variable_list = supporting_political_schemes
			}
			desc = HOUSE_HEAD_SCHEME_SUPPORT_DESC
		}
		modifier = {
			add = -10
			scope:owner = { has_character_modifier = political_schemes_distracted_modifier }
			desc = political_schemes_distracted_modifier
		}
		#Modifiers
		modifier = {
			scope:owner = {
				has_character_modifier = united_political_agents_modifier
				is_vassal_of = scope:target
			}
			desc = united_political_agents_modifier
			add = 15
		}
	}

	# On Actions
	on_start = {
		set_variable = {
			name = apply_countermeasures
			value = flag:indirect
		}
		# Fallback agents — a balanced config if you start the scheme from script.
		if = {
			limit = {
				scheme_owner = {
					NOT = { has_variable = agents_added }
				}
			}
			add_agent_slot = agent_alchemist
			add_agent_slot = agent_draughtsman
			add_agent_slot = agent_drillmaster
			add_agent_slot = agent_supplier
			add_agent_slot = agent_bureaucrat_title
		}
	}
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		prepare_fire_dromons_scheme_prep_effect = yes
		cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { prepare_fire_dromons_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			prepare_fire_dromons_scheme_prep_effect = yes
		}
	}

	## Invalidation
	on_invalidated = {
		# title:b_constantinople = { save_scope_as = target } #LotR
		# scheme_owner = {
		# 	save_scope_as = owner
		# 	send_interface_toast = {
		# 		type = event_toast_effect_neutral
		# 		title =  prepare_fire_dromons_scheme_invalidated_title
		# 		left_icon = scope:target

		# 		if = { # Invalidation due to loss of land
		# 			limit = {
		# 				exists = scope:target.holder
		# 				NOT = { scope:target.holder = scope:owner }
		# 			}
		# 			custom_tooltip = scheme_target_another_holder
		# 		}
		# 	}
		# }
	}
}
